(window["webpackJsonpMirador"] = window["webpackJsonpMirador"] || []).push([[1],{

/***/ "./node_modules/@material-ui/icons/AddCircleOutlineSharp.js":
/*!******************************************************************!*\
  !*** ./node_modules/@material-ui/icons/AddCircleOutlineSharp.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};var _interopRequireDefault=__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");Object.defineProperty(exports,\"__esModule\",{value:true});exports[\"default\"]=void 0;var _react=_interopRequireDefault(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));var _createSvgIcon=_interopRequireDefault(__webpack_require__(/*! ./utils/createSvgIcon */ \"./node_modules/@material-ui/icons/utils/createSvgIcon.js\"));var _default=(0,_createSvgIcon[\"default\"])(_react[\"default\"].createElement(\"path\",{d:\"M13 7h-2v4H7v2h4v4h2v-4h4v-2h-4V7zm-1-5C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z\"}),'AddCircleOutlineSharp');exports[\"default\"]=_default;;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(_react,\"_react\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/AddCircleOutlineSharp.js\");reactHotLoader.register(_createSvgIcon,\"_createSvgIcon\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/AddCircleOutlineSharp.js\");reactHotLoader.register(_default,\"_default\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/AddCircleOutlineSharp.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9pY29ucy9BZGRDaXJjbGVPdXRsaW5lU2hhcnAuanM/NDEzNyJdLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiX3JlYWN0IiwiX2NyZWF0ZVN2Z0ljb24iLCJfZGVmYXVsdCIsImNyZWF0ZUVsZW1lbnQiLCJkIl0sIm1hcHBpbmdzIjoiQUFBQSw4QyxvUkFFQSxHQUFJQSx1QkFBc0IsQ0FBR0MsbUJBQU8sQ0FBQyxvSEFBRCxDQUFwQyxDQUVBQyxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLENBQStCLFlBQS9CLENBQTZDLENBQzNDQyxLQUFLLENBQUUsSUFEb0MsQ0FBN0MsRUFHQUQsT0FBTyxXQUFQLENBQWtCLElBQUssRUFBdkIsQ0FFQSxHQUFJRSxPQUFNLENBQUdOLHNCQUFzQixDQUFDQyxtQkFBTyxDQUFDLDRDQUFELENBQVIsQ0FBbkMsQ0FFQSxHQUFJTSxlQUFjLENBQUdQLHNCQUFzQixDQUFDQyxtQkFBTyxDQUFDLHVGQUFELENBQVIsQ0FBM0MsQ0FFQSxHQUFJTyxTQUFRLENBQUcsQ0FBQyxFQUFHRCxjQUFjLFdBQWxCLEVBQTRCRCxNQUFNLFdBQU4sQ0FBZUcsYUFBZixDQUE2QixNQUE3QixDQUFxQyxDQUM5RUMsQ0FBQyxDQUFFLGdLQUQyRSxDQUFyQyxDQUE1QixDQUVYLHVCQUZXLENBQWYsQ0FJQU4sT0FBTyxXQUFQLENBQWtCSSxRQUFsQixDLHFLQVJJRixNLG1KQUVBQyxjLDJKQUVBQyxRIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9pY29ucy9BZGRDaXJjbGVPdXRsaW5lU2hhcnAuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfY3JlYXRlU3ZnSWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvY3JlYXRlU3ZnSWNvblwiKSk7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfY3JlYXRlU3ZnSWNvbi5kZWZhdWx0KShfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTEzIDdoLTJ2NEg3djJoNHY0aDJ2LTRoNHYtMmgtNFY3em0tMS01QzYuNDggMiAyIDYuNDggMiAxMnM0LjQ4IDEwIDEwIDEwIDEwLTQuNDggMTAtMTBTMTcuNTIgMiAxMiAyem0wIDE4Yy00LjQxIDAtOC0zLjU5LTgtOHMzLjU5LTggOC04IDggMy41OSA4IDgtMy41OSA4LTggOHpcIlxufSksICdBZGRDaXJjbGVPdXRsaW5lU2hhcnAnKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@material-ui/icons/AddCircleOutlineSharp.js\n");

/***/ }),

/***/ "./node_modules/@material-ui/icons/AddSharp.js":
/*!*****************************************************!*\
  !*** ./node_modules/@material-ui/icons/AddSharp.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};var _interopRequireDefault=__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");Object.defineProperty(exports,\"__esModule\",{value:true});exports[\"default\"]=void 0;var _react=_interopRequireDefault(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));var _createSvgIcon=_interopRequireDefault(__webpack_require__(/*! ./utils/createSvgIcon */ \"./node_modules/@material-ui/icons/utils/createSvgIcon.js\"));var _default=(0,_createSvgIcon[\"default\"])(_react[\"default\"].createElement(\"path\",{d:\"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\"}),'AddSharp');exports[\"default\"]=_default;;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(_react,\"_react\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/AddSharp.js\");reactHotLoader.register(_createSvgIcon,\"_createSvgIcon\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/AddSharp.js\");reactHotLoader.register(_default,\"_default\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/AddSharp.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9pY29ucy9BZGRTaGFycC5qcz83ZmZjIl0sIm5hbWVzIjpbIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJfcmVhY3QiLCJfY3JlYXRlU3ZnSWNvbiIsIl9kZWZhdWx0IiwiY3JlYXRlRWxlbWVudCIsImQiXSwibWFwcGluZ3MiOiJBQUFBLDhDLG9SQUVBLEdBQUlBLHVCQUFzQixDQUFHQyxtQkFBTyxDQUFDLG9IQUFELENBQXBDLENBRUFDLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsQ0FBK0IsWUFBL0IsQ0FBNkMsQ0FDM0NDLEtBQUssQ0FBRSxJQURvQyxDQUE3QyxFQUdBRCxPQUFPLFdBQVAsQ0FBa0IsSUFBSyxFQUF2QixDQUVBLEdBQUlFLE9BQU0sQ0FBR04sc0JBQXNCLENBQUNDLG1CQUFPLENBQUMsNENBQUQsQ0FBUixDQUFuQyxDQUVBLEdBQUlNLGVBQWMsQ0FBR1Asc0JBQXNCLENBQUNDLG1CQUFPLENBQUMsdUZBQUQsQ0FBUixDQUEzQyxDQUVBLEdBQUlPLFNBQVEsQ0FBRyxDQUFDLEVBQUdELGNBQWMsV0FBbEIsRUFBNEJELE1BQU0sV0FBTixDQUFlRyxhQUFmLENBQTZCLE1BQTdCLENBQXFDLENBQzlFQyxDQUFDLENBQUUscUNBRDJFLENBQXJDLENBQTVCLENBRVgsVUFGVyxDQUFmLENBSUFOLE9BQU8sV0FBUCxDQUFrQkksUUFBbEIsQyxxS0FSSUYsTSxzSUFFQUMsYyw4SUFFQUMsUSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvaWNvbnMvQWRkU2hhcnAuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfY3JlYXRlU3ZnSWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvY3JlYXRlU3ZnSWNvblwiKSk7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfY3JlYXRlU3ZnSWNvbi5kZWZhdWx0KShfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTE5IDEzaC02djZoLTJ2LTZINXYtMmg2VjVoMnY2aDZ2MnpcIlxufSksICdBZGRTaGFycCcpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@material-ui/icons/AddSharp.js\n");

/***/ }),

/***/ "./node_modules/@material-ui/icons/ArrowLeftSharp.js":
/*!***********************************************************!*\
  !*** ./node_modules/@material-ui/icons/ArrowLeftSharp.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};var _interopRequireDefault=__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");Object.defineProperty(exports,\"__esModule\",{value:true});exports[\"default\"]=void 0;var _react=_interopRequireDefault(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));var _createSvgIcon=_interopRequireDefault(__webpack_require__(/*! ./utils/createSvgIcon */ \"./node_modules/@material-ui/icons/utils/createSvgIcon.js\"));var _default=(0,_createSvgIcon[\"default\"])(_react[\"default\"].createElement(\"path\",{d:\"M14 7l-5 5 5 5V7z\"}),'ArrowLeftSharp');exports[\"default\"]=_default;;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(_react,\"_react\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/ArrowLeftSharp.js\");reactHotLoader.register(_createSvgIcon,\"_createSvgIcon\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/ArrowLeftSharp.js\");reactHotLoader.register(_default,\"_default\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/ArrowLeftSharp.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9pY29ucy9BcnJvd0xlZnRTaGFycC5qcz8xOGY0Il0sIm5hbWVzIjpbIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJfcmVhY3QiLCJfY3JlYXRlU3ZnSWNvbiIsIl9kZWZhdWx0IiwiY3JlYXRlRWxlbWVudCIsImQiXSwibWFwcGluZ3MiOiJBQUFBLDhDLG9SQUVBLEdBQUlBLHVCQUFzQixDQUFHQyxtQkFBTyxDQUFDLG9IQUFELENBQXBDLENBRUFDLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsQ0FBK0IsWUFBL0IsQ0FBNkMsQ0FDM0NDLEtBQUssQ0FBRSxJQURvQyxDQUE3QyxFQUdBRCxPQUFPLFdBQVAsQ0FBa0IsSUFBSyxFQUF2QixDQUVBLEdBQUlFLE9BQU0sQ0FBR04sc0JBQXNCLENBQUNDLG1CQUFPLENBQUMsNENBQUQsQ0FBUixDQUFuQyxDQUVBLEdBQUlNLGVBQWMsQ0FBR1Asc0JBQXNCLENBQUNDLG1CQUFPLENBQUMsdUZBQUQsQ0FBUixDQUEzQyxDQUVBLEdBQUlPLFNBQVEsQ0FBRyxDQUFDLEVBQUdELGNBQWMsV0FBbEIsRUFBNEJELE1BQU0sV0FBTixDQUFlRyxhQUFmLENBQTZCLE1BQTdCLENBQXFDLENBQzlFQyxDQUFDLENBQUUsbUJBRDJFLENBQXJDLENBQTVCLENBRVgsZ0JBRlcsQ0FBZixDQUlBTixPQUFPLFdBQVAsQ0FBa0JJLFFBQWxCLEMscUtBUklGLE0sNElBRUFDLGMsb0pBRUFDLFEiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2ljb25zL0Fycm93TGVmdFNoYXJwLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX2NyZWF0ZVN2Z0ljb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL2NyZWF0ZVN2Z0ljb25cIikpO1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX2NyZWF0ZVN2Z0ljb24uZGVmYXVsdCkoX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICBkOiBcIk0xNCA3bC01IDUgNSA1Vjd6XCJcbn0pLCAnQXJyb3dMZWZ0U2hhcnAnKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@material-ui/icons/ArrowLeftSharp.js\n");

/***/ }),

/***/ "./node_modules/@material-ui/icons/ArrowRightSharp.js":
/*!************************************************************!*\
  !*** ./node_modules/@material-ui/icons/ArrowRightSharp.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};var _interopRequireDefault=__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");Object.defineProperty(exports,\"__esModule\",{value:true});exports[\"default\"]=void 0;var _react=_interopRequireDefault(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));var _createSvgIcon=_interopRequireDefault(__webpack_require__(/*! ./utils/createSvgIcon */ \"./node_modules/@material-ui/icons/utils/createSvgIcon.js\"));var _default=(0,_createSvgIcon[\"default\"])(_react[\"default\"].createElement(\"path\",{d:\"M10 17l5-5-5-5v10z\"}),'ArrowRightSharp');exports[\"default\"]=_default;;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(_react,\"_react\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/ArrowRightSharp.js\");reactHotLoader.register(_createSvgIcon,\"_createSvgIcon\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/ArrowRightSharp.js\");reactHotLoader.register(_default,\"_default\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/ArrowRightSharp.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9pY29ucy9BcnJvd1JpZ2h0U2hhcnAuanM/Yzg1NSJdLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiX3JlYWN0IiwiX2NyZWF0ZVN2Z0ljb24iLCJfZGVmYXVsdCIsImNyZWF0ZUVsZW1lbnQiLCJkIl0sIm1hcHBpbmdzIjoiQUFBQSw4QyxvUkFFQSxHQUFJQSx1QkFBc0IsQ0FBR0MsbUJBQU8sQ0FBQyxvSEFBRCxDQUFwQyxDQUVBQyxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLENBQStCLFlBQS9CLENBQTZDLENBQzNDQyxLQUFLLENBQUUsSUFEb0MsQ0FBN0MsRUFHQUQsT0FBTyxXQUFQLENBQWtCLElBQUssRUFBdkIsQ0FFQSxHQUFJRSxPQUFNLENBQUdOLHNCQUFzQixDQUFDQyxtQkFBTyxDQUFDLDRDQUFELENBQVIsQ0FBbkMsQ0FFQSxHQUFJTSxlQUFjLENBQUdQLHNCQUFzQixDQUFDQyxtQkFBTyxDQUFDLHVGQUFELENBQVIsQ0FBM0MsQ0FFQSxHQUFJTyxTQUFRLENBQUcsQ0FBQyxFQUFHRCxjQUFjLFdBQWxCLEVBQTRCRCxNQUFNLFdBQU4sQ0FBZUcsYUFBZixDQUE2QixNQUE3QixDQUFxQyxDQUM5RUMsQ0FBQyxDQUFFLG9CQUQyRSxDQUFyQyxDQUE1QixDQUVYLGlCQUZXLENBQWYsQ0FJQU4sT0FBTyxXQUFQLENBQWtCSSxRQUFsQixDLHFLQVJJRixNLDZJQUVBQyxjLHFKQUVBQyxRIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9pY29ucy9BcnJvd1JpZ2h0U2hhcnAuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfY3JlYXRlU3ZnSWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvY3JlYXRlU3ZnSWNvblwiKSk7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfY3JlYXRlU3ZnSWNvbi5kZWZhdWx0KShfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTEwIDE3bDUtNS01LTV2MTB6XCJcbn0pLCAnQXJyb3dSaWdodFNoYXJwJyk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@material-ui/icons/ArrowRightSharp.js\n");

/***/ }),

/***/ "./node_modules/@material-ui/icons/BookmarksSharp.js":
/*!***********************************************************!*\
  !*** ./node_modules/@material-ui/icons/BookmarksSharp.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};var _interopRequireDefault=__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");Object.defineProperty(exports,\"__esModule\",{value:true});exports[\"default\"]=void 0;var _react=_interopRequireDefault(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));var _createSvgIcon=_interopRequireDefault(__webpack_require__(/*! ./utils/createSvgIcon */ \"./node_modules/@material-ui/icons/utils/createSvgIcon.js\"));var _default=(0,_createSvgIcon[\"default\"])(_react[\"default\"].createElement(\"path\",{d:\"M19 18l2 1V1H7v2h12v15zM17 5H3v18l7-3 7 3V5z\"}),'BookmarksSharp');exports[\"default\"]=_default;;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(_react,\"_react\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/BookmarksSharp.js\");reactHotLoader.register(_createSvgIcon,\"_createSvgIcon\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/BookmarksSharp.js\");reactHotLoader.register(_default,\"_default\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/BookmarksSharp.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9pY29ucy9Cb29rbWFya3NTaGFycC5qcz9lNmJlIl0sIm5hbWVzIjpbIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJfcmVhY3QiLCJfY3JlYXRlU3ZnSWNvbiIsIl9kZWZhdWx0IiwiY3JlYXRlRWxlbWVudCIsImQiXSwibWFwcGluZ3MiOiJBQUFBLDhDLG9SQUVBLEdBQUlBLHVCQUFzQixDQUFHQyxtQkFBTyxDQUFDLG9IQUFELENBQXBDLENBRUFDLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsQ0FBK0IsWUFBL0IsQ0FBNkMsQ0FDM0NDLEtBQUssQ0FBRSxJQURvQyxDQUE3QyxFQUdBRCxPQUFPLFdBQVAsQ0FBa0IsSUFBSyxFQUF2QixDQUVBLEdBQUlFLE9BQU0sQ0FBR04sc0JBQXNCLENBQUNDLG1CQUFPLENBQUMsNENBQUQsQ0FBUixDQUFuQyxDQUVBLEdBQUlNLGVBQWMsQ0FBR1Asc0JBQXNCLENBQUNDLG1CQUFPLENBQUMsdUZBQUQsQ0FBUixDQUEzQyxDQUVBLEdBQUlPLFNBQVEsQ0FBRyxDQUFDLEVBQUdELGNBQWMsV0FBbEIsRUFBNEJELE1BQU0sV0FBTixDQUFlRyxhQUFmLENBQTZCLE1BQTdCLENBQXFDLENBQzlFQyxDQUFDLENBQUUsOENBRDJFLENBQXJDLENBQTVCLENBRVgsZ0JBRlcsQ0FBZixDQUlBTixPQUFPLFdBQVAsQ0FBa0JJLFFBQWxCLEMscUtBUklGLE0sNElBRUFDLGMsb0pBRUFDLFEiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2ljb25zL0Jvb2ttYXJrc1NoYXJwLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX2NyZWF0ZVN2Z0ljb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL2NyZWF0ZVN2Z0ljb25cIikpO1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX2NyZWF0ZVN2Z0ljb24uZGVmYXVsdCkoX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICBkOiBcIk0xOSAxOGwyIDFWMUg3djJoMTJ2MTV6TTE3IDVIM3YxOGw3LTMgNyAzVjV6XCJcbn0pLCAnQm9va21hcmtzU2hhcnAnKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@material-ui/icons/BookmarksSharp.js\n");

/***/ }),

/***/ "./node_modules/@material-ui/icons/CheckSharp.js":
/*!*******************************************************!*\
  !*** ./node_modules/@material-ui/icons/CheckSharp.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};var _interopRequireDefault=__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");Object.defineProperty(exports,\"__esModule\",{value:true});exports[\"default\"]=void 0;var _react=_interopRequireDefault(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));var _createSvgIcon=_interopRequireDefault(__webpack_require__(/*! ./utils/createSvgIcon */ \"./node_modules/@material-ui/icons/utils/createSvgIcon.js\"));var _default=(0,_createSvgIcon[\"default\"])(_react[\"default\"].createElement(\"path\",{d:\"M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41L9 16.17z\"}),'CheckSharp');exports[\"default\"]=_default;;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(_react,\"_react\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/CheckSharp.js\");reactHotLoader.register(_createSvgIcon,\"_createSvgIcon\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/CheckSharp.js\");reactHotLoader.register(_default,\"_default\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/CheckSharp.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9pY29ucy9DaGVja1NoYXJwLmpzP2EwM2YiXSwibmFtZXMiOlsiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIl9yZWFjdCIsIl9jcmVhdGVTdmdJY29uIiwiX2RlZmF1bHQiLCJjcmVhdGVFbGVtZW50IiwiZCJdLCJtYXBwaW5ncyI6IkFBQUEsOEMsb1JBRUEsR0FBSUEsdUJBQXNCLENBQUdDLG1CQUFPLENBQUMsb0hBQUQsQ0FBcEMsQ0FFQUMsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixDQUErQixZQUEvQixDQUE2QyxDQUMzQ0MsS0FBSyxDQUFFLElBRG9DLENBQTdDLEVBR0FELE9BQU8sV0FBUCxDQUFrQixJQUFLLEVBQXZCLENBRUEsR0FBSUUsT0FBTSxDQUFHTixzQkFBc0IsQ0FBQ0MsbUJBQU8sQ0FBQyw0Q0FBRCxDQUFSLENBQW5DLENBRUEsR0FBSU0sZUFBYyxDQUFHUCxzQkFBc0IsQ0FBQ0MsbUJBQU8sQ0FBQyx1RkFBRCxDQUFSLENBQTNDLENBRUEsR0FBSU8sU0FBUSxDQUFHLENBQUMsRUFBR0QsY0FBYyxXQUFsQixFQUE0QkQsTUFBTSxXQUFOLENBQWVHLGFBQWYsQ0FBNkIsTUFBN0IsQ0FBcUMsQ0FDOUVDLENBQUMsQ0FBRSwyREFEMkUsQ0FBckMsQ0FBNUIsQ0FFWCxZQUZXLENBQWYsQ0FJQU4sT0FBTyxXQUFQLENBQWtCSSxRQUFsQixDLHFLQVJJRixNLHdJQUVBQyxjLGdKQUVBQyxRIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9pY29ucy9DaGVja1NoYXJwLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX2NyZWF0ZVN2Z0ljb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL2NyZWF0ZVN2Z0ljb25cIikpO1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX2NyZWF0ZVN2Z0ljb24uZGVmYXVsdCkoX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICBkOiBcIk05IDE2LjE3TDQuODMgMTJsLTEuNDIgMS40MUw5IDE5IDIxIDdsLTEuNDEtMS40MUw5IDE2LjE3elwiXG59KSwgJ0NoZWNrU2hhcnAnKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@material-ui/icons/CheckSharp.js\n");

/***/ }),

/***/ "./node_modules/@material-ui/icons/Close.js":
/*!**************************************************!*\
  !*** ./node_modules/@material-ui/icons/Close.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};var _interopRequireDefault=__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");Object.defineProperty(exports,\"__esModule\",{value:true});exports[\"default\"]=void 0;var _react=_interopRequireDefault(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));var _createSvgIcon=_interopRequireDefault(__webpack_require__(/*! ./utils/createSvgIcon */ \"./node_modules/@material-ui/icons/utils/createSvgIcon.js\"));var _default=(0,_createSvgIcon[\"default\"])(_react[\"default\"].createElement(\"path\",{d:\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"}),'Close');exports[\"default\"]=_default;;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(_react,\"_react\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/Close.js\");reactHotLoader.register(_createSvgIcon,\"_createSvgIcon\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/Close.js\");reactHotLoader.register(_default,\"_default\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/Close.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9pY29ucy9DbG9zZS5qcz82NGY1Il0sIm5hbWVzIjpbIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJfcmVhY3QiLCJfY3JlYXRlU3ZnSWNvbiIsIl9kZWZhdWx0IiwiY3JlYXRlRWxlbWVudCIsImQiXSwibWFwcGluZ3MiOiJBQUFBLDhDLG9SQUVBLEdBQUlBLHVCQUFzQixDQUFHQyxtQkFBTyxDQUFDLG9IQUFELENBQXBDLENBRUFDLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsQ0FBK0IsWUFBL0IsQ0FBNkMsQ0FDM0NDLEtBQUssQ0FBRSxJQURvQyxDQUE3QyxFQUdBRCxPQUFPLFdBQVAsQ0FBa0IsSUFBSyxFQUF2QixDQUVBLEdBQUlFLE9BQU0sQ0FBR04sc0JBQXNCLENBQUNDLG1CQUFPLENBQUMsNENBQUQsQ0FBUixDQUFuQyxDQUVBLEdBQUlNLGVBQWMsQ0FBR1Asc0JBQXNCLENBQUNDLG1CQUFPLENBQUMsdUZBQUQsQ0FBUixDQUEzQyxDQUVBLEdBQUlPLFNBQVEsQ0FBRyxDQUFDLEVBQUdELGNBQWMsV0FBbEIsRUFBNEJELE1BQU0sV0FBTixDQUFlRyxhQUFmLENBQTZCLE1BQTdCLENBQXFDLENBQzlFQyxDQUFDLENBQUUsdUdBRDJFLENBQXJDLENBQTVCLENBRVgsT0FGVyxDQUFmLENBSUFOLE9BQU8sV0FBUCxDQUFrQkksUUFBbEIsQyxxS0FSSUYsTSxtSUFFQUMsYywySUFFQUMsUSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvaWNvbnMvQ2xvc2UuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfY3JlYXRlU3ZnSWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvY3JlYXRlU3ZnSWNvblwiKSk7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfY3JlYXRlU3ZnSWNvbi5kZWZhdWx0KShfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTE5IDYuNDFMMTcuNTkgNSAxMiAxMC41OSA2LjQxIDUgNSA2LjQxIDEwLjU5IDEyIDUgMTcuNTkgNi40MSAxOSAxMiAxMy40MSAxNy41OSAxOSAxOSAxNy41OSAxMy40MSAxMnpcIlxufSksICdDbG9zZScpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@material-ui/icons/Close.js\n");

/***/ }),

/***/ "./node_modules/@material-ui/icons/CommentSharp.js":
/*!*********************************************************!*\
  !*** ./node_modules/@material-ui/icons/CommentSharp.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};var _interopRequireDefault=__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");Object.defineProperty(exports,\"__esModule\",{value:true});exports[\"default\"]=void 0;var _react=_interopRequireDefault(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));var _createSvgIcon=_interopRequireDefault(__webpack_require__(/*! ./utils/createSvgIcon */ \"./node_modules/@material-ui/icons/utils/createSvgIcon.js\"));var _default=(0,_createSvgIcon[\"default\"])(_react[\"default\"].createElement(\"path\",{d:\"M21.99 2H2v16h16l4 4-.01-20zM18 14H6v-2h12v2zm0-3H6V9h12v2zm0-3H6V6h12v2z\"}),'CommentSharp');exports[\"default\"]=_default;;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(_react,\"_react\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/CommentSharp.js\");reactHotLoader.register(_createSvgIcon,\"_createSvgIcon\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/CommentSharp.js\");reactHotLoader.register(_default,\"_default\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/CommentSharp.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9pY29ucy9Db21tZW50U2hhcnAuanM/YmYyZiJdLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiX3JlYWN0IiwiX2NyZWF0ZVN2Z0ljb24iLCJfZGVmYXVsdCIsImNyZWF0ZUVsZW1lbnQiLCJkIl0sIm1hcHBpbmdzIjoiQUFBQSw4QyxvUkFFQSxHQUFJQSx1QkFBc0IsQ0FBR0MsbUJBQU8sQ0FBQyxvSEFBRCxDQUFwQyxDQUVBQyxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLENBQStCLFlBQS9CLENBQTZDLENBQzNDQyxLQUFLLENBQUUsSUFEb0MsQ0FBN0MsRUFHQUQsT0FBTyxXQUFQLENBQWtCLElBQUssRUFBdkIsQ0FFQSxHQUFJRSxPQUFNLENBQUdOLHNCQUFzQixDQUFDQyxtQkFBTyxDQUFDLDRDQUFELENBQVIsQ0FBbkMsQ0FFQSxHQUFJTSxlQUFjLENBQUdQLHNCQUFzQixDQUFDQyxtQkFBTyxDQUFDLHVGQUFELENBQVIsQ0FBM0MsQ0FFQSxHQUFJTyxTQUFRLENBQUcsQ0FBQyxFQUFHRCxjQUFjLFdBQWxCLEVBQTRCRCxNQUFNLFdBQU4sQ0FBZUcsYUFBZixDQUE2QixNQUE3QixDQUFxQyxDQUM5RUMsQ0FBQyxDQUFFLDJFQUQyRSxDQUFyQyxDQUE1QixDQUVYLGNBRlcsQ0FBZixDQUlBTixPQUFPLFdBQVAsQ0FBa0JJLFFBQWxCLEMscUtBUklGLE0sMElBRUFDLGMsa0pBRUFDLFEiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2ljb25zL0NvbW1lbnRTaGFycC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9jcmVhdGVTdmdJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9jcmVhdGVTdmdJY29uXCIpKTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9jcmVhdGVTdmdJY29uLmRlZmF1bHQpKF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgZDogXCJNMjEuOTkgMkgydjE2aDE2bDQgNC0uMDEtMjB6TTE4IDE0SDZ2LTJoMTJ2MnptMC0zSDZWOWgxMnYyem0wLTNINlY2aDEydjJ6XCJcbn0pLCAnQ29tbWVudFNoYXJwJyk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@material-ui/icons/CommentSharp.js\n");

/***/ }),

/***/ "./node_modules/@material-ui/icons/CopyrightSharp.js":
/*!***********************************************************!*\
  !*** ./node_modules/@material-ui/icons/CopyrightSharp.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};var _interopRequireDefault=__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");Object.defineProperty(exports,\"__esModule\",{value:true});exports[\"default\"]=void 0;var _react=_interopRequireDefault(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));var _createSvgIcon=_interopRequireDefault(__webpack_require__(/*! ./utils/createSvgIcon */ \"./node_modules/@material-ui/icons/utils/createSvgIcon.js\"));var _default=(0,_createSvgIcon[\"default\"])(_react[\"default\"].createElement(\"path\",{d:\"M10.08 10.86c.05-.33.16-.62.3-.87s.34-.46.59-.62c.24-.15.54-.22.91-.23.23.01.44.05.63.13.2.09.38.21.52.36s.25.33.34.53.13.42.14.64h1.79c-.02-.47-.11-.9-.28-1.29s-.4-.73-.7-1.01-.66-.5-1.08-.66-.88-.23-1.39-.23c-.65 0-1.22.11-1.7.34s-.88.53-1.2.92-.56.84-.71 1.36S8 11.29 8 11.87v.27c0 .58.08 1.12.23 1.64s.39.97.71 1.35.72.69 1.2.91c.48.22 1.05.34 1.7.34.47 0 .91-.08 1.32-.23s.77-.36 1.08-.63.56-.58.74-.94.29-.74.3-1.15h-1.79c-.01.21-.06.4-.15.58s-.21.33-.36.46-.32.23-.52.3c-.19.07-.39.09-.6.1-.36-.01-.66-.08-.89-.23-.25-.16-.45-.37-.59-.62s-.25-.55-.3-.88-.08-.67-.08-1v-.27c0-.35.03-.68.08-1.01zM12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z\"}),'CopyrightSharp');exports[\"default\"]=_default;;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(_react,\"_react\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/CopyrightSharp.js\");reactHotLoader.register(_createSvgIcon,\"_createSvgIcon\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/CopyrightSharp.js\");reactHotLoader.register(_default,\"_default\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/CopyrightSharp.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9pY29ucy9Db3B5cmlnaHRTaGFycC5qcz9kNTQ4Il0sIm5hbWVzIjpbIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJfcmVhY3QiLCJfY3JlYXRlU3ZnSWNvbiIsIl9kZWZhdWx0IiwiY3JlYXRlRWxlbWVudCIsImQiXSwibWFwcGluZ3MiOiJBQUFBLDhDLG9SQUVBLEdBQUlBLHVCQUFzQixDQUFHQyxtQkFBTyxDQUFDLG9IQUFELENBQXBDLENBRUFDLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsQ0FBK0IsWUFBL0IsQ0FBNkMsQ0FDM0NDLEtBQUssQ0FBRSxJQURvQyxDQUE3QyxFQUdBRCxPQUFPLFdBQVAsQ0FBa0IsSUFBSyxFQUF2QixDQUVBLEdBQUlFLE9BQU0sQ0FBR04sc0JBQXNCLENBQUNDLG1CQUFPLENBQUMsNENBQUQsQ0FBUixDQUFuQyxDQUVBLEdBQUlNLGVBQWMsQ0FBR1Asc0JBQXNCLENBQUNDLG1CQUFPLENBQUMsdUZBQUQsQ0FBUixDQUEzQyxDQUVBLEdBQUlPLFNBQVEsQ0FBRyxDQUFDLEVBQUdELGNBQWMsV0FBbEIsRUFBNEJELE1BQU0sV0FBTixDQUFlRyxhQUFmLENBQTZCLE1BQTdCLENBQXFDLENBQzlFQyxDQUFDLENBQUUsdXRCQUQyRSxDQUFyQyxDQUE1QixDQUVYLGdCQUZXLENBQWYsQ0FJQU4sT0FBTyxXQUFQLENBQWtCSSxRQUFsQixDLHFLQVJJRixNLDRJQUVBQyxjLG9KQUVBQyxRIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9pY29ucy9Db3B5cmlnaHRTaGFycC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9jcmVhdGVTdmdJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9jcmVhdGVTdmdJY29uXCIpKTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9jcmVhdGVTdmdJY29uLmRlZmF1bHQpKF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgZDogXCJNMTAuMDggMTAuODZjLjA1LS4zMy4xNi0uNjIuMy0uODdzLjM0LS40Ni41OS0uNjJjLjI0LS4xNS41NC0uMjIuOTEtLjIzLjIzLjAxLjQ0LjA1LjYzLjEzLjIuMDkuMzguMjEuNTIuMzZzLjI1LjMzLjM0LjUzLjEzLjQyLjE0LjY0aDEuNzljLS4wMi0uNDctLjExLS45LS4yOC0xLjI5cy0uNC0uNzMtLjctMS4wMS0uNjYtLjUtMS4wOC0uNjYtLjg4LS4yMy0xLjM5LS4yM2MtLjY1IDAtMS4yMi4xMS0xLjcuMzRzLS44OC41My0xLjIuOTItLjU2Ljg0LS43MSAxLjM2UzggMTEuMjkgOCAxMS44N3YuMjdjMCAuNTguMDggMS4xMi4yMyAxLjY0cy4zOS45Ny43MSAxLjM1LjcyLjY5IDEuMi45MWMuNDguMjIgMS4wNS4zNCAxLjcuMzQuNDcgMCAuOTEtLjA4IDEuMzItLjIzcy43Ny0uMzYgMS4wOC0uNjMuNTYtLjU4Ljc0LS45NC4yOS0uNzQuMy0xLjE1aC0xLjc5Yy0uMDEuMjEtLjA2LjQtLjE1LjU4cy0uMjEuMzMtLjM2LjQ2LS4zMi4yMy0uNTIuM2MtLjE5LjA3LS4zOS4wOS0uNi4xLS4zNi0uMDEtLjY2LS4wOC0uODktLjIzLS4yNS0uMTYtLjQ1LS4zNy0uNTktLjYycy0uMjUtLjU1LS4zLS44OC0uMDgtLjY3LS4wOC0xdi0uMjdjMC0uMzUuMDMtLjY4LjA4LTEuMDF6TTEyIDJDNi40OCAyIDIgNi40OCAyIDEyczQuNDggMTAgMTAgMTAgMTAtNC40OCAxMC0xMFMxNy41MiAyIDEyIDJ6bTAgMThjLTQuNDEgMC04LTMuNTktOC04czMuNTktOCA4LTggOCAzLjU5IDggOC0zLjU5IDgtOCA4elwiXG59KSwgJ0NvcHlyaWdodFNoYXJwJyk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@material-ui/icons/CopyrightSharp.js\n");

/***/ }),

/***/ "./node_modules/@material-ui/icons/CropDinSharp.js":
/*!*********************************************************!*\
  !*** ./node_modules/@material-ui/icons/CropDinSharp.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};var _interopRequireDefault=__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");Object.defineProperty(exports,\"__esModule\",{value:true});exports[\"default\"]=void 0;var _react=_interopRequireDefault(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));var _createSvgIcon=_interopRequireDefault(__webpack_require__(/*! ./utils/createSvgIcon */ \"./node_modules/@material-ui/icons/utils/createSvgIcon.js\"));var _default=(0,_createSvgIcon[\"default\"])(_react[\"default\"].createElement(\"path\",{d:\"M21 3H3v18h18V3zm-2 16H5V5h14v14z\"}),'CropDinSharp');exports[\"default\"]=_default;;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(_react,\"_react\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/CropDinSharp.js\");reactHotLoader.register(_createSvgIcon,\"_createSvgIcon\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/CropDinSharp.js\");reactHotLoader.register(_default,\"_default\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/CropDinSharp.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9pY29ucy9Dcm9wRGluU2hhcnAuanM/MjFjNyJdLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiX3JlYWN0IiwiX2NyZWF0ZVN2Z0ljb24iLCJfZGVmYXVsdCIsImNyZWF0ZUVsZW1lbnQiLCJkIl0sIm1hcHBpbmdzIjoiQUFBQSw4QyxvUkFFQSxHQUFJQSx1QkFBc0IsQ0FBR0MsbUJBQU8sQ0FBQyxvSEFBRCxDQUFwQyxDQUVBQyxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLENBQStCLFlBQS9CLENBQTZDLENBQzNDQyxLQUFLLENBQUUsSUFEb0MsQ0FBN0MsRUFHQUQsT0FBTyxXQUFQLENBQWtCLElBQUssRUFBdkIsQ0FFQSxHQUFJRSxPQUFNLENBQUdOLHNCQUFzQixDQUFDQyxtQkFBTyxDQUFDLDRDQUFELENBQVIsQ0FBbkMsQ0FFQSxHQUFJTSxlQUFjLENBQUdQLHNCQUFzQixDQUFDQyxtQkFBTyxDQUFDLHVGQUFELENBQVIsQ0FBM0MsQ0FFQSxHQUFJTyxTQUFRLENBQUcsQ0FBQyxFQUFHRCxjQUFjLFdBQWxCLEVBQTRCRCxNQUFNLFdBQU4sQ0FBZUcsYUFBZixDQUE2QixNQUE3QixDQUFxQyxDQUM5RUMsQ0FBQyxDQUFFLG1DQUQyRSxDQUFyQyxDQUE1QixDQUVYLGNBRlcsQ0FBZixDQUlBTixPQUFPLFdBQVAsQ0FBa0JJLFFBQWxCLEMscUtBUklGLE0sMElBRUFDLGMsa0pBRUFDLFEiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2ljb25zL0Nyb3BEaW5TaGFycC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9jcmVhdGVTdmdJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9jcmVhdGVTdmdJY29uXCIpKTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9jcmVhdGVTdmdJY29uLmRlZmF1bHQpKF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgZDogXCJNMjEgM0gzdjE4aDE4VjN6bS0yIDE2SDVWNWgxNHYxNHpcIlxufSksICdDcm9wRGluU2hhcnAnKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@material-ui/icons/CropDinSharp.js\n");

/***/ }),

/***/ "./node_modules/@material-ui/icons/CropOriginalSharp.js":
/*!**************************************************************!*\
  !*** ./node_modules/@material-ui/icons/CropOriginalSharp.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};var _interopRequireDefault=__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");Object.defineProperty(exports,\"__esModule\",{value:true});exports[\"default\"]=void 0;var _react=_interopRequireDefault(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));var _createSvgIcon=_interopRequireDefault(__webpack_require__(/*! ./utils/createSvgIcon */ \"./node_modules/@material-ui/icons/utils/createSvgIcon.js\"));var _default=(0,_createSvgIcon[\"default\"])(_react[\"default\"].createElement(\"path\",{d:\"M21 3H3v18h18V3zm-2 16H5V5h14v14zm-5.04-6.71l-2.75 3.54-1.96-2.36L6.5 17h11l-3.54-4.71z\"}),'CropOriginalSharp');exports[\"default\"]=_default;;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(_react,\"_react\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/CropOriginalSharp.js\");reactHotLoader.register(_createSvgIcon,\"_createSvgIcon\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/CropOriginalSharp.js\");reactHotLoader.register(_default,\"_default\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/CropOriginalSharp.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9pY29ucy9Dcm9wT3JpZ2luYWxTaGFycC5qcz9kNTA5Il0sIm5hbWVzIjpbIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJfcmVhY3QiLCJfY3JlYXRlU3ZnSWNvbiIsIl9kZWZhdWx0IiwiY3JlYXRlRWxlbWVudCIsImQiXSwibWFwcGluZ3MiOiJBQUFBLDhDLG9SQUVBLEdBQUlBLHVCQUFzQixDQUFHQyxtQkFBTyxDQUFDLG9IQUFELENBQXBDLENBRUFDLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsQ0FBK0IsWUFBL0IsQ0FBNkMsQ0FDM0NDLEtBQUssQ0FBRSxJQURvQyxDQUE3QyxFQUdBRCxPQUFPLFdBQVAsQ0FBa0IsSUFBSyxFQUF2QixDQUVBLEdBQUlFLE9BQU0sQ0FBR04sc0JBQXNCLENBQUNDLG1CQUFPLENBQUMsNENBQUQsQ0FBUixDQUFuQyxDQUVBLEdBQUlNLGVBQWMsQ0FBR1Asc0JBQXNCLENBQUNDLG1CQUFPLENBQUMsdUZBQUQsQ0FBUixDQUEzQyxDQUVBLEdBQUlPLFNBQVEsQ0FBRyxDQUFDLEVBQUdELGNBQWMsV0FBbEIsRUFBNEJELE1BQU0sV0FBTixDQUFlRyxhQUFmLENBQTZCLE1BQTdCLENBQXFDLENBQzlFQyxDQUFDLENBQUUseUZBRDJFLENBQXJDLENBQTVCLENBRVgsbUJBRlcsQ0FBZixDQUlBTixPQUFPLFdBQVAsQ0FBa0JJLFFBQWxCLEMscUtBUklGLE0sK0lBRUFDLGMsdUpBRUFDLFEiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2ljb25zL0Nyb3BPcmlnaW5hbFNoYXJwLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX2NyZWF0ZVN2Z0ljb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL2NyZWF0ZVN2Z0ljb25cIikpO1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX2NyZWF0ZVN2Z0ljb24uZGVmYXVsdCkoX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICBkOiBcIk0yMSAzSDN2MThoMThWM3ptLTIgMTZINVY1aDE0djE0em0tNS4wNC02LjcxbC0yLjc1IDMuNTQtMS45Ni0yLjM2TDYuNSAxN2gxMWwtMy41NC00LjcxelwiXG59KSwgJ0Nyb3BPcmlnaW5hbFNoYXJwJyk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@material-ui/icons/CropOriginalSharp.js\n");

/***/ }),

/***/ "./node_modules/@material-ui/icons/ErrorOutlineSharp.js":
/*!**************************************************************!*\
  !*** ./node_modules/@material-ui/icons/ErrorOutlineSharp.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};var _interopRequireDefault=__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");Object.defineProperty(exports,\"__esModule\",{value:true});exports[\"default\"]=void 0;var _react=_interopRequireDefault(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));var _createSvgIcon=_interopRequireDefault(__webpack_require__(/*! ./utils/createSvgIcon */ \"./node_modules/@material-ui/icons/utils/createSvgIcon.js\"));var _default=(0,_createSvgIcon[\"default\"])(_react[\"default\"].createElement(\"path\",{d:\"M11 15h2v2h-2v-2zm0-8h2v6h-2V7zm.99-5C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z\"}),'ErrorOutlineSharp');exports[\"default\"]=_default;;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(_react,\"_react\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/ErrorOutlineSharp.js\");reactHotLoader.register(_createSvgIcon,\"_createSvgIcon\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/ErrorOutlineSharp.js\");reactHotLoader.register(_default,\"_default\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/ErrorOutlineSharp.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9pY29ucy9FcnJvck91dGxpbmVTaGFycC5qcz9lOWZhIl0sIm5hbWVzIjpbIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJfcmVhY3QiLCJfY3JlYXRlU3ZnSWNvbiIsIl9kZWZhdWx0IiwiY3JlYXRlRWxlbWVudCIsImQiXSwibWFwcGluZ3MiOiJBQUFBLDhDLG9SQUVBLEdBQUlBLHVCQUFzQixDQUFHQyxtQkFBTyxDQUFDLG9IQUFELENBQXBDLENBRUFDLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsQ0FBK0IsWUFBL0IsQ0FBNkMsQ0FDM0NDLEtBQUssQ0FBRSxJQURvQyxDQUE3QyxFQUdBRCxPQUFPLFdBQVAsQ0FBa0IsSUFBSyxFQUF2QixDQUVBLEdBQUlFLE9BQU0sQ0FBR04sc0JBQXNCLENBQUNDLG1CQUFPLENBQUMsNENBQUQsQ0FBUixDQUFuQyxDQUVBLEdBQUlNLGVBQWMsQ0FBR1Asc0JBQXNCLENBQUNDLG1CQUFPLENBQUMsdUZBQUQsQ0FBUixDQUEzQyxDQUVBLEdBQUlPLFNBQVEsQ0FBRyxDQUFDLEVBQUdELGNBQWMsV0FBbEIsRUFBNEJELE1BQU0sV0FBTixDQUFlRyxhQUFmLENBQTZCLE1BQTdCLENBQXFDLENBQzlFQyxDQUFDLENBQUUsOEtBRDJFLENBQXJDLENBQTVCLENBRVgsbUJBRlcsQ0FBZixDQUlBTixPQUFPLFdBQVAsQ0FBa0JJLFFBQWxCLEMscUtBUklGLE0sK0lBRUFDLGMsdUpBRUFDLFEiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2ljb25zL0Vycm9yT3V0bGluZVNoYXJwLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX2NyZWF0ZVN2Z0ljb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL2NyZWF0ZVN2Z0ljb25cIikpO1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX2NyZWF0ZVN2Z0ljb24uZGVmYXVsdCkoX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICBkOiBcIk0xMSAxNWgydjJoLTJ2LTJ6bTAtOGgydjZoLTJWN3ptLjk5LTVDNi40NyAyIDIgNi40OCAyIDEyczQuNDcgMTAgOS45OSAxMEMxNy41MiAyMiAyMiAxNy41MiAyMiAxMlMxNy41MiAyIDExLjk5IDJ6TTEyIDIwYy00LjQyIDAtOC0zLjU4LTgtOHMzLjU4LTggOC04IDggMy41OCA4IDgtMy41OCA4LTggOHpcIlxufSksICdFcnJvck91dGxpbmVTaGFycCcpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@material-ui/icons/ErrorOutlineSharp.js\n");

/***/ }),

/***/ "./node_modules/@material-ui/icons/ExpandLessSharp.js":
/*!************************************************************!*\
  !*** ./node_modules/@material-ui/icons/ExpandLessSharp.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};var _interopRequireDefault=__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");Object.defineProperty(exports,\"__esModule\",{value:true});exports[\"default\"]=void 0;var _react=_interopRequireDefault(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));var _createSvgIcon=_interopRequireDefault(__webpack_require__(/*! ./utils/createSvgIcon */ \"./node_modules/@material-ui/icons/utils/createSvgIcon.js\"));var _default=(0,_createSvgIcon[\"default\"])(_react[\"default\"].createElement(\"path\",{d:\"M12 8l-6 6 1.41 1.41L12 10.83l4.59 4.58L18 14l-6-6z\"}),'ExpandLessSharp');exports[\"default\"]=_default;;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(_react,\"_react\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/ExpandLessSharp.js\");reactHotLoader.register(_createSvgIcon,\"_createSvgIcon\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/ExpandLessSharp.js\");reactHotLoader.register(_default,\"_default\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/ExpandLessSharp.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9pY29ucy9FeHBhbmRMZXNzU2hhcnAuanM/YzVhNyJdLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiX3JlYWN0IiwiX2NyZWF0ZVN2Z0ljb24iLCJfZGVmYXVsdCIsImNyZWF0ZUVsZW1lbnQiLCJkIl0sIm1hcHBpbmdzIjoiQUFBQSw4QyxvUkFFQSxHQUFJQSx1QkFBc0IsQ0FBR0MsbUJBQU8sQ0FBQyxvSEFBRCxDQUFwQyxDQUVBQyxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLENBQStCLFlBQS9CLENBQTZDLENBQzNDQyxLQUFLLENBQUUsSUFEb0MsQ0FBN0MsRUFHQUQsT0FBTyxXQUFQLENBQWtCLElBQUssRUFBdkIsQ0FFQSxHQUFJRSxPQUFNLENBQUdOLHNCQUFzQixDQUFDQyxtQkFBTyxDQUFDLDRDQUFELENBQVIsQ0FBbkMsQ0FFQSxHQUFJTSxlQUFjLENBQUdQLHNCQUFzQixDQUFDQyxtQkFBTyxDQUFDLHVGQUFELENBQVIsQ0FBM0MsQ0FFQSxHQUFJTyxTQUFRLENBQUcsQ0FBQyxFQUFHRCxjQUFjLFdBQWxCLEVBQTRCRCxNQUFNLFdBQU4sQ0FBZUcsYUFBZixDQUE2QixNQUE3QixDQUFxQyxDQUM5RUMsQ0FBQyxDQUFFLHFEQUQyRSxDQUFyQyxDQUE1QixDQUVYLGlCQUZXLENBQWYsQ0FJQU4sT0FBTyxXQUFQLENBQWtCSSxRQUFsQixDLHFLQVJJRixNLDZJQUVBQyxjLHFKQUVBQyxRIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9pY29ucy9FeHBhbmRMZXNzU2hhcnAuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfY3JlYXRlU3ZnSWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvY3JlYXRlU3ZnSWNvblwiKSk7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfY3JlYXRlU3ZnSWNvbi5kZWZhdWx0KShfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTEyIDhsLTYgNiAxLjQxIDEuNDFMMTIgMTAuODNsNC41OSA0LjU4TDE4IDE0bC02LTZ6XCJcbn0pLCAnRXhwYW5kTGVzc1NoYXJwJyk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@material-ui/icons/ExpandLessSharp.js\n");

/***/ }),

/***/ "./node_modules/@material-ui/icons/ExpandMoreSharp.js":
/*!************************************************************!*\
  !*** ./node_modules/@material-ui/icons/ExpandMoreSharp.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};var _interopRequireDefault=__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");Object.defineProperty(exports,\"__esModule\",{value:true});exports[\"default\"]=void 0;var _react=_interopRequireDefault(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));var _createSvgIcon=_interopRequireDefault(__webpack_require__(/*! ./utils/createSvgIcon */ \"./node_modules/@material-ui/icons/utils/createSvgIcon.js\"));var _default=(0,_createSvgIcon[\"default\"])(_react[\"default\"].createElement(\"path\",{d:\"M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6-1.41-1.41z\"}),'ExpandMoreSharp');exports[\"default\"]=_default;;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(_react,\"_react\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/ExpandMoreSharp.js\");reactHotLoader.register(_createSvgIcon,\"_createSvgIcon\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/ExpandMoreSharp.js\");reactHotLoader.register(_default,\"_default\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/ExpandMoreSharp.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9pY29ucy9FeHBhbmRNb3JlU2hhcnAuanM/NDMxOCJdLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiX3JlYWN0IiwiX2NyZWF0ZVN2Z0ljb24iLCJfZGVmYXVsdCIsImNyZWF0ZUVsZW1lbnQiLCJkIl0sIm1hcHBpbmdzIjoiQUFBQSw4QyxvUkFFQSxHQUFJQSx1QkFBc0IsQ0FBR0MsbUJBQU8sQ0FBQyxvSEFBRCxDQUFwQyxDQUVBQyxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLENBQStCLFlBQS9CLENBQTZDLENBQzNDQyxLQUFLLENBQUUsSUFEb0MsQ0FBN0MsRUFHQUQsT0FBTyxXQUFQLENBQWtCLElBQUssRUFBdkIsQ0FFQSxHQUFJRSxPQUFNLENBQUdOLHNCQUFzQixDQUFDQyxtQkFBTyxDQUFDLDRDQUFELENBQVIsQ0FBbkMsQ0FFQSxHQUFJTSxlQUFjLENBQUdQLHNCQUFzQixDQUFDQyxtQkFBTyxDQUFDLHVGQUFELENBQVIsQ0FBM0MsQ0FFQSxHQUFJTyxTQUFRLENBQUcsQ0FBQyxFQUFHRCxjQUFjLFdBQWxCLEVBQTRCRCxNQUFNLFdBQU4sQ0FBZUcsYUFBZixDQUE2QixNQUE3QixDQUFxQyxDQUM5RUMsQ0FBQyxDQUFFLHdEQUQyRSxDQUFyQyxDQUE1QixDQUVYLGlCQUZXLENBQWYsQ0FJQU4sT0FBTyxXQUFQLENBQWtCSSxRQUFsQixDLHFLQVJJRixNLDZJQUVBQyxjLHFKQUVBQyxRIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9pY29ucy9FeHBhbmRNb3JlU2hhcnAuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfY3JlYXRlU3ZnSWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvY3JlYXRlU3ZnSWNvblwiKSk7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfY3JlYXRlU3ZnSWNvbi5kZWZhdWx0KShfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTE2LjU5IDguNTlMMTIgMTMuMTcgNy40MSA4LjU5IDYgMTBsNiA2IDYtNi0xLjQxLTEuNDF6XCJcbn0pLCAnRXhwYW5kTW9yZVNoYXJwJyk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@material-ui/icons/ExpandMoreSharp.js\n");

/***/ }),

/***/ "./node_modules/@material-ui/icons/FullscreenExitSharp.js":
/*!****************************************************************!*\
  !*** ./node_modules/@material-ui/icons/FullscreenExitSharp.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};var _interopRequireDefault=__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");Object.defineProperty(exports,\"__esModule\",{value:true});exports[\"default\"]=void 0;var _react=_interopRequireDefault(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));var _createSvgIcon=_interopRequireDefault(__webpack_require__(/*! ./utils/createSvgIcon */ \"./node_modules/@material-ui/icons/utils/createSvgIcon.js\"));var _default=(0,_createSvgIcon[\"default\"])(_react[\"default\"].createElement(\"path\",{d:\"M5 16h3v3h2v-5H5v2zm3-8H5v2h5V5H8v3zm6 11h2v-3h3v-2h-5v5zm2-11V5h-2v5h5V8h-3z\"}),'FullscreenExitSharp');exports[\"default\"]=_default;;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(_react,\"_react\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/FullscreenExitSharp.js\");reactHotLoader.register(_createSvgIcon,\"_createSvgIcon\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/FullscreenExitSharp.js\");reactHotLoader.register(_default,\"_default\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/FullscreenExitSharp.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9pY29ucy9GdWxsc2NyZWVuRXhpdFNoYXJwLmpzPzgzNmYiXSwibmFtZXMiOlsiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIl9yZWFjdCIsIl9jcmVhdGVTdmdJY29uIiwiX2RlZmF1bHQiLCJjcmVhdGVFbGVtZW50IiwiZCJdLCJtYXBwaW5ncyI6IkFBQUEsOEMsb1JBRUEsR0FBSUEsdUJBQXNCLENBQUdDLG1CQUFPLENBQUMsb0hBQUQsQ0FBcEMsQ0FFQUMsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixDQUErQixZQUEvQixDQUE2QyxDQUMzQ0MsS0FBSyxDQUFFLElBRG9DLENBQTdDLEVBR0FELE9BQU8sV0FBUCxDQUFrQixJQUFLLEVBQXZCLENBRUEsR0FBSUUsT0FBTSxDQUFHTixzQkFBc0IsQ0FBQ0MsbUJBQU8sQ0FBQyw0Q0FBRCxDQUFSLENBQW5DLENBRUEsR0FBSU0sZUFBYyxDQUFHUCxzQkFBc0IsQ0FBQ0MsbUJBQU8sQ0FBQyx1RkFBRCxDQUFSLENBQTNDLENBRUEsR0FBSU8sU0FBUSxDQUFHLENBQUMsRUFBR0QsY0FBYyxXQUFsQixFQUE0QkQsTUFBTSxXQUFOLENBQWVHLGFBQWYsQ0FBNkIsTUFBN0IsQ0FBcUMsQ0FDOUVDLENBQUMsQ0FBRSwrRUFEMkUsQ0FBckMsQ0FBNUIsQ0FFWCxxQkFGVyxDQUFmLENBSUFOLE9BQU8sV0FBUCxDQUFrQkksUUFBbEIsQyxxS0FSSUYsTSxpSkFFQUMsYyx5SkFFQUMsUSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvaWNvbnMvRnVsbHNjcmVlbkV4aXRTaGFycC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9jcmVhdGVTdmdJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9jcmVhdGVTdmdJY29uXCIpKTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9jcmVhdGVTdmdJY29uLmRlZmF1bHQpKF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgZDogXCJNNSAxNmgzdjNoMnYtNUg1djJ6bTMtOEg1djJoNVY1SDh2M3ptNiAxMWgydi0zaDN2LTJoLTV2NXptMi0xMVY1aC0ydjVoNVY4aC0zelwiXG59KSwgJ0Z1bGxzY3JlZW5FeGl0U2hhcnAnKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@material-ui/icons/FullscreenExitSharp.js\n");

/***/ }),

/***/ "./node_modules/@material-ui/icons/FullscreenSharp.js":
/*!************************************************************!*\
  !*** ./node_modules/@material-ui/icons/FullscreenSharp.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};var _interopRequireDefault=__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");Object.defineProperty(exports,\"__esModule\",{value:true});exports[\"default\"]=void 0;var _react=_interopRequireDefault(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));var _createSvgIcon=_interopRequireDefault(__webpack_require__(/*! ./utils/createSvgIcon */ \"./node_modules/@material-ui/icons/utils/createSvgIcon.js\"));var _default=(0,_createSvgIcon[\"default\"])(_react[\"default\"].createElement(\"path\",{d:\"M7 14H5v5h5v-2H7v-3zm-2-4h2V7h3V5H5v5zm12 7h-3v2h5v-5h-2v3zM14 5v2h3v3h2V5h-5z\"}),'FullscreenSharp');exports[\"default\"]=_default;;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(_react,\"_react\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/FullscreenSharp.js\");reactHotLoader.register(_createSvgIcon,\"_createSvgIcon\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/FullscreenSharp.js\");reactHotLoader.register(_default,\"_default\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/FullscreenSharp.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9pY29ucy9GdWxsc2NyZWVuU2hhcnAuanM/ZmI2OCJdLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiX3JlYWN0IiwiX2NyZWF0ZVN2Z0ljb24iLCJfZGVmYXVsdCIsImNyZWF0ZUVsZW1lbnQiLCJkIl0sIm1hcHBpbmdzIjoiQUFBQSw4QyxvUkFFQSxHQUFJQSx1QkFBc0IsQ0FBR0MsbUJBQU8sQ0FBQyxvSEFBRCxDQUFwQyxDQUVBQyxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLENBQStCLFlBQS9CLENBQTZDLENBQzNDQyxLQUFLLENBQUUsSUFEb0MsQ0FBN0MsRUFHQUQsT0FBTyxXQUFQLENBQWtCLElBQUssRUFBdkIsQ0FFQSxHQUFJRSxPQUFNLENBQUdOLHNCQUFzQixDQUFDQyxtQkFBTyxDQUFDLDRDQUFELENBQVIsQ0FBbkMsQ0FFQSxHQUFJTSxlQUFjLENBQUdQLHNCQUFzQixDQUFDQyxtQkFBTyxDQUFDLHVGQUFELENBQVIsQ0FBM0MsQ0FFQSxHQUFJTyxTQUFRLENBQUcsQ0FBQyxFQUFHRCxjQUFjLFdBQWxCLEVBQTRCRCxNQUFNLFdBQU4sQ0FBZUcsYUFBZixDQUE2QixNQUE3QixDQUFxQyxDQUM5RUMsQ0FBQyxDQUFFLGdGQUQyRSxDQUFyQyxDQUE1QixDQUVYLGlCQUZXLENBQWYsQ0FJQU4sT0FBTyxXQUFQLENBQWtCSSxRQUFsQixDLHFLQVJJRixNLDZJQUVBQyxjLHFKQUVBQyxRIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9pY29ucy9GdWxsc2NyZWVuU2hhcnAuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfY3JlYXRlU3ZnSWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvY3JlYXRlU3ZnSWNvblwiKSk7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfY3JlYXRlU3ZnSWNvbi5kZWZhdWx0KShfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTcgMTRINXY1aDV2LTJIN3YtM3ptLTItNGgyVjdoM1Y1SDV2NXptMTIgN2gtM3YyaDV2LTVoLTJ2M3pNMTQgNXYyaDN2M2gyVjVoLTV6XCJcbn0pLCAnRnVsbHNjcmVlblNoYXJwJyk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@material-ui/icons/FullscreenSharp.js\n");

/***/ }),

/***/ "./node_modules/@material-ui/icons/InfoSharp.js":
/*!******************************************************!*\
  !*** ./node_modules/@material-ui/icons/InfoSharp.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};var _interopRequireDefault=__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");Object.defineProperty(exports,\"__esModule\",{value:true});exports[\"default\"]=void 0;var _react=_interopRequireDefault(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));var _createSvgIcon=_interopRequireDefault(__webpack_require__(/*! ./utils/createSvgIcon */ \"./node_modules/@material-ui/icons/utils/createSvgIcon.js\"));var _default=(0,_createSvgIcon[\"default\"])(_react[\"default\"].createElement(\"path\",{d:\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z\"}),'InfoSharp');exports[\"default\"]=_default;;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(_react,\"_react\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/InfoSharp.js\");reactHotLoader.register(_createSvgIcon,\"_createSvgIcon\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/InfoSharp.js\");reactHotLoader.register(_default,\"_default\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/InfoSharp.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9pY29ucy9JbmZvU2hhcnAuanM/ZGNmZCJdLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiX3JlYWN0IiwiX2NyZWF0ZVN2Z0ljb24iLCJfZGVmYXVsdCIsImNyZWF0ZUVsZW1lbnQiLCJkIl0sIm1hcHBpbmdzIjoiQUFBQSw4QyxvUkFFQSxHQUFJQSx1QkFBc0IsQ0FBR0MsbUJBQU8sQ0FBQyxvSEFBRCxDQUFwQyxDQUVBQyxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLENBQStCLFlBQS9CLENBQTZDLENBQzNDQyxLQUFLLENBQUUsSUFEb0MsQ0FBN0MsRUFHQUQsT0FBTyxXQUFQLENBQWtCLElBQUssRUFBdkIsQ0FFQSxHQUFJRSxPQUFNLENBQUdOLHNCQUFzQixDQUFDQyxtQkFBTyxDQUFDLDRDQUFELENBQVIsQ0FBbkMsQ0FFQSxHQUFJTSxlQUFjLENBQUdQLHNCQUFzQixDQUFDQyxtQkFBTyxDQUFDLHVGQUFELENBQVIsQ0FBM0MsQ0FFQSxHQUFJTyxTQUFRLENBQUcsQ0FBQyxFQUFHRCxjQUFjLFdBQWxCLEVBQTRCRCxNQUFNLFdBQU4sQ0FBZUcsYUFBZixDQUE2QixNQUE3QixDQUFxQyxDQUM5RUMsQ0FBQyxDQUFFLGtHQUQyRSxDQUFyQyxDQUE1QixDQUVYLFdBRlcsQ0FBZixDQUlBTixPQUFPLFdBQVAsQ0FBa0JJLFFBQWxCLEMscUtBUklGLE0sdUlBRUFDLGMsK0lBRUFDLFEiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2ljb25zL0luZm9TaGFycC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9jcmVhdGVTdmdJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9jcmVhdGVTdmdJY29uXCIpKTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9jcmVhdGVTdmdJY29uLmRlZmF1bHQpKF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgZDogXCJNMTIgMkM2LjQ4IDIgMiA2LjQ4IDIgMTJzNC40OCAxMCAxMCAxMCAxMC00LjQ4IDEwLTEwUzE3LjUyIDIgMTIgMnptMSAxNWgtMnYtNmgydjZ6bTAtOGgtMlY3aDJ2MnpcIlxufSksICdJbmZvU2hhcnAnKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@material-ui/icons/InfoSharp.js\n");

/***/ }),

/***/ "./node_modules/@material-ui/icons/Input.js":
/*!**************************************************!*\
  !*** ./node_modules/@material-ui/icons/Input.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};var _interopRequireDefault=__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");Object.defineProperty(exports,\"__esModule\",{value:true});exports[\"default\"]=void 0;var _react=_interopRequireDefault(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));var _createSvgIcon=_interopRequireDefault(__webpack_require__(/*! ./utils/createSvgIcon */ \"./node_modules/@material-ui/icons/utils/createSvgIcon.js\"));var _default=(0,_createSvgIcon[\"default\"])(_react[\"default\"].createElement(\"path\",{d:\"M21 3.01H3c-1.1 0-2 .9-2 2V9h2V4.99h18v14.03H3V15H1v4.01c0 1.1.9 1.98 2 1.98h18c1.1 0 2-.88 2-1.98v-14c0-1.11-.9-2-2-2zM11 16l4-4-4-4v3H1v2h10v3z\"}),'Input');exports[\"default\"]=_default;;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(_react,\"_react\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/Input.js\");reactHotLoader.register(_createSvgIcon,\"_createSvgIcon\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/Input.js\");reactHotLoader.register(_default,\"_default\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/Input.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9pY29ucy9JbnB1dC5qcz9hMTk4Il0sIm5hbWVzIjpbIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJfcmVhY3QiLCJfY3JlYXRlU3ZnSWNvbiIsIl9kZWZhdWx0IiwiY3JlYXRlRWxlbWVudCIsImQiXSwibWFwcGluZ3MiOiJBQUFBLDhDLG9SQUVBLEdBQUlBLHVCQUFzQixDQUFHQyxtQkFBTyxDQUFDLG9IQUFELENBQXBDLENBRUFDLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsQ0FBK0IsWUFBL0IsQ0FBNkMsQ0FDM0NDLEtBQUssQ0FBRSxJQURvQyxDQUE3QyxFQUdBRCxPQUFPLFdBQVAsQ0FBa0IsSUFBSyxFQUF2QixDQUVBLEdBQUlFLE9BQU0sQ0FBR04sc0JBQXNCLENBQUNDLG1CQUFPLENBQUMsNENBQUQsQ0FBUixDQUFuQyxDQUVBLEdBQUlNLGVBQWMsQ0FBR1Asc0JBQXNCLENBQUNDLG1CQUFPLENBQUMsdUZBQUQsQ0FBUixDQUEzQyxDQUVBLEdBQUlPLFNBQVEsQ0FBRyxDQUFDLEVBQUdELGNBQWMsV0FBbEIsRUFBNEJELE1BQU0sV0FBTixDQUFlRyxhQUFmLENBQTZCLE1BQTdCLENBQXFDLENBQzlFQyxDQUFDLENBQUUsbUpBRDJFLENBQXJDLENBQTVCLENBRVgsT0FGVyxDQUFmLENBSUFOLE9BQU8sV0FBUCxDQUFrQkksUUFBbEIsQyxxS0FSSUYsTSxtSUFFQUMsYywySUFFQUMsUSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvaWNvbnMvSW5wdXQuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfY3JlYXRlU3ZnSWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvY3JlYXRlU3ZnSWNvblwiKSk7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfY3JlYXRlU3ZnSWNvbi5kZWZhdWx0KShfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTIxIDMuMDFIM2MtMS4xIDAtMiAuOS0yIDJWOWgyVjQuOTloMTh2MTQuMDNIM1YxNUgxdjQuMDFjMCAxLjEuOSAxLjk4IDIgMS45OGgxOGMxLjEgMCAyLS44OCAyLTEuOTh2LTE0YzAtMS4xMS0uOS0yLTItMnpNMTEgMTZsNC00LTQtNHYzSDF2MmgxMHYzelwiXG59KSwgJ0lucHV0Jyk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@material-ui/icons/Input.js\n");

/***/ }),

/***/ "./node_modules/@material-ui/icons/InsertDriveFileSharp.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@material-ui/icons/InsertDriveFileSharp.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};var _interopRequireDefault=__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");Object.defineProperty(exports,\"__esModule\",{value:true});exports[\"default\"]=void 0;var _react=_interopRequireDefault(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));var _createSvgIcon=_interopRequireDefault(__webpack_require__(/*! ./utils/createSvgIcon */ \"./node_modules/@material-ui/icons/utils/createSvgIcon.js\"));var _default=(0,_createSvgIcon[\"default\"])(_react[\"default\"].createElement(\"path\",{d:\"M4.01 2L4 22h16V8l-6-6H4.01zM13 9V3.5L18.5 9H13z\"}),'InsertDriveFileSharp');exports[\"default\"]=_default;;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(_react,\"_react\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/InsertDriveFileSharp.js\");reactHotLoader.register(_createSvgIcon,\"_createSvgIcon\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/InsertDriveFileSharp.js\");reactHotLoader.register(_default,\"_default\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/InsertDriveFileSharp.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9pY29ucy9JbnNlcnREcml2ZUZpbGVTaGFycC5qcz9iNDhkIl0sIm5hbWVzIjpbIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJfcmVhY3QiLCJfY3JlYXRlU3ZnSWNvbiIsIl9kZWZhdWx0IiwiY3JlYXRlRWxlbWVudCIsImQiXSwibWFwcGluZ3MiOiJBQUFBLDhDLG9SQUVBLEdBQUlBLHVCQUFzQixDQUFHQyxtQkFBTyxDQUFDLG9IQUFELENBQXBDLENBRUFDLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsQ0FBK0IsWUFBL0IsQ0FBNkMsQ0FDM0NDLEtBQUssQ0FBRSxJQURvQyxDQUE3QyxFQUdBRCxPQUFPLFdBQVAsQ0FBa0IsSUFBSyxFQUF2QixDQUVBLEdBQUlFLE9BQU0sQ0FBR04sc0JBQXNCLENBQUNDLG1CQUFPLENBQUMsNENBQUQsQ0FBUixDQUFuQyxDQUVBLEdBQUlNLGVBQWMsQ0FBR1Asc0JBQXNCLENBQUNDLG1CQUFPLENBQUMsdUZBQUQsQ0FBUixDQUEzQyxDQUVBLEdBQUlPLFNBQVEsQ0FBRyxDQUFDLEVBQUdELGNBQWMsV0FBbEIsRUFBNEJELE1BQU0sV0FBTixDQUFlRyxhQUFmLENBQTZCLE1BQTdCLENBQXFDLENBQzlFQyxDQUFDLENBQUUsa0RBRDJFLENBQXJDLENBQTVCLENBRVgsc0JBRlcsQ0FBZixDQUlBTixPQUFPLFdBQVAsQ0FBa0JJLFFBQWxCLEMscUtBUklGLE0sa0pBRUFDLGMsMEpBRUFDLFEiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2ljb25zL0luc2VydERyaXZlRmlsZVNoYXJwLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX2NyZWF0ZVN2Z0ljb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL2NyZWF0ZVN2Z0ljb25cIikpO1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX2NyZWF0ZVN2Z0ljb24uZGVmYXVsdCkoX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICBkOiBcIk00LjAxIDJMNCAyMmgxNlY4bC02LTZINC4wMXpNMTMgOVYzLjVMMTguNSA5SDEzelwiXG59KSwgJ0luc2VydERyaXZlRmlsZVNoYXJwJyk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@material-ui/icons/InsertDriveFileSharp.js\n");

/***/ }),

/***/ "./node_modules/@material-ui/icons/LayersSharp.js":
/*!********************************************************!*\
  !*** ./node_modules/@material-ui/icons/LayersSharp.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};var _interopRequireDefault=__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");Object.defineProperty(exports,\"__esModule\",{value:true});exports[\"default\"]=void 0;var _react=_interopRequireDefault(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));var _createSvgIcon=_interopRequireDefault(__webpack_require__(/*! ./utils/createSvgIcon */ \"./node_modules/@material-ui/icons/utils/createSvgIcon.js\"));var _default=(0,_createSvgIcon[\"default\"])(_react[\"default\"].createElement(\"path\",{d:\"M11.99 18.54l-7.37-5.73L3 14.07l9 7 9-7-1.63-1.27-7.38 5.74zM12 16l7.36-5.73L21 9l-9-7-9 7 1.63 1.27L12 16z\"}),'LayersSharp');exports[\"default\"]=_default;;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(_react,\"_react\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/LayersSharp.js\");reactHotLoader.register(_createSvgIcon,\"_createSvgIcon\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/LayersSharp.js\");reactHotLoader.register(_default,\"_default\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/LayersSharp.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9pY29ucy9MYXllcnNTaGFycC5qcz84OWM2Il0sIm5hbWVzIjpbIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJfcmVhY3QiLCJfY3JlYXRlU3ZnSWNvbiIsIl9kZWZhdWx0IiwiY3JlYXRlRWxlbWVudCIsImQiXSwibWFwcGluZ3MiOiJBQUFBLDhDLG9SQUVBLEdBQUlBLHVCQUFzQixDQUFHQyxtQkFBTyxDQUFDLG9IQUFELENBQXBDLENBRUFDLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsQ0FBK0IsWUFBL0IsQ0FBNkMsQ0FDM0NDLEtBQUssQ0FBRSxJQURvQyxDQUE3QyxFQUdBRCxPQUFPLFdBQVAsQ0FBa0IsSUFBSyxFQUF2QixDQUVBLEdBQUlFLE9BQU0sQ0FBR04sc0JBQXNCLENBQUNDLG1CQUFPLENBQUMsNENBQUQsQ0FBUixDQUFuQyxDQUVBLEdBQUlNLGVBQWMsQ0FBR1Asc0JBQXNCLENBQUNDLG1CQUFPLENBQUMsdUZBQUQsQ0FBUixDQUEzQyxDQUVBLEdBQUlPLFNBQVEsQ0FBRyxDQUFDLEVBQUdELGNBQWMsV0FBbEIsRUFBNEJELE1BQU0sV0FBTixDQUFlRyxhQUFmLENBQTZCLE1BQTdCLENBQXFDLENBQzlFQyxDQUFDLENBQUUsNkdBRDJFLENBQXJDLENBQTVCLENBRVgsYUFGVyxDQUFmLENBSUFOLE9BQU8sV0FBUCxDQUFrQkksUUFBbEIsQyxxS0FSSUYsTSx5SUFFQUMsYyxpSkFFQUMsUSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvaWNvbnMvTGF5ZXJzU2hhcnAuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfY3JlYXRlU3ZnSWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvY3JlYXRlU3ZnSWNvblwiKSk7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfY3JlYXRlU3ZnSWNvbi5kZWZhdWx0KShfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTExLjk5IDE4LjU0bC03LjM3LTUuNzNMMyAxNC4wN2w5IDcgOS03LTEuNjMtMS4yNy03LjM4IDUuNzR6TTEyIDE2bDcuMzYtNS43M0wyMSA5bC05LTctOSA3IDEuNjMgMS4yN0wxMiAxNnpcIlxufSksICdMYXllcnNTaGFycCcpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@material-ui/icons/LayersSharp.js\n");

/***/ }),

/***/ "./node_modules/@material-ui/icons/LockSharp.js":
/*!******************************************************!*\
  !*** ./node_modules/@material-ui/icons/LockSharp.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};var _interopRequireDefault=__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");Object.defineProperty(exports,\"__esModule\",{value:true});exports[\"default\"]=void 0;var _react=_interopRequireDefault(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));var _createSvgIcon=_interopRequireDefault(__webpack_require__(/*! ./utils/createSvgIcon */ \"./node_modules/@material-ui/icons/utils/createSvgIcon.js\"));var _default=(0,_createSvgIcon[\"default\"])(_react[\"default\"].createElement(\"path\",{d:\"M20 8h-3V6.21c0-2.61-1.91-4.94-4.51-5.19C9.51.74 7 3.08 7 6v2H4v14h16V8zm-8 9c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2zM9 8V6c0-1.66 1.34-3 3-3s3 1.34 3 3v2H9z\"}),'LockSharp');exports[\"default\"]=_default;;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(_react,\"_react\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/LockSharp.js\");reactHotLoader.register(_createSvgIcon,\"_createSvgIcon\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/LockSharp.js\");reactHotLoader.register(_default,\"_default\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/LockSharp.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9pY29ucy9Mb2NrU2hhcnAuanM/YTdmZiJdLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiX3JlYWN0IiwiX2NyZWF0ZVN2Z0ljb24iLCJfZGVmYXVsdCIsImNyZWF0ZUVsZW1lbnQiLCJkIl0sIm1hcHBpbmdzIjoiQUFBQSw4QyxvUkFFQSxHQUFJQSx1QkFBc0IsQ0FBR0MsbUJBQU8sQ0FBQyxvSEFBRCxDQUFwQyxDQUVBQyxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLENBQStCLFlBQS9CLENBQTZDLENBQzNDQyxLQUFLLENBQUUsSUFEb0MsQ0FBN0MsRUFHQUQsT0FBTyxXQUFQLENBQWtCLElBQUssRUFBdkIsQ0FFQSxHQUFJRSxPQUFNLENBQUdOLHNCQUFzQixDQUFDQyxtQkFBTyxDQUFDLDRDQUFELENBQVIsQ0FBbkMsQ0FFQSxHQUFJTSxlQUFjLENBQUdQLHNCQUFzQixDQUFDQyxtQkFBTyxDQUFDLHVGQUFELENBQVIsQ0FBM0MsQ0FFQSxHQUFJTyxTQUFRLENBQUcsQ0FBQyxFQUFHRCxjQUFjLFdBQWxCLEVBQTRCRCxNQUFNLFdBQU4sQ0FBZUcsYUFBZixDQUE2QixNQUE3QixDQUFxQyxDQUM5RUMsQ0FBQyxDQUFFLG1LQUQyRSxDQUFyQyxDQUE1QixDQUVYLFdBRlcsQ0FBZixDQUlBTixPQUFPLFdBQVAsQ0FBa0JJLFFBQWxCLEMscUtBUklGLE0sdUlBRUFDLGMsK0lBRUFDLFEiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2ljb25zL0xvY2tTaGFycC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9jcmVhdGVTdmdJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9jcmVhdGVTdmdJY29uXCIpKTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9jcmVhdGVTdmdJY29uLmRlZmF1bHQpKF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgZDogXCJNMjAgOGgtM1Y2LjIxYzAtMi42MS0xLjkxLTQuOTQtNC41MS01LjE5QzkuNTEuNzQgNyAzLjA4IDcgNnYySDR2MTRoMTZWOHptLTggOWMtMS4xIDAtMi0uOS0yLTJzLjktMiAyLTIgMiAuOSAyIDItLjkgMi0yIDJ6TTkgOFY2YzAtMS42NiAxLjM0LTMgMy0zczMgMS4zNCAzIDN2Mkg5elwiXG59KSwgJ0xvY2tTaGFycCcpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@material-ui/icons/LockSharp.js\n");

/***/ }),

/***/ "./node_modules/@material-ui/icons/MenuSharp.js":
/*!******************************************************!*\
  !*** ./node_modules/@material-ui/icons/MenuSharp.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};var _interopRequireDefault=__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");Object.defineProperty(exports,\"__esModule\",{value:true});exports[\"default\"]=void 0;var _react=_interopRequireDefault(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));var _createSvgIcon=_interopRequireDefault(__webpack_require__(/*! ./utils/createSvgIcon */ \"./node_modules/@material-ui/icons/utils/createSvgIcon.js\"));var _default=(0,_createSvgIcon[\"default\"])(_react[\"default\"].createElement(\"path\",{d:\"M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z\"}),'MenuSharp');exports[\"default\"]=_default;;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(_react,\"_react\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/MenuSharp.js\");reactHotLoader.register(_createSvgIcon,\"_createSvgIcon\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/MenuSharp.js\");reactHotLoader.register(_default,\"_default\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/MenuSharp.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9pY29ucy9NZW51U2hhcnAuanM/Y2JkYiJdLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiX3JlYWN0IiwiX2NyZWF0ZVN2Z0ljb24iLCJfZGVmYXVsdCIsImNyZWF0ZUVsZW1lbnQiLCJkIl0sIm1hcHBpbmdzIjoiQUFBQSw4QyxvUkFFQSxHQUFJQSx1QkFBc0IsQ0FBR0MsbUJBQU8sQ0FBQyxvSEFBRCxDQUFwQyxDQUVBQyxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLENBQStCLFlBQS9CLENBQTZDLENBQzNDQyxLQUFLLENBQUUsSUFEb0MsQ0FBN0MsRUFHQUQsT0FBTyxXQUFQLENBQWtCLElBQUssRUFBdkIsQ0FFQSxHQUFJRSxPQUFNLENBQUdOLHNCQUFzQixDQUFDQyxtQkFBTyxDQUFDLDRDQUFELENBQVIsQ0FBbkMsQ0FFQSxHQUFJTSxlQUFjLENBQUdQLHNCQUFzQixDQUFDQyxtQkFBTyxDQUFDLHVGQUFELENBQVIsQ0FBM0MsQ0FFQSxHQUFJTyxTQUFRLENBQUcsQ0FBQyxFQUFHRCxjQUFjLFdBQWxCLEVBQTRCRCxNQUFNLFdBQU4sQ0FBZUcsYUFBZixDQUE2QixNQUE3QixDQUFxQyxDQUM5RUMsQ0FBQyxDQUFFLCtDQUQyRSxDQUFyQyxDQUE1QixDQUVYLFdBRlcsQ0FBZixDQUlBTixPQUFPLFdBQVAsQ0FBa0JJLFFBQWxCLEMscUtBUklGLE0sdUlBRUFDLGMsK0lBRUFDLFEiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2ljb25zL01lbnVTaGFycC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9jcmVhdGVTdmdJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9jcmVhdGVTdmdJY29uXCIpKTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9jcmVhdGVTdmdJY29uLmRlZmF1bHQpKF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgZDogXCJNMyAxOGgxOHYtMkgzdjJ6bTAtNWgxOHYtMkgzdjJ6bTAtN3YyaDE4VjZIM3pcIlxufSksICdNZW51U2hhcnAnKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@material-ui/icons/MenuSharp.js\n");

/***/ }),

/***/ "./node_modules/@material-ui/icons/MoreHorizSharp.js":
/*!***********************************************************!*\
  !*** ./node_modules/@material-ui/icons/MoreHorizSharp.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};var _interopRequireDefault=__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");Object.defineProperty(exports,\"__esModule\",{value:true});exports[\"default\"]=void 0;var _react=_interopRequireDefault(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));var _createSvgIcon=_interopRequireDefault(__webpack_require__(/*! ./utils/createSvgIcon */ \"./node_modules/@material-ui/icons/utils/createSvgIcon.js\"));var _default=(0,_createSvgIcon[\"default\"])(_react[\"default\"].createElement(\"path\",{d:\"M6 10c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm12 0c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm-6 0c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z\"}),'MoreHorizSharp');exports[\"default\"]=_default;;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(_react,\"_react\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/MoreHorizSharp.js\");reactHotLoader.register(_createSvgIcon,\"_createSvgIcon\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/MoreHorizSharp.js\");reactHotLoader.register(_default,\"_default\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/MoreHorizSharp.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9pY29ucy9Nb3JlSG9yaXpTaGFycC5qcz80Y2Q3Il0sIm5hbWVzIjpbIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJfcmVhY3QiLCJfY3JlYXRlU3ZnSWNvbiIsIl9kZWZhdWx0IiwiY3JlYXRlRWxlbWVudCIsImQiXSwibWFwcGluZ3MiOiJBQUFBLDhDLG9SQUVBLEdBQUlBLHVCQUFzQixDQUFHQyxtQkFBTyxDQUFDLG9IQUFELENBQXBDLENBRUFDLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsQ0FBK0IsWUFBL0IsQ0FBNkMsQ0FDM0NDLEtBQUssQ0FBRSxJQURvQyxDQUE3QyxFQUdBRCxPQUFPLFdBQVAsQ0FBa0IsSUFBSyxFQUF2QixDQUVBLEdBQUlFLE9BQU0sQ0FBR04sc0JBQXNCLENBQUNDLG1CQUFPLENBQUMsNENBQUQsQ0FBUixDQUFuQyxDQUVBLEdBQUlNLGVBQWMsQ0FBR1Asc0JBQXNCLENBQUNDLG1CQUFPLENBQUMsdUZBQUQsQ0FBUixDQUEzQyxDQUVBLEdBQUlPLFNBQVEsQ0FBRyxDQUFDLEVBQUdELGNBQWMsV0FBbEIsRUFBNEJELE1BQU0sV0FBTixDQUFlRyxhQUFmLENBQTZCLE1BQTdCLENBQXFDLENBQzlFQyxDQUFDLENBQUUscUpBRDJFLENBQXJDLENBQTVCLENBRVgsZ0JBRlcsQ0FBZixDQUlBTixPQUFPLFdBQVAsQ0FBa0JJLFFBQWxCLEMscUtBUklGLE0sNElBRUFDLGMsb0pBRUFDLFEiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2ljb25zL01vcmVIb3JpelNoYXJwLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX2NyZWF0ZVN2Z0ljb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL2NyZWF0ZVN2Z0ljb25cIikpO1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX2NyZWF0ZVN2Z0ljb24uZGVmYXVsdCkoX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICBkOiBcIk02IDEwYy0xLjEgMC0yIC45LTIgMnMuOSAyIDIgMiAyLS45IDItMi0uOS0yLTItMnptMTIgMGMtMS4xIDAtMiAuOS0yIDJzLjkgMiAyIDIgMi0uOSAyLTItLjktMi0yLTJ6bS02IDBjLTEuMSAwLTIgLjktMiAycy45IDIgMiAyIDItLjkgMi0yLS45LTItMi0yelwiXG59KSwgJ01vcmVIb3JpelNoYXJwJyk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@material-ui/icons/MoreHorizSharp.js\n");

/***/ }),

/***/ "./node_modules/@material-ui/icons/MoreVertSharp.js":
/*!**********************************************************!*\
  !*** ./node_modules/@material-ui/icons/MoreVertSharp.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};var _interopRequireDefault=__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");Object.defineProperty(exports,\"__esModule\",{value:true});exports[\"default\"]=void 0;var _react=_interopRequireDefault(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));var _createSvgIcon=_interopRequireDefault(__webpack_require__(/*! ./utils/createSvgIcon */ \"./node_modules/@material-ui/icons/utils/createSvgIcon.js\"));var _default=(0,_createSvgIcon[\"default\"])(_react[\"default\"].createElement(\"path\",{d:\"M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z\"}),'MoreVertSharp');exports[\"default\"]=_default;;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(_react,\"_react\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/MoreVertSharp.js\");reactHotLoader.register(_createSvgIcon,\"_createSvgIcon\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/MoreVertSharp.js\");reactHotLoader.register(_default,\"_default\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/MoreVertSharp.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9pY29ucy9Nb3JlVmVydFNoYXJwLmpzPzViMzEiXSwibmFtZXMiOlsiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIl9yZWFjdCIsIl9jcmVhdGVTdmdJY29uIiwiX2RlZmF1bHQiLCJjcmVhdGVFbGVtZW50IiwiZCJdLCJtYXBwaW5ncyI6IkFBQUEsOEMsb1JBRUEsR0FBSUEsdUJBQXNCLENBQUdDLG1CQUFPLENBQUMsb0hBQUQsQ0FBcEMsQ0FFQUMsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixDQUErQixZQUEvQixDQUE2QyxDQUMzQ0MsS0FBSyxDQUFFLElBRG9DLENBQTdDLEVBR0FELE9BQU8sV0FBUCxDQUFrQixJQUFLLEVBQXZCLENBRUEsR0FBSUUsT0FBTSxDQUFHTixzQkFBc0IsQ0FBQ0MsbUJBQU8sQ0FBQyw0Q0FBRCxDQUFSLENBQW5DLENBRUEsR0FBSU0sZUFBYyxDQUFHUCxzQkFBc0IsQ0FBQ0MsbUJBQU8sQ0FBQyx1RkFBRCxDQUFSLENBQTNDLENBRUEsR0FBSU8sU0FBUSxDQUFHLENBQUMsRUFBR0QsY0FBYyxXQUFsQixFQUE0QkQsTUFBTSxXQUFOLENBQWVHLGFBQWYsQ0FBNkIsTUFBN0IsQ0FBcUMsQ0FDOUVDLENBQUMsQ0FBRSxtSkFEMkUsQ0FBckMsQ0FBNUIsQ0FFWCxlQUZXLENBQWYsQ0FJQU4sT0FBTyxXQUFQLENBQWtCSSxRQUFsQixDLHFLQVJJRixNLDJJQUVBQyxjLG1KQUVBQyxRIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9pY29ucy9Nb3JlVmVydFNoYXJwLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX2NyZWF0ZVN2Z0ljb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL2NyZWF0ZVN2Z0ljb25cIikpO1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX2NyZWF0ZVN2Z0ljb24uZGVmYXVsdCkoX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICBkOiBcIk0xMiA4YzEuMSAwIDItLjkgMi0ycy0uOS0yLTItMi0yIC45LTIgMiAuOSAyIDIgMnptMCAyYy0xLjEgMC0yIC45LTIgMnMuOSAyIDIgMiAyLS45IDItMi0uOS0yLTItMnptMCA2Yy0xLjEgMC0yIC45LTIgMnMuOSAyIDIgMiAyLS45IDItMi0uOS0yLTItMnpcIlxufSksICdNb3JlVmVydFNoYXJwJyk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@material-ui/icons/MoreVertSharp.js\n");

/***/ }),

/***/ "./node_modules/@material-ui/icons/PaletteSharp.js":
/*!*********************************************************!*\
  !*** ./node_modules/@material-ui/icons/PaletteSharp.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};var _interopRequireDefault=__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");Object.defineProperty(exports,\"__esModule\",{value:true});exports[\"default\"]=void 0;var _react=_interopRequireDefault(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));var _createSvgIcon=_interopRequireDefault(__webpack_require__(/*! ./utils/createSvgIcon */ \"./node_modules/@material-ui/icons/utils/createSvgIcon.js\"));var _default=(0,_createSvgIcon[\"default\"])(_react[\"default\"].createElement(\"path\",{d:\"M12 3c-4.97 0-9 4.03-9 9s4.03 9 9 9c.83 0 1.5-.67 1.5-1.5 0-.39-.15-.74-.39-1.01-.23-.26-.38-.61-.38-.99 0-.83.67-1.5 1.5-1.5H16c2.76 0 5-2.24 5-5 0-4.42-4.03-8-9-8zm-5.5 9c-.83 0-1.5-.67-1.5-1.5S5.67 9 6.5 9 8 9.67 8 10.5 7.33 12 6.5 12zm3-4C8.67 8 8 7.33 8 6.5S8.67 5 9.5 5s1.5.67 1.5 1.5S10.33 8 9.5 8zm5 0c-.83 0-1.5-.67-1.5-1.5S13.67 5 14.5 5s1.5.67 1.5 1.5S15.33 8 14.5 8zm3 4c-.83 0-1.5-.67-1.5-1.5S16.67 9 17.5 9s1.5.67 1.5 1.5-.67 1.5-1.5 1.5z\"}),'PaletteSharp');exports[\"default\"]=_default;;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(_react,\"_react\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/PaletteSharp.js\");reactHotLoader.register(_createSvgIcon,\"_createSvgIcon\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/PaletteSharp.js\");reactHotLoader.register(_default,\"_default\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/PaletteSharp.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9pY29ucy9QYWxldHRlU2hhcnAuanM/NDgwYSJdLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiX3JlYWN0IiwiX2NyZWF0ZVN2Z0ljb24iLCJfZGVmYXVsdCIsImNyZWF0ZUVsZW1lbnQiLCJkIl0sIm1hcHBpbmdzIjoiQUFBQSw4QyxvUkFFQSxHQUFJQSx1QkFBc0IsQ0FBR0MsbUJBQU8sQ0FBQyxvSEFBRCxDQUFwQyxDQUVBQyxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLENBQStCLFlBQS9CLENBQTZDLENBQzNDQyxLQUFLLENBQUUsSUFEb0MsQ0FBN0MsRUFHQUQsT0FBTyxXQUFQLENBQWtCLElBQUssRUFBdkIsQ0FFQSxHQUFJRSxPQUFNLENBQUdOLHNCQUFzQixDQUFDQyxtQkFBTyxDQUFDLDRDQUFELENBQVIsQ0FBbkMsQ0FFQSxHQUFJTSxlQUFjLENBQUdQLHNCQUFzQixDQUFDQyxtQkFBTyxDQUFDLHVGQUFELENBQVIsQ0FBM0MsQ0FFQSxHQUFJTyxTQUFRLENBQUcsQ0FBQyxFQUFHRCxjQUFjLFdBQWxCLEVBQTRCRCxNQUFNLFdBQU4sQ0FBZUcsYUFBZixDQUE2QixNQUE3QixDQUFxQyxDQUM5RUMsQ0FBQyxDQUFFLHNjQUQyRSxDQUFyQyxDQUE1QixDQUVYLGNBRlcsQ0FBZixDQUlBTixPQUFPLFdBQVAsQ0FBa0JJLFFBQWxCLEMscUtBUklGLE0sMElBRUFDLGMsa0pBRUFDLFEiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2ljb25zL1BhbGV0dGVTaGFycC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9jcmVhdGVTdmdJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9jcmVhdGVTdmdJY29uXCIpKTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9jcmVhdGVTdmdJY29uLmRlZmF1bHQpKF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgZDogXCJNMTIgM2MtNC45NyAwLTkgNC4wMy05IDlzNC4wMyA5IDkgOWMuODMgMCAxLjUtLjY3IDEuNS0xLjUgMC0uMzktLjE1LS43NC0uMzktMS4wMS0uMjMtLjI2LS4zOC0uNjEtLjM4LS45OSAwLS44My42Ny0xLjUgMS41LTEuNUgxNmMyLjc2IDAgNS0yLjI0IDUtNSAwLTQuNDItNC4wMy04LTktOHptLTUuNSA5Yy0uODMgMC0xLjUtLjY3LTEuNS0xLjVTNS42NyA5IDYuNSA5IDggOS42NyA4IDEwLjUgNy4zMyAxMiA2LjUgMTJ6bTMtNEM4LjY3IDggOCA3LjMzIDggNi41UzguNjcgNSA5LjUgNXMxLjUuNjcgMS41IDEuNVMxMC4zMyA4IDkuNSA4em01IDBjLS44MyAwLTEuNS0uNjctMS41LTEuNVMxMy42NyA1IDE0LjUgNXMxLjUuNjcgMS41IDEuNVMxNS4zMyA4IDE0LjUgOHptMyA0Yy0uODMgMC0xLjUtLjY3LTEuNS0xLjVTMTYuNjcgOSAxNy41IDlzMS41LjY3IDEuNSAxLjUtLjY3IDEuNS0xLjUgMS41elwiXG59KSwgJ1BhbGV0dGVTaGFycCcpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@material-ui/icons/PaletteSharp.js\n");

/***/ }),

/***/ "./node_modules/@material-ui/icons/PlayCircleOutlineSharp.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@material-ui/icons/PlayCircleOutlineSharp.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};var _interopRequireDefault=__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");Object.defineProperty(exports,\"__esModule\",{value:true});exports[\"default\"]=void 0;var _react=_interopRequireDefault(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));var _createSvgIcon=_interopRequireDefault(__webpack_require__(/*! ./utils/createSvgIcon */ \"./node_modules/@material-ui/icons/utils/createSvgIcon.js\"));var _default=(0,_createSvgIcon[\"default\"])(_react[\"default\"].createElement(\"path\",{d:\"M10 16.5l6-4.5-6-4.5v9zM12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z\"}),'PlayCircleOutlineSharp');exports[\"default\"]=_default;;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(_react,\"_react\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/PlayCircleOutlineSharp.js\");reactHotLoader.register(_createSvgIcon,\"_createSvgIcon\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/PlayCircleOutlineSharp.js\");reactHotLoader.register(_default,\"_default\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/PlayCircleOutlineSharp.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9pY29ucy9QbGF5Q2lyY2xlT3V0bGluZVNoYXJwLmpzP2VkMTIiXSwibmFtZXMiOlsiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIl9yZWFjdCIsIl9jcmVhdGVTdmdJY29uIiwiX2RlZmF1bHQiLCJjcmVhdGVFbGVtZW50IiwiZCJdLCJtYXBwaW5ncyI6IkFBQUEsOEMsb1JBRUEsR0FBSUEsdUJBQXNCLENBQUdDLG1CQUFPLENBQUMsb0hBQUQsQ0FBcEMsQ0FFQUMsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixDQUErQixZQUEvQixDQUE2QyxDQUMzQ0MsS0FBSyxDQUFFLElBRG9DLENBQTdDLEVBR0FELE9BQU8sV0FBUCxDQUFrQixJQUFLLEVBQXZCLENBRUEsR0FBSUUsT0FBTSxDQUFHTixzQkFBc0IsQ0FBQ0MsbUJBQU8sQ0FBQyw0Q0FBRCxDQUFSLENBQW5DLENBRUEsR0FBSU0sZUFBYyxDQUFHUCxzQkFBc0IsQ0FBQ0MsbUJBQU8sQ0FBQyx1RkFBRCxDQUFSLENBQTNDLENBRUEsR0FBSU8sU0FBUSxDQUFHLENBQUMsRUFBR0QsY0FBYyxXQUFsQixFQUE0QkQsTUFBTSxXQUFOLENBQWVHLGFBQWYsQ0FBNkIsTUFBN0IsQ0FBcUMsQ0FDOUVDLENBQUMsQ0FBRSxxSkFEMkUsQ0FBckMsQ0FBNUIsQ0FFWCx3QkFGVyxDQUFmLENBSUFOLE9BQU8sV0FBUCxDQUFrQkksUUFBbEIsQyxxS0FSSUYsTSxvSkFFQUMsYyw0SkFFQUMsUSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvaWNvbnMvUGxheUNpcmNsZU91dGxpbmVTaGFycC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9jcmVhdGVTdmdJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9jcmVhdGVTdmdJY29uXCIpKTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9jcmVhdGVTdmdJY29uLmRlZmF1bHQpKF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgZDogXCJNMTAgMTYuNWw2LTQuNS02LTQuNXY5ek0xMiAyQzYuNDggMiAyIDYuNDggMiAxMnM0LjQ4IDEwIDEwIDEwIDEwLTQuNDggMTAtMTBTMTcuNTIgMiAxMiAyem0wIDE4Yy00LjQxIDAtOC0zLjU5LTgtOHMzLjU5LTggOC04IDggMy41OSA4IDgtMy41OSA4LTggOHpcIlxufSksICdQbGF5Q2lyY2xlT3V0bGluZVNoYXJwJyk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@material-ui/icons/PlayCircleOutlineSharp.js\n");

/***/ }),

/***/ "./node_modules/@material-ui/icons/RemoveCircleOutlineSharp.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@material-ui/icons/RemoveCircleOutlineSharp.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};var _interopRequireDefault=__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");Object.defineProperty(exports,\"__esModule\",{value:true});exports[\"default\"]=void 0;var _react=_interopRequireDefault(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));var _createSvgIcon=_interopRequireDefault(__webpack_require__(/*! ./utils/createSvgIcon */ \"./node_modules/@material-ui/icons/utils/createSvgIcon.js\"));var _default=(0,_createSvgIcon[\"default\"])(_react[\"default\"].createElement(\"path\",{d:\"M7 11v2h10v-2H7zm5-9C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z\"}),'RemoveCircleOutlineSharp');exports[\"default\"]=_default;;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(_react,\"_react\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/RemoveCircleOutlineSharp.js\");reactHotLoader.register(_createSvgIcon,\"_createSvgIcon\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/RemoveCircleOutlineSharp.js\");reactHotLoader.register(_default,\"_default\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/RemoveCircleOutlineSharp.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9pY29ucy9SZW1vdmVDaXJjbGVPdXRsaW5lU2hhcnAuanM/NjBlYiJdLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiX3JlYWN0IiwiX2NyZWF0ZVN2Z0ljb24iLCJfZGVmYXVsdCIsImNyZWF0ZUVsZW1lbnQiLCJkIl0sIm1hcHBpbmdzIjoiQUFBQSw4QyxvUkFFQSxHQUFJQSx1QkFBc0IsQ0FBR0MsbUJBQU8sQ0FBQyxvSEFBRCxDQUFwQyxDQUVBQyxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLENBQStCLFlBQS9CLENBQTZDLENBQzNDQyxLQUFLLENBQUUsSUFEb0MsQ0FBN0MsRUFHQUQsT0FBTyxXQUFQLENBQWtCLElBQUssRUFBdkIsQ0FFQSxHQUFJRSxPQUFNLENBQUdOLHNCQUFzQixDQUFDQyxtQkFBTyxDQUFDLDRDQUFELENBQVIsQ0FBbkMsQ0FFQSxHQUFJTSxlQUFjLENBQUdQLHNCQUFzQixDQUFDQyxtQkFBTyxDQUFDLHVGQUFELENBQVIsQ0FBM0MsQ0FFQSxHQUFJTyxTQUFRLENBQUcsQ0FBQyxFQUFHRCxjQUFjLFdBQWxCLEVBQTRCRCxNQUFNLFdBQU4sQ0FBZUcsYUFBZixDQUE2QixNQUE3QixDQUFxQyxDQUM5RUMsQ0FBQyxDQUFFLDZJQUQyRSxDQUFyQyxDQUE1QixDQUVYLDBCQUZXLENBQWYsQ0FJQU4sT0FBTyxXQUFQLENBQWtCSSxRQUFsQixDLHFLQVJJRixNLHNKQUVBQyxjLDhKQUVBQyxRIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9pY29ucy9SZW1vdmVDaXJjbGVPdXRsaW5lU2hhcnAuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfY3JlYXRlU3ZnSWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvY3JlYXRlU3ZnSWNvblwiKSk7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfY3JlYXRlU3ZnSWNvbi5kZWZhdWx0KShfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTcgMTF2MmgxMHYtMkg3em01LTlDNi40OCAyIDIgNi40OCAyIDEyczQuNDggMTAgMTAgMTAgMTAtNC40OCAxMC0xMFMxNy41MiAyIDEyIDJ6bTAgMThjLTQuNDEgMC04LTMuNTktOC04czMuNTktOCA4LTggOCAzLjU5IDggOC0zLjU5IDgtOCA4elwiXG59KSwgJ1JlbW92ZUNpcmNsZU91dGxpbmVTaGFycCcpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@material-ui/icons/RemoveCircleOutlineSharp.js\n");

/***/ }),

/***/ "./node_modules/@material-ui/icons/SaveAltSharp.js":
/*!*********************************************************!*\
  !*** ./node_modules/@material-ui/icons/SaveAltSharp.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};var _interopRequireDefault=__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");Object.defineProperty(exports,\"__esModule\",{value:true});exports[\"default\"]=void 0;var _react=_interopRequireDefault(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));var _createSvgIcon=_interopRequireDefault(__webpack_require__(/*! ./utils/createSvgIcon */ \"./node_modules/@material-ui/icons/utils/createSvgIcon.js\"));var _default=(0,_createSvgIcon[\"default\"])(_react[\"default\"].createElement(\"path\",{d:\"M19 12v7H5v-7H3v9h18v-9h-2zm-6 .67l2.59-2.58L17 11.5l-5 5-5-5 1.41-1.41L11 12.67V3h2v9.67z\"}),'SaveAltSharp');exports[\"default\"]=_default;;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(_react,\"_react\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/SaveAltSharp.js\");reactHotLoader.register(_createSvgIcon,\"_createSvgIcon\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/SaveAltSharp.js\");reactHotLoader.register(_default,\"_default\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/SaveAltSharp.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9pY29ucy9TYXZlQWx0U2hhcnAuanM/ZWE1ZCJdLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiX3JlYWN0IiwiX2NyZWF0ZVN2Z0ljb24iLCJfZGVmYXVsdCIsImNyZWF0ZUVsZW1lbnQiLCJkIl0sIm1hcHBpbmdzIjoiQUFBQSw4QyxvUkFFQSxHQUFJQSx1QkFBc0IsQ0FBR0MsbUJBQU8sQ0FBQyxvSEFBRCxDQUFwQyxDQUVBQyxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLENBQStCLFlBQS9CLENBQTZDLENBQzNDQyxLQUFLLENBQUUsSUFEb0MsQ0FBN0MsRUFHQUQsT0FBTyxXQUFQLENBQWtCLElBQUssRUFBdkIsQ0FFQSxHQUFJRSxPQUFNLENBQUdOLHNCQUFzQixDQUFDQyxtQkFBTyxDQUFDLDRDQUFELENBQVIsQ0FBbkMsQ0FFQSxHQUFJTSxlQUFjLENBQUdQLHNCQUFzQixDQUFDQyxtQkFBTyxDQUFDLHVGQUFELENBQVIsQ0FBM0MsQ0FFQSxHQUFJTyxTQUFRLENBQUcsQ0FBQyxFQUFHRCxjQUFjLFdBQWxCLEVBQTRCRCxNQUFNLFdBQU4sQ0FBZUcsYUFBZixDQUE2QixNQUE3QixDQUFxQyxDQUM5RUMsQ0FBQyxDQUFFLDRGQUQyRSxDQUFyQyxDQUE1QixDQUVYLGNBRlcsQ0FBZixDQUlBTixPQUFPLFdBQVAsQ0FBa0JJLFFBQWxCLEMscUtBUklGLE0sMElBRUFDLGMsa0pBRUFDLFEiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2ljb25zL1NhdmVBbHRTaGFycC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9jcmVhdGVTdmdJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9jcmVhdGVTdmdJY29uXCIpKTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9jcmVhdGVTdmdJY29uLmRlZmF1bHQpKF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgZDogXCJNMTkgMTJ2N0g1di03SDN2OWgxOHYtOWgtMnptLTYgLjY3bDIuNTktMi41OEwxNyAxMS41bC01IDUtNS01IDEuNDEtMS40MUwxMSAxMi42N1YzaDJ2OS42N3pcIlxufSksICdTYXZlQWx0U2hhcnAnKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@material-ui/icons/SaveAltSharp.js\n");

/***/ }),

/***/ "./node_modules/@material-ui/icons/SettingsSharp.js":
/*!**********************************************************!*\
  !*** ./node_modules/@material-ui/icons/SettingsSharp.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};var _interopRequireDefault=__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");Object.defineProperty(exports,\"__esModule\",{value:true});exports[\"default\"]=void 0;var _react=_interopRequireDefault(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));var _createSvgIcon=_interopRequireDefault(__webpack_require__(/*! ./utils/createSvgIcon */ \"./node_modules/@material-ui/icons/utils/createSvgIcon.js\"));var _default=(0,_createSvgIcon[\"default\"])(_react[\"default\"].createElement(\"path\",{d:\"M19.44 12.99l-.01.02c.04-.33.08-.67.08-1.01 0-.34-.03-.66-.07-.99l.01.02 2.44-1.92-2.43-4.22-2.87 1.16.01.01c-.52-.4-1.09-.74-1.71-1h.01L14.44 2H9.57l-.44 3.07h.01c-.62.26-1.19.6-1.71 1l.01-.01-2.88-1.17-2.44 4.22 2.44 1.92.01-.02c-.04.33-.07.65-.07.99 0 .34.03.68.08 1.01l-.01-.02-2.1 1.65-.33.26 2.43 4.2 2.88-1.15-.02-.04c.53.41 1.1.75 1.73 1.01h-.03L9.58 22h4.85s.03-.18.06-.42l.38-2.65h-.01c.62-.26 1.2-.6 1.73-1.01l-.02.04 2.88 1.15 2.43-4.2s-.14-.12-.33-.26l-2.11-1.66zM12 15.5c-1.93 0-3.5-1.57-3.5-3.5s1.57-3.5 3.5-3.5 3.5 1.57 3.5 3.5-1.57 3.5-3.5 3.5z\"}),'SettingsSharp');exports[\"default\"]=_default;;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(_react,\"_react\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/SettingsSharp.js\");reactHotLoader.register(_createSvgIcon,\"_createSvgIcon\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/SettingsSharp.js\");reactHotLoader.register(_default,\"_default\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/SettingsSharp.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9pY29ucy9TZXR0aW5nc1NoYXJwLmpzP2IxNmQiXSwibmFtZXMiOlsiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIl9yZWFjdCIsIl9jcmVhdGVTdmdJY29uIiwiX2RlZmF1bHQiLCJjcmVhdGVFbGVtZW50IiwiZCJdLCJtYXBwaW5ncyI6IkFBQUEsOEMsb1JBRUEsR0FBSUEsdUJBQXNCLENBQUdDLG1CQUFPLENBQUMsb0hBQUQsQ0FBcEMsQ0FFQUMsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixDQUErQixZQUEvQixDQUE2QyxDQUMzQ0MsS0FBSyxDQUFFLElBRG9DLENBQTdDLEVBR0FELE9BQU8sV0FBUCxDQUFrQixJQUFLLEVBQXZCLENBRUEsR0FBSUUsT0FBTSxDQUFHTixzQkFBc0IsQ0FBQ0MsbUJBQU8sQ0FBQyw0Q0FBRCxDQUFSLENBQW5DLENBRUEsR0FBSU0sZUFBYyxDQUFHUCxzQkFBc0IsQ0FBQ0MsbUJBQU8sQ0FBQyx1RkFBRCxDQUFSLENBQTNDLENBRUEsR0FBSU8sU0FBUSxDQUFHLENBQUMsRUFBR0QsY0FBYyxXQUFsQixFQUE0QkQsTUFBTSxXQUFOLENBQWVHLGFBQWYsQ0FBNkIsTUFBN0IsQ0FBcUMsQ0FDOUVDLENBQUMsQ0FBRSxtakJBRDJFLENBQXJDLENBQTVCLENBRVgsZUFGVyxDQUFmLENBSUFOLE9BQU8sV0FBUCxDQUFrQkksUUFBbEIsQyxxS0FSSUYsTSwySUFFQUMsYyxtSkFFQUMsUSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvaWNvbnMvU2V0dGluZ3NTaGFycC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9jcmVhdGVTdmdJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9jcmVhdGVTdmdJY29uXCIpKTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9jcmVhdGVTdmdJY29uLmRlZmF1bHQpKF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgZDogXCJNMTkuNDQgMTIuOTlsLS4wMS4wMmMuMDQtLjMzLjA4LS42Ny4wOC0xLjAxIDAtLjM0LS4wMy0uNjYtLjA3LS45OWwuMDEuMDIgMi40NC0xLjkyLTIuNDMtNC4yMi0yLjg3IDEuMTYuMDEuMDFjLS41Mi0uNC0xLjA5LS43NC0xLjcxLTFoLjAxTDE0LjQ0IDJIOS41N2wtLjQ0IDMuMDdoLjAxYy0uNjIuMjYtMS4xOS42LTEuNzEgMWwuMDEtLjAxLTIuODgtMS4xNy0yLjQ0IDQuMjIgMi40NCAxLjkyLjAxLS4wMmMtLjA0LjMzLS4wNy42NS0uMDcuOTkgMCAuMzQuMDMuNjguMDggMS4wMWwtLjAxLS4wMi0yLjEgMS42NS0uMzMuMjYgMi40MyA0LjIgMi44OC0xLjE1LS4wMi0uMDRjLjUzLjQxIDEuMS43NSAxLjczIDEuMDFoLS4wM0w5LjU4IDIyaDQuODVzLjAzLS4xOC4wNi0uNDJsLjM4LTIuNjVoLS4wMWMuNjItLjI2IDEuMi0uNiAxLjczLTEuMDFsLS4wMi4wNCAyLjg4IDEuMTUgMi40My00LjJzLS4xNC0uMTItLjMzLS4yNmwtMi4xMS0xLjY2ek0xMiAxNS41Yy0xLjkzIDAtMy41LTEuNTctMy41LTMuNXMxLjU3LTMuNSAzLjUtMy41IDMuNSAxLjU3IDMuNSAzLjUtMS41NyAzLjUtMy41IDMuNXpcIlxufSksICdTZXR0aW5nc1NoYXJwJyk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@material-ui/icons/SettingsSharp.js\n");

/***/ }),

/***/ "./node_modules/@material-ui/icons/ViewColumn.js":
/*!*******************************************************!*\
  !*** ./node_modules/@material-ui/icons/ViewColumn.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};var _interopRequireDefault=__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");Object.defineProperty(exports,\"__esModule\",{value:true});exports[\"default\"]=void 0;var _react=_interopRequireDefault(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));var _createSvgIcon=_interopRequireDefault(__webpack_require__(/*! ./utils/createSvgIcon */ \"./node_modules/@material-ui/icons/utils/createSvgIcon.js\"));var _default=(0,_createSvgIcon[\"default\"])(_react[\"default\"].createElement(\"path\",{d:\"M10 18h5V5h-5v13zm-6 0h5V5H4v13zM16 5v13h5V5h-5z\"}),'ViewColumn');exports[\"default\"]=_default;;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(_react,\"_react\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/ViewColumn.js\");reactHotLoader.register(_createSvgIcon,\"_createSvgIcon\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/ViewColumn.js\");reactHotLoader.register(_default,\"_default\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/icons/ViewColumn.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9pY29ucy9WaWV3Q29sdW1uLmpzPzJhOTIiXSwibmFtZXMiOlsiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIl9yZWFjdCIsIl9jcmVhdGVTdmdJY29uIiwiX2RlZmF1bHQiLCJjcmVhdGVFbGVtZW50IiwiZCJdLCJtYXBwaW5ncyI6IkFBQUEsOEMsb1JBRUEsR0FBSUEsdUJBQXNCLENBQUdDLG1CQUFPLENBQUMsb0hBQUQsQ0FBcEMsQ0FFQUMsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixDQUErQixZQUEvQixDQUE2QyxDQUMzQ0MsS0FBSyxDQUFFLElBRG9DLENBQTdDLEVBR0FELE9BQU8sV0FBUCxDQUFrQixJQUFLLEVBQXZCLENBRUEsR0FBSUUsT0FBTSxDQUFHTixzQkFBc0IsQ0FBQ0MsbUJBQU8sQ0FBQyw0Q0FBRCxDQUFSLENBQW5DLENBRUEsR0FBSU0sZUFBYyxDQUFHUCxzQkFBc0IsQ0FBQ0MsbUJBQU8sQ0FBQyx1RkFBRCxDQUFSLENBQTNDLENBRUEsR0FBSU8sU0FBUSxDQUFHLENBQUMsRUFBR0QsY0FBYyxXQUFsQixFQUE0QkQsTUFBTSxXQUFOLENBQWVHLGFBQWYsQ0FBNkIsTUFBN0IsQ0FBcUMsQ0FDOUVDLENBQUMsQ0FBRSxrREFEMkUsQ0FBckMsQ0FBNUIsQ0FFWCxZQUZXLENBQWYsQ0FJQU4sT0FBTyxXQUFQLENBQWtCSSxRQUFsQixDLHFLQVJJRixNLHdJQUVBQyxjLGdKQUVBQyxRIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9pY29ucy9WaWV3Q29sdW1uLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX2NyZWF0ZVN2Z0ljb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL2NyZWF0ZVN2Z0ljb25cIikpO1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX2NyZWF0ZVN2Z0ljb24uZGVmYXVsdCkoX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICBkOiBcIk0xMCAxOGg1VjVoLTV2MTN6bS02IDBoNVY1SDR2MTN6TTE2IDV2MTNoNVY1aC01elwiXG59KSwgJ1ZpZXdDb2x1bW4nKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@material-ui/icons/ViewColumn.js\n");

/***/ }),

/***/ "./node_modules/@material-ui/lab/esm/Alert/Alert.js":
/*!**********************************************************!*\
  !*** ./node_modules/@material-ui/lab/esm/Alert/Alert.js ***!
  \**********************************************************/
/*! exports provided: styles, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"styles\", function() { return styles; });\n/* harmony import */ var _babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/objectWithoutProperties */ \"./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ \"./node_modules/@babel/runtime/helpers/esm/extends.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! prop-types */ \"./node_modules/prop-types/index.js\");\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var clsx__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! clsx */ \"./node_modules/clsx/dist/clsx.m.js\");\n/* harmony import */ var _material_ui_core_styles__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @material-ui/core/styles */ \"./node_modules/@material-ui/core/esm/styles/index.js\");\n/* harmony import */ var _material_ui_core_Paper__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @material-ui/core/Paper */ \"./node_modules/@material-ui/core/esm/Paper/index.js\");\n/* harmony import */ var _internal_svg_icons_SuccessOutlined__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../internal/svg-icons/SuccessOutlined */ \"./node_modules/@material-ui/lab/esm/internal/svg-icons/SuccessOutlined.js\");\n/* harmony import */ var _internal_svg_icons_ReportProblemOutlined__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../internal/svg-icons/ReportProblemOutlined */ \"./node_modules/@material-ui/lab/esm/internal/svg-icons/ReportProblemOutlined.js\");\n/* harmony import */ var _internal_svg_icons_ErrorOutline__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../internal/svg-icons/ErrorOutline */ \"./node_modules/@material-ui/lab/esm/internal/svg-icons/ErrorOutline.js\");\n/* harmony import */ var _internal_svg_icons_InfoOutlined__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../internal/svg-icons/InfoOutlined */ \"./node_modules/@material-ui/lab/esm/internal/svg-icons/InfoOutlined.js\");\n/* harmony import */ var _internal_svg_icons_Close__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../internal/svg-icons/Close */ \"./node_modules/@material-ui/lab/esm/internal/svg-icons/Close.js\");\n/* harmony import */ var _material_ui_core_IconButton__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @material-ui/core/IconButton */ \"./node_modules/@material-ui/core/esm/IconButton/index.js\");\n/* harmony import */ var _material_ui_core_utils__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @material-ui/core/utils */ \"./node_modules/@material-ui/core/esm/utils/index.js\");\n(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};var styles=function styles(theme){var getColor=theme.palette.type==='light'?_material_ui_core_styles__WEBPACK_IMPORTED_MODULE_5__[\"darken\"]:_material_ui_core_styles__WEBPACK_IMPORTED_MODULE_5__[\"lighten\"];var getBackgroundColor=theme.palette.type==='light'?_material_ui_core_styles__WEBPACK_IMPORTED_MODULE_5__[\"lighten\"]:_material_ui_core_styles__WEBPACK_IMPORTED_MODULE_5__[\"darken\"];return{/* Styles applied to the root element. */root:Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({},theme.typography.body2,{borderRadius:theme.shape.borderRadius,backgroundColor:'transparent',display:'flex',padding:'6px 16px'}),/* Styles applied to the root element if `variant=\"standard\"` and `color=\"success\"`. */standardSuccess:{color:getColor(theme.palette.success.main,0.6),backgroundColor:getBackgroundColor(theme.palette.success.main,0.9),'& $icon':{color:theme.palette.success.main}},/* Styles applied to the root element if `variant=\"standard\"` and `color=\"info\"`. */standardInfo:{color:getColor(theme.palette.info.main,0.6),backgroundColor:getBackgroundColor(theme.palette.info.main,0.9),'& $icon':{color:theme.palette.info.main}},/* Styles applied to the root element if `variant=\"standard\"` and `color=\"warning\"`. */standardWarning:{color:getColor(theme.palette.warning.main,0.6),backgroundColor:getBackgroundColor(theme.palette.warning.main,0.9),'& $icon':{color:theme.palette.warning.main}},/* Styles applied to the root element if `variant=\"standard\"` and `color=\"error\"`. */standardError:{color:getColor(theme.palette.error.main,0.6),backgroundColor:getBackgroundColor(theme.palette.error.main,0.9),'& $icon':{color:theme.palette.error.main}},/* Styles applied to the root element if `variant=\"outlined\"` and `color=\"success\"`. */outlinedSuccess:{color:getColor(theme.palette.success.main,0.6),border:\"1px solid \".concat(theme.palette.success.main),'& $icon':{color:theme.palette.success.main}},/* Styles applied to the root element if `variant=\"outlined\"` and `color=\"info\"`. */outlinedInfo:{color:getColor(theme.palette.info.main,0.6),border:\"1px solid \".concat(theme.palette.info.main),'& $icon':{color:theme.palette.info.main}},/* Styles applied to the root element if `variant=\"outlined\"` and `color=\"warning\"`. */outlinedWarning:{color:getColor(theme.palette.warning.main,0.6),border:\"1px solid \".concat(theme.palette.warning.main),'& $icon':{color:theme.palette.warning.main}},/* Styles applied to the root element if `variant=\"outlined\"` and `color=\"error\"`. */outlinedError:{color:getColor(theme.palette.error.main,0.6),border:\"1px solid \".concat(theme.palette.error.main),'& $icon':{color:theme.palette.error.main}},/* Styles applied to the root element if `variant=\"filled\"` and `color=\"success\"`. */filledSuccess:{color:'#fff',fontWeight:theme.typography.fontWeightMedium,backgroundColor:theme.palette.success.main},/* Styles applied to the root element if `variant=\"filled\"` and `color=\"info\"`. */filledInfo:{color:'#fff',fontWeight:theme.typography.fontWeightMedium,backgroundColor:theme.palette.info.main},/* Styles applied to the root element if `variant=\"filled\"` and `color=\"warning\"`. */filledWarning:{color:'#fff',fontWeight:theme.typography.fontWeightMedium,backgroundColor:theme.palette.warning.main},/* Styles applied to the root element if `variant=\"filled\"` and `color=\"error\"`. */filledError:{color:'#fff',fontWeight:theme.typography.fontWeightMedium,backgroundColor:theme.palette.error.main},/* Styles applied to the icon wrapper element. */icon:{marginRight:12,padding:'7px 0',display:'flex',fontSize:22,opacity:0.9},/* Styles applied to the message wrapper element. */message:{padding:'8px 0'},/* Styles applied to the action wrapper element if `action` is provided. */action:{display:'flex',alignItems:'center',marginLeft:'auto',paddingLeft:16,marginRight:-8}};};var defaultIconMapping={success:/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_2__[\"createElement\"](_internal_svg_icons_SuccessOutlined__WEBPACK_IMPORTED_MODULE_7__[\"default\"],{fontSize:\"inherit\"}),warning:/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_2__[\"createElement\"](_internal_svg_icons_ReportProblemOutlined__WEBPACK_IMPORTED_MODULE_8__[\"default\"],{fontSize:\"inherit\"}),error:/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_2__[\"createElement\"](_internal_svg_icons_ErrorOutline__WEBPACK_IMPORTED_MODULE_9__[\"default\"],{fontSize:\"inherit\"}),info:/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_2__[\"createElement\"](_internal_svg_icons_InfoOutlined__WEBPACK_IMPORTED_MODULE_10__[\"default\"],{fontSize:\"inherit\"})};var _ref=/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_2__[\"createElement\"](_internal_svg_icons_Close__WEBPACK_IMPORTED_MODULE_11__[\"default\"],{fontSize:\"small\"});var Alert=/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_2__[\"forwardRef\"](function Alert(props,ref){var action=props.action,children=props.children,classes=props.classes,className=props.className,_props$closeText=props.closeText,closeText=_props$closeText===void 0?'Close':_props$closeText,color=props.color,icon=props.icon,_props$iconMapping=props.iconMapping,iconMapping=_props$iconMapping===void 0?defaultIconMapping:_props$iconMapping,onClose=props.onClose,_props$role=props.role,role=_props$role===void 0?'alert':_props$role,_props$severity=props.severity,severity=_props$severity===void 0?'success':_props$severity,_props$variant=props.variant,variant=_props$variant===void 0?'standard':_props$variant,other=Object(_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(props,[\"action\",\"children\",\"classes\",\"className\",\"closeText\",\"color\",\"icon\",\"iconMapping\",\"onClose\",\"role\",\"severity\",\"variant\"]);return/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_2__[\"createElement\"](_material_ui_core_Paper__WEBPACK_IMPORTED_MODULE_6__[\"default\"],Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({role:role,square:true,elevation:0,className:Object(clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(classes.root,classes[\"\".concat(variant).concat(Object(_material_ui_core_utils__WEBPACK_IMPORTED_MODULE_13__[\"capitalize\"])(color||severity))],className),ref:ref},other),icon!==false?/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_2__[\"createElement\"](\"div\",{className:classes.icon},icon||iconMapping[severity]||defaultIconMapping[severity]):null,/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_2__[\"createElement\"](\"div\",{className:classes.message},children),action!=null?/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_2__[\"createElement\"](\"div\",{className:classes.action},action):null,action==null&&onClose?/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_2__[\"createElement\"](\"div\",{className:classes.action},/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_2__[\"createElement\"](_material_ui_core_IconButton__WEBPACK_IMPORTED_MODULE_12__[\"default\"],{size:\"small\",\"aria-label\":closeText,title:closeText,color:\"inherit\",onClick:onClose},_ref)):null);}); true?Alert.propTypes={// ----------------------------- Warning --------------------------------\n// | These PropTypes are generated from the TypeScript type definitions |\n// |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n// ----------------------------------------------------------------------\n/**\n   * The action to display. It renders after the message, at the end of the alert.\n   */action:prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.node,/**\n   * The content of the component.\n   */children:prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.node,/**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */classes:prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.object,/**\n   * @ignore\n   */className:prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.string,/**\n   * Override the default label for the *close popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   */closeText:prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.string,/**\n   * The main color for the alert. Unless provided, the value is taken from the `severity` prop.\n   */color:prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.oneOf(['error','info','success','warning']),/**\n   * Override the icon displayed before the children.\n   * Unless provided, the icon is mapped to the value of the `severity` prop.\n   */icon:prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.node,/**\n   * The component maps the `severity` prop to a range of different icons,\n   * for instance success to `<SuccessOutlined>`.\n   * If you wish to change this mapping, you can provide your own.\n   * Alternatively, you can use the `icon` prop to override the icon displayed.\n   */iconMapping:prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.shape({error:prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.node,info:prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.node,success:prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.node,warning:prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.node}),/**\n   * Callback fired when the component requests to be closed.\n   * When provided and no `action` prop is set, a close icon button is displayed that triggers the callback when clicked.\n   *\n   * @param {object} event The event source of the callback.\n   */onClose:prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.func,/**\n   * The ARIA role attribute of the element.\n   */role:prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.string,/**\n   * The severity of the alert. This defines the color and icon used.\n   */severity:prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.oneOf(['error','info','success','warning']),/**\n   * The variant to use.\n   */variant:prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.oneOf(['filled','outlined','standard'])}:undefined;var _default=Object(_material_ui_core_styles__WEBPACK_IMPORTED_MODULE_5__[\"withStyles\"])(styles,{name:'MuiAlert'})(Alert);/* harmony default export */ __webpack_exports__[\"default\"] = (_default);;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(styles,\"styles\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/lab/esm/Alert/Alert.js\");reactHotLoader.register(defaultIconMapping,\"defaultIconMapping\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/lab/esm/Alert/Alert.js\");reactHotLoader.register(_ref,\"_ref\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/lab/esm/Alert/Alert.js\");reactHotLoader.register(Alert,\"Alert\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/lab/esm/Alert/Alert.js\");reactHotLoader.register(_default,\"default\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/lab/esm/Alert/Alert.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@material-ui/lab/esm/Alert/Alert.js\n");

/***/ }),

/***/ "./node_modules/@material-ui/lab/esm/Alert/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@material-ui/lab/esm/Alert/index.js ***!
  \**********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Alert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Alert */ \"./node_modules/@material-ui/lab/esm/Alert/Alert.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return _Alert__WEBPACK_IMPORTED_MODULE_0__[\"default\"]; });\n\nvar __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvbGFiL2VzbS9BbGVydC9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@material-ui/lab/esm/Alert/index.js\n");

/***/ }),

/***/ "./node_modules/@material-ui/lab/esm/internal/svg-icons/ErrorOutline.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@material-ui/lab/esm/internal/svg-icons/ErrorOutline.js ***!
  \******************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _material_ui_core_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @material-ui/core/utils */ \"./node_modules/@material-ui/core/esm/utils/index.js\");\n(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};/**\n * @ignore - internal component.\n */var _default=Object(_material_ui_core_utils__WEBPACK_IMPORTED_MODULE_1__[\"createSvgIcon\"])(/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"](\"path\",{d:\"M11 15h2v2h-2zm0-8h2v6h-2zm.99-5C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z\"}),'ErrorOutline');/* harmony default export */ __webpack_exports__[\"default\"] = (_default);;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(_default,\"default\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/lab/esm/internal/svg-icons/ErrorOutline.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9sYWIvZXNtL2ludGVybmFsL3N2Zy1pY29ucy9FcnJvck91dGxpbmUuanM/MDJlMiJdLCJuYW1lcyI6WyJjcmVhdGVTdmdJY29uIiwiUmVhY3QiLCJkIl0sIm1hcHBpbmdzIjoiOzs7O29SQUVBOztnQkFJZUEsNkVBQWEsQ0FBRSxhQUFhQyxtREFBQSxDQUFvQixNQUFwQixDQUE0QixDQUNyRUMsQ0FBQyxDQUFFLHlLQURrRSxDQUE1QixDQUFmLENBRXhCLGNBRndCLEMsQ0FBYix5RSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvbGFiL2VzbS9pbnRlcm5hbC9zdmctaWNvbnMvRXJyb3JPdXRsaW5lLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY3JlYXRlU3ZnSWNvbiB9IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL3V0aWxzJztcbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVTdmdJY29uKCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICBkOiBcIk0xMSAxNWgydjJoLTJ6bTAtOGgydjZoLTJ6bS45OS01QzYuNDcgMiAyIDYuNDggMiAxMnM0LjQ3IDEwIDkuOTkgMTBDMTcuNTIgMjIgMjIgMTcuNTIgMjIgMTJTMTcuNTIgMiAxMS45OSAyek0xMiAyMGMtNC40MiAwLTgtMy41OC04LThzMy41OC04IDgtOCA4IDMuNTggOCA4LTMuNTggOC04IDh6XCJcbn0pLCAnRXJyb3JPdXRsaW5lJyk7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@material-ui/lab/esm/internal/svg-icons/ErrorOutline.js\n");

/***/ }),

/***/ "./node_modules/@material-ui/lab/esm/internal/svg-icons/InfoOutlined.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@material-ui/lab/esm/internal/svg-icons/InfoOutlined.js ***!
  \******************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _material_ui_core_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @material-ui/core/utils */ \"./node_modules/@material-ui/core/esm/utils/index.js\");\n(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};/**\n * @ignore - internal component.\n */var _default=Object(_material_ui_core_utils__WEBPACK_IMPORTED_MODULE_1__[\"createSvgIcon\"])(/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"](\"path\",{d:\"M11,9H13V7H11M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20, 12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10, 10 0 0,0 12,2M11,17H13V11H11V17Z\"}),'InfoOutlined');/* harmony default export */ __webpack_exports__[\"default\"] = (_default);;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(_default,\"default\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/lab/esm/internal/svg-icons/InfoOutlined.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9sYWIvZXNtL2ludGVybmFsL3N2Zy1pY29ucy9JbmZvT3V0bGluZWQuanM/OGQzNSJdLCJuYW1lcyI6WyJjcmVhdGVTdmdJY29uIiwiUmVhY3QiLCJkIl0sIm1hcHBpbmdzIjoiOzs7O29SQUVBOztnQkFJZUEsNkVBQWEsQ0FBRSxhQUFhQyxtREFBQSxDQUFvQixNQUFwQixDQUE0QixDQUNyRUMsQ0FBQyxDQUFFLDJNQURrRSxDQUE1QixDQUFmLENBRXhCLGNBRndCLEMsQ0FBYix5RSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvbGFiL2VzbS9pbnRlcm5hbC9zdmctaWNvbnMvSW5mb091dGxpbmVkLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY3JlYXRlU3ZnSWNvbiB9IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL3V0aWxzJztcbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVTdmdJY29uKCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICBkOiBcIk0xMSw5SDEzVjdIMTFNMTIsMjBDNy41OSwyMCA0LDE2LjQxIDQsMTJDNCw3LjU5IDcuNTksNCAxMiw0QzE2LjQxLDQgMjAsNy41OSAyMCwgMTJDMjAsMTYuNDEgMTYuNDEsMjAgMTIsMjBNMTIsMkExMCwxMCAwIDAsMCAyLDEyQTEwLDEwIDAgMCwwIDEyLDIyQTEwLDEwIDAgMCwwIDIyLDEyQTEwLCAxMCAwIDAsMCAxMiwyTTExLDE3SDEzVjExSDExVjE3WlwiXG59KSwgJ0luZm9PdXRsaW5lZCcpOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@material-ui/lab/esm/internal/svg-icons/InfoOutlined.js\n");

/***/ }),

/***/ "./node_modules/@material-ui/lab/esm/internal/svg-icons/ReportProblemOutlined.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@material-ui/lab/esm/internal/svg-icons/ReportProblemOutlined.js ***!
  \***************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _material_ui_core_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @material-ui/core/utils */ \"./node_modules/@material-ui/core/esm/utils/index.js\");\n(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};/**\n * @ignore - internal component.\n */var _default=Object(_material_ui_core_utils__WEBPACK_IMPORTED_MODULE_1__[\"createSvgIcon\"])(/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"](\"path\",{d:\"M12 5.99L19.53 19H4.47L12 5.99M12 2L1 21h22L12 2zm1 14h-2v2h2v-2zm0-6h-2v4h2v-4z\"}),'ReportProblemOutlined');/* harmony default export */ __webpack_exports__[\"default\"] = (_default);;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(_default,\"default\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/lab/esm/internal/svg-icons/ReportProblemOutlined.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9sYWIvZXNtL2ludGVybmFsL3N2Zy1pY29ucy9SZXBvcnRQcm9ibGVtT3V0bGluZWQuanM/YWI1ZSJdLCJuYW1lcyI6WyJjcmVhdGVTdmdJY29uIiwiUmVhY3QiLCJkIl0sIm1hcHBpbmdzIjoiOzs7O29SQUVBOztnQkFJZUEsNkVBQWEsQ0FBRSxhQUFhQyxtREFBQSxDQUFvQixNQUFwQixDQUE0QixDQUNyRUMsQ0FBQyxDQUFFLGtGQURrRSxDQUE1QixDQUFmLENBRXhCLHVCQUZ3QixDLENBQWIseUUiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2xhYi9lc20vaW50ZXJuYWwvc3ZnLWljb25zL1JlcG9ydFByb2JsZW1PdXRsaW5lZC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNyZWF0ZVN2Z0ljb24gfSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS91dGlscyc7XG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlU3ZnSWNvbiggLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgZDogXCJNMTIgNS45OUwxOS41MyAxOUg0LjQ3TDEyIDUuOTlNMTIgMkwxIDIxaDIyTDEyIDJ6bTEgMTRoLTJ2Mmgydi0yem0wLTZoLTJ2NGgydi00elwiXG59KSwgJ1JlcG9ydFByb2JsZW1PdXRsaW5lZCcpOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@material-ui/lab/esm/internal/svg-icons/ReportProblemOutlined.js\n");

/***/ }),

/***/ "./node_modules/@material-ui/lab/esm/internal/svg-icons/SuccessOutlined.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@material-ui/lab/esm/internal/svg-icons/SuccessOutlined.js ***!
  \*********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _material_ui_core_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @material-ui/core/utils */ \"./node_modules/@material-ui/core/esm/utils/index.js\");\n(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};/**\n * @ignore - internal component.\n */var _default=Object(_material_ui_core_utils__WEBPACK_IMPORTED_MODULE_1__[\"createSvgIcon\"])(/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"](\"path\",{d:\"M20,12A8,8 0 0,1 12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4C12.76,4 13.5,4.11 14.2, 4.31L15.77,2.74C14.61,2.26 13.34,2 12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0, 0 22,12M7.91,10.08L6.5,11.5L11,16L21,6L19.59,4.58L11,13.17L7.91,10.08Z\"}),'SuccessOutlined');/* harmony default export */ __webpack_exports__[\"default\"] = (_default);;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(_default,\"default\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/@material-ui/lab/esm/internal/svg-icons/SuccessOutlined.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9sYWIvZXNtL2ludGVybmFsL3N2Zy1pY29ucy9TdWNjZXNzT3V0bGluZWQuanM/M2Y1OCJdLCJuYW1lcyI6WyJjcmVhdGVTdmdJY29uIiwiUmVhY3QiLCJkIl0sIm1hcHBpbmdzIjoiOzs7O29SQUVBOztnQkFJZUEsNkVBQWEsQ0FBRSxhQUFhQyxtREFBQSxDQUFvQixNQUFwQixDQUE0QixDQUNyRUMsQ0FBQyxDQUFFLDJPQURrRSxDQUE1QixDQUFmLENBRXhCLGlCQUZ3QixDLENBQWIseUUiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2xhYi9lc20vaW50ZXJuYWwvc3ZnLWljb25zL1N1Y2Nlc3NPdXRsaW5lZC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNyZWF0ZVN2Z0ljb24gfSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS91dGlscyc7XG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlU3ZnSWNvbiggLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgZDogXCJNMjAsMTJBOCw4IDAgMCwxIDEyLDIwQTgsOCAwIDAsMSA0LDEyQTgsOCAwIDAsMSAxMiw0QzEyLjc2LDQgMTMuNSw0LjExIDE0LjIsIDQuMzFMMTUuNzcsMi43NEMxNC42MSwyLjI2IDEzLjM0LDIgMTIsMkExMCwxMCAwIDAsMCAyLDEyQTEwLDEwIDAgMCwwIDEyLDIyQTEwLDEwIDAgMCwgMCAyMiwxMk03LjkxLDEwLjA4TDYuNSwxMS41TDExLDE2TDIxLDZMMTkuNTksNC41OEwxMSwxMy4xN0w3LjkxLDEwLjA4WlwiXG59KSwgJ1N1Y2Nlc3NPdXRsaW5lZCcpOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@material-ui/lab/esm/internal/svg-icons/SuccessOutlined.js\n");

/***/ }),

/***/ "./node_modules/copy-to-clipboard/index.js":
/*!*************************************************!*\
  !*** ./node_modules/copy-to-clipboard/index.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};var deselectCurrent=__webpack_require__(/*! toggle-selection */ \"./node_modules/toggle-selection/index.js\");var clipboardToIE11Formatting={\"text/plain\":\"Text\",\"text/html\":\"Url\",\"default\":\"Text\"};var defaultMessage=\"Copy to clipboard: #{key}, Enter\";function format(message){var copyKey=(/mac os x/i.test(navigator.userAgent)?\"⌘\":\"Ctrl\")+\"+C\";return message.replace(/#{\\s*key\\s*}/g,copyKey);}function copy(text,options){var debug,message,reselectPrevious,range,selection,mark,success=false;if(!options){options={};}debug=options.debug||false;try{reselectPrevious=deselectCurrent();range=document.createRange();selection=document.getSelection();mark=document.createElement(\"span\");mark.textContent=text;// reset user styles for span element\nmark.style.all=\"unset\";// prevents scrolling to the end of the page\nmark.style.position=\"fixed\";mark.style.top=0;mark.style.clip=\"rect(0, 0, 0, 0)\";// used to preserve spaces and line breaks\nmark.style.whiteSpace=\"pre\";// do not inherit user-select (it may be `none`)\nmark.style.webkitUserSelect=\"text\";mark.style.MozUserSelect=\"text\";mark.style.msUserSelect=\"text\";mark.style.userSelect=\"text\";mark.addEventListener(\"copy\",function(e){e.stopPropagation();if(options.format){e.preventDefault();if(typeof e.clipboardData===\"undefined\"){// IE 11\ndebug&&console.warn(\"unable to use e.clipboardData\");debug&&console.warn(\"trying IE specific stuff\");window.clipboardData.clearData();var format=clipboardToIE11Formatting[options.format]||clipboardToIE11Formatting[\"default\"];window.clipboardData.setData(format,text);}else{// all other browsers\ne.clipboardData.clearData();e.clipboardData.setData(options.format,text);}}if(options.onCopy){e.preventDefault();options.onCopy(e.clipboardData);}});document.body.appendChild(mark);range.selectNodeContents(mark);selection.addRange(range);var successful=document.execCommand(\"copy\");if(!successful){throw new Error(\"copy command was unsuccessful\");}success=true;}catch(err){debug&&console.error(\"unable to copy using execCommand: \",err);debug&&console.warn(\"trying IE specific stuff\");try{window.clipboardData.setData(options.format||\"text\",text);options.onCopy&&options.onCopy(window.clipboardData);success=true;}catch(err){debug&&console.error(\"unable to copy using clipboardData: \",err);debug&&console.error(\"falling back to prompt\");message=format(\"message\"in options?options.message:defaultMessage);window.prompt(message,text);}}finally{if(selection){if(typeof selection.removeRange==\"function\"){selection.removeRange(range);}else{selection.removeAllRanges();}}if(mark){document.body.removeChild(mark);}reselectPrevious();}return success;}module.exports=copy;;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(clipboardToIE11Formatting,\"clipboardToIE11Formatting\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/copy-to-clipboard/index.js\");reactHotLoader.register(defaultMessage,\"defaultMessage\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/copy-to-clipboard/index.js\");reactHotLoader.register(format,\"format\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/copy-to-clipboard/index.js\");reactHotLoader.register(copy,\"copy\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/copy-to-clipboard/index.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/copy-to-clipboard/index.js\n");

/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/react-mosaic-component/react-mosaic-component.css":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/react-mosaic-component/react-mosaic-component.css ***!
  \**************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// Imports\nvar ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../css-loader/dist/runtime/api.js */ \"./node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.i, \"/**\\n * @license\\n * Copyright 2019 Kevin Verdieck, originally developed at Palantir Technologies, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *     http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n.mosaic {\\n  height: 100%;\\n  width: 100%;\\n}\\n.mosaic,\\n.mosaic > * {\\n  box-sizing: border-box;\\n}\\n.mosaic .mosaic-zero-state {\\n  position: absolute;\\n  top: 6px;\\n  right: 6px;\\n  bottom: 6px;\\n  left: 6px;\\n  width: auto;\\n  height: auto;\\n  z-index: 1;\\n}\\n.mosaic-root {\\n  position: absolute;\\n  top: 3px;\\n  right: 3px;\\n  bottom: 3px;\\n  left: 3px;\\n}\\n.mosaic-split {\\n  position: absolute;\\n  z-index: 1;\\n  touch-action: none;\\n}\\n.mosaic-split:hover {\\n  background: black;\\n}\\n.mosaic-split .mosaic-split-line {\\n  position: absolute;\\n}\\n.mosaic-split.-row {\\n  margin-left: -3px;\\n  width: 6px;\\n  cursor: ew-resize;\\n}\\n.mosaic-split.-row .mosaic-split-line {\\n  top: 0;\\n  bottom: 0;\\n  left: 3px;\\n  right: 3px;\\n}\\n.mosaic-split.-column {\\n  margin-top: -3px;\\n  height: 6px;\\n  cursor: ns-resize;\\n}\\n.mosaic-split.-column .mosaic-split-line {\\n  top: 3px;\\n  bottom: 3px;\\n  left: 0;\\n  right: 0;\\n}\\n.mosaic-tile {\\n  position: absolute;\\n  margin: 3px;\\n}\\n.mosaic-tile > * {\\n  height: 100%;\\n  width: 100%;\\n}\\n.mosaic-drop-target {\\n  position: relative;\\n}\\n.mosaic-drop-target.drop-target-hover .drop-target-container {\\n  display: block;\\n}\\n.mosaic-drop-target.mosaic > .drop-target-container .drop-target.left {\\n  right: calc(100% -  10px );\\n}\\n.mosaic-drop-target.mosaic > .drop-target-container .drop-target.right {\\n  left: calc(100% -  10px );\\n}\\n.mosaic-drop-target.mosaic > .drop-target-container .drop-target.bottom {\\n  top: calc(100% -  10px );\\n}\\n.mosaic-drop-target.mosaic > .drop-target-container .drop-target.top {\\n  bottom: calc(100% -  10px );\\n}\\n.mosaic-drop-target .drop-target-container {\\n  position: absolute;\\n  top: 0;\\n  right: 0;\\n  bottom: 0;\\n  left: 0;\\n  display: none;\\n}\\n.mosaic-drop-target .drop-target-container.-dragging {\\n  display: block;\\n}\\n.mosaic-drop-target .drop-target-container .drop-target {\\n  position: absolute;\\n  top: 0;\\n  right: 0;\\n  bottom: 0;\\n  left: 0;\\n  background: rgba(0, 0, 0, 0.2);\\n  border: 2px solid black;\\n  opacity: 0;\\n  z-index: 5;\\n}\\n.mosaic-drop-target .drop-target-container .drop-target.left {\\n  right: calc(100% -  30% );\\n}\\n.mosaic-drop-target .drop-target-container .drop-target.right {\\n  left: calc(100% -  30% );\\n}\\n.mosaic-drop-target .drop-target-container .drop-target.bottom {\\n  top: calc(100% -  30% );\\n}\\n.mosaic-drop-target .drop-target-container .drop-target.top {\\n  bottom: calc(100% -  30% );\\n}\\n.mosaic-drop-target .drop-target-container .drop-target.drop-target-hover {\\n  opacity: 1;\\n}\\n.mosaic-drop-target .drop-target-container .drop-target.drop-target-hover.left {\\n  right: calc(100% -  50% );\\n}\\n.mosaic-drop-target .drop-target-container .drop-target.drop-target-hover.right {\\n  left: calc(100% -  50% );\\n}\\n.mosaic-drop-target .drop-target-container .drop-target.drop-target-hover.bottom {\\n  top: calc(100% -  50% );\\n}\\n.mosaic-drop-target .drop-target-container .drop-target.drop-target-hover.top {\\n  bottom: calc(100% -  50% );\\n}\\n.mosaic-window,\\n.mosaic-preview {\\n  position: relative;\\n  display: -webkit-box;\\n  display: flex;\\n  -webkit-box-orient: vertical;\\n  -webkit-box-direction: normal;\\n          flex-direction: column;\\n  overflow: hidden;\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0.2);\\n}\\n.mosaic-window .mosaic-window-toolbar,\\n.mosaic-preview .mosaic-window-toolbar {\\n  z-index: 4;\\n  display: -webkit-box;\\n  display: flex;\\n  -webkit-box-pack: justify;\\n          justify-content: space-between;\\n  -webkit-box-align: center;\\n          align-items: center;\\n  flex-shrink: 0;\\n  height: 30px;\\n  background: white;\\n  box-shadow: 0 1px 1px rgba(0, 0, 0, 0.2);\\n}\\n.mosaic-window .mosaic-window-toolbar.draggable,\\n.mosaic-preview .mosaic-window-toolbar.draggable {\\n  cursor: move;\\n}\\n.mosaic-window .mosaic-window-title,\\n.mosaic-preview .mosaic-window-title {\\n  padding-left: 15px;\\n  -webkit-box-flex: 1;\\n          flex: 1;\\n  text-overflow: ellipsis;\\n  white-space: nowrap;\\n  overflow: hidden;\\n  min-height: 18px;\\n}\\n.mosaic-window .mosaic-window-controls,\\n.mosaic-preview .mosaic-window-controls {\\n  display: -webkit-box;\\n  display: flex;\\n  height: 100%;\\n}\\n.mosaic-window .mosaic-window-controls .separator,\\n.mosaic-preview .mosaic-window-controls .separator {\\n  height: 20px;\\n  border-left: 1px solid black;\\n  margin: 5px 4px;\\n}\\n.mosaic-window .mosaic-window-body,\\n.mosaic-preview .mosaic-window-body {\\n  position: relative;\\n  -webkit-box-flex: 1;\\n          flex: 1;\\n  height: 0;\\n  background: white;\\n  z-index: 1;\\n  overflow: hidden;\\n}\\n.mosaic-window .mosaic-window-additional-actions-bar,\\n.mosaic-preview .mosaic-window-additional-actions-bar {\\n  position: absolute;\\n  top: 30px;\\n  right: 0;\\n  bottom: initial;\\n  left: 0;\\n  height: 0;\\n  overflow: hidden;\\n  background: white;\\n  -webkit-box-pack: end;\\n          justify-content: flex-end;\\n  display: -webkit-box;\\n  display: flex;\\n  z-index: 3;\\n}\\n.mosaic-window .mosaic-window-additional-actions-bar .bp3-button,\\n.mosaic-preview .mosaic-window-additional-actions-bar .bp3-button {\\n  margin: 0;\\n}\\n.mosaic-window .mosaic-window-additional-actions-bar .bp3-button:after,\\n.mosaic-preview .mosaic-window-additional-actions-bar .bp3-button:after {\\n  display: none;\\n}\\n.mosaic-window .mosaic-window-body-overlay,\\n.mosaic-preview .mosaic-window-body-overlay {\\n  position: absolute;\\n  top: 0;\\n  right: 0;\\n  bottom: 0;\\n  left: 0;\\n  opacity: 0;\\n  background: white;\\n  display: none;\\n  z-index: 2;\\n}\\n.mosaic-window.additional-controls-open .mosaic-window-additional-actions-bar,\\n.mosaic-preview.additional-controls-open .mosaic-window-additional-actions-bar {\\n  height: 30px;\\n}\\n.mosaic-window.additional-controls-open .mosaic-window-body-overlay,\\n.mosaic-preview.additional-controls-open .mosaic-window-body-overlay {\\n  display: block;\\n}\\n.mosaic-window .mosaic-preview,\\n.mosaic-preview .mosaic-preview {\\n  height: 100%;\\n  width: 100%;\\n  position: absolute;\\n  z-index: 0;\\n  border: 1px solid black;\\n  max-height: 400px;\\n}\\n.mosaic-window .mosaic-preview .mosaic-window-body,\\n.mosaic-preview .mosaic-preview .mosaic-window-body {\\n  display: -webkit-box;\\n  display: flex;\\n  -webkit-box-orient: vertical;\\n  -webkit-box-direction: normal;\\n          flex-direction: column;\\n  -webkit-box-align: center;\\n          align-items: center;\\n  -webkit-box-pack: center;\\n          justify-content: center;\\n}\\n.mosaic-window .mosaic-preview h4,\\n.mosaic-preview .mosaic-preview h4 {\\n  margin-bottom: 10px;\\n}\\n.mosaic:not(.mosaic-blueprint-theme) .mosaic-default-control.close-button:before {\\n  content: 'Close';\\n}\\n.mosaic:not(.mosaic-blueprint-theme) .mosaic-default-control.split-button:before {\\n  content: 'Split';\\n}\\n.mosaic:not(.mosaic-blueprint-theme) .mosaic-default-control.replace-button:before {\\n  content: 'Replace';\\n}\\n.mosaic:not(.mosaic-blueprint-theme) .mosaic-default-control.expand-button:before {\\n  content: 'Expand';\\n}\\n.mosaic.mosaic-blueprint-theme {\\n  background: #a7b6c2;\\n}\\n.mosaic.mosaic-blueprint-theme .mosaic-zero-state {\\n  background: #e1e8ed;\\n  border-radius: 3px;\\n  box-shadow: 0 0 0 1px rgba(16, 22, 26, 0.15), 0 0 0 rgba(16, 22, 26, 0), 0 0 0 rgba(16, 22, 26, 0);\\n}\\n.mosaic.mosaic-blueprint-theme .mosaic-split:hover {\\n  background: none;\\n}\\n.mosaic.mosaic-blueprint-theme .mosaic-split:hover .mosaic-split-line {\\n  box-shadow: 0 0 0 1px #2b95d6;\\n}\\n.mosaic.mosaic-blueprint-theme.mosaic-drop-target .drop-target-container .drop-target,\\n.mosaic.mosaic-blueprint-theme .mosaic-drop-target .drop-target-container .drop-target {\\n  background: rgba(72, 175, 240, 0.2);\\n  border: 2px solid #2b95d6;\\n  -webkit-transition: opacity 100ms;\\n  transition: opacity 100ms;\\n  border-radius: 3px;\\n}\\n.mosaic.mosaic-blueprint-theme .mosaic-window,\\n.mosaic.mosaic-blueprint-theme .mosaic-preview {\\n  box-shadow: 0 0 0 1px rgba(16, 22, 26, 0.15), 0 0 0 rgba(16, 22, 26, 0), 0 0 0 rgba(16, 22, 26, 0);\\n  border-radius: 3px;\\n}\\n.mosaic.mosaic-blueprint-theme .mosaic-window .mosaic-window-toolbar,\\n.mosaic.mosaic-blueprint-theme .mosaic-preview .mosaic-window-toolbar {\\n  box-shadow: 0 1px 1px rgba(16, 22, 26, 0.15);\\n  border-top-right-radius: 3px;\\n  border-top-left-radius: 3px;\\n}\\n.mosaic.mosaic-blueprint-theme .mosaic-window .mosaic-window-toolbar.draggable:hover,\\n.mosaic.mosaic-blueprint-theme .mosaic-preview .mosaic-window-toolbar.draggable:hover {\\n  background: -webkit-gradient(linear, left top, left bottom, from(#ffffff), to(#f5f8fa));\\n  background: linear-gradient(to bottom, #ffffff, #f5f8fa);\\n}\\n.mosaic.mosaic-blueprint-theme .mosaic-window .mosaic-window-toolbar.draggable:hover .mosaic-window-title,\\n.mosaic.mosaic-blueprint-theme .mosaic-preview .mosaic-window-toolbar.draggable:hover .mosaic-window-title {\\n  color: #10161a;\\n}\\n.mosaic.mosaic-blueprint-theme .mosaic-window .mosaic-window-title,\\n.mosaic.mosaic-blueprint-theme .mosaic-preview .mosaic-window-title {\\n  font-weight: 600;\\n  color: #394b59;\\n}\\n.mosaic.mosaic-blueprint-theme .mosaic-window .mosaic-window-controls .separator,\\n.mosaic.mosaic-blueprint-theme .mosaic-preview .mosaic-window-controls .separator {\\n  border-left: 1px solid #d8e1e8;\\n}\\n.mosaic.mosaic-blueprint-theme .mosaic-window .mosaic-window-controls .bp3-button,\\n.mosaic.mosaic-blueprint-theme .mosaic-preview .mosaic-window-controls .bp3-button,\\n.mosaic.mosaic-blueprint-theme .mosaic-window .mosaic-window-controls .bp3-button:before,\\n.mosaic.mosaic-blueprint-theme .mosaic-preview .mosaic-window-controls .bp3-button:before {\\n  color: #738694;\\n}\\n.mosaic.mosaic-blueprint-theme .mosaic-window .mosaic-window-body,\\n.mosaic.mosaic-blueprint-theme .mosaic-preview .mosaic-window-body {\\n  border-top-width: 0;\\n  background: #f5f8fa;\\n  border-bottom-right-radius: 3px;\\n  border-bottom-left-radius: 3px;\\n}\\n.mosaic.mosaic-blueprint-theme .mosaic-window .mosaic-window-additional-actions-bar,\\n.mosaic.mosaic-blueprint-theme .mosaic-preview .mosaic-window-additional-actions-bar {\\n  -webkit-transition: height 250ms;\\n  transition: height 250ms;\\n  box-shadow: 0 1px 1px rgba(16, 22, 26, 0.15);\\n}\\n.mosaic.mosaic-blueprint-theme .mosaic-window .mosaic-window-additional-actions-bar .bp3-button,\\n.mosaic.mosaic-blueprint-theme .mosaic-preview .mosaic-window-additional-actions-bar .bp3-button,\\n.mosaic.mosaic-blueprint-theme .mosaic-window .mosaic-window-additional-actions-bar .bp3-button:before,\\n.mosaic.mosaic-blueprint-theme .mosaic-preview .mosaic-window-additional-actions-bar .bp3-button:before {\\n  color: #738694;\\n}\\n.mosaic.mosaic-blueprint-theme .mosaic-window.additional-controls-open .mosaic-window-toolbar,\\n.mosaic.mosaic-blueprint-theme .mosaic-preview.additional-controls-open .mosaic-window-toolbar {\\n  box-shadow: 0 1px 0 0 0 0 1px rgba(16, 22, 26, 0.15), 0 0 0 rgba(16, 22, 26, 0), 0 0 0 rgba(16, 22, 26, 0);\\n}\\n.mosaic.mosaic-blueprint-theme .mosaic-window .mosaic-preview,\\n.mosaic.mosaic-blueprint-theme .mosaic-preview .mosaic-preview {\\n  border: 1px solid #8a9ba8;\\n}\\n.mosaic.mosaic-blueprint-theme .mosaic-window .mosaic-preview h4,\\n.mosaic.mosaic-blueprint-theme .mosaic-preview .mosaic-preview h4 {\\n  color: #394b59;\\n}\\n.mosaic.mosaic-blueprint-theme.bp3-dark {\\n  background: #202b33;\\n}\\n.mosaic.mosaic-blueprint-theme.bp3-dark .mosaic-zero-state {\\n  background: #30404d;\\n  box-shadow: 0 0 0 1px rgba(16, 22, 26, 0.4), 0 0 0 rgba(16, 22, 26, 0), 0 0 0 rgba(16, 22, 26, 0);\\n}\\n.mosaic.mosaic-blueprint-theme.bp3-dark .mosaic-split:hover .mosaic-split-line {\\n  box-shadow: 0 0 0 1px #137cbd;\\n}\\n.mosaic.mosaic-blueprint-theme.bp3-dark.mosaic-drop-target .drop-target-container .drop-target,\\n.mosaic.mosaic-blueprint-theme.bp3-dark .mosaic-drop-target .drop-target-container .drop-target {\\n  background: rgba(16, 107, 163, 0.2);\\n  border-color: #137cbd;\\n}\\n.mosaic.mosaic-blueprint-theme.bp3-dark .mosaic-window-toolbar,\\n.mosaic.mosaic-blueprint-theme.bp3-dark .mosaic-window-additional-actions-bar {\\n  background: #30404d;\\n  box-shadow: 0 1px 1px rgba(16, 22, 26, 0.4);\\n}\\n.mosaic.mosaic-blueprint-theme.bp3-dark .mosaic-window,\\n.mosaic.mosaic-blueprint-theme.bp3-dark .mosaic-preview {\\n  box-shadow: 0 0 0 1px rgba(16, 22, 26, 0.4), 0 0 0 rgba(16, 22, 26, 0), 0 0 0 rgba(16, 22, 26, 0);\\n}\\n.mosaic.mosaic-blueprint-theme.bp3-dark .mosaic-window .mosaic-window-toolbar.draggable:hover,\\n.mosaic.mosaic-blueprint-theme.bp3-dark .mosaic-preview .mosaic-window-toolbar.draggable:hover {\\n  background: -webkit-gradient(linear, left top, left bottom, from(#394b59), to(#30404d));\\n  background: linear-gradient(to bottom, #394b59, #30404d);\\n}\\n.mosaic.mosaic-blueprint-theme.bp3-dark .mosaic-window .mosaic-window-toolbar.draggable:hover .mosaic-window-title,\\n.mosaic.mosaic-blueprint-theme.bp3-dark .mosaic-preview .mosaic-window-toolbar.draggable:hover .mosaic-window-title {\\n  color: #ffffff;\\n}\\n.mosaic.mosaic-blueprint-theme.bp3-dark .mosaic-window .mosaic-window-title,\\n.mosaic.mosaic-blueprint-theme.bp3-dark .mosaic-preview .mosaic-window-title {\\n  color: #d8e1e8;\\n}\\n.mosaic.mosaic-blueprint-theme.bp3-dark .mosaic-window .mosaic-window-controls .separator,\\n.mosaic.mosaic-blueprint-theme.bp3-dark .mosaic-preview .mosaic-window-controls .separator {\\n  border-color: #5c7080;\\n}\\n.mosaic.mosaic-blueprint-theme.bp3-dark .mosaic-window .mosaic-window-controls .bp3-button,\\n.mosaic.mosaic-blueprint-theme.bp3-dark .mosaic-preview .mosaic-window-controls .bp3-button,\\n.mosaic.mosaic-blueprint-theme.bp3-dark .mosaic-window .mosaic-window-controls .bp3-button:before,\\n.mosaic.mosaic-blueprint-theme.bp3-dark .mosaic-preview .mosaic-window-controls .bp3-button:before {\\n  color: #a7b6c2;\\n}\\n.mosaic.mosaic-blueprint-theme.bp3-dark .mosaic-window .mosaic-window-body,\\n.mosaic.mosaic-blueprint-theme.bp3-dark .mosaic-preview .mosaic-window-body {\\n  background: #293742;\\n}\\n.mosaic.mosaic-blueprint-theme.bp3-dark .mosaic-window .mosaic-window-additional-actions-bar .bp3-button,\\n.mosaic.mosaic-blueprint-theme.bp3-dark .mosaic-preview .mosaic-window-additional-actions-bar .bp3-button,\\n.mosaic.mosaic-blueprint-theme.bp3-dark .mosaic-window .mosaic-window-additional-actions-bar .bp3-button:before,\\n.mosaic.mosaic-blueprint-theme.bp3-dark .mosaic-preview .mosaic-window-additional-actions-bar .bp3-button:before {\\n  color: #bfccd6;\\n}\\n.mosaic.mosaic-blueprint-theme.bp3-dark .mosaic-window.additional-controls-open .mosaic-window-toolbar,\\n.mosaic.mosaic-blueprint-theme.bp3-dark .mosaic-preview.additional-controls-open .mosaic-window-toolbar {\\n  box-shadow: 0 0 0 1px rgba(16, 22, 26, 0.4), 0 0 0 rgba(16, 22, 26, 0), 0 0 0 rgba(16, 22, 26, 0);\\n}\\n.mosaic.mosaic-blueprint-theme.bp3-dark .mosaic-window .mosaic-preview,\\n.mosaic.mosaic-blueprint-theme.bp3-dark .mosaic-preview .mosaic-preview {\\n  border-color: #5c7080;\\n}\\n.mosaic.mosaic-blueprint-theme.bp3-dark .mosaic-window .mosaic-preview h4,\\n.mosaic.mosaic-blueprint-theme.bp3-dark .mosaic-preview .mosaic-preview h4 {\\n  color: #ebf1f5;\\n}\", \"\"]);\n// Exports\nmodule.exports = exports;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/css-loader/dist/cjs.js!./node_modules/react-mosaic-component/react-mosaic-component.css\n");

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/ // css base code, injected by the css-loader\n// eslint-disable-next-line func-names\n(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};module.exports=function(useSourceMap){var list=[];// return the list of modules as css string\nlist.toString=function toString(){return this.map(function(item){var content=cssWithMappingToString(item,useSourceMap);if(item[2]){return\"@media \".concat(item[2],\" {\").concat(content,\"}\");}return content;}).join('');};// import a list of modules into the list\n// eslint-disable-next-line func-names\nlist.i=function(modules,mediaQuery,dedupe){if(typeof modules==='string'){// eslint-disable-next-line no-param-reassign\nmodules=[[null,modules,'']];}var alreadyImportedModules={};if(dedupe){for(var i=0;i<this.length;i++){// eslint-disable-next-line prefer-destructuring\nvar id=this[i][0];if(id!=null){alreadyImportedModules[id]=true;}}}for(var _i=0;_i<modules.length;_i++){var item=[].concat(modules[_i]);if(dedupe&&alreadyImportedModules[item[0]]){// eslint-disable-next-line no-continue\ncontinue;}if(mediaQuery){if(!item[2]){item[2]=mediaQuery;}else{item[2]=\"\".concat(mediaQuery,\" and \").concat(item[2]);}}list.push(item);}};return list;};function cssWithMappingToString(item,useSourceMap){var content=item[1]||'';// eslint-disable-next-line prefer-destructuring\nvar cssMapping=item[3];if(!cssMapping){return content;}if(useSourceMap&&typeof btoa==='function'){var sourceMapping=toComment(cssMapping);var sourceURLs=cssMapping.sources.map(function(source){return\"/*# sourceURL=\".concat(cssMapping.sourceRoot||'').concat(source,\" */\");});return[content].concat(sourceURLs).concat([sourceMapping]).join('\\n');}return[content].join('\\n');}// Adapted from convert-source-map (MIT)\nfunction toComment(sourceMap){// eslint-disable-next-line no-undef\nvar base64=btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));var data=\"sourceMappingURL=data:application/json;charset=utf-8;base64,\".concat(base64);return\"/*# \".concat(data,\" */\");};(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(cssWithMappingToString,\"cssWithMappingToString\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/css-loader/dist/runtime/api.js\");reactHotLoader.register(toComment,\"toComment\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/css-loader/dist/runtime/api.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcz8yNGZiIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJ1c2VTb3VyY2VNYXAiLCJsaXN0IiwidG9TdHJpbmciLCJtYXAiLCJpdGVtIiwiY29udGVudCIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJjb25jYXQiLCJqb2luIiwiaSIsIm1vZHVsZXMiLCJtZWRpYVF1ZXJ5IiwiZGVkdXBlIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImxlbmd0aCIsImlkIiwiX2kiLCJwdXNoIiwiY3NzTWFwcGluZyIsImJ0b2EiLCJzb3VyY2VNYXBwaW5nIiwidG9Db21tZW50Iiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2UiLCJzb3VyY2VSb290Iiwic291cmNlTWFwIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZGF0YSJdLCJtYXBwaW5ncyI6IkFBQUEsOENBRUE7OztHQUlBO0FBQ0E7b1JBQ0FBLE1BQU0sQ0FBQ0MsT0FBUCxDQUFpQixTQUFVQyxZQUFWLENBQXdCLENBQ3ZDLEdBQUlDLEtBQUksQ0FBRyxFQUFYLENBQWU7QUFFZkEsSUFBSSxDQUFDQyxRQUFMLENBQWdCLFFBQVNBLFNBQVQsRUFBb0IsQ0FDbEMsTUFBTyxNQUFLQyxHQUFMLENBQVMsU0FBVUMsSUFBVixDQUFnQixDQUM5QixHQUFJQyxRQUFPLENBQUdDLHNCQUFzQixDQUFDRixJQUFELENBQU9KLFlBQVAsQ0FBcEMsQ0FFQSxHQUFJSSxJQUFJLENBQUMsQ0FBRCxDQUFSLENBQWEsQ0FDWCxNQUFPLFVBQVVHLE1BQVYsQ0FBaUJILElBQUksQ0FBQyxDQUFELENBQXJCLENBQTBCLElBQTFCLEVBQWdDRyxNQUFoQyxDQUF1Q0YsT0FBdkMsQ0FBZ0QsR0FBaEQsQ0FBUCxDQUNELENBRUQsTUFBT0EsUUFBUCxDQUNELENBUk0sRUFRSkcsSUFSSSxDQVFDLEVBUkQsQ0FBUCxDQVNELENBVkQsQ0FVRztBQUNIO0FBR0FQLElBQUksQ0FBQ1EsQ0FBTCxDQUFTLFNBQVVDLE9BQVYsQ0FBbUJDLFVBQW5CLENBQStCQyxNQUEvQixDQUF1QyxDQUM5QyxHQUFJLE1BQU9GLFFBQVAsR0FBbUIsUUFBdkIsQ0FBaUMsQ0FDL0I7QUFDQUEsT0FBTyxDQUFHLENBQUMsQ0FBQyxJQUFELENBQU9BLE9BQVAsQ0FBZ0IsRUFBaEIsQ0FBRCxDQUFWLENBQ0QsQ0FFRCxHQUFJRyx1QkFBc0IsQ0FBRyxFQUE3QixDQUVBLEdBQUlELE1BQUosQ0FBWSxDQUNWLElBQUssR0FBSUgsRUFBQyxDQUFHLENBQWIsQ0FBZ0JBLENBQUMsQ0FBRyxLQUFLSyxNQUF6QixDQUFpQ0wsQ0FBQyxFQUFsQyxDQUFzQyxDQUNwQztBQUNBLEdBQUlNLEdBQUUsQ0FBRyxLQUFLTixDQUFMLEVBQVEsQ0FBUixDQUFULENBRUEsR0FBSU0sRUFBRSxFQUFJLElBQVYsQ0FBZ0IsQ0FDZEYsc0JBQXNCLENBQUNFLEVBQUQsQ0FBdEIsQ0FBNkIsSUFBN0IsQ0FDRCxDQUNGLENBQ0YsQ0FFRCxJQUFLLEdBQUlDLEdBQUUsQ0FBRyxDQUFkLENBQWlCQSxFQUFFLENBQUdOLE9BQU8sQ0FBQ0ksTUFBOUIsQ0FBc0NFLEVBQUUsRUFBeEMsQ0FBNEMsQ0FDMUMsR0FBSVosS0FBSSxDQUFHLEdBQUdHLE1BQUgsQ0FBVUcsT0FBTyxDQUFDTSxFQUFELENBQWpCLENBQVgsQ0FFQSxHQUFJSixNQUFNLEVBQUlDLHNCQUFzQixDQUFDVCxJQUFJLENBQUMsQ0FBRCxDQUFMLENBQXBDLENBQStDLENBQzdDO0FBQ0EsU0FDRCxDQUVELEdBQUlPLFVBQUosQ0FBZ0IsQ0FDZCxHQUFJLENBQUNQLElBQUksQ0FBQyxDQUFELENBQVQsQ0FBYyxDQUNaQSxJQUFJLENBQUMsQ0FBRCxDQUFKLENBQVVPLFVBQVYsQ0FDRCxDQUZELElBRU8sQ0FDTFAsSUFBSSxDQUFDLENBQUQsQ0FBSixDQUFVLEdBQUdHLE1BQUgsQ0FBVUksVUFBVixDQUFzQixPQUF0QixFQUErQkosTUFBL0IsQ0FBc0NILElBQUksQ0FBQyxDQUFELENBQTFDLENBQVYsQ0FDRCxDQUNGLENBRURILElBQUksQ0FBQ2dCLElBQUwsQ0FBVWIsSUFBVixFQUNELENBQ0YsQ0FyQ0QsQ0F1Q0EsTUFBT0gsS0FBUCxDQUNELENBekRELENBMkRBLFFBQVNLLHVCQUFULENBQWdDRixJQUFoQyxDQUFzQ0osWUFBdEMsQ0FBb0QsQ0FDbEQsR0FBSUssUUFBTyxDQUFHRCxJQUFJLENBQUMsQ0FBRCxDQUFKLEVBQVcsRUFBekIsQ0FBNkI7QUFFN0IsR0FBSWMsV0FBVSxDQUFHZCxJQUFJLENBQUMsQ0FBRCxDQUFyQixDQUVBLEdBQUksQ0FBQ2MsVUFBTCxDQUFpQixDQUNmLE1BQU9iLFFBQVAsQ0FDRCxDQUVELEdBQUlMLFlBQVksRUFBSSxNQUFPbUIsS0FBUCxHQUFnQixVQUFwQyxDQUFnRCxDQUM5QyxHQUFJQyxjQUFhLENBQUdDLFNBQVMsQ0FBQ0gsVUFBRCxDQUE3QixDQUNBLEdBQUlJLFdBQVUsQ0FBR0osVUFBVSxDQUFDSyxPQUFYLENBQW1CcEIsR0FBbkIsQ0FBdUIsU0FBVXFCLE1BQVYsQ0FBa0IsQ0FDeEQsTUFBTyxpQkFBaUJqQixNQUFqQixDQUF3QlcsVUFBVSxDQUFDTyxVQUFYLEVBQXlCLEVBQWpELEVBQXFEbEIsTUFBckQsQ0FBNERpQixNQUE1RCxDQUFvRSxLQUFwRSxDQUFQLENBQ0QsQ0FGZ0IsQ0FBakIsQ0FHQSxNQUFPLENBQUNuQixPQUFELEVBQVVFLE1BQVYsQ0FBaUJlLFVBQWpCLEVBQTZCZixNQUE3QixDQUFvQyxDQUFDYSxhQUFELENBQXBDLEVBQXFEWixJQUFyRCxDQUEwRCxJQUExRCxDQUFQLENBQ0QsQ0FFRCxNQUFPLENBQUNILE9BQUQsRUFBVUcsSUFBVixDQUFlLElBQWYsQ0FBUCxDQUNELENBQUM7QUFHRixRQUFTYSxVQUFULENBQW1CSyxTQUFuQixDQUE4QixDQUM1QjtBQUNBLEdBQUlDLE9BQU0sQ0FBR1IsSUFBSSxDQUFDUyxRQUFRLENBQUNDLGtCQUFrQixDQUFDQyxJQUFJLENBQUNDLFNBQUwsQ0FBZUwsU0FBZixDQUFELENBQW5CLENBQVQsQ0FBakIsQ0FDQSxHQUFJTSxLQUFJLENBQUcsK0RBQStEekIsTUFBL0QsQ0FBc0VvQixNQUF0RSxDQUFYLENBQ0EsTUFBTyxPQUFPcEIsTUFBUCxDQUFjeUIsSUFBZCxDQUFvQixLQUFwQixDQUFQLENBQ0QsQyxxS0ExQlExQixzQixzSkFxQkFlLFMiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG4vLyBjc3MgYmFzZSBjb2RlLCBpbmplY3RlZCBieSB0aGUgY3NzLWxvYWRlclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHVzZVNvdXJjZU1hcCkge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCk7XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIHJldHVybiBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoY29udGVudCwgXCJ9XCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKCcnKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIChtb2R1bGVzLCBtZWRpYVF1ZXJ5LCBkZWR1cGUpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsICcnXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmdcbiAgICAgICAgdmFyIGlkID0gdGhpc1tpXVswXTtcblxuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBtb2R1bGVzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfaV0pO1xuXG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnRpbnVlXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAobWVkaWFRdWVyeSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWFRdWVyeTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzJdID0gXCJcIi5jb25jYXQobWVkaWFRdWVyeSwgXCIgYW5kIFwiKS5jb25jYXQoaXRlbVsyXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07XG5cbmZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXSB8fCAnJzsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG5cbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuXG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG5cbiAgaWYgKHVzZVNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gdG9Db21tZW50KGNzc01hcHBpbmcpO1xuICAgIHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICByZXR1cm4gXCIvKiMgc291cmNlVVJMPVwiLmNvbmNhdChjc3NNYXBwaW5nLnNvdXJjZVJvb3QgfHwgJycpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oJ1xcbicpO1xuICB9XG5cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKCdcXG4nKTtcbn0gLy8gQWRhcHRlZCBmcm9tIGNvbnZlcnQtc291cmNlLW1hcCAoTUlUKVxuXG5cbmZ1bmN0aW9uIHRvQ29tbWVudChzb3VyY2VNYXApIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpO1xuICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gIHJldHVybiBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/css-loader/dist/runtime/api.js\n");

/***/ }),

/***/ "./node_modules/immutability-helper/index.js":
/*!***************************************************!*\
  !*** ./node_modules/immutability-helper/index.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module, process) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};Object.defineProperty(exports,\"__esModule\",{value:true});function stringifiable(obj){// Safely stringify Object.create(null)\n/* istanbul ignore next */return typeof obj==='object'&&!('toString'in obj)?Object.prototype.toString.call(obj).slice(8,-1):obj;}var isProduction=typeof process==='object'&&\"development\"==='production';function invariant(condition,message){if(!condition){/* istanbul ignore next */if(isProduction){throw new Error('Invariant failed');}throw new Error(message());}}exports.invariant=invariant;var hasOwnProperty=Object.prototype.hasOwnProperty;var splice=Array.prototype.splice;var toString=Object.prototype.toString;function type(obj){return toString.call(obj).slice(8,-1);}var assign=Object.assign||/* istanbul ignore next */function(target,source){getAllKeys(source).forEach(function(key){if(hasOwnProperty.call(source,key)){target[key]=source[key];}});return target;};var getAllKeys=typeof Object.getOwnPropertySymbols==='function'?function(obj){return Object.keys(obj).concat(Object.getOwnPropertySymbols(obj));}/* istanbul ignore next */:function(obj){return Object.keys(obj);};function copy(object){return Array.isArray(object)?assign(object.constructor(object.length),object):type(object)==='Map'?new Map(object):type(object)==='Set'?new Set(object):object&&typeof object==='object'?assign(Object.create(Object.getPrototypeOf(object)),object)/* istanbul ignore next */:object;}var Context=/** @class */function(){function Context(){this.commands=assign({},defaultCommands);this.update=this.update.bind(this);// Deprecated: update.extend, update.isEquals and update.newContext\nthis.update.extend=this.extend=this.extend.bind(this);this.update.isEquals=function(x,y){return x===y;};this.update.newContext=function(){return new Context().update;};}Object.defineProperty(Context.prototype,\"isEquals\",{get:function get(){return this.update.isEquals;},set:function set(value){this.update.isEquals=value;},enumerable:true,configurable:true});Context.prototype.extend=function(directive,fn){this.commands[directive]=fn;};Context.prototype.update=function(object,$spec){var _this=this;var spec=typeof $spec==='function'?{$apply:$spec}:$spec;if(!(Array.isArray(object)&&Array.isArray(spec))){invariant(!Array.isArray(spec),function(){return\"update(): You provided an invalid spec to update(). The spec may \"+\"not contain an array except as the value of $set, $push, $unshift, \"+\"$splice or any custom command allowing an array value.\";});}invariant(typeof spec==='object'&&spec!==null,function(){return\"update(): You provided an invalid spec to update(). The spec and \"+\"every included key path must be plain objects containing one of the \"+(\"following commands: \"+Object.keys(_this.commands).join(', ')+\".\");});var nextObject=object;getAllKeys(spec).forEach(function(key){if(hasOwnProperty.call(_this.commands,key)){var objectWasNextObject=object===nextObject;nextObject=_this.commands[key](spec[key],nextObject,spec,object);if(objectWasNextObject&&_this.isEquals(nextObject,object)){nextObject=object;}}else{var nextValueForKey=type(object)==='Map'?_this.update(object.get(key),spec[key]):_this.update(object[key],spec[key]);var nextObjectValue=type(nextObject)==='Map'?nextObject.get(key):nextObject[key];if(!_this.isEquals(nextValueForKey,nextObjectValue)||typeof nextValueForKey==='undefined'&&!hasOwnProperty.call(object,key)){if(nextObject===object){nextObject=copy(object);}if(type(nextObject)==='Map'){nextObject.set(key,nextValueForKey);}else{nextObject[key]=nextValueForKey;}}}});return nextObject;};return Context;}();exports.Context=Context;var defaultCommands={$push:function $push(value,nextObject,spec){invariantPushAndUnshift(nextObject,spec,'$push');return value.length?nextObject.concat(value):nextObject;},$unshift:function $unshift(value,nextObject,spec){invariantPushAndUnshift(nextObject,spec,'$unshift');return value.length?value.concat(nextObject):nextObject;},$splice:function $splice(value,nextObject,spec,originalObject){invariantSplices(nextObject,spec);value.forEach(function(args){invariantSplice(args);if(nextObject===originalObject&&args.length){nextObject=copy(originalObject);}splice.apply(nextObject,args);});return nextObject;},$set:function $set(value,_nextObject,spec){invariantSet(spec);return value;},$toggle:function $toggle(targets,nextObject){invariantSpecArray(targets,'$toggle');var nextObjectCopy=targets.length?copy(nextObject):nextObject;targets.forEach(function(target){nextObjectCopy[target]=!nextObject[target];});return nextObjectCopy;},$unset:function $unset(value,nextObject,_spec,originalObject){invariantSpecArray(value,'$unset');value.forEach(function(key){if(Object.hasOwnProperty.call(nextObject,key)){if(nextObject===originalObject){nextObject=copy(originalObject);}delete nextObject[key];}});return nextObject;},$add:function $add(values,nextObject,_spec,originalObject){invariantMapOrSet(nextObject,'$add');invariantSpecArray(values,'$add');if(type(nextObject)==='Map'){values.forEach(function(_a){var key=_a[0],value=_a[1];if(nextObject===originalObject&&nextObject.get(key)!==value){nextObject=copy(originalObject);}nextObject.set(key,value);});}else{values.forEach(function(value){if(nextObject===originalObject&&!nextObject.has(value)){nextObject=copy(originalObject);}nextObject.add(value);});}return nextObject;},$remove:function $remove(value,nextObject,_spec,originalObject){invariantMapOrSet(nextObject,'$remove');invariantSpecArray(value,'$remove');value.forEach(function(key){if(nextObject===originalObject&&nextObject.has(key)){nextObject=copy(originalObject);}nextObject[\"delete\"](key);});return nextObject;},$merge:function $merge(value,nextObject,_spec,originalObject){invariantMerge(nextObject,value);getAllKeys(value).forEach(function(key){if(value[key]!==nextObject[key]){if(nextObject===originalObject){nextObject=copy(originalObject);}nextObject[key]=value[key];}});return nextObject;},$apply:function $apply(value,original){invariantApply(value);return value(original);}};var defaultContext=new Context();exports.isEquals=defaultContext.update.isEquals;exports.extend=defaultContext.extend;exports[\"default\"]=defaultContext.update;// @ts-ignore\nexports[\"default\"][\"default\"]=module.exports=assign(exports[\"default\"],exports);// invariants\nfunction invariantPushAndUnshift(value,spec,command){invariant(Array.isArray(value),function(){return\"update(): expected target of \"+stringifiable(command)+\" to be an array; got \"+stringifiable(value)+\".\";});invariantSpecArray(spec[command],command);}function invariantSpecArray(spec,command){invariant(Array.isArray(spec),function(){return\"update(): expected spec of \"+stringifiable(command)+\" to be an array; got \"+stringifiable(spec)+\". \"+\"Did you forget to wrap your parameter in an array?\";});}function invariantSplices(value,spec){invariant(Array.isArray(value),function(){return\"Expected $splice target to be an array; got \"+stringifiable(value);});invariantSplice(spec.$splice);}function invariantSplice(value){invariant(Array.isArray(value),function(){return\"update(): expected spec of $splice to be an array of arrays; got \"+stringifiable(value)+\". \"+\"Did you forget to wrap your parameters in an array?\";});}function invariantApply(fn){invariant(typeof fn==='function',function(){return\"update(): expected spec of $apply to be a function; got \"+stringifiable(fn)+\".\";});}function invariantSet(spec){invariant(Object.keys(spec).length===1,function(){return\"Cannot have more than one key in an object with $set\";});}function invariantMerge(target,specValue){invariant(specValue&&typeof specValue==='object',function(){return\"update(): $merge expects a spec of type 'object'; got \"+stringifiable(specValue);});invariant(target&&typeof target==='object',function(){return\"update(): $merge expects a target of type 'object'; got \"+stringifiable(target);});}function invariantMapOrSet(target,command){var typeOfTarget=type(target);invariant(typeOfTarget==='Map'||typeOfTarget==='Set',function(){return\"update(): \"+stringifiable(command)+\" expects a target of type Set or Map; got \"+stringifiable(typeOfTarget);});};(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(stringifiable,\"stringifiable\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/immutability-helper/index.js\");reactHotLoader.register(isProduction,\"isProduction\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/immutability-helper/index.js\");reactHotLoader.register(invariant,\"invariant\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/immutability-helper/index.js\");reactHotLoader.register(hasOwnProperty,\"hasOwnProperty\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/immutability-helper/index.js\");reactHotLoader.register(splice,\"splice\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/immutability-helper/index.js\");reactHotLoader.register(toString,\"toString\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/immutability-helper/index.js\");reactHotLoader.register(type,\"type\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/immutability-helper/index.js\");reactHotLoader.register(assign,\"assign\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/immutability-helper/index.js\");reactHotLoader.register(getAllKeys,\"getAllKeys\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/immutability-helper/index.js\");reactHotLoader.register(copy,\"copy\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/immutability-helper/index.js\");reactHotLoader.register(Context,\"Context\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/immutability-helper/index.js\");reactHotLoader.register(defaultCommands,\"defaultCommands\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/immutability-helper/index.js\");reactHotLoader.register(defaultContext,\"defaultContext\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/immutability-helper/index.js\");reactHotLoader.register(invariantPushAndUnshift,\"invariantPushAndUnshift\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/immutability-helper/index.js\");reactHotLoader.register(invariantSpecArray,\"invariantSpecArray\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/immutability-helper/index.js\");reactHotLoader.register(invariantSplices,\"invariantSplices\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/immutability-helper/index.js\");reactHotLoader.register(invariantSplice,\"invariantSplice\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/immutability-helper/index.js\");reactHotLoader.register(invariantApply,\"invariantApply\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/immutability-helper/index.js\");reactHotLoader.register(invariantSet,\"invariantSet\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/immutability-helper/index.js\");reactHotLoader.register(invariantMerge,\"invariantMerge\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/immutability-helper/index.js\");reactHotLoader.register(invariantMapOrSet,\"invariantMapOrSet\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/immutability-helper/index.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module), __webpack_require__(/*! ./../process/browser.js */ \"./node_modules/process/browser.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/immutability-helper/index.js\n");

/***/ }),

/***/ "./node_modules/lodash/_baseClamp.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_baseClamp.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};/**\n * The base implementation of `_.clamp` which doesn't coerce arguments.\n *\n * @private\n * @param {number} number The number to clamp.\n * @param {number} [lower] The lower bound.\n * @param {number} upper The upper bound.\n * @returns {number} Returns the clamped number.\n */function baseClamp(number,lower,upper){if(number===number){if(upper!==undefined){number=number<=upper?number:upper;}if(lower!==undefined){number=number>=lower?number:lower;}}return number;}module.exports=baseClamp;;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(baseClamp,\"baseClamp\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/lodash/_baseClamp.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUNsYW1wLmpzPzgzODQiXSwibmFtZXMiOlsiYmFzZUNsYW1wIiwibnVtYmVyIiwibG93ZXIiLCJ1cHBlciIsInVuZGVmaW5lZCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJrVUFBQTs7Ozs7Ozs7R0FTQSxRQUFTQSxVQUFULENBQW1CQyxNQUFuQixDQUEyQkMsS0FBM0IsQ0FBa0NDLEtBQWxDLENBQXlDLENBQ3ZDLEdBQUlGLE1BQU0sR0FBS0EsTUFBZixDQUF1QixDQUNyQixHQUFJRSxLQUFLLEdBQUtDLFNBQWQsQ0FBeUIsQ0FDdkJILE1BQU0sQ0FBR0EsTUFBTSxFQUFJRSxLQUFWLENBQWtCRixNQUFsQixDQUEyQkUsS0FBcEMsQ0FDRCxDQUNELEdBQUlELEtBQUssR0FBS0UsU0FBZCxDQUF5QixDQUN2QkgsTUFBTSxDQUFHQSxNQUFNLEVBQUlDLEtBQVYsQ0FBa0JELE1BQWxCLENBQTJCQyxLQUFwQyxDQUNELENBQ0YsQ0FDRCxNQUFPRCxPQUFQLENBQ0QsQ0FFREksTUFBTSxDQUFDQyxPQUFQLENBQWlCTixTQUFqQixDLHFLQVpTQSxTIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUNsYW1wLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jbGFtcGAgd2hpY2ggZG9lc24ndCBjb2VyY2UgYXJndW1lbnRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIFRoZSBudW1iZXIgdG8gY2xhbXAuXG4gKiBAcGFyYW0ge251bWJlcn0gW2xvd2VyXSBUaGUgbG93ZXIgYm91bmQuXG4gKiBAcGFyYW0ge251bWJlcn0gdXBwZXIgVGhlIHVwcGVyIGJvdW5kLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY2xhbXBlZCBudW1iZXIuXG4gKi9cbmZ1bmN0aW9uIGJhc2VDbGFtcChudW1iZXIsIGxvd2VyLCB1cHBlcikge1xuICBpZiAobnVtYmVyID09PSBudW1iZXIpIHtcbiAgICBpZiAodXBwZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgbnVtYmVyID0gbnVtYmVyIDw9IHVwcGVyID8gbnVtYmVyIDogdXBwZXI7XG4gICAgfVxuICAgIGlmIChsb3dlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBudW1iZXIgPSBudW1iZXIgPj0gbG93ZXIgPyBudW1iZXIgOiBsb3dlcjtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bWJlcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlQ2xhbXA7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/lodash/_baseClamp.js\n");

/***/ }),

/***/ "./node_modules/lodash/_baseDelay.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_baseDelay.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};/** Error message constants. */var FUNC_ERROR_TEXT='Expected a function';/**\n * The base implementation of `_.delay` and `_.defer` which accepts `args`\n * to provide to `func`.\n *\n * @private\n * @param {Function} func The function to delay.\n * @param {number} wait The number of milliseconds to delay invocation.\n * @param {Array} args The arguments to provide to `func`.\n * @returns {number|Object} Returns the timer id or timeout object.\n */function baseDelay(func,wait,args){if(typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}return setTimeout(function(){func.apply(undefined,args);},wait);}module.exports=baseDelay;;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(FUNC_ERROR_TEXT,\"FUNC_ERROR_TEXT\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/lodash/_baseDelay.js\");reactHotLoader.register(baseDelay,\"baseDelay\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/lodash/_baseDelay.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZURlbGF5LmpzPzRhNjgiXSwibmFtZXMiOlsiRlVOQ19FUlJPUl9URVhUIiwiYmFzZURlbGF5IiwiZnVuYyIsIndhaXQiLCJhcmdzIiwiVHlwZUVycm9yIiwic2V0VGltZW91dCIsImFwcGx5IiwidW5kZWZpbmVkIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6ImtVQUFBLCtCQUNBLEdBQUlBLGdCQUFlLENBQUcscUJBQXRCLENBRUE7Ozs7Ozs7OztHQVVBLFFBQVNDLFVBQVQsQ0FBbUJDLElBQW5CLENBQXlCQyxJQUF6QixDQUErQkMsSUFBL0IsQ0FBcUMsQ0FDbkMsR0FBSSxNQUFPRixLQUFQLEVBQWUsVUFBbkIsQ0FBK0IsQ0FDN0IsS0FBTSxJQUFJRyxVQUFKLENBQWNMLGVBQWQsQ0FBTixDQUNELENBQ0QsTUFBT00sV0FBVSxDQUFDLFVBQVcsQ0FBRUosSUFBSSxDQUFDSyxLQUFMLENBQVdDLFNBQVgsQ0FBc0JKLElBQXRCLEVBQThCLENBQTVDLENBQThDRCxJQUE5QyxDQUFqQixDQUNELENBRURNLE1BQU0sQ0FBQ0MsT0FBUCxDQUFpQlQsU0FBakIsQyxxS0FuQklELGUscUlBWUtDLFMiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlRGVsYXkuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogRXJyb3IgbWVzc2FnZSBjb25zdGFudHMuICovXG52YXIgRlVOQ19FUlJPUl9URVhUID0gJ0V4cGVjdGVkIGEgZnVuY3Rpb24nO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmRlbGF5YCBhbmQgYF8uZGVmZXJgIHdoaWNoIGFjY2VwdHMgYGFyZ3NgXG4gKiB0byBwcm92aWRlIHRvIGBmdW5jYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVsYXkuXG4gKiBAcGFyYW0ge251bWJlcn0gd2FpdCBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byBkZWxheSBpbnZvY2F0aW9uLlxuICogQHBhcmFtIHtBcnJheX0gYXJncyBUaGUgYXJndW1lbnRzIHRvIHByb3ZpZGUgdG8gYGZ1bmNgLlxuICogQHJldHVybnMge251bWJlcnxPYmplY3R9IFJldHVybnMgdGhlIHRpbWVyIGlkIG9yIHRpbWVvdXQgb2JqZWN0LlxuICovXG5mdW5jdGlvbiBiYXNlRGVsYXkoZnVuYywgd2FpdCwgYXJncykge1xuICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgfVxuICByZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbigpIHsgZnVuYy5hcHBseSh1bmRlZmluZWQsIGFyZ3MpOyB9LCB3YWl0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlRGVsYXk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/lodash/_baseDelay.js\n");

/***/ }),

/***/ "./node_modules/lodash/_baseMap.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_baseMap.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};var baseEach=__webpack_require__(/*! ./_baseEach */ \"./node_modules/lodash/_baseEach.js\"),isArrayLike=__webpack_require__(/*! ./isArrayLike */ \"./node_modules/lodash/isArrayLike.js\");/**\n * The base implementation of `_.map` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */function baseMap(collection,iteratee){var index=-1,result=isArrayLike(collection)?Array(collection.length):[];baseEach(collection,function(value,key,collection){result[++index]=iteratee(value,key,collection);});return result;}module.exports=baseMap;;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(baseMap,\"baseMap\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/lodash/_baseMap.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZU1hcC5qcz85N2QzIl0sIm5hbWVzIjpbImJhc2VFYWNoIiwicmVxdWlyZSIsImlzQXJyYXlMaWtlIiwiYmFzZU1hcCIsImNvbGxlY3Rpb24iLCJpdGVyYXRlZSIsImluZGV4IiwicmVzdWx0IiwiQXJyYXkiLCJsZW5ndGgiLCJ2YWx1ZSIsImtleSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJrVUFBQSxHQUFJQSxTQUFRLENBQUdDLG1CQUFPLENBQUMsdURBQUQsQ0FBdEIsQ0FDSUMsV0FBVyxDQUFHRCxtQkFBTyxDQUFDLDJEQUFELENBRHpCLENBR0E7Ozs7Ozs7R0FRQSxRQUFTRSxRQUFULENBQWlCQyxVQUFqQixDQUE2QkMsUUFBN0IsQ0FBdUMsQ0FDckMsR0FBSUMsTUFBSyxDQUFHLENBQUMsQ0FBYixDQUNJQyxNQUFNLENBQUdMLFdBQVcsQ0FBQ0UsVUFBRCxDQUFYLENBQTBCSSxLQUFLLENBQUNKLFVBQVUsQ0FBQ0ssTUFBWixDQUEvQixDQUFxRCxFQURsRSxDQUdBVCxRQUFRLENBQUNJLFVBQUQsQ0FBYSxTQUFTTSxLQUFULENBQWdCQyxHQUFoQixDQUFxQlAsVUFBckIsQ0FBaUMsQ0FDcERHLE1BQU0sQ0FBQyxFQUFFRCxLQUFILENBQU4sQ0FBa0JELFFBQVEsQ0FBQ0ssS0FBRCxDQUFRQyxHQUFSLENBQWFQLFVBQWIsQ0FBMUIsQ0FDRCxDQUZPLENBQVIsQ0FHQSxNQUFPRyxPQUFQLENBQ0QsQ0FFREssTUFBTSxDQUFDQyxPQUFQLENBQWlCVixPQUFqQixDLHFLQVZTQSxPIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZU1hcC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBiYXNlRWFjaCA9IHJlcXVpcmUoJy4vX2Jhc2VFYWNoJyksXG4gICAgaXNBcnJheUxpa2UgPSByZXF1aXJlKCcuL2lzQXJyYXlMaWtlJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWFwYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGJhc2VNYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSBpc0FycmF5TGlrZShjb2xsZWN0aW9uKSA/IEFycmF5KGNvbGxlY3Rpb24ubGVuZ3RoKSA6IFtdO1xuXG4gIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pIHtcbiAgICByZXN1bHRbKytpbmRleF0gPSBpdGVyYXRlZSh2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZU1hcDtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/lodash/_baseMap.js\n");

/***/ }),

/***/ "./node_modules/lodash/_baseOrderBy.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_baseOrderBy.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};var arrayMap=__webpack_require__(/*! ./_arrayMap */ \"./node_modules/lodash/_arrayMap.js\"),baseIteratee=__webpack_require__(/*! ./_baseIteratee */ \"./node_modules/lodash/_baseIteratee.js\"),baseMap=__webpack_require__(/*! ./_baseMap */ \"./node_modules/lodash/_baseMap.js\"),baseSortBy=__webpack_require__(/*! ./_baseSortBy */ \"./node_modules/lodash/_baseSortBy.js\"),baseUnary=__webpack_require__(/*! ./_baseUnary */ \"./node_modules/lodash/_baseUnary.js\"),compareMultiple=__webpack_require__(/*! ./_compareMultiple */ \"./node_modules/lodash/_compareMultiple.js\"),identity=__webpack_require__(/*! ./identity */ \"./node_modules/lodash/identity.js\");/**\n * The base implementation of `_.orderBy` without param guards.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\n * @param {string[]} orders The sort orders of `iteratees`.\n * @returns {Array} Returns the new sorted array.\n */function baseOrderBy(collection,iteratees,orders){var index=-1;iteratees=arrayMap(iteratees.length?iteratees:[identity],baseUnary(baseIteratee));var result=baseMap(collection,function(value,key,collection){var criteria=arrayMap(iteratees,function(iteratee){return iteratee(value);});return{'criteria':criteria,'index':++index,'value':value};});return baseSortBy(result,function(object,other){return compareMultiple(object,other,orders);});}module.exports=baseOrderBy;;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(baseOrderBy,\"baseOrderBy\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/lodash/_baseOrderBy.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZU9yZGVyQnkuanM/NmE1YyJdLCJuYW1lcyI6WyJhcnJheU1hcCIsInJlcXVpcmUiLCJiYXNlSXRlcmF0ZWUiLCJiYXNlTWFwIiwiYmFzZVNvcnRCeSIsImJhc2VVbmFyeSIsImNvbXBhcmVNdWx0aXBsZSIsImlkZW50aXR5IiwiYmFzZU9yZGVyQnkiLCJjb2xsZWN0aW9uIiwiaXRlcmF0ZWVzIiwib3JkZXJzIiwiaW5kZXgiLCJsZW5ndGgiLCJyZXN1bHQiLCJ2YWx1ZSIsImtleSIsImNyaXRlcmlhIiwiaXRlcmF0ZWUiLCJvYmplY3QiLCJvdGhlciIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJrVUFBQSxHQUFJQSxTQUFRLENBQUdDLG1CQUFPLENBQUMsdURBQUQsQ0FBdEIsQ0FDSUMsWUFBWSxDQUFHRCxtQkFBTyxDQUFDLCtEQUFELENBRDFCLENBRUlFLE9BQU8sQ0FBR0YsbUJBQU8sQ0FBQyxxREFBRCxDQUZyQixDQUdJRyxVQUFVLENBQUdILG1CQUFPLENBQUMsMkRBQUQsQ0FIeEIsQ0FJSUksU0FBUyxDQUFHSixtQkFBTyxDQUFDLHlEQUFELENBSnZCLENBS0lLLGVBQWUsQ0FBR0wsbUJBQU8sQ0FBQyxxRUFBRCxDQUw3QixDQU1JTSxRQUFRLENBQUdOLG1CQUFPLENBQUMscURBQUQsQ0FOdEIsQ0FRQTs7Ozs7Ozs7R0FTQSxRQUFTTyxZQUFULENBQXFCQyxVQUFyQixDQUFpQ0MsU0FBakMsQ0FBNENDLE1BQTVDLENBQW9ELENBQ2xELEdBQUlDLE1BQUssQ0FBRyxDQUFDLENBQWIsQ0FDQUYsU0FBUyxDQUFHVixRQUFRLENBQUNVLFNBQVMsQ0FBQ0csTUFBVixDQUFtQkgsU0FBbkIsQ0FBK0IsQ0FBQ0gsUUFBRCxDQUFoQyxDQUE0Q0YsU0FBUyxDQUFDSCxZQUFELENBQXJELENBQXBCLENBRUEsR0FBSVksT0FBTSxDQUFHWCxPQUFPLENBQUNNLFVBQUQsQ0FBYSxTQUFTTSxLQUFULENBQWdCQyxHQUFoQixDQUFxQlAsVUFBckIsQ0FBaUMsQ0FDaEUsR0FBSVEsU0FBUSxDQUFHakIsUUFBUSxDQUFDVSxTQUFELENBQVksU0FBU1EsUUFBVCxDQUFtQixDQUNwRCxNQUFPQSxTQUFRLENBQUNILEtBQUQsQ0FBZixDQUNELENBRnNCLENBQXZCLENBR0EsTUFBTyxDQUFFLFdBQVlFLFFBQWQsQ0FBd0IsUUFBUyxFQUFFTCxLQUFuQyxDQUEwQyxRQUFTRyxLQUFuRCxDQUFQLENBQ0QsQ0FMbUIsQ0FBcEIsQ0FPQSxNQUFPWCxXQUFVLENBQUNVLE1BQUQsQ0FBUyxTQUFTSyxNQUFULENBQWlCQyxLQUFqQixDQUF3QixDQUNoRCxNQUFPZCxnQkFBZSxDQUFDYSxNQUFELENBQVNDLEtBQVQsQ0FBZ0JULE1BQWhCLENBQXRCLENBQ0QsQ0FGZ0IsQ0FBakIsQ0FHRCxDQUVEVSxNQUFNLENBQUNDLE9BQVAsQ0FBaUJkLFdBQWpCLEMscUtBaEJTQSxXIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZU9yZGVyQnkuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYXJyYXlNYXAgPSByZXF1aXJlKCcuL19hcnJheU1hcCcpLFxuICAgIGJhc2VJdGVyYXRlZSA9IHJlcXVpcmUoJy4vX2Jhc2VJdGVyYXRlZScpLFxuICAgIGJhc2VNYXAgPSByZXF1aXJlKCcuL19iYXNlTWFwJyksXG4gICAgYmFzZVNvcnRCeSA9IHJlcXVpcmUoJy4vX2Jhc2VTb3J0QnknKSxcbiAgICBiYXNlVW5hcnkgPSByZXF1aXJlKCcuL19iYXNlVW5hcnknKSxcbiAgICBjb21wYXJlTXVsdGlwbGUgPSByZXF1aXJlKCcuL19jb21wYXJlTXVsdGlwbGUnKSxcbiAgICBpZGVudGl0eSA9IHJlcXVpcmUoJy4vaWRlbnRpdHknKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5vcmRlckJ5YCB3aXRob3V0IHBhcmFtIGd1YXJkcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbltdfE9iamVjdFtdfHN0cmluZ1tdfSBpdGVyYXRlZXMgVGhlIGl0ZXJhdGVlcyB0byBzb3J0IGJ5LlxuICogQHBhcmFtIHtzdHJpbmdbXX0gb3JkZXJzIFRoZSBzb3J0IG9yZGVycyBvZiBgaXRlcmF0ZWVzYC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IHNvcnRlZCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gYmFzZU9yZGVyQnkoY29sbGVjdGlvbiwgaXRlcmF0ZWVzLCBvcmRlcnMpIHtcbiAgdmFyIGluZGV4ID0gLTE7XG4gIGl0ZXJhdGVlcyA9IGFycmF5TWFwKGl0ZXJhdGVlcy5sZW5ndGggPyBpdGVyYXRlZXMgOiBbaWRlbnRpdHldLCBiYXNlVW5hcnkoYmFzZUl0ZXJhdGVlKSk7XG5cbiAgdmFyIHJlc3VsdCA9IGJhc2VNYXAoY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGtleSwgY29sbGVjdGlvbikge1xuICAgIHZhciBjcml0ZXJpYSA9IGFycmF5TWFwKGl0ZXJhdGVlcywgZnVuY3Rpb24oaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBpdGVyYXRlZSh2YWx1ZSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHsgJ2NyaXRlcmlhJzogY3JpdGVyaWEsICdpbmRleCc6ICsraW5kZXgsICd2YWx1ZSc6IHZhbHVlIH07XG4gIH0pO1xuXG4gIHJldHVybiBiYXNlU29ydEJ5KHJlc3VsdCwgZnVuY3Rpb24ob2JqZWN0LCBvdGhlcikge1xuICAgIHJldHVybiBjb21wYXJlTXVsdGlwbGUob2JqZWN0LCBvdGhlciwgb3JkZXJzKTtcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZU9yZGVyQnk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/lodash/_baseOrderBy.js\n");

/***/ }),

/***/ "./node_modules/lodash/_basePickBy.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_basePickBy.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};var baseGet=__webpack_require__(/*! ./_baseGet */ \"./node_modules/lodash/_baseGet.js\"),baseSet=__webpack_require__(/*! ./_baseSet */ \"./node_modules/lodash/_baseSet.js\"),castPath=__webpack_require__(/*! ./_castPath */ \"./node_modules/lodash/_castPath.js\");/**\n * The base implementation of  `_.pickBy` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The source object.\n * @param {string[]} paths The property paths to pick.\n * @param {Function} predicate The function invoked per property.\n * @returns {Object} Returns the new object.\n */function basePickBy(object,paths,predicate){var index=-1,length=paths.length,result={};while(++index<length){var path=paths[index],value=baseGet(object,path);if(predicate(value,path)){baseSet(result,castPath(path,object),value);}}return result;}module.exports=basePickBy;;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(basePickBy,\"basePickBy\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/lodash/_basePickBy.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVBpY2tCeS5qcz84OWQ5Il0sIm5hbWVzIjpbImJhc2VHZXQiLCJyZXF1aXJlIiwiYmFzZVNldCIsImNhc3RQYXRoIiwiYmFzZVBpY2tCeSIsIm9iamVjdCIsInBhdGhzIiwicHJlZGljYXRlIiwiaW5kZXgiLCJsZW5ndGgiLCJyZXN1bHQiLCJwYXRoIiwidmFsdWUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoia1VBQUEsR0FBSUEsUUFBTyxDQUFHQyxtQkFBTyxDQUFDLHFEQUFELENBQXJCLENBQ0lDLE9BQU8sQ0FBR0QsbUJBQU8sQ0FBQyxxREFBRCxDQURyQixDQUVJRSxRQUFRLENBQUdGLG1CQUFPLENBQUMsdURBQUQsQ0FGdEIsQ0FJQTs7Ozs7Ozs7R0FTQSxRQUFTRyxXQUFULENBQW9CQyxNQUFwQixDQUE0QkMsS0FBNUIsQ0FBbUNDLFNBQW5DLENBQThDLENBQzVDLEdBQUlDLE1BQUssQ0FBRyxDQUFDLENBQWIsQ0FDSUMsTUFBTSxDQUFHSCxLQUFLLENBQUNHLE1BRG5CLENBRUlDLE1BQU0sQ0FBRyxFQUZiLENBSUEsTUFBTyxFQUFFRixLQUFGLENBQVVDLE1BQWpCLENBQXlCLENBQ3ZCLEdBQUlFLEtBQUksQ0FBR0wsS0FBSyxDQUFDRSxLQUFELENBQWhCLENBQ0lJLEtBQUssQ0FBR1osT0FBTyxDQUFDSyxNQUFELENBQVNNLElBQVQsQ0FEbkIsQ0FHQSxHQUFJSixTQUFTLENBQUNLLEtBQUQsQ0FBUUQsSUFBUixDQUFiLENBQTRCLENBQzFCVCxPQUFPLENBQUNRLE1BQUQsQ0FBU1AsUUFBUSxDQUFDUSxJQUFELENBQU9OLE1BQVAsQ0FBakIsQ0FBaUNPLEtBQWpDLENBQVAsQ0FDRCxDQUNGLENBQ0QsTUFBT0YsT0FBUCxDQUNELENBRURHLE1BQU0sQ0FBQ0MsT0FBUCxDQUFpQlYsVUFBakIsQyxxS0FoQlNBLFUiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlUGlja0J5LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGJhc2VHZXQgPSByZXF1aXJlKCcuL19iYXNlR2V0JyksXG4gICAgYmFzZVNldCA9IHJlcXVpcmUoJy4vX2Jhc2VTZXQnKSxcbiAgICBjYXN0UGF0aCA9IHJlcXVpcmUoJy4vX2Nhc3RQYXRoJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgIGBfLnBpY2tCeWAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LlxuICogQHBhcmFtIHtzdHJpbmdbXX0gcGF0aHMgVGhlIHByb3BlcnR5IHBhdGhzIHRvIHBpY2suXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIHByb3BlcnR5LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gYmFzZVBpY2tCeShvYmplY3QsIHBhdGhzLCBwcmVkaWNhdGUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBwYXRocy5sZW5ndGgsXG4gICAgICByZXN1bHQgPSB7fTtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBwYXRoID0gcGF0aHNbaW5kZXhdLFxuICAgICAgICB2YWx1ZSA9IGJhc2VHZXQob2JqZWN0LCBwYXRoKTtcblxuICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIHBhdGgpKSB7XG4gICAgICBiYXNlU2V0KHJlc3VsdCwgY2FzdFBhdGgocGF0aCwgb2JqZWN0KSwgdmFsdWUpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VQaWNrQnk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/lodash/_basePickBy.js\n");

/***/ }),

/***/ "./node_modules/lodash/_baseSortBy.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_baseSortBy.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};/**\n * The base implementation of `_.sortBy` which uses `comparer` to define the\n * sort order of `array` and replaces criteria objects with their corresponding\n * values.\n *\n * @private\n * @param {Array} array The array to sort.\n * @param {Function} comparer The function to define sort order.\n * @returns {Array} Returns `array`.\n */function baseSortBy(array,comparer){var length=array.length;array.sort(comparer);while(length--){array[length]=array[length].value;}return array;}module.exports=baseSortBy;;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(baseSortBy,\"baseSortBy\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/lodash/_baseSortBy.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVNvcnRCeS5qcz9kNGIyIl0sIm5hbWVzIjpbImJhc2VTb3J0QnkiLCJhcnJheSIsImNvbXBhcmVyIiwibGVuZ3RoIiwic29ydCIsInZhbHVlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6ImtVQUFBOzs7Ozs7Ozs7R0FVQSxRQUFTQSxXQUFULENBQW9CQyxLQUFwQixDQUEyQkMsUUFBM0IsQ0FBcUMsQ0FDbkMsR0FBSUMsT0FBTSxDQUFHRixLQUFLLENBQUNFLE1BQW5CLENBRUFGLEtBQUssQ0FBQ0csSUFBTixDQUFXRixRQUFYLEVBQ0EsTUFBT0MsTUFBTSxFQUFiLENBQWlCLENBQ2ZGLEtBQUssQ0FBQ0UsTUFBRCxDQUFMLENBQWdCRixLQUFLLENBQUNFLE1BQUQsQ0FBTCxDQUFjRSxLQUE5QixDQUNELENBQ0QsTUFBT0osTUFBUCxDQUNELENBRURLLE1BQU0sQ0FBQ0MsT0FBUCxDQUFpQlAsVUFBakIsQyxxS0FWU0EsVSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VTb3J0QnkuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNvcnRCeWAgd2hpY2ggdXNlcyBgY29tcGFyZXJgIHRvIGRlZmluZSB0aGVcbiAqIHNvcnQgb3JkZXIgb2YgYGFycmF5YCBhbmQgcmVwbGFjZXMgY3JpdGVyaWEgb2JqZWN0cyB3aXRoIHRoZWlyIGNvcnJlc3BvbmRpbmdcbiAqIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNvcnQuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb21wYXJlciBUaGUgZnVuY3Rpb24gdG8gZGVmaW5lIHNvcnQgb3JkZXIuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAqL1xuZnVuY3Rpb24gYmFzZVNvcnRCeShhcnJheSwgY29tcGFyZXIpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICBhcnJheS5zb3J0KGNvbXBhcmVyKTtcbiAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgYXJyYXlbbGVuZ3RoXSA9IGFycmF5W2xlbmd0aF0udmFsdWU7XG4gIH1cbiAgcmV0dXJuIGFycmF5O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VTb3J0Qnk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/lodash/_baseSortBy.js\n");

/***/ }),

/***/ "./node_modules/lodash/_baseToPairs.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_baseToPairs.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};var arrayMap=__webpack_require__(/*! ./_arrayMap */ \"./node_modules/lodash/_arrayMap.js\");/**\n * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array\n * of key-value pairs for `object` corresponding to the property names of `props`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array} props The property names to get values for.\n * @returns {Object} Returns the key-value pairs.\n */function baseToPairs(object,props){return arrayMap(props,function(key){return[key,object[key]];});}module.exports=baseToPairs;;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(baseToPairs,\"baseToPairs\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/lodash/_baseToPairs.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVRvUGFpcnMuanM/YTNmZCJdLCJuYW1lcyI6WyJhcnJheU1hcCIsInJlcXVpcmUiLCJiYXNlVG9QYWlycyIsIm9iamVjdCIsInByb3BzIiwia2V5IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6ImtVQUFBLEdBQUlBLFNBQVEsQ0FBR0MsbUJBQU8sQ0FBQyx1REFBRCxDQUF0QixDQUVBOzs7Ozs7OztHQVNBLFFBQVNDLFlBQVQsQ0FBcUJDLE1BQXJCLENBQTZCQyxLQUE3QixDQUFvQyxDQUNsQyxNQUFPSixTQUFRLENBQUNJLEtBQUQsQ0FBUSxTQUFTQyxHQUFULENBQWMsQ0FDbkMsTUFBTyxDQUFDQSxHQUFELENBQU1GLE1BQU0sQ0FBQ0UsR0FBRCxDQUFaLENBQVAsQ0FDRCxDQUZjLENBQWYsQ0FHRCxDQUVEQyxNQUFNLENBQUNDLE9BQVAsQ0FBaUJMLFdBQWpCLEMscUtBTlNBLFciLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlVG9QYWlycy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBhcnJheU1hcCA9IHJlcXVpcmUoJy4vX2FycmF5TWFwJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udG9QYWlyc2AgYW5kIGBfLnRvUGFpcnNJbmAgd2hpY2ggY3JlYXRlcyBhbiBhcnJheVxuICogb2Yga2V5LXZhbHVlIHBhaXJzIGZvciBgb2JqZWN0YCBjb3JyZXNwb25kaW5nIHRvIHRoZSBwcm9wZXJ0eSBuYW1lcyBvZiBgcHJvcHNgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0FycmF5fSBwcm9wcyBUaGUgcHJvcGVydHkgbmFtZXMgdG8gZ2V0IHZhbHVlcyBmb3IuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBrZXktdmFsdWUgcGFpcnMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VUb1BhaXJzKG9iamVjdCwgcHJvcHMpIHtcbiAgcmV0dXJuIGFycmF5TWFwKHByb3BzLCBmdW5jdGlvbihrZXkpIHtcbiAgICByZXR1cm4gW2tleSwgb2JqZWN0W2tleV1dO1xuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlVG9QYWlycztcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/lodash/_baseToPairs.js\n");

/***/ }),

/***/ "./node_modules/lodash/_baseXor.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_baseXor.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};var baseDifference=__webpack_require__(/*! ./_baseDifference */ \"./node_modules/lodash/_baseDifference.js\"),baseFlatten=__webpack_require__(/*! ./_baseFlatten */ \"./node_modules/lodash/_baseFlatten.js\"),baseUniq=__webpack_require__(/*! ./_baseUniq */ \"./node_modules/lodash/_baseUniq.js\");/**\n * The base implementation of methods like `_.xor`, without support for\n * iteratee shorthands, that accepts an array of arrays to inspect.\n *\n * @private\n * @param {Array} arrays The arrays to inspect.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of values.\n */function baseXor(arrays,iteratee,comparator){var length=arrays.length;if(length<2){return length?baseUniq(arrays[0]):[];}var index=-1,result=Array(length);while(++index<length){var array=arrays[index],othIndex=-1;while(++othIndex<length){if(othIndex!=index){result[index]=baseDifference(result[index]||array,arrays[othIndex],iteratee,comparator);}}}return baseUniq(baseFlatten(result,1),iteratee,comparator);}module.exports=baseXor;;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(baseXor,\"baseXor\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/lodash/_baseXor.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVhvci5qcz9lZGM1Il0sIm5hbWVzIjpbImJhc2VEaWZmZXJlbmNlIiwicmVxdWlyZSIsImJhc2VGbGF0dGVuIiwiYmFzZVVuaXEiLCJiYXNlWG9yIiwiYXJyYXlzIiwiaXRlcmF0ZWUiLCJjb21wYXJhdG9yIiwibGVuZ3RoIiwiaW5kZXgiLCJyZXN1bHQiLCJBcnJheSIsImFycmF5Iiwib3RoSW5kZXgiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoia1VBQUEsR0FBSUEsZUFBYyxDQUFHQyxtQkFBTyxDQUFDLG1FQUFELENBQTVCLENBQ0lDLFdBQVcsQ0FBR0QsbUJBQU8sQ0FBQyw2REFBRCxDQUR6QixDQUVJRSxRQUFRLENBQUdGLG1CQUFPLENBQUMsdURBQUQsQ0FGdEIsQ0FJQTs7Ozs7Ozs7O0dBVUEsUUFBU0csUUFBVCxDQUFpQkMsTUFBakIsQ0FBeUJDLFFBQXpCLENBQW1DQyxVQUFuQyxDQUErQyxDQUM3QyxHQUFJQyxPQUFNLENBQUdILE1BQU0sQ0FBQ0csTUFBcEIsQ0FDQSxHQUFJQSxNQUFNLENBQUcsQ0FBYixDQUFnQixDQUNkLE1BQU9BLE9BQU0sQ0FBR0wsUUFBUSxDQUFDRSxNQUFNLENBQUMsQ0FBRCxDQUFQLENBQVgsQ0FBeUIsRUFBdEMsQ0FDRCxDQUNELEdBQUlJLE1BQUssQ0FBRyxDQUFDLENBQWIsQ0FDSUMsTUFBTSxDQUFHQyxLQUFLLENBQUNILE1BQUQsQ0FEbEIsQ0FHQSxNQUFPLEVBQUVDLEtBQUYsQ0FBVUQsTUFBakIsQ0FBeUIsQ0FDdkIsR0FBSUksTUFBSyxDQUFHUCxNQUFNLENBQUNJLEtBQUQsQ0FBbEIsQ0FDSUksUUFBUSxDQUFHLENBQUMsQ0FEaEIsQ0FHQSxNQUFPLEVBQUVBLFFBQUYsQ0FBYUwsTUFBcEIsQ0FBNEIsQ0FDMUIsR0FBSUssUUFBUSxFQUFJSixLQUFoQixDQUF1QixDQUNyQkMsTUFBTSxDQUFDRCxLQUFELENBQU4sQ0FBZ0JULGNBQWMsQ0FBQ1UsTUFBTSxDQUFDRCxLQUFELENBQU4sRUFBaUJHLEtBQWxCLENBQXlCUCxNQUFNLENBQUNRLFFBQUQsQ0FBL0IsQ0FBMkNQLFFBQTNDLENBQXFEQyxVQUFyRCxDQUE5QixDQUNELENBQ0YsQ0FDRixDQUNELE1BQU9KLFNBQVEsQ0FBQ0QsV0FBVyxDQUFDUSxNQUFELENBQVMsQ0FBVCxDQUFaLENBQXlCSixRQUF6QixDQUFtQ0MsVUFBbkMsQ0FBZixDQUNELENBRURPLE1BQU0sQ0FBQ0MsT0FBUCxDQUFpQlgsT0FBakIsQyxxS0FyQlNBLE8iLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlWG9yLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGJhc2VEaWZmZXJlbmNlID0gcmVxdWlyZSgnLi9fYmFzZURpZmZlcmVuY2UnKSxcbiAgICBiYXNlRmxhdHRlbiA9IHJlcXVpcmUoJy4vX2Jhc2VGbGF0dGVuJyksXG4gICAgYmFzZVVuaXEgPSByZXF1aXJlKCcuL19iYXNlVW5pcScpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIG1ldGhvZHMgbGlrZSBgXy54b3JgLCB3aXRob3V0IHN1cHBvcnQgZm9yXG4gKiBpdGVyYXRlZSBzaG9ydGhhbmRzLCB0aGF0IGFjY2VwdHMgYW4gYXJyYXkgb2YgYXJyYXlzIHRvIGluc3BlY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5cyBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiB2YWx1ZXMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VYb3IoYXJyYXlzLCBpdGVyYXRlZSwgY29tcGFyYXRvcikge1xuICB2YXIgbGVuZ3RoID0gYXJyYXlzLmxlbmd0aDtcbiAgaWYgKGxlbmd0aCA8IDIpIHtcbiAgICByZXR1cm4gbGVuZ3RoID8gYmFzZVVuaXEoYXJyYXlzWzBdKSA6IFtdO1xuICB9XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBhcnJheSA9IGFycmF5c1tpbmRleF0sXG4gICAgICAgIG90aEluZGV4ID0gLTE7XG5cbiAgICB3aGlsZSAoKytvdGhJbmRleCA8IGxlbmd0aCkge1xuICAgICAgaWYgKG90aEluZGV4ICE9IGluZGV4KSB7XG4gICAgICAgIHJlc3VsdFtpbmRleF0gPSBiYXNlRGlmZmVyZW5jZShyZXN1bHRbaW5kZXhdIHx8IGFycmF5LCBhcnJheXNbb3RoSW5kZXhdLCBpdGVyYXRlZSwgY29tcGFyYXRvcik7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBiYXNlVW5pcShiYXNlRmxhdHRlbihyZXN1bHQsIDEpLCBpdGVyYXRlZSwgY29tcGFyYXRvcik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVhvcjtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/lodash/_baseXor.js\n");

/***/ }),

/***/ "./node_modules/lodash/_compareAscending.js":
/*!**************************************************!*\
  !*** ./node_modules/lodash/_compareAscending.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};var isSymbol=__webpack_require__(/*! ./isSymbol */ \"./node_modules/lodash/isSymbol.js\");/**\n * Compares values to sort them in ascending order.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {number} Returns the sort order indicator for `value`.\n */function compareAscending(value,other){if(value!==other){var valIsDefined=value!==undefined,valIsNull=value===null,valIsReflexive=value===value,valIsSymbol=isSymbol(value);var othIsDefined=other!==undefined,othIsNull=other===null,othIsReflexive=other===other,othIsSymbol=isSymbol(other);if(!othIsNull&&!othIsSymbol&&!valIsSymbol&&value>other||valIsSymbol&&othIsDefined&&othIsReflexive&&!othIsNull&&!othIsSymbol||valIsNull&&othIsDefined&&othIsReflexive||!valIsDefined&&othIsReflexive||!valIsReflexive){return 1;}if(!valIsNull&&!valIsSymbol&&!othIsSymbol&&value<other||othIsSymbol&&valIsDefined&&valIsReflexive&&!valIsNull&&!valIsSymbol||othIsNull&&valIsDefined&&valIsReflexive||!othIsDefined&&valIsReflexive||!othIsReflexive){return-1;}}return 0;}module.exports=compareAscending;;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(compareAscending,\"compareAscending\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/lodash/_compareAscending.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY29tcGFyZUFzY2VuZGluZy5qcz9jYWU3Il0sIm5hbWVzIjpbImlzU3ltYm9sIiwicmVxdWlyZSIsImNvbXBhcmVBc2NlbmRpbmciLCJ2YWx1ZSIsIm90aGVyIiwidmFsSXNEZWZpbmVkIiwidW5kZWZpbmVkIiwidmFsSXNOdWxsIiwidmFsSXNSZWZsZXhpdmUiLCJ2YWxJc1N5bWJvbCIsIm90aElzRGVmaW5lZCIsIm90aElzTnVsbCIsIm90aElzUmVmbGV4aXZlIiwib3RoSXNTeW1ib2wiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoia1VBQUEsR0FBSUEsU0FBUSxDQUFHQyxtQkFBTyxDQUFDLHFEQUFELENBQXRCLENBRUE7Ozs7Ozs7R0FRQSxRQUFTQyxpQkFBVCxDQUEwQkMsS0FBMUIsQ0FBaUNDLEtBQWpDLENBQXdDLENBQ3RDLEdBQUlELEtBQUssR0FBS0MsS0FBZCxDQUFxQixDQUNuQixHQUFJQyxhQUFZLENBQUdGLEtBQUssR0FBS0csU0FBN0IsQ0FDSUMsU0FBUyxDQUFHSixLQUFLLEdBQUssSUFEMUIsQ0FFSUssY0FBYyxDQUFHTCxLQUFLLEdBQUtBLEtBRi9CLENBR0lNLFdBQVcsQ0FBR1QsUUFBUSxDQUFDRyxLQUFELENBSDFCLENBS0EsR0FBSU8sYUFBWSxDQUFHTixLQUFLLEdBQUtFLFNBQTdCLENBQ0lLLFNBQVMsQ0FBR1AsS0FBSyxHQUFLLElBRDFCLENBRUlRLGNBQWMsQ0FBR1IsS0FBSyxHQUFLQSxLQUYvQixDQUdJUyxXQUFXLENBQUdiLFFBQVEsQ0FBQ0ksS0FBRCxDQUgxQixDQUtBLEdBQUssQ0FBQ08sU0FBRCxFQUFjLENBQUNFLFdBQWYsRUFBOEIsQ0FBQ0osV0FBL0IsRUFBOENOLEtBQUssQ0FBR0MsS0FBdkQsRUFDQ0ssV0FBVyxFQUFJQyxZQUFmLEVBQStCRSxjQUEvQixFQUFpRCxDQUFDRCxTQUFsRCxFQUErRCxDQUFDRSxXQURqRSxFQUVDTixTQUFTLEVBQUlHLFlBQWIsRUFBNkJFLGNBRjlCLEVBR0MsQ0FBQ1AsWUFBRCxFQUFpQk8sY0FIbEIsRUFJQSxDQUFDSixjQUpMLENBSXFCLENBQ25CLE1BQU8sRUFBUCxDQUNELENBQ0QsR0FBSyxDQUFDRCxTQUFELEVBQWMsQ0FBQ0UsV0FBZixFQUE4QixDQUFDSSxXQUEvQixFQUE4Q1YsS0FBSyxDQUFHQyxLQUF2RCxFQUNDUyxXQUFXLEVBQUlSLFlBQWYsRUFBK0JHLGNBQS9CLEVBQWlELENBQUNELFNBQWxELEVBQStELENBQUNFLFdBRGpFLEVBRUNFLFNBQVMsRUFBSU4sWUFBYixFQUE2QkcsY0FGOUIsRUFHQyxDQUFDRSxZQUFELEVBQWlCRixjQUhsQixFQUlBLENBQUNJLGNBSkwsQ0FJcUIsQ0FDbkIsTUFBTyxDQUFDLENBQVIsQ0FDRCxDQUNGLENBQ0QsTUFBTyxFQUFQLENBQ0QsQ0FFREUsTUFBTSxDQUFDQyxPQUFQLENBQWlCYixnQkFBakIsQyxxS0E5QlNBLGdCIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY29tcGFyZUFzY2VuZGluZy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBpc1N5bWJvbCA9IHJlcXVpcmUoJy4vaXNTeW1ib2wnKTtcblxuLyoqXG4gKiBDb21wYXJlcyB2YWx1ZXMgdG8gc29ydCB0aGVtIGluIGFzY2VuZGluZyBvcmRlci5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzb3J0IG9yZGVyIGluZGljYXRvciBmb3IgYHZhbHVlYC5cbiAqL1xuZnVuY3Rpb24gY29tcGFyZUFzY2VuZGluZyh2YWx1ZSwgb3RoZXIpIHtcbiAgaWYgKHZhbHVlICE9PSBvdGhlcikge1xuICAgIHZhciB2YWxJc0RlZmluZWQgPSB2YWx1ZSAhPT0gdW5kZWZpbmVkLFxuICAgICAgICB2YWxJc051bGwgPSB2YWx1ZSA9PT0gbnVsbCxcbiAgICAgICAgdmFsSXNSZWZsZXhpdmUgPSB2YWx1ZSA9PT0gdmFsdWUsXG4gICAgICAgIHZhbElzU3ltYm9sID0gaXNTeW1ib2wodmFsdWUpO1xuXG4gICAgdmFyIG90aElzRGVmaW5lZCA9IG90aGVyICE9PSB1bmRlZmluZWQsXG4gICAgICAgIG90aElzTnVsbCA9IG90aGVyID09PSBudWxsLFxuICAgICAgICBvdGhJc1JlZmxleGl2ZSA9IG90aGVyID09PSBvdGhlcixcbiAgICAgICAgb3RoSXNTeW1ib2wgPSBpc1N5bWJvbChvdGhlcik7XG5cbiAgICBpZiAoKCFvdGhJc051bGwgJiYgIW90aElzU3ltYm9sICYmICF2YWxJc1N5bWJvbCAmJiB2YWx1ZSA+IG90aGVyKSB8fFxuICAgICAgICAodmFsSXNTeW1ib2wgJiYgb3RoSXNEZWZpbmVkICYmIG90aElzUmVmbGV4aXZlICYmICFvdGhJc051bGwgJiYgIW90aElzU3ltYm9sKSB8fFxuICAgICAgICAodmFsSXNOdWxsICYmIG90aElzRGVmaW5lZCAmJiBvdGhJc1JlZmxleGl2ZSkgfHxcbiAgICAgICAgKCF2YWxJc0RlZmluZWQgJiYgb3RoSXNSZWZsZXhpdmUpIHx8XG4gICAgICAgICF2YWxJc1JlZmxleGl2ZSkge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfVxuICAgIGlmICgoIXZhbElzTnVsbCAmJiAhdmFsSXNTeW1ib2wgJiYgIW90aElzU3ltYm9sICYmIHZhbHVlIDwgb3RoZXIpIHx8XG4gICAgICAgIChvdGhJc1N5bWJvbCAmJiB2YWxJc0RlZmluZWQgJiYgdmFsSXNSZWZsZXhpdmUgJiYgIXZhbElzTnVsbCAmJiAhdmFsSXNTeW1ib2wpIHx8XG4gICAgICAgIChvdGhJc051bGwgJiYgdmFsSXNEZWZpbmVkICYmIHZhbElzUmVmbGV4aXZlKSB8fFxuICAgICAgICAoIW90aElzRGVmaW5lZCAmJiB2YWxJc1JlZmxleGl2ZSkgfHxcbiAgICAgICAgIW90aElzUmVmbGV4aXZlKSB7XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuICB9XG4gIHJldHVybiAwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbXBhcmVBc2NlbmRpbmc7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/lodash/_compareAscending.js\n");

/***/ }),

/***/ "./node_modules/lodash/_compareMultiple.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash/_compareMultiple.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};var compareAscending=__webpack_require__(/*! ./_compareAscending */ \"./node_modules/lodash/_compareAscending.js\");/**\n * Used by `_.orderBy` to compare multiple properties of a value to another\n * and stable sort them.\n *\n * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\n * specify an order of \"desc\" for descending or \"asc\" for ascending sort order\n * of corresponding values.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {boolean[]|string[]} orders The order to sort by for each property.\n * @returns {number} Returns the sort order indicator for `object`.\n */function compareMultiple(object,other,orders){var index=-1,objCriteria=object.criteria,othCriteria=other.criteria,length=objCriteria.length,ordersLength=orders.length;while(++index<length){var result=compareAscending(objCriteria[index],othCriteria[index]);if(result){if(index>=ordersLength){return result;}var order=orders[index];return result*(order=='desc'?-1:1);}}// Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\n// that causes it, under certain circumstances, to provide the same value for\n// `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\n// for more details.\n//\n// This also ensures a stable sort in V8 and other engines.\n// See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\nreturn object.index-other.index;}module.exports=compareMultiple;;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(compareMultiple,\"compareMultiple\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/lodash/_compareMultiple.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY29tcGFyZU11bHRpcGxlLmpzPzIxNjQiXSwibmFtZXMiOlsiY29tcGFyZUFzY2VuZGluZyIsInJlcXVpcmUiLCJjb21wYXJlTXVsdGlwbGUiLCJvYmplY3QiLCJvdGhlciIsIm9yZGVycyIsImluZGV4Iiwib2JqQ3JpdGVyaWEiLCJjcml0ZXJpYSIsIm90aENyaXRlcmlhIiwibGVuZ3RoIiwib3JkZXJzTGVuZ3RoIiwicmVzdWx0Iiwib3JkZXIiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoia1VBQUEsR0FBSUEsaUJBQWdCLENBQUdDLG1CQUFPLENBQUMsdUVBQUQsQ0FBOUIsQ0FFQTs7Ozs7Ozs7Ozs7OztHQWNBLFFBQVNDLGdCQUFULENBQXlCQyxNQUF6QixDQUFpQ0MsS0FBakMsQ0FBd0NDLE1BQXhDLENBQWdELENBQzlDLEdBQUlDLE1BQUssQ0FBRyxDQUFDLENBQWIsQ0FDSUMsV0FBVyxDQUFHSixNQUFNLENBQUNLLFFBRHpCLENBRUlDLFdBQVcsQ0FBR0wsS0FBSyxDQUFDSSxRQUZ4QixDQUdJRSxNQUFNLENBQUdILFdBQVcsQ0FBQ0csTUFIekIsQ0FJSUMsWUFBWSxDQUFHTixNQUFNLENBQUNLLE1BSjFCLENBTUEsTUFBTyxFQUFFSixLQUFGLENBQVVJLE1BQWpCLENBQXlCLENBQ3ZCLEdBQUlFLE9BQU0sQ0FBR1osZ0JBQWdCLENBQUNPLFdBQVcsQ0FBQ0QsS0FBRCxDQUFaLENBQXFCRyxXQUFXLENBQUNILEtBQUQsQ0FBaEMsQ0FBN0IsQ0FDQSxHQUFJTSxNQUFKLENBQVksQ0FDVixHQUFJTixLQUFLLEVBQUlLLFlBQWIsQ0FBMkIsQ0FDekIsTUFBT0MsT0FBUCxDQUNELENBQ0QsR0FBSUMsTUFBSyxDQUFHUixNQUFNLENBQUNDLEtBQUQsQ0FBbEIsQ0FDQSxNQUFPTSxPQUFNLEVBQUlDLEtBQUssRUFBSSxNQUFULENBQWtCLENBQUMsQ0FBbkIsQ0FBdUIsQ0FBM0IsQ0FBYixDQUNELENBQ0YsQ0FDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU9WLE9BQU0sQ0FBQ0csS0FBUCxDQUFlRixLQUFLLENBQUNFLEtBQTVCLENBQ0QsQ0FFRFEsTUFBTSxDQUFDQyxPQUFQLENBQWlCYixlQUFqQixDLHFLQTNCU0EsZSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NvbXBhcmVNdWx0aXBsZS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBjb21wYXJlQXNjZW5kaW5nID0gcmVxdWlyZSgnLi9fY29tcGFyZUFzY2VuZGluZycpO1xuXG4vKipcbiAqIFVzZWQgYnkgYF8ub3JkZXJCeWAgdG8gY29tcGFyZSBtdWx0aXBsZSBwcm9wZXJ0aWVzIG9mIGEgdmFsdWUgdG8gYW5vdGhlclxuICogYW5kIHN0YWJsZSBzb3J0IHRoZW0uXG4gKlxuICogSWYgYG9yZGVyc2AgaXMgdW5zcGVjaWZpZWQsIGFsbCB2YWx1ZXMgYXJlIHNvcnRlZCBpbiBhc2NlbmRpbmcgb3JkZXIuIE90aGVyd2lzZSxcbiAqIHNwZWNpZnkgYW4gb3JkZXIgb2YgXCJkZXNjXCIgZm9yIGRlc2NlbmRpbmcgb3IgXCJhc2NcIiBmb3IgYXNjZW5kaW5nIHNvcnQgb3JkZXJcbiAqIG9mIGNvcnJlc3BvbmRpbmcgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge2Jvb2xlYW5bXXxzdHJpbmdbXX0gb3JkZXJzIFRoZSBvcmRlciB0byBzb3J0IGJ5IGZvciBlYWNoIHByb3BlcnR5LlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc29ydCBvcmRlciBpbmRpY2F0b3IgZm9yIGBvYmplY3RgLlxuICovXG5mdW5jdGlvbiBjb21wYXJlTXVsdGlwbGUob2JqZWN0LCBvdGhlciwgb3JkZXJzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgb2JqQ3JpdGVyaWEgPSBvYmplY3QuY3JpdGVyaWEsXG4gICAgICBvdGhDcml0ZXJpYSA9IG90aGVyLmNyaXRlcmlhLFxuICAgICAgbGVuZ3RoID0gb2JqQ3JpdGVyaWEubGVuZ3RoLFxuICAgICAgb3JkZXJzTGVuZ3RoID0gb3JkZXJzLmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciByZXN1bHQgPSBjb21wYXJlQXNjZW5kaW5nKG9iakNyaXRlcmlhW2luZGV4XSwgb3RoQ3JpdGVyaWFbaW5kZXhdKTtcbiAgICBpZiAocmVzdWx0KSB7XG4gICAgICBpZiAoaW5kZXggPj0gb3JkZXJzTGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICB2YXIgb3JkZXIgPSBvcmRlcnNbaW5kZXhdO1xuICAgICAgcmV0dXJuIHJlc3VsdCAqIChvcmRlciA9PSAnZGVzYycgPyAtMSA6IDEpO1xuICAgIH1cbiAgfVxuICAvLyBGaXhlcyBhbiBgQXJyYXkjc29ydGAgYnVnIGluIHRoZSBKUyBlbmdpbmUgZW1iZWRkZWQgaW4gQWRvYmUgYXBwbGljYXRpb25zXG4gIC8vIHRoYXQgY2F1c2VzIGl0LCB1bmRlciBjZXJ0YWluIGNpcmN1bXN0YW5jZXMsIHRvIHByb3ZpZGUgdGhlIHNhbWUgdmFsdWUgZm9yXG4gIC8vIGBvYmplY3RgIGFuZCBgb3RoZXJgLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2phc2hrZW5hcy91bmRlcnNjb3JlL3B1bGwvMTI0N1xuICAvLyBmb3IgbW9yZSBkZXRhaWxzLlxuICAvL1xuICAvLyBUaGlzIGFsc28gZW5zdXJlcyBhIHN0YWJsZSBzb3J0IGluIFY4IGFuZCBvdGhlciBlbmdpbmVzLlxuICAvLyBTZWUgaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9OTAgZm9yIG1vcmUgZGV0YWlscy5cbiAgcmV0dXJuIG9iamVjdC5pbmRleCAtIG90aGVyLmluZGV4O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbXBhcmVNdWx0aXBsZTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/lodash/_compareMultiple.js\n");

/***/ }),

/***/ "./node_modules/lodash/_createToPairs.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_createToPairs.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};var baseToPairs=__webpack_require__(/*! ./_baseToPairs */ \"./node_modules/lodash/_baseToPairs.js\"),getTag=__webpack_require__(/*! ./_getTag */ \"./node_modules/lodash/_getTag.js\"),mapToArray=__webpack_require__(/*! ./_mapToArray */ \"./node_modules/lodash/_mapToArray.js\"),setToPairs=__webpack_require__(/*! ./_setToPairs */ \"./node_modules/lodash/_setToPairs.js\");/** `Object#toString` result references. */var mapTag='[object Map]',setTag='[object Set]';/**\n * Creates a `_.toPairs` or `_.toPairsIn` function.\n *\n * @private\n * @param {Function} keysFunc The function to get the keys of a given object.\n * @returns {Function} Returns the new pairs function.\n */function createToPairs(keysFunc){return function(object){var tag=getTag(object);if(tag==mapTag){return mapToArray(object);}if(tag==setTag){return setToPairs(object);}return baseToPairs(object,keysFunc(object));};}module.exports=createToPairs;;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(mapTag,\"mapTag\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/lodash/_createToPairs.js\");reactHotLoader.register(setTag,\"setTag\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/lodash/_createToPairs.js\");reactHotLoader.register(createToPairs,\"createToPairs\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/lodash/_createToPairs.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY3JlYXRlVG9QYWlycy5qcz9lYzQ3Il0sIm5hbWVzIjpbImJhc2VUb1BhaXJzIiwicmVxdWlyZSIsImdldFRhZyIsIm1hcFRvQXJyYXkiLCJzZXRUb1BhaXJzIiwibWFwVGFnIiwic2V0VGFnIiwiY3JlYXRlVG9QYWlycyIsImtleXNGdW5jIiwib2JqZWN0IiwidGFnIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6ImtVQUFBLEdBQUlBLFlBQVcsQ0FBR0MsbUJBQU8sQ0FBQyw2REFBRCxDQUF6QixDQUNJQyxNQUFNLENBQUdELG1CQUFPLENBQUMsbURBQUQsQ0FEcEIsQ0FFSUUsVUFBVSxDQUFHRixtQkFBTyxDQUFDLDJEQUFELENBRnhCLENBR0lHLFVBQVUsQ0FBR0gsbUJBQU8sQ0FBQywyREFBRCxDQUh4QixDQUtBLDJDQUNBLEdBQUlJLE9BQU0sQ0FBRyxjQUFiLENBQ0lDLE1BQU0sQ0FBRyxjQURiLENBR0E7Ozs7OztHQU9BLFFBQVNDLGNBQVQsQ0FBdUJDLFFBQXZCLENBQWlDLENBQy9CLE1BQU8sVUFBU0MsTUFBVCxDQUFpQixDQUN0QixHQUFJQyxJQUFHLENBQUdSLE1BQU0sQ0FBQ08sTUFBRCxDQUFoQixDQUNBLEdBQUlDLEdBQUcsRUFBSUwsTUFBWCxDQUFtQixDQUNqQixNQUFPRixXQUFVLENBQUNNLE1BQUQsQ0FBakIsQ0FDRCxDQUNELEdBQUlDLEdBQUcsRUFBSUosTUFBWCxDQUFtQixDQUNqQixNQUFPRixXQUFVLENBQUNLLE1BQUQsQ0FBakIsQ0FDRCxDQUNELE1BQU9ULFlBQVcsQ0FBQ1MsTUFBRCxDQUFTRCxRQUFRLENBQUNDLE1BQUQsQ0FBakIsQ0FBbEIsQ0FDRCxDQVRELENBVUQsQ0FFREUsTUFBTSxDQUFDQyxPQUFQLENBQWlCTCxhQUFqQixDLHFLQXZCSUYsTSxnSUFDQUMsTSxnSUFTS0MsYSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NyZWF0ZVRvUGFpcnMuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYmFzZVRvUGFpcnMgPSByZXF1aXJlKCcuL19iYXNlVG9QYWlycycpLFxuICAgIGdldFRhZyA9IHJlcXVpcmUoJy4vX2dldFRhZycpLFxuICAgIG1hcFRvQXJyYXkgPSByZXF1aXJlKCcuL19tYXBUb0FycmF5JyksXG4gICAgc2V0VG9QYWlycyA9IHJlcXVpcmUoJy4vX3NldFRvUGFpcnMnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBgXy50b1BhaXJzYCBvciBgXy50b1BhaXJzSW5gIGZ1bmN0aW9uLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBrZXlzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBrZXlzIG9mIGEgZ2l2ZW4gb2JqZWN0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcGFpcnMgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVRvUGFpcnMoa2V5c0Z1bmMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHZhciB0YWcgPSBnZXRUYWcob2JqZWN0KTtcbiAgICBpZiAodGFnID09IG1hcFRhZykge1xuICAgICAgcmV0dXJuIG1hcFRvQXJyYXkob2JqZWN0KTtcbiAgICB9XG4gICAgaWYgKHRhZyA9PSBzZXRUYWcpIHtcbiAgICAgIHJldHVybiBzZXRUb1BhaXJzKG9iamVjdCk7XG4gICAgfVxuICAgIHJldHVybiBiYXNlVG9QYWlycyhvYmplY3QsIGtleXNGdW5jKG9iamVjdCkpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZVRvUGFpcnM7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/lodash/_createToPairs.js\n");

/***/ }),

/***/ "./node_modules/lodash/_isIterateeCall.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_isIterateeCall.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};var eq=__webpack_require__(/*! ./eq */ \"./node_modules/lodash/eq.js\"),isArrayLike=__webpack_require__(/*! ./isArrayLike */ \"./node_modules/lodash/isArrayLike.js\"),isIndex=__webpack_require__(/*! ./_isIndex */ \"./node_modules/lodash/_isIndex.js\"),isObject=__webpack_require__(/*! ./isObject */ \"./node_modules/lodash/isObject.js\");/**\n * Checks if the given arguments are from an iteratee call.\n *\n * @private\n * @param {*} value The potential iteratee value argument.\n * @param {*} index The potential iteratee index or key argument.\n * @param {*} object The potential iteratee object argument.\n * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n *  else `false`.\n */function isIterateeCall(value,index,object){if(!isObject(object)){return false;}var type=typeof index;if(type=='number'?isArrayLike(object)&&isIndex(index,object.length):type=='string'&&index in object){return eq(object[index],value);}return false;}module.exports=isIterateeCall;;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(isIterateeCall,\"isIterateeCall\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/lodash/_isIterateeCall.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faXNJdGVyYXRlZUNhbGwuanM/OWFmZiJdLCJuYW1lcyI6WyJlcSIsInJlcXVpcmUiLCJpc0FycmF5TGlrZSIsImlzSW5kZXgiLCJpc09iamVjdCIsImlzSXRlcmF0ZWVDYWxsIiwidmFsdWUiLCJpbmRleCIsIm9iamVjdCIsInR5cGUiLCJsZW5ndGgiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoia1VBQUEsR0FBSUEsR0FBRSxDQUFHQyxtQkFBTyxDQUFDLHlDQUFELENBQWhCLENBQ0lDLFdBQVcsQ0FBR0QsbUJBQU8sQ0FBQywyREFBRCxDQUR6QixDQUVJRSxPQUFPLENBQUdGLG1CQUFPLENBQUMscURBQUQsQ0FGckIsQ0FHSUcsUUFBUSxDQUFHSCxtQkFBTyxDQUFDLHFEQUFELENBSHRCLENBS0E7Ozs7Ozs7OztHQVVBLFFBQVNJLGVBQVQsQ0FBd0JDLEtBQXhCLENBQStCQyxLQUEvQixDQUFzQ0MsTUFBdEMsQ0FBOEMsQ0FDNUMsR0FBSSxDQUFDSixRQUFRLENBQUNJLE1BQUQsQ0FBYixDQUF1QixDQUNyQixNQUFPLE1BQVAsQ0FDRCxDQUNELEdBQUlDLEtBQUksQ0FBRyxNQUFPRixNQUFsQixDQUNBLEdBQUlFLElBQUksRUFBSSxRQUFSLENBQ0tQLFdBQVcsQ0FBQ00sTUFBRCxDQUFYLEVBQXVCTCxPQUFPLENBQUNJLEtBQUQsQ0FBUUMsTUFBTSxDQUFDRSxNQUFmLENBRG5DLENBRUtELElBQUksRUFBSSxRQUFSLEVBQW9CRixLQUFLLEdBQUlDLE9BRnRDLENBR00sQ0FDSixNQUFPUixHQUFFLENBQUNRLE1BQU0sQ0FBQ0QsS0FBRCxDQUFQLENBQWdCRCxLQUFoQixDQUFULENBQ0QsQ0FDRCxNQUFPLE1BQVAsQ0FDRCxDQUVESyxNQUFNLENBQUNDLE9BQVAsQ0FBaUJQLGNBQWpCLEMscUtBZFNBLGMiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pc0l0ZXJhdGVlQ2FsbC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBlcSA9IHJlcXVpcmUoJy4vZXEnKSxcbiAgICBpc0FycmF5TGlrZSA9IHJlcXVpcmUoJy4vaXNBcnJheUxpa2UnKSxcbiAgICBpc0luZGV4ID0gcmVxdWlyZSgnLi9faXNJbmRleCcpLFxuICAgIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpO1xuXG4vKipcbiAqIENoZWNrcyBpZiB0aGUgZ2l2ZW4gYXJndW1lbnRzIGFyZSBmcm9tIGFuIGl0ZXJhdGVlIGNhbGwuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHBvdGVudGlhbCBpdGVyYXRlZSB2YWx1ZSBhcmd1bWVudC5cbiAqIEBwYXJhbSB7Kn0gaW5kZXggVGhlIHBvdGVudGlhbCBpdGVyYXRlZSBpbmRleCBvciBrZXkgYXJndW1lbnQuXG4gKiBAcGFyYW0geyp9IG9iamVjdCBUaGUgcG90ZW50aWFsIGl0ZXJhdGVlIG9iamVjdCBhcmd1bWVudC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYXJndW1lbnRzIGFyZSBmcm9tIGFuIGl0ZXJhdGVlIGNhbGwsXG4gKiAgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0l0ZXJhdGVlQ2FsbCh2YWx1ZSwgaW5kZXgsIG9iamVjdCkge1xuICBpZiAoIWlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHR5cGUgPSB0eXBlb2YgaW5kZXg7XG4gIGlmICh0eXBlID09ICdudW1iZXInXG4gICAgICAgID8gKGlzQXJyYXlMaWtlKG9iamVjdCkgJiYgaXNJbmRleChpbmRleCwgb2JqZWN0Lmxlbmd0aCkpXG4gICAgICAgIDogKHR5cGUgPT0gJ3N0cmluZycgJiYgaW5kZXggaW4gb2JqZWN0KVxuICAgICAgKSB7XG4gICAgcmV0dXJuIGVxKG9iamVjdFtpbmRleF0sIHZhbHVlKTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNJdGVyYXRlZUNhbGw7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/lodash/_isIterateeCall.js\n");

/***/ }),

/***/ "./node_modules/lodash/_setToPairs.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_setToPairs.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};/**\n * Converts `set` to its value-value pairs.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the value-value pairs.\n */function setToPairs(set){var index=-1,result=Array(set.size);set.forEach(function(value){result[++index]=[value,value];});return result;}module.exports=setToPairs;;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(setToPairs,\"setToPairs\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/lodash/_setToPairs.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc2V0VG9QYWlycy5qcz9jZWJkIl0sIm5hbWVzIjpbInNldFRvUGFpcnMiLCJzZXQiLCJpbmRleCIsInJlc3VsdCIsIkFycmF5Iiwic2l6ZSIsImZvckVhY2giLCJ2YWx1ZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJrVUFBQTs7Ozs7O0dBT0EsUUFBU0EsV0FBVCxDQUFvQkMsR0FBcEIsQ0FBeUIsQ0FDdkIsR0FBSUMsTUFBSyxDQUFHLENBQUMsQ0FBYixDQUNJQyxNQUFNLENBQUdDLEtBQUssQ0FBQ0gsR0FBRyxDQUFDSSxJQUFMLENBRGxCLENBR0FKLEdBQUcsQ0FBQ0ssT0FBSixDQUFZLFNBQVNDLEtBQVQsQ0FBZ0IsQ0FDMUJKLE1BQU0sQ0FBQyxFQUFFRCxLQUFILENBQU4sQ0FBa0IsQ0FBQ0ssS0FBRCxDQUFRQSxLQUFSLENBQWxCLENBQ0QsQ0FGRCxFQUdBLE1BQU9KLE9BQVAsQ0FDRCxDQUVESyxNQUFNLENBQUNDLE9BQVAsQ0FBaUJULFVBQWpCLEMscUtBVlNBLFUiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zZXRUb1BhaXJzLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb252ZXJ0cyBgc2V0YCB0byBpdHMgdmFsdWUtdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzZXQgVGhlIHNldCB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB2YWx1ZS12YWx1ZSBwYWlycy5cbiAqL1xuZnVuY3Rpb24gc2V0VG9QYWlycyhzZXQpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSBBcnJheShzZXQuc2l6ZSk7XG5cbiAgc2V0LmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXN1bHRbKytpbmRleF0gPSBbdmFsdWUsIHZhbHVlXTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0VG9QYWlycztcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/lodash/_setToPairs.js\n");

/***/ }),

/***/ "./node_modules/lodash/clamp.js":
/*!**************************************!*\
  !*** ./node_modules/lodash/clamp.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};var baseClamp=__webpack_require__(/*! ./_baseClamp */ \"./node_modules/lodash/_baseClamp.js\"),toNumber=__webpack_require__(/*! ./toNumber */ \"./node_modules/lodash/toNumber.js\");/**\n * Clamps `number` within the inclusive `lower` and `upper` bounds.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Number\n * @param {number} number The number to clamp.\n * @param {number} [lower] The lower bound.\n * @param {number} upper The upper bound.\n * @returns {number} Returns the clamped number.\n * @example\n *\n * _.clamp(-10, -5, 5);\n * // => -5\n *\n * _.clamp(10, -5, 5);\n * // => 5\n */function clamp(number,lower,upper){if(upper===undefined){upper=lower;lower=undefined;}if(upper!==undefined){upper=toNumber(upper);upper=upper===upper?upper:0;}if(lower!==undefined){lower=toNumber(lower);lower=lower===lower?lower:0;}return baseClamp(toNumber(number),lower,upper);}module.exports=clamp;;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(clamp,\"clamp\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/lodash/clamp.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9jbGFtcC5qcz9mNjc4Il0sIm5hbWVzIjpbImJhc2VDbGFtcCIsInJlcXVpcmUiLCJ0b051bWJlciIsImNsYW1wIiwibnVtYmVyIiwibG93ZXIiLCJ1cHBlciIsInVuZGVmaW5lZCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJrVUFBQSxHQUFJQSxVQUFTLENBQUdDLG1CQUFPLENBQUMseURBQUQsQ0FBdkIsQ0FDSUMsUUFBUSxDQUFHRCxtQkFBTyxDQUFDLHFEQUFELENBRHRCLENBR0E7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQW1CQSxRQUFTRSxNQUFULENBQWVDLE1BQWYsQ0FBdUJDLEtBQXZCLENBQThCQyxLQUE5QixDQUFxQyxDQUNuQyxHQUFJQSxLQUFLLEdBQUtDLFNBQWQsQ0FBeUIsQ0FDdkJELEtBQUssQ0FBR0QsS0FBUixDQUNBQSxLQUFLLENBQUdFLFNBQVIsQ0FDRCxDQUNELEdBQUlELEtBQUssR0FBS0MsU0FBZCxDQUF5QixDQUN2QkQsS0FBSyxDQUFHSixRQUFRLENBQUNJLEtBQUQsQ0FBaEIsQ0FDQUEsS0FBSyxDQUFHQSxLQUFLLEdBQUtBLEtBQVYsQ0FBa0JBLEtBQWxCLENBQTBCLENBQWxDLENBQ0QsQ0FDRCxHQUFJRCxLQUFLLEdBQUtFLFNBQWQsQ0FBeUIsQ0FDdkJGLEtBQUssQ0FBR0gsUUFBUSxDQUFDRyxLQUFELENBQWhCLENBQ0FBLEtBQUssQ0FBR0EsS0FBSyxHQUFLQSxLQUFWLENBQWtCQSxLQUFsQixDQUEwQixDQUFsQyxDQUNELENBQ0QsTUFBT0wsVUFBUyxDQUFDRSxRQUFRLENBQUNFLE1BQUQsQ0FBVCxDQUFtQkMsS0FBbkIsQ0FBMEJDLEtBQTFCLENBQWhCLENBQ0QsQ0FFREUsTUFBTSxDQUFDQyxPQUFQLENBQWlCTixLQUFqQixDLHFLQWhCU0EsSyIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9sb2Rhc2gvY2xhbXAuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYmFzZUNsYW1wID0gcmVxdWlyZSgnLi9fYmFzZUNsYW1wJyksXG4gICAgdG9OdW1iZXIgPSByZXF1aXJlKCcuL3RvTnVtYmVyJyk7XG5cbi8qKlxuICogQ2xhbXBzIGBudW1iZXJgIHdpdGhpbiB0aGUgaW5jbHVzaXZlIGBsb3dlcmAgYW5kIGB1cHBlcmAgYm91bmRzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBOdW1iZXJcbiAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byBjbGFtcC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbbG93ZXJdIFRoZSBsb3dlciBib3VuZC5cbiAqIEBwYXJhbSB7bnVtYmVyfSB1cHBlciBUaGUgdXBwZXIgYm91bmQuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjbGFtcGVkIG51bWJlci5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5jbGFtcCgtMTAsIC01LCA1KTtcbiAqIC8vID0+IC01XG4gKlxuICogXy5jbGFtcCgxMCwgLTUsIDUpO1xuICogLy8gPT4gNVxuICovXG5mdW5jdGlvbiBjbGFtcChudW1iZXIsIGxvd2VyLCB1cHBlcikge1xuICBpZiAodXBwZXIgPT09IHVuZGVmaW5lZCkge1xuICAgIHVwcGVyID0gbG93ZXI7XG4gICAgbG93ZXIgPSB1bmRlZmluZWQ7XG4gIH1cbiAgaWYgKHVwcGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICB1cHBlciA9IHRvTnVtYmVyKHVwcGVyKTtcbiAgICB1cHBlciA9IHVwcGVyID09PSB1cHBlciA/IHVwcGVyIDogMDtcbiAgfVxuICBpZiAobG93ZXIgIT09IHVuZGVmaW5lZCkge1xuICAgIGxvd2VyID0gdG9OdW1iZXIobG93ZXIpO1xuICAgIGxvd2VyID0gbG93ZXIgPT09IGxvd2VyID8gbG93ZXIgOiAwO1xuICB9XG4gIHJldHVybiBiYXNlQ2xhbXAodG9OdW1iZXIobnVtYmVyKSwgbG93ZXIsIHVwcGVyKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjbGFtcDtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/lodash/clamp.js\n");

/***/ }),

/***/ "./node_modules/lodash/clone.js":
/*!**************************************!*\
  !*** ./node_modules/lodash/clone.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};var baseClone=__webpack_require__(/*! ./_baseClone */ \"./node_modules/lodash/_baseClone.js\");/** Used to compose bitmasks for cloning. */var CLONE_SYMBOLS_FLAG=4;/**\n * Creates a shallow clone of `value`.\n *\n * **Note:** This method is loosely based on the\n * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n * and supports cloning arrays, array buffers, booleans, date objects, maps,\n * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n * arrays. The own enumerable properties of `arguments` objects are cloned\n * as plain objects. An empty object is returned for uncloneable values such\n * as error objects, functions, DOM nodes, and WeakMaps.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to clone.\n * @returns {*} Returns the cloned value.\n * @see _.cloneDeep\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var shallow = _.clone(objects);\n * console.log(shallow[0] === objects[0]);\n * // => true\n */function clone(value){return baseClone(value,CLONE_SYMBOLS_FLAG);}module.exports=clone;;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(CLONE_SYMBOLS_FLAG,\"CLONE_SYMBOLS_FLAG\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/lodash/clone.js\");reactHotLoader.register(clone,\"clone\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/lodash/clone.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9jbG9uZS5qcz9iOGNlIl0sIm5hbWVzIjpbImJhc2VDbG9uZSIsInJlcXVpcmUiLCJDTE9ORV9TWU1CT0xTX0ZMQUciLCJjbG9uZSIsInZhbHVlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6ImtVQUFBLEdBQUlBLFVBQVMsQ0FBR0MsbUJBQU8sQ0FBQyx5REFBRCxDQUF2QixDQUVBLDRDQUNBLEdBQUlDLG1CQUFrQixDQUFHLENBQXpCLENBRUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0EwQkEsUUFBU0MsTUFBVCxDQUFlQyxLQUFmLENBQXNCLENBQ3BCLE1BQU9KLFVBQVMsQ0FBQ0ksS0FBRCxDQUFRRixrQkFBUixDQUFoQixDQUNELENBRURHLE1BQU0sQ0FBQ0MsT0FBUCxDQUFpQkgsS0FBakIsQyxxS0FoQ0lELGtCLG1JQTRCS0MsSyIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9sb2Rhc2gvY2xvbmUuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYmFzZUNsb25lID0gcmVxdWlyZSgnLi9fYmFzZUNsb25lJyk7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIGNsb25pbmcuICovXG52YXIgQ0xPTkVfU1lNQk9MU19GTEFHID0gNDtcblxuLyoqXG4gKiBDcmVhdGVzIGEgc2hhbGxvdyBjbG9uZSBvZiBgdmFsdWVgLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBsb29zZWx5IGJhc2VkIG9uIHRoZVxuICogW3N0cnVjdHVyZWQgY2xvbmUgYWxnb3JpdGhtXShodHRwczovL21kbi5pby9TdHJ1Y3R1cmVkX2Nsb25lX2FsZ29yaXRobSlcbiAqIGFuZCBzdXBwb3J0cyBjbG9uaW5nIGFycmF5cywgYXJyYXkgYnVmZmVycywgYm9vbGVhbnMsIGRhdGUgb2JqZWN0cywgbWFwcyxcbiAqIG51bWJlcnMsIGBPYmplY3RgIG9iamVjdHMsIHJlZ2V4ZXMsIHNldHMsIHN0cmluZ3MsIHN5bWJvbHMsIGFuZCB0eXBlZFxuICogYXJyYXlzLiBUaGUgb3duIGVudW1lcmFibGUgcHJvcGVydGllcyBvZiBgYXJndW1lbnRzYCBvYmplY3RzIGFyZSBjbG9uZWRcbiAqIGFzIHBsYWluIG9iamVjdHMuIEFuIGVtcHR5IG9iamVjdCBpcyByZXR1cm5lZCBmb3IgdW5jbG9uZWFibGUgdmFsdWVzIHN1Y2hcbiAqIGFzIGVycm9yIG9iamVjdHMsIGZ1bmN0aW9ucywgRE9NIG5vZGVzLCBhbmQgV2Vha01hcHMuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNsb25lLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGNsb25lZCB2YWx1ZS5cbiAqIEBzZWUgXy5jbG9uZURlZXBcbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdHMgPSBbeyAnYSc6IDEgfSwgeyAnYic6IDIgfV07XG4gKlxuICogdmFyIHNoYWxsb3cgPSBfLmNsb25lKG9iamVjdHMpO1xuICogY29uc29sZS5sb2coc2hhbGxvd1swXSA9PT0gb2JqZWN0c1swXSk7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGNsb25lKHZhbHVlKSB7XG4gIHJldHVybiBiYXNlQ2xvbmUodmFsdWUsIENMT05FX1NZTUJPTFNfRkxBRyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2xvbmU7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/lodash/clone.js\n");

/***/ }),

/***/ "./node_modules/lodash/countBy.js":
/*!****************************************!*\
  !*** ./node_modules/lodash/countBy.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};var baseAssignValue=__webpack_require__(/*! ./_baseAssignValue */ \"./node_modules/lodash/_baseAssignValue.js\"),createAggregator=__webpack_require__(/*! ./_createAggregator */ \"./node_modules/lodash/_createAggregator.js\");/** Used for built-in method references. */var objectProto=Object.prototype;/** Used to check objects for own properties. */var hasOwnProperty=objectProto.hasOwnProperty;/**\n * Creates an object composed of keys generated from the results of running\n * each element of `collection` thru `iteratee`. The corresponding value of\n * each key is the number of times the key was returned by `iteratee`. The\n * iteratee is invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 0.5.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n * @returns {Object} Returns the composed aggregate object.\n * @example\n *\n * _.countBy([6.1, 4.2, 6.3], Math.floor);\n * // => { '4': 1, '6': 2 }\n *\n * // The `_.property` iteratee shorthand.\n * _.countBy(['one', 'two', 'three'], 'length');\n * // => { '3': 2, '5': 1 }\n */var countBy=createAggregator(function(result,value,key){if(hasOwnProperty.call(result,key)){++result[key];}else{baseAssignValue(result,key,1);}});module.exports=countBy;;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(objectProto,\"objectProto\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/lodash/countBy.js\");reactHotLoader.register(hasOwnProperty,\"hasOwnProperty\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/lodash/countBy.js\");reactHotLoader.register(countBy,\"countBy\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/lodash/countBy.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9jb3VudEJ5LmpzPzhmZWQiXSwibmFtZXMiOlsiYmFzZUFzc2lnblZhbHVlIiwicmVxdWlyZSIsImNyZWF0ZUFnZ3JlZ2F0b3IiLCJvYmplY3RQcm90byIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY291bnRCeSIsInJlc3VsdCIsInZhbHVlIiwia2V5IiwiY2FsbCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJrVUFBQSxHQUFJQSxnQkFBZSxDQUFHQyxtQkFBTyxDQUFDLHFFQUFELENBQTdCLENBQ0lDLGdCQUFnQixDQUFHRCxtQkFBTyxDQUFDLHVFQUFELENBRDlCLENBR0EsMkNBQ0EsR0FBSUUsWUFBVyxDQUFHQyxNQUFNLENBQUNDLFNBQXpCLENBRUEsZ0RBQ0EsR0FBSUMsZUFBYyxDQUFHSCxXQUFXLENBQUNHLGNBQWpDLENBRUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQXNCQSxHQUFJQyxRQUFPLENBQUdMLGdCQUFnQixDQUFDLFNBQVNNLE1BQVQsQ0FBaUJDLEtBQWpCLENBQXdCQyxHQUF4QixDQUE2QixDQUMxRCxHQUFJSixjQUFjLENBQUNLLElBQWYsQ0FBb0JILE1BQXBCLENBQTRCRSxHQUE1QixDQUFKLENBQXNDLENBQ3BDLEVBQUVGLE1BQU0sQ0FBQ0UsR0FBRCxDQUFSLENBQ0QsQ0FGRCxJQUVPLENBQ0xWLGVBQWUsQ0FBQ1EsTUFBRCxDQUFTRSxHQUFULENBQWMsQ0FBZCxDQUFmLENBQ0QsQ0FDRixDQU42QixDQUE5QixDQVFBRSxNQUFNLENBQUNDLE9BQVAsQ0FBaUJOLE9BQWpCLEMscUtBbkNJSixXLDhIQUdBRyxjLGlJQXdCQUMsTyIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9sb2Rhc2gvY291bnRCeS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBiYXNlQXNzaWduVmFsdWUgPSByZXF1aXJlKCcuL19iYXNlQXNzaWduVmFsdWUnKSxcbiAgICBjcmVhdGVBZ2dyZWdhdG9yID0gcmVxdWlyZSgnLi9fY3JlYXRlQWdncmVnYXRvcicpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIGtleXMgZ2VuZXJhdGVkIGZyb20gdGhlIHJlc3VsdHMgb2YgcnVubmluZ1xuICogZWFjaCBlbGVtZW50IG9mIGBjb2xsZWN0aW9uYCB0aHJ1IGBpdGVyYXRlZWAuIFRoZSBjb3JyZXNwb25kaW5nIHZhbHVlIG9mXG4gKiBlYWNoIGtleSBpcyB0aGUgbnVtYmVyIG9mIHRpbWVzIHRoZSBrZXkgd2FzIHJldHVybmVkIGJ5IGBpdGVyYXRlZWAuIFRoZVxuICogaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuNS4wXG4gKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSB0byB0cmFuc2Zvcm0ga2V5cy5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNvbXBvc2VkIGFnZ3JlZ2F0ZSBvYmplY3QuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uY291bnRCeShbNi4xLCA0LjIsIDYuM10sIE1hdGguZmxvb3IpO1xuICogLy8gPT4geyAnNCc6IDEsICc2JzogMiB9XG4gKlxuICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gKiBfLmNvdW50QnkoWydvbmUnLCAndHdvJywgJ3RocmVlJ10sICdsZW5ndGgnKTtcbiAqIC8vID0+IHsgJzMnOiAyLCAnNSc6IDEgfVxuICovXG52YXIgY291bnRCeSA9IGNyZWF0ZUFnZ3JlZ2F0b3IoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHJlc3VsdCwga2V5KSkge1xuICAgICsrcmVzdWx0W2tleV07XG4gIH0gZWxzZSB7XG4gICAgYmFzZUFzc2lnblZhbHVlKHJlc3VsdCwga2V5LCAxKTtcbiAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gY291bnRCeTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/lodash/countBy.js\n");

/***/ }),

/***/ "./node_modules/lodash/defer.js":
/*!**************************************!*\
  !*** ./node_modules/lodash/defer.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};var baseDelay=__webpack_require__(/*! ./_baseDelay */ \"./node_modules/lodash/_baseDelay.js\"),baseRest=__webpack_require__(/*! ./_baseRest */ \"./node_modules/lodash/_baseRest.js\");/**\n * Defers invoking the `func` until the current call stack has cleared. Any\n * additional arguments are provided to `func` when it's invoked.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to defer.\n * @param {...*} [args] The arguments to invoke `func` with.\n * @returns {number} Returns the timer id.\n * @example\n *\n * _.defer(function(text) {\n *   console.log(text);\n * }, 'deferred');\n * // => Logs 'deferred' after one millisecond.\n */var defer=baseRest(function(func,args){return baseDelay(func,1,args);});module.exports=defer;;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(defer,\"defer\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/lodash/defer.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9kZWZlci5qcz84MGIwIl0sIm5hbWVzIjpbImJhc2VEZWxheSIsInJlcXVpcmUiLCJiYXNlUmVzdCIsImRlZmVyIiwiZnVuYyIsImFyZ3MiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoia1VBQUEsR0FBSUEsVUFBUyxDQUFHQyxtQkFBTyxDQUFDLHlEQUFELENBQXZCLENBQ0lDLFFBQVEsQ0FBR0QsbUJBQU8sQ0FBQyx1REFBRCxDQUR0QixDQUdBOzs7Ozs7Ozs7Ozs7Ozs7OztHQWtCQSxHQUFJRSxNQUFLLENBQUdELFFBQVEsQ0FBQyxTQUFTRSxJQUFULENBQWVDLElBQWYsQ0FBcUIsQ0FDeEMsTUFBT0wsVUFBUyxDQUFDSSxJQUFELENBQU8sQ0FBUCxDQUFVQyxJQUFWLENBQWhCLENBQ0QsQ0FGbUIsQ0FBcEIsQ0FJQUMsTUFBTSxDQUFDQyxPQUFQLENBQWlCSixLQUFqQixDLHFLQUpJQSxLIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2xvZGFzaC9kZWZlci5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBiYXNlRGVsYXkgPSByZXF1aXJlKCcuL19iYXNlRGVsYXknKSxcbiAgICBiYXNlUmVzdCA9IHJlcXVpcmUoJy4vX2Jhc2VSZXN0Jyk7XG5cbi8qKlxuICogRGVmZXJzIGludm9raW5nIHRoZSBgZnVuY2AgdW50aWwgdGhlIGN1cnJlbnQgY2FsbCBzdGFjayBoYXMgY2xlYXJlZC4gQW55XG4gKiBhZGRpdGlvbmFsIGFyZ3VtZW50cyBhcmUgcHJvdmlkZWQgdG8gYGZ1bmNgIHdoZW4gaXQncyBpbnZva2VkLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVmZXIuXG4gKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSBgZnVuY2Agd2l0aC5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRpbWVyIGlkLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmRlZmVyKGZ1bmN0aW9uKHRleHQpIHtcbiAqICAgY29uc29sZS5sb2codGV4dCk7XG4gKiB9LCAnZGVmZXJyZWQnKTtcbiAqIC8vID0+IExvZ3MgJ2RlZmVycmVkJyBhZnRlciBvbmUgbWlsbGlzZWNvbmQuXG4gKi9cbnZhciBkZWZlciA9IGJhc2VSZXN0KGZ1bmN0aW9uKGZ1bmMsIGFyZ3MpIHtcbiAgcmV0dXJuIGJhc2VEZWxheShmdW5jLCAxLCBhcmdzKTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlZmVyO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/lodash/defer.js\n");

/***/ }),

/***/ "./node_modules/lodash/difference.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/difference.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};var baseDifference=__webpack_require__(/*! ./_baseDifference */ \"./node_modules/lodash/_baseDifference.js\"),baseFlatten=__webpack_require__(/*! ./_baseFlatten */ \"./node_modules/lodash/_baseFlatten.js\"),baseRest=__webpack_require__(/*! ./_baseRest */ \"./node_modules/lodash/_baseRest.js\"),isArrayLikeObject=__webpack_require__(/*! ./isArrayLikeObject */ \"./node_modules/lodash/isArrayLikeObject.js\");/**\n * Creates an array of `array` values not included in the other given arrays\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons. The order and references of result values are\n * determined by the first array.\n *\n * **Note:** Unlike `_.pullAll`, this method returns a new array.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {...Array} [values] The values to exclude.\n * @returns {Array} Returns the new array of filtered values.\n * @see _.without, _.xor\n * @example\n *\n * _.difference([2, 1], [2, 3]);\n * // => [1]\n */var difference=baseRest(function(array,values){return isArrayLikeObject(array)?baseDifference(array,baseFlatten(values,1,isArrayLikeObject,true)):[];});module.exports=difference;;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(difference,\"difference\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/lodash/difference.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9kaWZmZXJlbmNlLmpzP2NlYWMiXSwibmFtZXMiOlsiYmFzZURpZmZlcmVuY2UiLCJyZXF1aXJlIiwiYmFzZUZsYXR0ZW4iLCJiYXNlUmVzdCIsImlzQXJyYXlMaWtlT2JqZWN0IiwiZGlmZmVyZW5jZSIsImFycmF5IiwidmFsdWVzIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6ImtVQUFBLEdBQUlBLGVBQWMsQ0FBR0MsbUJBQU8sQ0FBQyxtRUFBRCxDQUE1QixDQUNJQyxXQUFXLENBQUdELG1CQUFPLENBQUMsNkRBQUQsQ0FEekIsQ0FFSUUsUUFBUSxDQUFHRixtQkFBTyxDQUFDLHVEQUFELENBRnRCLENBR0lHLGlCQUFpQixDQUFHSCxtQkFBTyxDQUFDLHVFQUFELENBSC9CLENBS0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBcUJBLEdBQUlJLFdBQVUsQ0FBR0YsUUFBUSxDQUFDLFNBQVNHLEtBQVQsQ0FBZ0JDLE1BQWhCLENBQXdCLENBQ2hELE1BQU9ILGtCQUFpQixDQUFDRSxLQUFELENBQWpCLENBQ0hOLGNBQWMsQ0FBQ00sS0FBRCxDQUFRSixXQUFXLENBQUNLLE1BQUQsQ0FBUyxDQUFULENBQVlILGlCQUFaLENBQStCLElBQS9CLENBQW5CLENBRFgsQ0FFSCxFQUZKLENBR0QsQ0FKd0IsQ0FBekIsQ0FNQUksTUFBTSxDQUFDQyxPQUFQLENBQWlCSixVQUFqQixDLHFLQU5JQSxVIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2xvZGFzaC9kaWZmZXJlbmNlLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGJhc2VEaWZmZXJlbmNlID0gcmVxdWlyZSgnLi9fYmFzZURpZmZlcmVuY2UnKSxcbiAgICBiYXNlRmxhdHRlbiA9IHJlcXVpcmUoJy4vX2Jhc2VGbGF0dGVuJyksXG4gICAgYmFzZVJlc3QgPSByZXF1aXJlKCcuL19iYXNlUmVzdCcpLFxuICAgIGlzQXJyYXlMaWtlT2JqZWN0ID0gcmVxdWlyZSgnLi9pc0FycmF5TGlrZU9iamVjdCcpO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgYGFycmF5YCB2YWx1ZXMgbm90IGluY2x1ZGVkIGluIHRoZSBvdGhlciBnaXZlbiBhcnJheXNcbiAqIHVzaW5nIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuIFRoZSBvcmRlciBhbmQgcmVmZXJlbmNlcyBvZiByZXN1bHQgdmFsdWVzIGFyZVxuICogZGV0ZXJtaW5lZCBieSB0aGUgZmlyc3QgYXJyYXkuXG4gKlxuICogKipOb3RlOioqIFVubGlrZSBgXy5wdWxsQWxsYCwgdGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBhcnJheS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgQXJyYXlcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHsuLi5BcnJheX0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBleGNsdWRlLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICogQHNlZSBfLndpdGhvdXQsIF8ueG9yXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uZGlmZmVyZW5jZShbMiwgMV0sIFsyLCAzXSk7XG4gKiAvLyA9PiBbMV1cbiAqL1xudmFyIGRpZmZlcmVuY2UgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheSwgdmFsdWVzKSB7XG4gIHJldHVybiBpc0FycmF5TGlrZU9iamVjdChhcnJheSlcbiAgICA/IGJhc2VEaWZmZXJlbmNlKGFycmF5LCBiYXNlRmxhdHRlbih2YWx1ZXMsIDEsIGlzQXJyYXlMaWtlT2JqZWN0LCB0cnVlKSlcbiAgICA6IFtdO1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZGlmZmVyZW5jZTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/lodash/difference.js\n");

/***/ }),

/***/ "./node_modules/lodash/drop.js":
/*!*************************************!*\
  !*** ./node_modules/lodash/drop.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};var baseSlice=__webpack_require__(/*! ./_baseSlice */ \"./node_modules/lodash/_baseSlice.js\"),toInteger=__webpack_require__(/*! ./toInteger */ \"./node_modules/lodash/toInteger.js\");/**\n * Creates a slice of `array` with `n` elements dropped from the beginning.\n *\n * @static\n * @memberOf _\n * @since 0.5.0\n * @category Array\n * @param {Array} array The array to query.\n * @param {number} [n=1] The number of elements to drop.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {Array} Returns the slice of `array`.\n * @example\n *\n * _.drop([1, 2, 3]);\n * // => [2, 3]\n *\n * _.drop([1, 2, 3], 2);\n * // => [3]\n *\n * _.drop([1, 2, 3], 5);\n * // => []\n *\n * _.drop([1, 2, 3], 0);\n * // => [1, 2, 3]\n */function drop(array,n,guard){var length=array==null?0:array.length;if(!length){return[];}n=guard||n===undefined?1:toInteger(n);return baseSlice(array,n<0?0:n,length);}module.exports=drop;;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(drop,\"drop\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/lodash/drop.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9kcm9wLmpzP2U3MjYiXSwibmFtZXMiOlsiYmFzZVNsaWNlIiwicmVxdWlyZSIsInRvSW50ZWdlciIsImRyb3AiLCJhcnJheSIsIm4iLCJndWFyZCIsImxlbmd0aCIsInVuZGVmaW5lZCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJrVUFBQSxHQUFJQSxVQUFTLENBQUdDLG1CQUFPLENBQUMseURBQUQsQ0FBdkIsQ0FDSUMsU0FBUyxDQUFHRCxtQkFBTyxDQUFDLHVEQUFELENBRHZCLENBR0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQXlCQSxRQUFTRSxLQUFULENBQWNDLEtBQWQsQ0FBcUJDLENBQXJCLENBQXdCQyxLQUF4QixDQUErQixDQUM3QixHQUFJQyxPQUFNLENBQUdILEtBQUssRUFBSSxJQUFULENBQWdCLENBQWhCLENBQW9CQSxLQUFLLENBQUNHLE1BQXZDLENBQ0EsR0FBSSxDQUFDQSxNQUFMLENBQWEsQ0FDWCxNQUFPLEVBQVAsQ0FDRCxDQUNERixDQUFDLENBQUlDLEtBQUssRUFBSUQsQ0FBQyxHQUFLRyxTQUFoQixDQUE2QixDQUE3QixDQUFpQ04sU0FBUyxDQUFDRyxDQUFELENBQTlDLENBQ0EsTUFBT0wsVUFBUyxDQUFDSSxLQUFELENBQVFDLENBQUMsQ0FBRyxDQUFKLENBQVEsQ0FBUixDQUFZQSxDQUFwQixDQUF1QkUsTUFBdkIsQ0FBaEIsQ0FDRCxDQUVERSxNQUFNLENBQUNDLE9BQVAsQ0FBaUJQLElBQWpCLEMscUtBVFNBLEkiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL2Ryb3AuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYmFzZVNsaWNlID0gcmVxdWlyZSgnLi9fYmFzZVNsaWNlJyksXG4gICAgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi90b0ludGVnZXInKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCB3aXRoIGBuYCBlbGVtZW50cyBkcm9wcGVkIGZyb20gdGhlIGJlZ2lubmluZy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuNS4wXG4gKiBAY2F0ZWdvcnkgQXJyYXlcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbbj0xXSBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIGRyb3AuXG4gKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmRyb3AoWzEsIDIsIDNdKTtcbiAqIC8vID0+IFsyLCAzXVxuICpcbiAqIF8uZHJvcChbMSwgMiwgM10sIDIpO1xuICogLy8gPT4gWzNdXG4gKlxuICogXy5kcm9wKFsxLCAyLCAzXSwgNSk7XG4gKiAvLyA9PiBbXVxuICpcbiAqIF8uZHJvcChbMSwgMiwgM10sIDApO1xuICogLy8gPT4gWzEsIDIsIDNdXG4gKi9cbmZ1bmN0aW9uIGRyb3AoYXJyYXksIG4sIGd1YXJkKSB7XG4gIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgaWYgKCFsZW5ndGgpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgbiA9IChndWFyZCB8fCBuID09PSB1bmRlZmluZWQpID8gMSA6IHRvSW50ZWdlcihuKTtcbiAgcmV0dXJuIGJhc2VTbGljZShhcnJheSwgbiA8IDAgPyAwIDogbiwgbGVuZ3RoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBkcm9wO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/lodash/drop.js\n");

/***/ }),

/***/ "./node_modules/lodash/dropRight.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/dropRight.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};var baseSlice=__webpack_require__(/*! ./_baseSlice */ \"./node_modules/lodash/_baseSlice.js\"),toInteger=__webpack_require__(/*! ./toInteger */ \"./node_modules/lodash/toInteger.js\");/**\n * Creates a slice of `array` with `n` elements dropped from the end.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Array\n * @param {Array} array The array to query.\n * @param {number} [n=1] The number of elements to drop.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {Array} Returns the slice of `array`.\n * @example\n *\n * _.dropRight([1, 2, 3]);\n * // => [1, 2]\n *\n * _.dropRight([1, 2, 3], 2);\n * // => [1]\n *\n * _.dropRight([1, 2, 3], 5);\n * // => []\n *\n * _.dropRight([1, 2, 3], 0);\n * // => [1, 2, 3]\n */function dropRight(array,n,guard){var length=array==null?0:array.length;if(!length){return[];}n=guard||n===undefined?1:toInteger(n);n=length-n;return baseSlice(array,0,n<0?0:n);}module.exports=dropRight;;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(dropRight,\"dropRight\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/lodash/dropRight.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9kcm9wUmlnaHQuanM/MjdkNCJdLCJuYW1lcyI6WyJiYXNlU2xpY2UiLCJyZXF1aXJlIiwidG9JbnRlZ2VyIiwiZHJvcFJpZ2h0IiwiYXJyYXkiLCJuIiwiZ3VhcmQiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoia1VBQUEsR0FBSUEsVUFBUyxDQUFHQyxtQkFBTyxDQUFDLHlEQUFELENBQXZCLENBQ0lDLFNBQVMsQ0FBR0QsbUJBQU8sQ0FBQyx1REFBRCxDQUR2QixDQUdBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0F5QkEsUUFBU0UsVUFBVCxDQUFtQkMsS0FBbkIsQ0FBMEJDLENBQTFCLENBQTZCQyxLQUE3QixDQUFvQyxDQUNsQyxHQUFJQyxPQUFNLENBQUdILEtBQUssRUFBSSxJQUFULENBQWdCLENBQWhCLENBQW9CQSxLQUFLLENBQUNHLE1BQXZDLENBQ0EsR0FBSSxDQUFDQSxNQUFMLENBQWEsQ0FDWCxNQUFPLEVBQVAsQ0FDRCxDQUNERixDQUFDLENBQUlDLEtBQUssRUFBSUQsQ0FBQyxHQUFLRyxTQUFoQixDQUE2QixDQUE3QixDQUFpQ04sU0FBUyxDQUFDRyxDQUFELENBQTlDLENBQ0FBLENBQUMsQ0FBR0UsTUFBTSxDQUFHRixDQUFiLENBQ0EsTUFBT0wsVUFBUyxDQUFDSSxLQUFELENBQVEsQ0FBUixDQUFXQyxDQUFDLENBQUcsQ0FBSixDQUFRLENBQVIsQ0FBWUEsQ0FBdkIsQ0FBaEIsQ0FDRCxDQUVESSxNQUFNLENBQUNDLE9BQVAsQ0FBaUJQLFNBQWpCLEMscUtBVlNBLFMiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL2Ryb3BSaWdodC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBiYXNlU2xpY2UgPSByZXF1aXJlKCcuL19iYXNlU2xpY2UnKSxcbiAgICB0b0ludGVnZXIgPSByZXF1aXJlKCcuL3RvSW50ZWdlcicpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIHdpdGggYG5gIGVsZW1lbnRzIGRyb3BwZWQgZnJvbSB0aGUgZW5kLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy4wLjBcbiAqIEBjYXRlZ29yeSBBcnJheVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtudW1iZXJ9IFtuPTFdIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gZHJvcC5cbiAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uZHJvcFJpZ2h0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiBbMSwgMl1cbiAqXG4gKiBfLmRyb3BSaWdodChbMSwgMiwgM10sIDIpO1xuICogLy8gPT4gWzFdXG4gKlxuICogXy5kcm9wUmlnaHQoWzEsIDIsIDNdLCA1KTtcbiAqIC8vID0+IFtdXG4gKlxuICogXy5kcm9wUmlnaHQoWzEsIDIsIDNdLCAwKTtcbiAqIC8vID0+IFsxLCAyLCAzXVxuICovXG5mdW5jdGlvbiBkcm9wUmlnaHQoYXJyYXksIG4sIGd1YXJkKSB7XG4gIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgaWYgKCFsZW5ndGgpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgbiA9IChndWFyZCB8fCBuID09PSB1bmRlZmluZWQpID8gMSA6IHRvSW50ZWdlcihuKTtcbiAgbiA9IGxlbmd0aCAtIG47XG4gIHJldHVybiBiYXNlU2xpY2UoYXJyYXksIDAsIG4gPCAwID8gMCA6IG4pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRyb3BSaWdodDtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/lodash/dropRight.js\n");

/***/ }),

/***/ "./node_modules/lodash/first.js":
/*!**************************************!*\
  !*** ./node_modules/lodash/first.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};module.exports=__webpack_require__(/*! ./head */ \"./node_modules/lodash/head.js\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9maXJzdC5qcz82OWYzIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJyZXF1aXJlIl0sIm1hcHBpbmdzIjoiNkhBQUFBLE1BQU0sQ0FBQ0MsT0FBUCxDQUFpQkMsbUJBQU8sQ0FBQyw2Q0FBRCxDQUF4QiIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9sb2Rhc2gvZmlyc3QuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vaGVhZCcpO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/lodash/first.js\n");

/***/ }),

/***/ "./node_modules/lodash/head.js":
/*!*************************************!*\
  !*** ./node_modules/lodash/head.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};/**\n * Gets the first element of `array`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @alias first\n * @category Array\n * @param {Array} array The array to query.\n * @returns {*} Returns the first element of `array`.\n * @example\n *\n * _.head([1, 2, 3]);\n * // => 1\n *\n * _.head([]);\n * // => undefined\n */function head(array){return array&&array.length?array[0]:undefined;}module.exports=head;;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(head,\"head\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/lodash/head.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9oZWFkLmpzP2E1OWIiXSwibmFtZXMiOlsiaGVhZCIsImFycmF5IiwibGVuZ3RoIiwidW5kZWZpbmVkIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6ImtVQUFBOzs7Ozs7Ozs7Ozs7Ozs7OztHQWtCQSxRQUFTQSxLQUFULENBQWNDLEtBQWQsQ0FBcUIsQ0FDbkIsTUFBUUEsTUFBSyxFQUFJQSxLQUFLLENBQUNDLE1BQWhCLENBQTBCRCxLQUFLLENBQUMsQ0FBRCxDQUEvQixDQUFxQ0UsU0FBNUMsQ0FDRCxDQUVEQyxNQUFNLENBQUNDLE9BQVAsQ0FBaUJMLElBQWpCLEMscUtBSlNBLEkiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL2hlYWQuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEdldHMgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAYWxpYXMgZmlyc3RcbiAqIEBjYXRlZ29yeSBBcnJheVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5oZWFkKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiAxXG4gKlxuICogXy5oZWFkKFtdKTtcbiAqIC8vID0+IHVuZGVmaW5lZFxuICovXG5mdW5jdGlvbiBoZWFkKGFycmF5KSB7XG4gIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSA/IGFycmF5WzBdIDogdW5kZWZpbmVkO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhlYWQ7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/lodash/head.js\n");

/***/ }),

/***/ "./node_modules/lodash/isEqual.js":
/*!****************************************!*\
  !*** ./node_modules/lodash/isEqual.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};var baseIsEqual=__webpack_require__(/*! ./_baseIsEqual */ \"./node_modules/lodash/_baseIsEqual.js\");/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */function isEqual(value,other){return baseIsEqual(value,other);}module.exports=isEqual;;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(isEqual,\"isEqual\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/lodash/isEqual.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0VxdWFsLmpzPzYzZWEiXSwibmFtZXMiOlsiYmFzZUlzRXF1YWwiLCJyZXF1aXJlIiwiaXNFcXVhbCIsInZhbHVlIiwib3RoZXIiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoia1VBQUEsR0FBSUEsWUFBVyxDQUFHQyxtQkFBTyxDQUFDLDZEQUFELENBQXpCLENBRUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQTRCQSxRQUFTQyxRQUFULENBQWlCQyxLQUFqQixDQUF3QkMsS0FBeEIsQ0FBK0IsQ0FDN0IsTUFBT0osWUFBVyxDQUFDRyxLQUFELENBQVFDLEtBQVIsQ0FBbEIsQ0FDRCxDQUVEQyxNQUFNLENBQUNDLE9BQVAsQ0FBaUJKLE9BQWpCLEMscUtBSlNBLE8iLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzRXF1YWwuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYmFzZUlzRXF1YWwgPSByZXF1aXJlKCcuL19iYXNlSXNFcXVhbCcpO1xuXG4vKipcbiAqIFBlcmZvcm1zIGEgZGVlcCBjb21wYXJpc29uIGJldHdlZW4gdHdvIHZhbHVlcyB0byBkZXRlcm1pbmUgaWYgdGhleSBhcmVcbiAqIGVxdWl2YWxlbnQuXG4gKlxuICogKipOb3RlOioqIFRoaXMgbWV0aG9kIHN1cHBvcnRzIGNvbXBhcmluZyBhcnJheXMsIGFycmF5IGJ1ZmZlcnMsIGJvb2xlYW5zLFxuICogZGF0ZSBvYmplY3RzLCBlcnJvciBvYmplY3RzLCBtYXBzLCBudW1iZXJzLCBgT2JqZWN0YCBvYmplY3RzLCByZWdleGVzLFxuICogc2V0cywgc3RyaW5ncywgc3ltYm9scywgYW5kIHR5cGVkIGFycmF5cy4gYE9iamVjdGAgb2JqZWN0cyBhcmUgY29tcGFyZWRcbiAqIGJ5IHRoZWlyIG93biwgbm90IGluaGVyaXRlZCwgZW51bWVyYWJsZSBwcm9wZXJ0aWVzLiBGdW5jdGlvbnMgYW5kIERPTVxuICogbm9kZXMgYXJlIGNvbXBhcmVkIGJ5IHN0cmljdCBlcXVhbGl0eSwgaS5lLiBgPT09YC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEgfTtcbiAqIHZhciBvdGhlciA9IHsgJ2EnOiAxIH07XG4gKlxuICogXy5pc0VxdWFsKG9iamVjdCwgb3RoZXIpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIG9iamVjdCA9PT0gb3RoZXI7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0VxdWFsKHZhbHVlLCBvdGhlcikge1xuICByZXR1cm4gYmFzZUlzRXF1YWwodmFsdWUsIG90aGVyKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0VxdWFsO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/lodash/isEqual.js\n");

/***/ }),

/***/ "./node_modules/lodash/pickBy.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/pickBy.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};var arrayMap=__webpack_require__(/*! ./_arrayMap */ \"./node_modules/lodash/_arrayMap.js\"),baseIteratee=__webpack_require__(/*! ./_baseIteratee */ \"./node_modules/lodash/_baseIteratee.js\"),basePickBy=__webpack_require__(/*! ./_basePickBy */ \"./node_modules/lodash/_basePickBy.js\"),getAllKeysIn=__webpack_require__(/*! ./_getAllKeysIn */ \"./node_modules/lodash/_getAllKeysIn.js\");/**\n * Creates an object composed of the `object` properties `predicate` returns\n * truthy for. The predicate is invoked with two arguments: (value, key).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The source object.\n * @param {Function} [predicate=_.identity] The function invoked per property.\n * @returns {Object} Returns the new object.\n * @example\n *\n * var object = { 'a': 1, 'b': '2', 'c': 3 };\n *\n * _.pickBy(object, _.isNumber);\n * // => { 'a': 1, 'c': 3 }\n */function pickBy(object,predicate){if(object==null){return{};}var props=arrayMap(getAllKeysIn(object),function(prop){return[prop];});predicate=baseIteratee(predicate);return basePickBy(object,props,function(value,path){return predicate(value,path[0]);});}module.exports=pickBy;;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(pickBy,\"pickBy\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/lodash/pickBy.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9waWNrQnkuanM/NzdjMSJdLCJuYW1lcyI6WyJhcnJheU1hcCIsInJlcXVpcmUiLCJiYXNlSXRlcmF0ZWUiLCJiYXNlUGlja0J5IiwiZ2V0QWxsS2V5c0luIiwicGlja0J5Iiwib2JqZWN0IiwicHJlZGljYXRlIiwicHJvcHMiLCJwcm9wIiwidmFsdWUiLCJwYXRoIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6ImtVQUFBLEdBQUlBLFNBQVEsQ0FBR0MsbUJBQU8sQ0FBQyx1REFBRCxDQUF0QixDQUNJQyxZQUFZLENBQUdELG1CQUFPLENBQUMsK0RBQUQsQ0FEMUIsQ0FFSUUsVUFBVSxDQUFHRixtQkFBTyxDQUFDLDJEQUFELENBRnhCLENBR0lHLFlBQVksQ0FBR0gsbUJBQU8sQ0FBQywrREFBRCxDQUgxQixDQUtBOzs7Ozs7Ozs7Ozs7Ozs7OztHQWtCQSxRQUFTSSxPQUFULENBQWdCQyxNQUFoQixDQUF3QkMsU0FBeEIsQ0FBbUMsQ0FDakMsR0FBSUQsTUFBTSxFQUFJLElBQWQsQ0FBb0IsQ0FDbEIsTUFBTyxFQUFQLENBQ0QsQ0FDRCxHQUFJRSxNQUFLLENBQUdSLFFBQVEsQ0FBQ0ksWUFBWSxDQUFDRSxNQUFELENBQWIsQ0FBdUIsU0FBU0csSUFBVCxDQUFlLENBQ3hELE1BQU8sQ0FBQ0EsSUFBRCxDQUFQLENBQ0QsQ0FGbUIsQ0FBcEIsQ0FHQUYsU0FBUyxDQUFHTCxZQUFZLENBQUNLLFNBQUQsQ0FBeEIsQ0FDQSxNQUFPSixXQUFVLENBQUNHLE1BQUQsQ0FBU0UsS0FBVCxDQUFnQixTQUFTRSxLQUFULENBQWdCQyxJQUFoQixDQUFzQixDQUNyRCxNQUFPSixVQUFTLENBQUNHLEtBQUQsQ0FBUUMsSUFBSSxDQUFDLENBQUQsQ0FBWixDQUFoQixDQUNELENBRmdCLENBQWpCLENBR0QsQ0FFREMsTUFBTSxDQUFDQyxPQUFQLENBQWlCUixNQUFqQixDLHFLQWJTQSxNIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2xvZGFzaC9waWNrQnkuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYXJyYXlNYXAgPSByZXF1aXJlKCcuL19hcnJheU1hcCcpLFxuICAgIGJhc2VJdGVyYXRlZSA9IHJlcXVpcmUoJy4vX2Jhc2VJdGVyYXRlZScpLFxuICAgIGJhc2VQaWNrQnkgPSByZXF1aXJlKCcuL19iYXNlUGlja0J5JyksXG4gICAgZ2V0QWxsS2V5c0luID0gcmVxdWlyZSgnLi9fZ2V0QWxsS2V5c0luJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2YgdGhlIGBvYmplY3RgIHByb3BlcnRpZXMgYHByZWRpY2F0ZWAgcmV0dXJuc1xuICogdHJ1dGh5IGZvci4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGggdHdvIGFyZ3VtZW50czogKHZhbHVlLCBrZXkpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBwcm9wZXJ0eS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAnMicsICdjJzogMyB9O1xuICpcbiAqIF8ucGlja0J5KG9iamVjdCwgXy5pc051bWJlcik7XG4gKiAvLyA9PiB7ICdhJzogMSwgJ2MnOiAzIH1cbiAqL1xuZnVuY3Rpb24gcGlja0J5KG9iamVjdCwgcHJlZGljYXRlKSB7XG4gIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgIHJldHVybiB7fTtcbiAgfVxuICB2YXIgcHJvcHMgPSBhcnJheU1hcChnZXRBbGxLZXlzSW4ob2JqZWN0KSwgZnVuY3Rpb24ocHJvcCkge1xuICAgIHJldHVybiBbcHJvcF07XG4gIH0pO1xuICBwcmVkaWNhdGUgPSBiYXNlSXRlcmF0ZWUocHJlZGljYXRlKTtcbiAgcmV0dXJuIGJhc2VQaWNrQnkob2JqZWN0LCBwcm9wcywgZnVuY3Rpb24odmFsdWUsIHBhdGgpIHtcbiAgICByZXR1cm4gcHJlZGljYXRlKHZhbHVlLCBwYXRoWzBdKTtcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcGlja0J5O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/lodash/pickBy.js\n");

/***/ }),

/***/ "./node_modules/lodash/set.js":
/*!************************************!*\
  !*** ./node_modules/lodash/set.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};var baseSet=__webpack_require__(/*! ./_baseSet */ \"./node_modules/lodash/_baseSet.js\");/**\n * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,\n * it's created. Arrays are created for missing index properties while objects\n * are created for all other missing properties. Use `_.setWith` to customize\n * `path` creation.\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @memberOf _\n * @since 3.7.0\n * @category Object\n * @param {Object} object The object to modify.\n * @param {Array|string} path The path of the property to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns `object`.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n *\n * _.set(object, 'a[0].b.c', 4);\n * console.log(object.a[0].b.c);\n * // => 4\n *\n * _.set(object, ['x', '0', 'y', 'z'], 5);\n * console.log(object.x[0].y.z);\n * // => 5\n */function set(object,path,value){return object==null?object:baseSet(object,path,value);}module.exports=set;;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(set,\"set\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/lodash/set.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9zZXQuanM/MGY1YyJdLCJuYW1lcyI6WyJiYXNlU2V0IiwicmVxdWlyZSIsInNldCIsIm9iamVjdCIsInBhdGgiLCJ2YWx1ZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJrVUFBQSxHQUFJQSxRQUFPLENBQUdDLG1CQUFPLENBQUMscURBQUQsQ0FBckIsQ0FFQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBNEJBLFFBQVNDLElBQVQsQ0FBYUMsTUFBYixDQUFxQkMsSUFBckIsQ0FBMkJDLEtBQTNCLENBQWtDLENBQ2hDLE1BQU9GLE9BQU0sRUFBSSxJQUFWLENBQWlCQSxNQUFqQixDQUEwQkgsT0FBTyxDQUFDRyxNQUFELENBQVNDLElBQVQsQ0FBZUMsS0FBZixDQUF4QyxDQUNELENBRURDLE1BQU0sQ0FBQ0MsT0FBUCxDQUFpQkwsR0FBakIsQyxxS0FKU0EsRyIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9sb2Rhc2gvc2V0LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGJhc2VTZXQgPSByZXF1aXJlKCcuL19iYXNlU2V0Jyk7XG5cbi8qKlxuICogU2V0cyB0aGUgdmFsdWUgYXQgYHBhdGhgIG9mIGBvYmplY3RgLiBJZiBhIHBvcnRpb24gb2YgYHBhdGhgIGRvZXNuJ3QgZXhpc3QsXG4gKiBpdCdzIGNyZWF0ZWQuIEFycmF5cyBhcmUgY3JlYXRlZCBmb3IgbWlzc2luZyBpbmRleCBwcm9wZXJ0aWVzIHdoaWxlIG9iamVjdHNcbiAqIGFyZSBjcmVhdGVkIGZvciBhbGwgb3RoZXIgbWlzc2luZyBwcm9wZXJ0aWVzLiBVc2UgYF8uc2V0V2l0aGAgdG8gY3VzdG9taXplXG4gKiBgcGF0aGAgY3JlYXRpb24uXG4gKlxuICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjcuMFxuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDMgfSB9XSB9O1xuICpcbiAqIF8uc2V0KG9iamVjdCwgJ2FbMF0uYi5jJywgNCk7XG4gKiBjb25zb2xlLmxvZyhvYmplY3QuYVswXS5iLmMpO1xuICogLy8gPT4gNFxuICpcbiAqIF8uc2V0KG9iamVjdCwgWyd4JywgJzAnLCAneScsICd6J10sIDUpO1xuICogY29uc29sZS5sb2cob2JqZWN0LnhbMF0ueS56KTtcbiAqIC8vID0+IDVcbiAqL1xuZnVuY3Rpb24gc2V0KG9iamVjdCwgcGF0aCwgdmFsdWUpIHtcbiAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gb2JqZWN0IDogYmFzZVNldChvYmplY3QsIHBhdGgsIHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXQ7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/lodash/set.js\n");

/***/ }),

/***/ "./node_modules/lodash/sortBy.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/sortBy.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};var baseFlatten=__webpack_require__(/*! ./_baseFlatten */ \"./node_modules/lodash/_baseFlatten.js\"),baseOrderBy=__webpack_require__(/*! ./_baseOrderBy */ \"./node_modules/lodash/_baseOrderBy.js\"),baseRest=__webpack_require__(/*! ./_baseRest */ \"./node_modules/lodash/_baseRest.js\"),isIterateeCall=__webpack_require__(/*! ./_isIterateeCall */ \"./node_modules/lodash/_isIterateeCall.js\");/**\n * Creates an array of elements, sorted in ascending order by the results of\n * running each element in a collection thru each iteratee. This method\n * performs a stable sort, that is, it preserves the original sort order of\n * equal elements. The iteratees are invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {...(Function|Function[])} [iteratees=[_.identity]]\n *  The iteratees to sort by.\n * @returns {Array} Returns the new sorted array.\n * @example\n *\n * var users = [\n *   { 'user': 'fred',   'age': 48 },\n *   { 'user': 'barney', 'age': 36 },\n *   { 'user': 'fred',   'age': 40 },\n *   { 'user': 'barney', 'age': 34 }\n * ];\n *\n * _.sortBy(users, [function(o) { return o.user; }]);\n * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n *\n * _.sortBy(users, ['user', 'age']);\n * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]\n */var sortBy=baseRest(function(collection,iteratees){if(collection==null){return[];}var length=iteratees.length;if(length>1&&isIterateeCall(collection,iteratees[0],iteratees[1])){iteratees=[];}else if(length>2&&isIterateeCall(iteratees[0],iteratees[1],iteratees[2])){iteratees=[iteratees[0]];}return baseOrderBy(collection,baseFlatten(iteratees,1),[]);});module.exports=sortBy;;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(sortBy,\"sortBy\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/lodash/sortBy.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9zb3J0QnkuanM/YzcwNyJdLCJuYW1lcyI6WyJiYXNlRmxhdHRlbiIsInJlcXVpcmUiLCJiYXNlT3JkZXJCeSIsImJhc2VSZXN0IiwiaXNJdGVyYXRlZUNhbGwiLCJzb3J0QnkiLCJjb2xsZWN0aW9uIiwiaXRlcmF0ZWVzIiwibGVuZ3RoIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6ImtVQUFBLEdBQUlBLFlBQVcsQ0FBR0MsbUJBQU8sQ0FBQyw2REFBRCxDQUF6QixDQUNJQyxXQUFXLENBQUdELG1CQUFPLENBQUMsNkRBQUQsQ0FEekIsQ0FFSUUsUUFBUSxDQUFHRixtQkFBTyxDQUFDLHVEQUFELENBRnRCLENBR0lHLGNBQWMsQ0FBR0gsbUJBQU8sQ0FBQyxtRUFBRCxDQUg1QixDQUtBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBNkJBLEdBQUlJLE9BQU0sQ0FBR0YsUUFBUSxDQUFDLFNBQVNHLFVBQVQsQ0FBcUJDLFNBQXJCLENBQWdDLENBQ3BELEdBQUlELFVBQVUsRUFBSSxJQUFsQixDQUF3QixDQUN0QixNQUFPLEVBQVAsQ0FDRCxDQUNELEdBQUlFLE9BQU0sQ0FBR0QsU0FBUyxDQUFDQyxNQUF2QixDQUNBLEdBQUlBLE1BQU0sQ0FBRyxDQUFULEVBQWNKLGNBQWMsQ0FBQ0UsVUFBRCxDQUFhQyxTQUFTLENBQUMsQ0FBRCxDQUF0QixDQUEyQkEsU0FBUyxDQUFDLENBQUQsQ0FBcEMsQ0FBaEMsQ0FBMEUsQ0FDeEVBLFNBQVMsQ0FBRyxFQUFaLENBQ0QsQ0FGRCxJQUVPLElBQUlDLE1BQU0sQ0FBRyxDQUFULEVBQWNKLGNBQWMsQ0FBQ0csU0FBUyxDQUFDLENBQUQsQ0FBVixDQUFlQSxTQUFTLENBQUMsQ0FBRCxDQUF4QixDQUE2QkEsU0FBUyxDQUFDLENBQUQsQ0FBdEMsQ0FBaEMsQ0FBNEUsQ0FDakZBLFNBQVMsQ0FBRyxDQUFDQSxTQUFTLENBQUMsQ0FBRCxDQUFWLENBQVosQ0FDRCxDQUNELE1BQU9MLFlBQVcsQ0FBQ0ksVUFBRCxDQUFhTixXQUFXLENBQUNPLFNBQUQsQ0FBWSxDQUFaLENBQXhCLENBQXdDLEVBQXhDLENBQWxCLENBQ0QsQ0FYb0IsQ0FBckIsQ0FhQUUsTUFBTSxDQUFDQyxPQUFQLENBQWlCTCxNQUFqQixDLHFLQWJJQSxNIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2xvZGFzaC9zb3J0QnkuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYmFzZUZsYXR0ZW4gPSByZXF1aXJlKCcuL19iYXNlRmxhdHRlbicpLFxuICAgIGJhc2VPcmRlckJ5ID0gcmVxdWlyZSgnLi9fYmFzZU9yZGVyQnknKSxcbiAgICBiYXNlUmVzdCA9IHJlcXVpcmUoJy4vX2Jhc2VSZXN0JyksXG4gICAgaXNJdGVyYXRlZUNhbGwgPSByZXF1aXJlKCcuL19pc0l0ZXJhdGVlQ2FsbCcpO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgZWxlbWVudHMsIHNvcnRlZCBpbiBhc2NlbmRpbmcgb3JkZXIgYnkgdGhlIHJlc3VsdHMgb2ZcbiAqIHJ1bm5pbmcgZWFjaCBlbGVtZW50IGluIGEgY29sbGVjdGlvbiB0aHJ1IGVhY2ggaXRlcmF0ZWUuIFRoaXMgbWV0aG9kXG4gKiBwZXJmb3JtcyBhIHN0YWJsZSBzb3J0LCB0aGF0IGlzLCBpdCBwcmVzZXJ2ZXMgdGhlIG9yaWdpbmFsIHNvcnQgb3JkZXIgb2ZcbiAqIGVxdWFsIGVsZW1lbnRzLiBUaGUgaXRlcmF0ZWVzIGFyZSBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW2l0ZXJhdGVlcz1bXy5pZGVudGl0eV1dXG4gKiAgVGhlIGl0ZXJhdGVlcyB0byBzb3J0IGJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc29ydGVkIGFycmF5LlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgdXNlcnMgPSBbXG4gKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQ4IH0sXG4gKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2IH0sXG4gKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwIH0sXG4gKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM0IH1cbiAqIF07XG4gKlxuICogXy5zb3J0QnkodXNlcnMsIFtmdW5jdGlvbihvKSB7IHJldHVybiBvLnVzZXI7IH1dKTtcbiAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ2Jhcm5leScsIDM2XSwgWydiYXJuZXknLCAzNF0sIFsnZnJlZCcsIDQ4XSwgWydmcmVkJywgNDBdXVxuICpcbiAqIF8uc29ydEJ5KHVzZXJzLCBbJ3VzZXInLCAnYWdlJ10pO1xuICogLy8gPT4gb2JqZWN0cyBmb3IgW1snYmFybmV5JywgMzRdLCBbJ2Jhcm5leScsIDM2XSwgWydmcmVkJywgNDBdLCBbJ2ZyZWQnLCA0OF1dXG4gKi9cbnZhciBzb3J0QnkgPSBiYXNlUmVzdChmdW5jdGlvbihjb2xsZWN0aW9uLCBpdGVyYXRlZXMpIHtcbiAgaWYgKGNvbGxlY3Rpb24gPT0gbnVsbCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICB2YXIgbGVuZ3RoID0gaXRlcmF0ZWVzLmxlbmd0aDtcbiAgaWYgKGxlbmd0aCA+IDEgJiYgaXNJdGVyYXRlZUNhbGwoY29sbGVjdGlvbiwgaXRlcmF0ZWVzWzBdLCBpdGVyYXRlZXNbMV0pKSB7XG4gICAgaXRlcmF0ZWVzID0gW107XG4gIH0gZWxzZSBpZiAobGVuZ3RoID4gMiAmJiBpc0l0ZXJhdGVlQ2FsbChpdGVyYXRlZXNbMF0sIGl0ZXJhdGVlc1sxXSwgaXRlcmF0ZWVzWzJdKSkge1xuICAgIGl0ZXJhdGVlcyA9IFtpdGVyYXRlZXNbMF1dO1xuICB9XG4gIHJldHVybiBiYXNlT3JkZXJCeShjb2xsZWN0aW9uLCBiYXNlRmxhdHRlbihpdGVyYXRlZXMsIDEpLCBbXSk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBzb3J0Qnk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/lodash/sortBy.js\n");

/***/ }),

/***/ "./node_modules/lodash/take.js":
/*!*************************************!*\
  !*** ./node_modules/lodash/take.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};var baseSlice=__webpack_require__(/*! ./_baseSlice */ \"./node_modules/lodash/_baseSlice.js\"),toInteger=__webpack_require__(/*! ./toInteger */ \"./node_modules/lodash/toInteger.js\");/**\n * Creates a slice of `array` with `n` elements taken from the beginning.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to query.\n * @param {number} [n=1] The number of elements to take.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {Array} Returns the slice of `array`.\n * @example\n *\n * _.take([1, 2, 3]);\n * // => [1]\n *\n * _.take([1, 2, 3], 2);\n * // => [1, 2]\n *\n * _.take([1, 2, 3], 5);\n * // => [1, 2, 3]\n *\n * _.take([1, 2, 3], 0);\n * // => []\n */function take(array,n,guard){if(!(array&&array.length)){return[];}n=guard||n===undefined?1:toInteger(n);return baseSlice(array,0,n<0?0:n);}module.exports=take;;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(take,\"take\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/lodash/take.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC90YWtlLmpzPzVlOWUiXSwibmFtZXMiOlsiYmFzZVNsaWNlIiwicmVxdWlyZSIsInRvSW50ZWdlciIsInRha2UiLCJhcnJheSIsIm4iLCJndWFyZCIsImxlbmd0aCIsInVuZGVmaW5lZCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJrVUFBQSxHQUFJQSxVQUFTLENBQUdDLG1CQUFPLENBQUMseURBQUQsQ0FBdkIsQ0FDSUMsU0FBUyxDQUFHRCxtQkFBTyxDQUFDLHVEQUFELENBRHZCLENBR0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQXlCQSxRQUFTRSxLQUFULENBQWNDLEtBQWQsQ0FBcUJDLENBQXJCLENBQXdCQyxLQUF4QixDQUErQixDQUM3QixHQUFJLEVBQUVGLEtBQUssRUFBSUEsS0FBSyxDQUFDRyxNQUFqQixDQUFKLENBQThCLENBQzVCLE1BQU8sRUFBUCxDQUNELENBQ0RGLENBQUMsQ0FBSUMsS0FBSyxFQUFJRCxDQUFDLEdBQUtHLFNBQWhCLENBQTZCLENBQTdCLENBQWlDTixTQUFTLENBQUNHLENBQUQsQ0FBOUMsQ0FDQSxNQUFPTCxVQUFTLENBQUNJLEtBQUQsQ0FBUSxDQUFSLENBQVdDLENBQUMsQ0FBRyxDQUFKLENBQVEsQ0FBUixDQUFZQSxDQUF2QixDQUFoQixDQUNELENBRURJLE1BQU0sQ0FBQ0MsT0FBUCxDQUFpQlAsSUFBakIsQyxxS0FSU0EsSSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9sb2Rhc2gvdGFrZS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBiYXNlU2xpY2UgPSByZXF1aXJlKCcuL19iYXNlU2xpY2UnKSxcbiAgICB0b0ludGVnZXIgPSByZXF1aXJlKCcuL3RvSW50ZWdlcicpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIHdpdGggYG5gIGVsZW1lbnRzIHRha2VuIGZyb20gdGhlIGJlZ2lubmluZy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgQXJyYXlcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbbj0xXSBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIHRha2UuXG4gKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRha2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IFsxXVxuICpcbiAqIF8udGFrZShbMSwgMiwgM10sIDIpO1xuICogLy8gPT4gWzEsIDJdXG4gKlxuICogXy50YWtlKFsxLCAyLCAzXSwgNSk7XG4gKiAvLyA9PiBbMSwgMiwgM11cbiAqXG4gKiBfLnRha2UoWzEsIDIsIDNdLCAwKTtcbiAqIC8vID0+IFtdXG4gKi9cbmZ1bmN0aW9uIHRha2UoYXJyYXksIG4sIGd1YXJkKSB7XG4gIGlmICghKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgbiA9IChndWFyZCB8fCBuID09PSB1bmRlZmluZWQpID8gMSA6IHRvSW50ZWdlcihuKTtcbiAgcmV0dXJuIGJhc2VTbGljZShhcnJheSwgMCwgbiA8IDAgPyAwIDogbik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdGFrZTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/lodash/take.js\n");

/***/ }),

/***/ "./node_modules/lodash/throttle.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/throttle.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};var debounce=__webpack_require__(/*! ./debounce */ \"./node_modules/lodash/debounce.js\"),isObject=__webpack_require__(/*! ./isObject */ \"./node_modules/lodash/isObject.js\");/** Error message constants. */var FUNC_ERROR_TEXT='Expected a function';/**\n * Creates a throttled function that only invokes `func` at most once per\n * every `wait` milliseconds. The throttled function comes with a `cancel`\n * method to cancel delayed `func` invocations and a `flush` method to\n * immediately invoke them. Provide `options` to indicate whether `func`\n * should be invoked on the leading and/or trailing edge of the `wait`\n * timeout. The `func` is invoked with the last arguments provided to the\n * throttled function. Subsequent calls to the throttled function return the\n * result of the last `func` invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the throttled function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.throttle` and `_.debounce`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to throttle.\n * @param {number} [wait=0] The number of milliseconds to throttle invocations to.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=true]\n *  Specify invoking on the leading edge of the timeout.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new throttled function.\n * @example\n *\n * // Avoid excessively updating the position while scrolling.\n * jQuery(window).on('scroll', _.throttle(updatePosition, 100));\n *\n * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\n * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });\n * jQuery(element).on('click', throttled);\n *\n * // Cancel the trailing throttled invocation.\n * jQuery(window).on('popstate', throttled.cancel);\n */function throttle(func,wait,options){var leading=true,trailing=true;if(typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}if(isObject(options)){leading='leading'in options?!!options.leading:leading;trailing='trailing'in options?!!options.trailing:trailing;}return debounce(func,wait,{'leading':leading,'maxWait':wait,'trailing':trailing});}module.exports=throttle;;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(FUNC_ERROR_TEXT,\"FUNC_ERROR_TEXT\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/lodash/throttle.js\");reactHotLoader.register(throttle,\"throttle\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/lodash/throttle.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC90aHJvdHRsZS5qcz8wZjMyIl0sIm5hbWVzIjpbImRlYm91bmNlIiwicmVxdWlyZSIsImlzT2JqZWN0IiwiRlVOQ19FUlJPUl9URVhUIiwidGhyb3R0bGUiLCJmdW5jIiwid2FpdCIsIm9wdGlvbnMiLCJsZWFkaW5nIiwidHJhaWxpbmciLCJUeXBlRXJyb3IiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoia1VBQUEsR0FBSUEsU0FBUSxDQUFHQyxtQkFBTyxDQUFDLHFEQUFELENBQXRCLENBQ0lDLFFBQVEsQ0FBR0QsbUJBQU8sQ0FBQyxxREFBRCxDQUR0QixDQUdBLCtCQUNBLEdBQUlFLGdCQUFlLENBQUcscUJBQXRCLENBRUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0E0Q0EsUUFBU0MsU0FBVCxDQUFrQkMsSUFBbEIsQ0FBd0JDLElBQXhCLENBQThCQyxPQUE5QixDQUF1QyxDQUNyQyxHQUFJQyxRQUFPLENBQUcsSUFBZCxDQUNJQyxRQUFRLENBQUcsSUFEZixDQUdBLEdBQUksTUFBT0osS0FBUCxFQUFlLFVBQW5CLENBQStCLENBQzdCLEtBQU0sSUFBSUssVUFBSixDQUFjUCxlQUFkLENBQU4sQ0FDRCxDQUNELEdBQUlELFFBQVEsQ0FBQ0ssT0FBRCxDQUFaLENBQXVCLENBQ3JCQyxPQUFPLENBQUcsV0FBYUQsUUFBYixDQUF1QixDQUFDLENBQUNBLE9BQU8sQ0FBQ0MsT0FBakMsQ0FBMkNBLE9BQXJELENBQ0FDLFFBQVEsQ0FBRyxZQUFjRixRQUFkLENBQXdCLENBQUMsQ0FBQ0EsT0FBTyxDQUFDRSxRQUFsQyxDQUE2Q0EsUUFBeEQsQ0FDRCxDQUNELE1BQU9ULFNBQVEsQ0FBQ0ssSUFBRCxDQUFPQyxJQUFQLENBQWEsQ0FDMUIsVUFBV0UsT0FEZSxDQUUxQixVQUFXRixJQUZlLENBRzFCLFdBQVlHLFFBSGMsQ0FBYixDQUFmLENBS0QsQ0FFREUsTUFBTSxDQUFDQyxPQUFQLENBQWlCUixRQUFqQixDLHFLQWhFSUQsZSxtSUE4Q0tDLFEiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL3Rocm90dGxlLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGRlYm91bmNlID0gcmVxdWlyZSgnLi9kZWJvdW5jZScpLFxuICAgIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpO1xuXG4vKiogRXJyb3IgbWVzc2FnZSBjb25zdGFudHMuICovXG52YXIgRlVOQ19FUlJPUl9URVhUID0gJ0V4cGVjdGVkIGEgZnVuY3Rpb24nO1xuXG4vKipcbiAqIENyZWF0ZXMgYSB0aHJvdHRsZWQgZnVuY3Rpb24gdGhhdCBvbmx5IGludm9rZXMgYGZ1bmNgIGF0IG1vc3Qgb25jZSBwZXJcbiAqIGV2ZXJ5IGB3YWl0YCBtaWxsaXNlY29uZHMuIFRoZSB0aHJvdHRsZWQgZnVuY3Rpb24gY29tZXMgd2l0aCBhIGBjYW5jZWxgXG4gKiBtZXRob2QgdG8gY2FuY2VsIGRlbGF5ZWQgYGZ1bmNgIGludm9jYXRpb25zIGFuZCBhIGBmbHVzaGAgbWV0aG9kIHRvXG4gKiBpbW1lZGlhdGVseSBpbnZva2UgdGhlbS4gUHJvdmlkZSBgb3B0aW9uc2AgdG8gaW5kaWNhdGUgd2hldGhlciBgZnVuY2BcbiAqIHNob3VsZCBiZSBpbnZva2VkIG9uIHRoZSBsZWFkaW5nIGFuZC9vciB0cmFpbGluZyBlZGdlIG9mIHRoZSBgd2FpdGBcbiAqIHRpbWVvdXQuIFRoZSBgZnVuY2AgaXMgaW52b2tlZCB3aXRoIHRoZSBsYXN0IGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGVcbiAqIHRocm90dGxlZCBmdW5jdGlvbi4gU3Vic2VxdWVudCBjYWxscyB0byB0aGUgdGhyb3R0bGVkIGZ1bmN0aW9uIHJldHVybiB0aGVcbiAqIHJlc3VsdCBvZiB0aGUgbGFzdCBgZnVuY2AgaW52b2NhdGlvbi5cbiAqXG4gKiAqKk5vdGU6KiogSWYgYGxlYWRpbmdgIGFuZCBgdHJhaWxpbmdgIG9wdGlvbnMgYXJlIGB0cnVlYCwgYGZ1bmNgIGlzXG4gKiBpbnZva2VkIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0IG9ubHkgaWYgdGhlIHRocm90dGxlZCBmdW5jdGlvblxuICogaXMgaW52b2tlZCBtb3JlIHRoYW4gb25jZSBkdXJpbmcgdGhlIGB3YWl0YCB0aW1lb3V0LlxuICpcbiAqIElmIGB3YWl0YCBpcyBgMGAgYW5kIGBsZWFkaW5nYCBpcyBgZmFsc2VgLCBgZnVuY2AgaW52b2NhdGlvbiBpcyBkZWZlcnJlZFxuICogdW50aWwgdG8gdGhlIG5leHQgdGljaywgc2ltaWxhciB0byBgc2V0VGltZW91dGAgd2l0aCBhIHRpbWVvdXQgb2YgYDBgLlxuICpcbiAqIFNlZSBbRGF2aWQgQ29yYmFjaG8ncyBhcnRpY2xlXShodHRwczovL2Nzcy10cmlja3MuY29tL2RlYm91bmNpbmctdGhyb3R0bGluZy1leHBsYWluZWQtZXhhbXBsZXMvKVxuICogZm9yIGRldGFpbHMgb3ZlciB0aGUgZGlmZmVyZW5jZXMgYmV0d2VlbiBgXy50aHJvdHRsZWAgYW5kIGBfLmRlYm91bmNlYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHRocm90dGxlLlxuICogQHBhcmFtIHtudW1iZXJ9IFt3YWl0PTBdIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHRocm90dGxlIGludm9jYXRpb25zIHRvLlxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmxlYWRpbmc9dHJ1ZV1cbiAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSBsZWFkaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnRyYWlsaW5nPXRydWVdXG4gKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHRocm90dGxlZCBmdW5jdGlvbi5cbiAqIEBleGFtcGxlXG4gKlxuICogLy8gQXZvaWQgZXhjZXNzaXZlbHkgdXBkYXRpbmcgdGhlIHBvc2l0aW9uIHdoaWxlIHNjcm9sbGluZy5cbiAqIGpRdWVyeSh3aW5kb3cpLm9uKCdzY3JvbGwnLCBfLnRocm90dGxlKHVwZGF0ZVBvc2l0aW9uLCAxMDApKTtcbiAqXG4gKiAvLyBJbnZva2UgYHJlbmV3VG9rZW5gIHdoZW4gdGhlIGNsaWNrIGV2ZW50IGlzIGZpcmVkLCBidXQgbm90IG1vcmUgdGhhbiBvbmNlIGV2ZXJ5IDUgbWludXRlcy5cbiAqIHZhciB0aHJvdHRsZWQgPSBfLnRocm90dGxlKHJlbmV3VG9rZW4sIDMwMDAwMCwgeyAndHJhaWxpbmcnOiBmYWxzZSB9KTtcbiAqIGpRdWVyeShlbGVtZW50KS5vbignY2xpY2snLCB0aHJvdHRsZWQpO1xuICpcbiAqIC8vIENhbmNlbCB0aGUgdHJhaWxpbmcgdGhyb3R0bGVkIGludm9jYXRpb24uXG4gKiBqUXVlcnkod2luZG93KS5vbigncG9wc3RhdGUnLCB0aHJvdHRsZWQuY2FuY2VsKTtcbiAqL1xuZnVuY3Rpb24gdGhyb3R0bGUoZnVuYywgd2FpdCwgb3B0aW9ucykge1xuICB2YXIgbGVhZGluZyA9IHRydWUsXG4gICAgICB0cmFpbGluZyA9IHRydWU7XG5cbiAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gIH1cbiAgaWYgKGlzT2JqZWN0KG9wdGlvbnMpKSB7XG4gICAgbGVhZGluZyA9ICdsZWFkaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLmxlYWRpbmcgOiBsZWFkaW5nO1xuICAgIHRyYWlsaW5nID0gJ3RyYWlsaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLnRyYWlsaW5nIDogdHJhaWxpbmc7XG4gIH1cbiAgcmV0dXJuIGRlYm91bmNlKGZ1bmMsIHdhaXQsIHtcbiAgICAnbGVhZGluZyc6IGxlYWRpbmcsXG4gICAgJ21heFdhaXQnOiB3YWl0LFxuICAgICd0cmFpbGluZyc6IHRyYWlsaW5nXG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRocm90dGxlO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/lodash/throttle.js\n");

/***/ }),

/***/ "./node_modules/lodash/toPairs.js":
/*!****************************************!*\
  !*** ./node_modules/lodash/toPairs.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};var createToPairs=__webpack_require__(/*! ./_createToPairs */ \"./node_modules/lodash/_createToPairs.js\"),keys=__webpack_require__(/*! ./keys */ \"./node_modules/lodash/keys.js\");/**\n * Creates an array of own enumerable string keyed-value pairs for `object`\n * which can be consumed by `_.fromPairs`. If `object` is a map or set, its\n * entries are returned.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @alias entries\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the key-value pairs.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.toPairs(new Foo);\n * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)\n */var toPairs=createToPairs(keys);module.exports=toPairs;;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(toPairs,\"toPairs\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/lodash/toPairs.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC90b1BhaXJzLmpzP2Y1NDIiXSwibmFtZXMiOlsiY3JlYXRlVG9QYWlycyIsInJlcXVpcmUiLCJrZXlzIiwidG9QYWlycyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJrVUFBQSxHQUFJQSxjQUFhLENBQUdDLG1CQUFPLENBQUMsaUVBQUQsQ0FBM0IsQ0FDSUMsSUFBSSxDQUFHRCxtQkFBTyxDQUFDLDZDQUFELENBRGxCLENBR0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBd0JBLEdBQUlFLFFBQU8sQ0FBR0gsYUFBYSxDQUFDRSxJQUFELENBQTNCLENBRUFFLE1BQU0sQ0FBQ0MsT0FBUCxDQUFpQkYsT0FBakIsQyxxS0FGSUEsTyIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9sb2Rhc2gvdG9QYWlycy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBjcmVhdGVUb1BhaXJzID0gcmVxdWlyZSgnLi9fY3JlYXRlVG9QYWlycycpLFxuICAgIGtleXMgPSByZXF1aXJlKCcuL2tleXMnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZC12YWx1ZSBwYWlycyBmb3IgYG9iamVjdGBcbiAqIHdoaWNoIGNhbiBiZSBjb25zdW1lZCBieSBgXy5mcm9tUGFpcnNgLiBJZiBgb2JqZWN0YCBpcyBhIG1hcCBvciBzZXQsIGl0c1xuICogZW50cmllcyBhcmUgcmV0dXJuZWQuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGFsaWFzIGVudHJpZXNcbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUga2V5LXZhbHVlIHBhaXJzLlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBGb28oKSB7XG4gKiAgIHRoaXMuYSA9IDE7XG4gKiAgIHRoaXMuYiA9IDI7XG4gKiB9XG4gKlxuICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAqXG4gKiBfLnRvUGFpcnMobmV3IEZvbyk7XG4gKiAvLyA9PiBbWydhJywgMV0sIFsnYicsIDJdXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICovXG52YXIgdG9QYWlycyA9IGNyZWF0ZVRvUGFpcnMoa2V5cyk7XG5cbm1vZHVsZS5leHBvcnRzID0gdG9QYWlycztcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/lodash/toPairs.js\n");

/***/ }),

/***/ "./node_modules/lodash/xor.js":
/*!************************************!*\
  !*** ./node_modules/lodash/xor.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};var arrayFilter=__webpack_require__(/*! ./_arrayFilter */ \"./node_modules/lodash/_arrayFilter.js\"),baseRest=__webpack_require__(/*! ./_baseRest */ \"./node_modules/lodash/_baseRest.js\"),baseXor=__webpack_require__(/*! ./_baseXor */ \"./node_modules/lodash/_baseXor.js\"),isArrayLikeObject=__webpack_require__(/*! ./isArrayLikeObject */ \"./node_modules/lodash/isArrayLikeObject.js\");/**\n * Creates an array of unique values that is the\n * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)\n * of the given arrays. The order of result values is determined by the order\n * they occur in the arrays.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Array\n * @param {...Array} [arrays] The arrays to inspect.\n * @returns {Array} Returns the new array of filtered values.\n * @see _.difference, _.without\n * @example\n *\n * _.xor([2, 1], [2, 3]);\n * // => [1, 3]\n */var xor=baseRest(function(arrays){return baseXor(arrayFilter(arrays,isArrayLikeObject));});module.exports=xor;;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(xor,\"xor\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/lodash/xor.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC94b3IuanM/NDFjNiJdLCJuYW1lcyI6WyJhcnJheUZpbHRlciIsInJlcXVpcmUiLCJiYXNlUmVzdCIsImJhc2VYb3IiLCJpc0FycmF5TGlrZU9iamVjdCIsInhvciIsImFycmF5cyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJrVUFBQSxHQUFJQSxZQUFXLENBQUdDLG1CQUFPLENBQUMsNkRBQUQsQ0FBekIsQ0FDSUMsUUFBUSxDQUFHRCxtQkFBTyxDQUFDLHVEQUFELENBRHRCLENBRUlFLE9BQU8sQ0FBR0YsbUJBQU8sQ0FBQyxxREFBRCxDQUZyQixDQUdJRyxpQkFBaUIsQ0FBR0gsbUJBQU8sQ0FBQyx1RUFBRCxDQUgvQixDQUtBOzs7Ozs7Ozs7Ozs7Ozs7OztHQWtCQSxHQUFJSSxJQUFHLENBQUdILFFBQVEsQ0FBQyxTQUFTSSxNQUFULENBQWlCLENBQ2xDLE1BQU9ILFFBQU8sQ0FBQ0gsV0FBVyxDQUFDTSxNQUFELENBQVNGLGlCQUFULENBQVosQ0FBZCxDQUNELENBRmlCLENBQWxCLENBSUFHLE1BQU0sQ0FBQ0MsT0FBUCxDQUFpQkgsR0FBakIsQyxxS0FKSUEsRyIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9sb2Rhc2gveG9yLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGFycmF5RmlsdGVyID0gcmVxdWlyZSgnLi9fYXJyYXlGaWx0ZXInKSxcbiAgICBiYXNlUmVzdCA9IHJlcXVpcmUoJy4vX2Jhc2VSZXN0JyksXG4gICAgYmFzZVhvciA9IHJlcXVpcmUoJy4vX2Jhc2VYb3InKSxcbiAgICBpc0FycmF5TGlrZU9iamVjdCA9IHJlcXVpcmUoJy4vaXNBcnJheUxpa2VPYmplY3QnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHVuaXF1ZSB2YWx1ZXMgdGhhdCBpcyB0aGVcbiAqIFtzeW1tZXRyaWMgZGlmZmVyZW5jZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU3ltbWV0cmljX2RpZmZlcmVuY2UpXG4gKiBvZiB0aGUgZ2l2ZW4gYXJyYXlzLiBUaGUgb3JkZXIgb2YgcmVzdWx0IHZhbHVlcyBpcyBkZXRlcm1pbmVkIGJ5IHRoZSBvcmRlclxuICogdGhleSBvY2N1ciBpbiB0aGUgYXJyYXlzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMi40LjBcbiAqIEBjYXRlZ29yeSBBcnJheVxuICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICogQHNlZSBfLmRpZmZlcmVuY2UsIF8ud2l0aG91dFxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnhvcihbMiwgMV0sIFsyLCAzXSk7XG4gKiAvLyA9PiBbMSwgM11cbiAqL1xudmFyIHhvciA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICByZXR1cm4gYmFzZVhvcihhcnJheUZpbHRlcihhcnJheXMsIGlzQXJyYXlMaWtlT2JqZWN0KSk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSB4b3I7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/lodash/xor.js\n");

/***/ }),

/***/ "./node_modules/openseadragon/build/openseadragon/openseadragon.js":
/*!*************************************************************************!*\
  !*** ./node_modules/openseadragon/build/openseadragon/openseadragon.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};//! openseadragon 2.4.2\n//! Built on 2020-03-05\n//! Git commit: v2.4.2-0-c450749\n//! http://openseadragon.github.io\n//! License: http://openseadragon.github.io/license/\n/*\n * OpenSeadragon\n *\n * Copyright (C) 2009 CodePlex Foundation\n * Copyright (C) 2010-2013 OpenSeadragon contributors\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * - Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * - Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * - Neither the name of CodePlex Foundation nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */ /*\n * Portions of this source file taken from jQuery:\n *\n * Copyright 2011 John Resig\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */ /*\n * Portions of this source file taken from mattsnider.com:\n *\n * Copyright (c) 2006-2013 Matt Snider\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT\n * OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR\n * THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */ /**\n * @namespace OpenSeadragon\n * @version openseadragon 2.4.2\n * @classdesc The root namespace for OpenSeadragon.  All utility methods\n * and classes are defined on or below this namespace.\n *\n */ // Typedefs\n/**\n  * All required and optional settings for instantiating a new instance of an OpenSeadragon image viewer.\n  *\n  * @typedef {Object} Options\n  * @memberof OpenSeadragon\n  *\n  * @property {String} id\n  *     Id of the element to append the viewer's container element to. If not provided, the 'element' property must be provided.\n  *     If both the element and id properties are specified, the viewer is appended to the element provided in the element property.\n  *\n  * @property {Element} element\n  *     The element to append the viewer's container element to. If not provided, the 'id' property must be provided.\n  *     If both the element and id properties are specified, the viewer is appended to the element provided in the element property.\n  *\n  * @property {Array|String|Function|Object} [tileSources=null]\n  *     Tile source(s) to open initially. This is a complex parameter; see\n  *     {@link OpenSeadragon.Viewer#open} for details.\n  *\n  * @property {Number} [tabIndex=0]\n  *     Tabbing order index to assign to the viewer element. Positive values are selected in increasing order. When tabIndex is 0\n  *     source order is used. A negative value omits the viewer from the tabbing order.\n  *\n  * @property {Array} overlays Array of objects defining permanent overlays of\n  *     the viewer. The overlays added via this option and later removed with\n  *     {@link OpenSeadragon.Viewer#removeOverlay} will be added back when a new\n  *     image is opened.\n  *     To add overlays which can be definitively removed, one must use\n  *     {@link OpenSeadragon.Viewer#addOverlay}\n  *     If displaying a sequence of images, the overlays can be associated\n  *     with a specific page by passing the overlays array to the page's\n  *     tile source configuration.\n  *     Expected properties:\n  *     * x, y, (or px, py for pixel coordinates) to define the location.\n  *     * width, height in point if using x,y or in pixels if using px,py. If width\n  *       and height are specified, the overlay size is adjusted when zooming,\n  *       otherwise the size stays the size of the content (or the size defined by CSS).\n  *     * className to associate a class to the overlay\n  *     * id to set the overlay element. If an element with this id already exists,\n  *       it is reused, otherwise it is created. If not specified, a new element is\n  *       created.\n  *     * placement a string to define the relative position to the viewport.\n  *       Only used if no width and height are specified. Default: 'TOP_LEFT'.\n  *       See {@link OpenSeadragon.Placement} for possible values.\n  *\n  * @property {String} [xmlPath=null]\n  *     <strong>DEPRECATED</strong>. A relative path to load a DZI file from the server.\n  *     Prefer the newer Options.tileSources.\n  *\n  * @property {String} [prefixUrl='/images/']\n  *     Prepends the prefixUrl to navImages paths, which is very useful\n  *     since the default paths are rarely useful for production\n  *     environments.\n  *\n  * @property {OpenSeadragon.NavImages} [navImages]\n  *     An object with a property for each button or other built-in navigation\n  *     control, eg the current 'zoomIn', 'zoomOut', 'home', and 'fullpage'.\n  *     Each of those in turn provides an image path for each state of the button\n  *     or navigation control, eg 'REST', 'GROUP', 'HOVER', 'PRESS'. Finally the\n  *     image paths, by default assume there is a folder on the servers root path\n  *     called '/images', eg '/images/zoomin_rest.png'.  If you need to adjust\n  *     these paths, prefer setting the option.prefixUrl rather than overriding\n  *     every image path directly through this setting.\n  *\n  * @property {Boolean} [debugMode=false]\n  *     TODO: provide an in-screen panel providing event detail feedback.\n  *\n  * @property {String} [debugGridColor=['#437AB2', '#1B9E77', '#D95F02', '#7570B3', '#E7298A', '#66A61E', '#E6AB02', '#A6761D', '#666666']]\n  *     The colors of grids in debug mode. Each tiled image's grid uses a consecutive color.\n  *     If there are more tiled images than provided colors, the color vector is recycled.\n  *\n  * @property {Number} [blendTime=0]\n  *     Specifies the duration of animation as higher or lower level tiles are\n  *     replacing the existing tile.\n  *\n  * @property {Boolean} [alwaysBlend=false]\n  *     Forces the tile to always blend.  By default the tiles skip blending\n  *     when the blendTime is surpassed and the current animation frame would\n  *     not complete the blend.\n  *\n  * @property {Boolean} [autoHideControls=true]\n  *     If the user stops interacting with the viewport, fade the navigation\n  *     controls.  Useful for presentation since the controls are by default\n  *     floated on top of the image the user is viewing.\n  *\n  * @property {Boolean} [immediateRender=false]\n  *     Render the best closest level first, ignoring the lowering levels which\n  *     provide the effect of very blurry to sharp. It is recommended to change\n  *     setting to true for mobile devices.\n  *\n  * @property {Number} [defaultZoomLevel=0]\n  *     Zoom level to use when image is first opened or the home button is clicked.\n  *     If 0, adjusts to fit viewer.\n  *\n  * @property {Number} [opacity=1]\n  *     Default proportional opacity of the tiled images (1=opaque, 0=hidden)\n  *     Hidden images do not draw and only load when preloading is allowed.\n  *\n  * @property {Boolean} [preload=false]\n  *     Default switch for loading hidden images (true loads, false blocks)\n  *\n  * @property {String} [compositeOperation=null]\n  *     Valid values are 'source-over', 'source-atop', 'source-in', 'source-out',\n  *     'destination-over', 'destination-atop', 'destination-in',\n  *     'destination-out', 'lighter', 'copy' or 'xor'\n  *\n  * @property {Boolean} [imageSmoothingEnabled=true]\n  *     Image smoothing for canvas rendering (only if canvas is used). Note: Ignored\n  *     by some (especially older) browsers which do not support this canvas property.\n  *     This property can be changed in {@link Viewer.Drawer.setImageSmoothingEnabled}.\n  *\n  * @property {String|CanvasGradient|CanvasPattern|Function} [placeholderFillStyle=null]\n  *     Draws a colored rectangle behind the tile if it is not loaded yet.\n  *     You can pass a CSS color value like \"#FF8800\".\n  *     When passing a function the tiledImage and canvas context are available as argument which is useful when you draw a gradient or pattern.\n  *\n  * @property {Number} [degrees=0]\n  *     Initial rotation.\n  *\n  * @property {Boolean} [flipped=false]\n  *     Initial flip state.\n  *\n  * @property {Number} [minZoomLevel=null]\n  *\n  * @property {Number} [maxZoomLevel=null]\n  *\n  * @property {Boolean} [homeFillsViewer=false]\n  *     Make the 'home' button fill the viewer and clip the image, instead\n  *     of fitting the image to the viewer and letterboxing.\n  *\n  * @property {Boolean} [panHorizontal=true]\n  *     Allow horizontal pan.\n  *\n  * @property {Boolean} [panVertical=true]\n  *     Allow vertical pan.\n  *\n  * @property {Boolean} [constrainDuringPan=false]\n  *\n  * @property {Boolean} [wrapHorizontal=false]\n  *     Set to true to force the image to wrap horizontally within the viewport.\n  *     Useful for maps or images representing the surface of a sphere or cylinder.\n  *\n  * @property {Boolean} [wrapVertical=false]\n  *     Set to true to force the image to wrap vertically within the viewport.\n  *     Useful for maps or images representing the surface of a sphere or cylinder.\n  *\n  * @property {Number} [minZoomImageRatio=0.9]\n  *     The minimum percentage ( expressed as a number between 0 and 1 ) of\n  *     the viewport height or width at which the zoom out will be constrained.\n  *     Setting it to 0, for example will allow you to zoom out infinity.\n  *\n  * @property {Number} [maxZoomPixelRatio=1.1]\n  *     The maximum ratio to allow a zoom-in to affect the highest level pixel\n  *     ratio. This can be set to Infinity to allow 'infinite' zooming into the\n  *     image though it is less effective visually if the HTML5 Canvas is not\n  *     available on the viewing device.\n  *\n  * @property {Number} [smoothTileEdgesMinZoom=1.1]\n  *     A zoom percentage ( where 1 is 100% ) of the highest resolution level.\n  *     When zoomed in beyond this value alternative compositing will be used to\n  *     smooth out the edges between tiles. This will have a performance impact.\n  *     Can be set to Infinity to turn it off.\n  *     Note: This setting is ignored on iOS devices due to a known bug (See {@link https://github.com/openseadragon/openseadragon/issues/952})\n  *\n  * @property {Boolean} [iOSDevice=?]\n  *     True if running on an iOS device, false otherwise.\n  *     Used to disable certain features that behave differently on iOS devices.\n  *\n  * @property {Boolean} [autoResize=true]\n  *     Set to false to prevent polling for viewer size changes. Useful for providing custom resize behavior.\n  *\n  * @property {Boolean} [preserveImageSizeOnResize=false]\n  *     Set to true to have the image size preserved when the viewer is resized. This requires autoResize=true (default).\n  *\n  * @property {Number} [minScrollDeltaTime=50]\n  *     Number of milliseconds between canvas-scroll events. This value helps normalize the rate of canvas-scroll\n  *     events between different devices, causing the faster devices to slow down enough to make the zoom control\n  *     more manageable.\n  *\n  * @property {Number} [rotationIncrement=90]\n  *     The number of degrees to rotate right or left when the rotate buttons or keyboard shortcuts are activated.\n  *\n  * @property {Number} [pixelsPerWheelLine=40]\n  *     For pixel-resolution scrolling devices, the number of pixels equal to one scroll line.\n  *\n  * @property {Number} [pixelsPerArrowPress=40]\n  *     The number of pixels viewport moves when an arrow key is pressed.\n  *\n  * @property {Number} [visibilityRatio=0.5]\n  *     The percentage ( as a number from 0 to 1 ) of the source image which\n  *     must be kept within the viewport.  If the image is dragged beyond that\n  *     limit, it will 'bounce' back until the minimum visibility ratio is\n  *     achieved.  Setting this to 0 and wrapHorizontal ( or wrapVertical ) to\n  *     true will provide the effect of an infinitely scrolling viewport.\n  *\n  * @property {Object} [viewportMargins={}]\n  *     Pushes the \"home\" region in from the sides by the specified amounts.\n  *     Possible subproperties (Numbers, in screen coordinates): left, top, right, bottom.\n  *\n  * @property {Number} [imageLoaderLimit=0]\n  *     The maximum number of image requests to make concurrently. By default\n  *     it is set to 0 allowing the browser to make the maximum number of\n  *     image requests in parallel as allowed by the browsers policy.\n  *\n  * @property {Number} [clickTimeThreshold=300]\n  *      The number of milliseconds within which a pointer down-up event combination\n  *      will be treated as a click gesture.\n  *\n  * @property {Number} [clickDistThreshold=5]\n  *      The maximum distance allowed between a pointer down event and a pointer up event\n  *      to be treated as a click gesture.\n  *\n  * @property {Number} [dblClickTimeThreshold=300]\n  *      The number of milliseconds within which two pointer down-up event combinations\n  *      will be treated as a double-click gesture.\n  *\n  * @property {Number} [dblClickDistThreshold=20]\n  *      The maximum distance allowed between two pointer click events\n  *      to be treated as a double-click gesture.\n  *\n  * @property {Number} [springStiffness=6.5]\n  *\n  * @property {Number} [animationTime=1.2]\n  *     Specifies the animation duration per each {@link OpenSeadragon.Spring}\n  *     which occur when the image is dragged or zoomed.\n  *\n  * @property {OpenSeadragon.GestureSettings} [gestureSettingsMouse]\n  *     Settings for gestures generated by a mouse pointer device. (See {@link OpenSeadragon.GestureSettings})\n  * @property {Boolean} [gestureSettingsMouse.scrollToZoom=true] - Zoom on scroll gesture\n  * @property {Boolean} [gestureSettingsMouse.clickToZoom=true] - Zoom on click gesture\n  * @property {Boolean} [gestureSettingsMouse.dblClickToZoom=false] - Zoom on double-click gesture. Note: If set to true\n  *     then clickToZoom should be set to false to prevent multiple zooms.\n  * @property {Boolean} [gestureSettingsMouse.pinchToZoom=false] - Zoom on pinch gesture\n  * @property {Boolean} [gestureSettingsMouse.zoomToRefPoint=true] - If zoomToRefPoint is true, the zoom is centered at the pointer position. Otherwise,\n  *     the zoom is centered at the canvas center.\n  * @property {Boolean} [gestureSettingsMouse.flickEnabled=false] - Enable flick gesture\n  * @property {Number} [gestureSettingsMouse.flickMinSpeed=120] - If flickEnabled is true, the minimum speed to initiate a flick gesture (pixels-per-second)\n  * @property {Number} [gestureSettingsMouse.flickMomentum=0.25] - If flickEnabled is true, the momentum factor for the flick gesture\n  * @property {Boolean} [gestureSettingsMouse.pinchRotate=false] - If pinchRotate is true, the user will have the ability to rotate the image using their fingers.\n  *\n  * @property {OpenSeadragon.GestureSettings} [gestureSettingsTouch]\n  *     Settings for gestures generated by a touch pointer device. (See {@link OpenSeadragon.GestureSettings})\n  * @property {Boolean} [gestureSettingsTouch.scrollToZoom=false] - Zoom on scroll gesture\n  * @property {Boolean} [gestureSettingsTouch.clickToZoom=false] - Zoom on click gesture\n  * @property {Boolean} [gestureSettingsTouch.dblClickToZoom=true] - Zoom on double-click gesture. Note: If set to true\n  *     then clickToZoom should be set to false to prevent multiple zooms.\n  * @property {Boolean} [gestureSettingsTouch.pinchToZoom=true] - Zoom on pinch gesture\n  * @property {Boolean} [gestureSettingsTouch.zoomToRefPoint=true] - If zoomToRefPoint is true, the zoom is centered at the pointer position. Otherwise,\n  *     the zoom is centered at the canvas center.\n  * @property {Boolean} [gestureSettingsTouch.flickEnabled=true] - Enable flick gesture\n  * @property {Number} [gestureSettingsTouch.flickMinSpeed=120] - If flickEnabled is true, the minimum speed to initiate a flick gesture (pixels-per-second)\n  * @property {Number} [gestureSettingsTouch.flickMomentum=0.25] - If flickEnabled is true, the momentum factor for the flick gesture\n  * @property {Boolean} [gestureSettingsTouch.pinchRotate=false] - If pinchRotate is true, the user will have the ability to rotate the image using their fingers.\n  *\n  * @property {OpenSeadragon.GestureSettings} [gestureSettingsPen]\n  *     Settings for gestures generated by a pen pointer device. (See {@link OpenSeadragon.GestureSettings})\n  * @property {Boolean} [gestureSettingsPen.scrollToZoom=false] - Zoom on scroll gesture\n  * @property {Boolean} [gestureSettingsPen.clickToZoom=true] - Zoom on click gesture\n  * @property {Boolean} [gestureSettingsPen.dblClickToZoom=false] - Zoom on double-click gesture. Note: If set to true\n  *     then clickToZoom should be set to false to prevent multiple zooms.\n  * @property {Boolean} [gestureSettingsPen.pinchToZoom=false] - Zoom on pinch gesture\n  * @property {Boolean} [gestureSettingsPen.zoomToRefPoint=true] - If zoomToRefPoint is true, the zoom is centered at the pointer position. Otherwise,\n  *     the zoom is centered at the canvas center.\n  * @property {Boolean} [gestureSettingsPen.flickEnabled=false] - Enable flick gesture\n  * @property {Number} [gestureSettingsPen.flickMinSpeed=120] - If flickEnabled is true, the minimum speed to initiate a flick gesture (pixels-per-second)\n  * @property {Number} [gestureSettingsPen.flickMomentum=0.25] - If flickEnabled is true, the momentum factor for the flick gesture\n  * @property {Boolean} [gestureSettingsPen.pinchRotate=false] - If pinchRotate is true, the user will have the ability to rotate the image using their fingers.\n  *\n  * @property {OpenSeadragon.GestureSettings} [gestureSettingsUnknown]\n  *     Settings for gestures generated by unknown pointer devices. (See {@link OpenSeadragon.GestureSettings})\n  * @property {Boolean} [gestureSettingsUnknown.scrollToZoom=true] - Zoom on scroll gesture\n  * @property {Boolean} [gestureSettingsUnknown.clickToZoom=false] - Zoom on click gesture\n  * @property {Boolean} [gestureSettingsUnknown.dblClickToZoom=true] - Zoom on double-click gesture. Note: If set to true\n  *     then clickToZoom should be set to false to prevent multiple zooms.\n  * @property {Boolean} [gestureSettingsUnknown.pinchToZoom=true] - Zoom on pinch gesture\n  * @property {Boolean} [gestureSettingsUnknown.zoomToRefPoint=true] - If zoomToRefPoint is true, the zoom is centered at the pointer position. Otherwise,\n  *     the zoom is centered at the canvas center.\n  * @property {Boolean} [gestureSettingsUnknown.flickEnabled=true] - Enable flick gesture\n  * @property {Number} [gestureSettingsUnknown.flickMinSpeed=120] - If flickEnabled is true, the minimum speed to initiate a flick gesture (pixels-per-second)\n  * @property {Number} [gestureSettingsUnknown.flickMomentum=0.25] - If flickEnabled is true, the momentum factor for the flick gesture\n  * @property {Boolean} [gestureSettingsUnknown.pinchRotate=false] - If pinchRotate is true, the user will have the ability to rotate the image using their fingers.\n  *\n  * @property {Number} [zoomPerClick=2.0]\n  *     The \"zoom distance\" per mouse click or touch tap. <em><strong>Note:</strong> Setting this to 1.0 effectively disables the click-to-zoom feature (also see gestureSettings[Mouse|Touch|Pen].clickToZoom/dblClickToZoom).</em>\n  *\n  * @property {Number} [zoomPerScroll=1.2]\n  *     The \"zoom distance\" per mouse scroll or touch pinch. <em><strong>Note:</strong> Setting this to 1.0 effectively disables the mouse-wheel zoom feature (also see gestureSettings[Mouse|Touch|Pen].scrollToZoom}).</em>\n  *\n  * @property {Number} [zoomPerSecond=1.0]\n  *     The number of seconds to animate a single zoom event over.\n  *\n  * @property {Boolean} [showNavigator=false]\n  *     Set to true to make the navigator minimap appear.\n  *\n  * @property {String} [navigatorId=navigator-GENERATED DATE]\n  *     The ID of a div to hold the navigator minimap.\n  *     If an ID is specified, the navigatorPosition, navigatorSizeRatio, navigatorMaintainSizeRatio, navigator[Top|Left|Height|Width] and navigatorAutoFade options will be ignored.\n  *     If an ID is not specified, a div element will be generated and placed on top of the main image.\n  *\n  * @property {String} [navigatorPosition='TOP_RIGHT']\n  *     Valid values are 'TOP_LEFT', 'TOP_RIGHT', 'BOTTOM_LEFT', 'BOTTOM_RIGHT', or 'ABSOLUTE'.<br>\n  *     If 'ABSOLUTE' is specified, then navigator[Top|Left|Height|Width] determines the size and position of the navigator minimap in the viewer, and navigatorSizeRatio and navigatorMaintainSizeRatio are ignored.<br>\n  *     For 'TOP_LEFT', 'TOP_RIGHT', 'BOTTOM_LEFT', and 'BOTTOM_RIGHT', the navigatorSizeRatio or navigator[Height|Width] values determine the size of the navigator minimap.\n  *\n  * @property {Number} [navigatorSizeRatio=0.2]\n  *     Ratio of navigator size to viewer size. Ignored if navigator[Height|Width] are specified.\n  *\n  * @property {Boolean} [navigatorMaintainSizeRatio=false]\n  *     If true, the navigator minimap is resized (using navigatorSizeRatio) when the viewer size changes.\n  *\n  * @property {Number|String} [navigatorTop=null]\n  *     Specifies the location of the navigator minimap (see navigatorPosition).\n  *\n  * @property {Number|String} [navigatorLeft=null]\n  *     Specifies the location of the navigator minimap (see navigatorPosition).\n  *\n  * @property {Number|String} [navigatorHeight=null]\n  *     Specifies the size of the navigator minimap (see navigatorPosition).\n  *     If specified, navigatorSizeRatio and navigatorMaintainSizeRatio are ignored.\n  *\n  * @property {Number|String} [navigatorWidth=null]\n  *     Specifies the size of the navigator minimap (see navigatorPosition).\n  *     If specified, navigatorSizeRatio and navigatorMaintainSizeRatio are ignored.\n  *\n  * @property {Boolean} [navigatorAutoResize=true]\n  *     Set to false to prevent polling for navigator size changes. Useful for providing custom resize behavior.\n  *     Setting to false can also improve performance when the navigator is configured to a fixed size.\n  *\n  * @property {Boolean} [navigatorAutoFade=true]\n  *     If the user stops interacting with the viewport, fade the navigator minimap.\n  *     Setting to false will make the navigator minimap always visible.\n  *\n  * @property {Boolean} [navigatorRotate=true]\n  *     If true, the navigator will be rotated together with the viewer.\n  *\n  * @property {String} [navigatorBackground='#000']\n  *     Specifies the background color of the navigator minimap\n  *\n  * @property {Number} [navigatorOpacity=0.8]\n  *     Specifies the opacity of the navigator minimap.\n  *\n  * @property {String} [navigatorBorderColor='#555']\n  *     Specifies the border color of the navigator minimap\n  *\n  * @property {String} [navigatorDisplayRegionColor='#900']\n  *     Specifies the border color of the display region rectangle of the navigator minimap\n  *\n  * @property {Number} [controlsFadeDelay=2000]\n  *     The number of milliseconds to wait once the user has stopped interacting\n  *     with the interface before beginning to fade the controls. Assumes\n  *     showNavigationControl and autoHideControls are both true.\n  *\n  * @property {Number} [controlsFadeLength=1500]\n  *     The number of milliseconds to animate the controls fading out.\n  *\n  * @property {Number} [maxImageCacheCount=200]\n  *     The max number of images we should keep in memory (per drawer).\n  *\n  * @property {Number} [timeout=30000]\n  *     The max number of milliseconds that an image job may take to complete.\n  *\n  * @property {Boolean} [useCanvas=true]\n  *     Set to false to not use an HTML canvas element for image rendering even if canvas is supported.\n  *\n  * @property {Number} [minPixelRatio=0.5]\n  *     The higher the minPixelRatio, the lower the quality of the image that\n  *     is considered sufficient to stop rendering a given zoom level.  For\n  *     example, if you are targeting mobile devices with less bandwidth you may\n  *     try setting this to 1.5 or higher.\n  *\n  * @property {Boolean} [mouseNavEnabled=true]\n  *     Is the user able to interact with the image via mouse or touch. Default\n  *     interactions include draging the image in a plane, and zooming in toward\n  *     and away from the image.\n  *\n  * @property {Boolean} [showNavigationControl=true]\n  *     Set to false to prevent the appearance of the default navigation controls.<br>\n  *     Note that if set to false, the customs buttons set by the options\n  *     zoomInButton, zoomOutButton etc, are rendered inactive.\n  *\n  * @property {OpenSeadragon.ControlAnchor} [navigationControlAnchor=TOP_LEFT]\n  *     Placement of the default navigation controls.\n  *     To set the placement of the sequence controls, see the\n  *     sequenceControlAnchor option.\n  *\n  * @property {Boolean} [showZoomControl=true]\n  *     If true then + and - buttons to zoom in and out are displayed.<br>\n  *     Note: {@link OpenSeadragon.Options.showNavigationControl} is overriding\n  *     this setting when set to false.\n  *\n  * @property {Boolean} [showHomeControl=true]\n  *     If true then the 'Go home' button is displayed to go back to the original\n  *     zoom and pan.<br>\n  *     Note: {@link OpenSeadragon.Options.showNavigationControl} is overriding\n  *     this setting when set to false.\n  *\n  * @property {Boolean} [showFullPageControl=true]\n  *     If true then the 'Toggle full page' button is displayed to switch\n  *     between full page and normal mode.<br>\n  *     Note: {@link OpenSeadragon.Options.showNavigationControl} is overriding\n  *     this setting when set to false.\n  *\n  * @property {Boolean} [showRotationControl=false]\n  *     If true then the rotate left/right controls will be displayed as part of the\n  *     standard controls. This is also subject to the browser support for rotate\n  *     (e.g. viewer.drawer.canRotate()).<br>\n  *     Note: {@link OpenSeadragon.Options.showNavigationControl} is overriding\n  *     this setting when set to false.\n  *\n  * @property {Boolean} [showFlipControl=false]\n  *     If true then the flip controls will be displayed as part of the\n  *     standard controls.\n  *\n  * @property {Boolean} [showSequenceControl=true]\n  *     If sequenceMode is true, then provide buttons for navigating forward and\n  *     backward through the images.\n  *\n  * @property {OpenSeadragon.ControlAnchor} [sequenceControlAnchor=TOP_LEFT]\n  *     Placement of the default sequence controls.\n  *\n  * @property {Boolean} [navPrevNextWrap=false]\n  *     If true then the 'previous' button will wrap to the last image when\n  *     viewing the first image and the 'next' button will wrap to the first\n  *     image when viewing the last image.\n  *\n  * @property {String} zoomInButton\n  *     Set the id of the custom 'Zoom in' button to use.\n  *     This is useful to have a custom button anywhere in the web page.<br>\n  *     To only change the button images, consider using\n  *     {@link OpenSeadragon.Options.navImages}\n  *\n  * @property {String} zoomOutButton\n  *     Set the id of the custom 'Zoom out' button to use.\n  *     This is useful to have a custom button anywhere in the web page.<br>\n  *     To only change the button images, consider using\n  *     {@link OpenSeadragon.Options.navImages}\n  *\n  * @property {String} homeButton\n  *     Set the id of the custom 'Go home' button to use.\n  *     This is useful to have a custom button anywhere in the web page.<br>\n  *     To only change the button images, consider using\n  *     {@link OpenSeadragon.Options.navImages}\n  *\n  * @property {String} fullPageButton\n  *     Set the id of the custom 'Toggle full page' button to use.\n  *     This is useful to have a custom button anywhere in the web page.<br>\n  *     To only change the button images, consider using\n  *     {@link OpenSeadragon.Options.navImages}\n  *\n  * @property {String} rotateLeftButton\n  *     Set the id of the custom 'Rotate left' button to use.\n  *     This is useful to have a custom button anywhere in the web page.<br>\n  *     To only change the button images, consider using\n  *     {@link OpenSeadragon.Options.navImages}\n  *\n  * @property {String} rotateRightButton\n  *     Set the id of the custom 'Rotate right' button to use.\n  *     This is useful to have a custom button anywhere in the web page.<br>\n  *     To only change the button images, consider using\n  *     {@link OpenSeadragon.Options.navImages}\n  *\n  * @property {String} previousButton\n  *     Set the id of the custom 'Previous page' button to use.\n  *     This is useful to have a custom button anywhere in the web page.<br>\n  *     To only change the button images, consider using\n  *     {@link OpenSeadragon.Options.navImages}\n  *\n  * @property {String} nextButton\n  *     Set the id of the custom 'Next page' button to use.\n  *     This is useful to have a custom button anywhere in the web page.<br>\n  *     To only change the button images, consider using\n  *     {@link OpenSeadragon.Options.navImages}\n  *\n  * @property {Boolean} [sequenceMode=false]\n  *     Set to true to have the viewer treat your tilesources as a sequence of images to\n  *     be opened one at a time rather than all at once.\n  *\n  * @property {Number} [initialPage=0]\n  *     If sequenceMode is true, display this page initially.\n  *\n  * @property {Boolean} [preserveViewport=false]\n  *     If sequenceMode is true, then normally navigating through each image resets the\n  *     viewport to 'home' position.  If preserveViewport is set to true, then the viewport\n  *     position is preserved when navigating between images in the sequence.\n  *\n  * @property {Boolean} [preserveOverlays=false]\n  *     If sequenceMode is true, then normally navigating through each image\n  *     resets the overlays.\n  *     If preserveOverlays is set to true, then the overlays added with {@link OpenSeadragon.Viewer#addOverlay}\n  *     are preserved when navigating between images in the sequence.\n  *     Note: setting preserveOverlays overrides any overlays specified in the global\n  *     \"overlays\" option for the Viewer. It's also not compatible with specifying\n  *     per-tileSource overlays via the options, as those overlays will persist\n  *     even after the tileSource is closed.\n  *\n  * @property {Boolean} [showReferenceStrip=false]\n  *     If sequenceMode is true, then display a scrolling strip of image thumbnails for\n  *     navigating through the images.\n  *\n  * @property {String} [referenceStripScroll='horizontal']\n  *\n  * @property {Element} [referenceStripElement=null]\n  *\n  * @property {Number} [referenceStripHeight=null]\n  *\n  * @property {Number} [referenceStripWidth=null]\n  *\n  * @property {String} [referenceStripPosition='BOTTOM_LEFT']\n  *\n  * @property {Number} [referenceStripSizeRatio=0.2]\n  *\n  * @property {Boolean} [collectionMode=false]\n  *     Set to true to have the viewer arrange your TiledImages in a grid or line.\n  *\n  * @property {Number} [collectionRows=3]\n  *     If collectionMode is true, specifies how many rows the grid should have. Use 1 to make a line.\n  *     If collectionLayout is 'vertical', specifies how many columns instead.\n  *\n  * @property {Number} [collectionColumns=0]\n  *     If collectionMode is true, specifies how many columns the grid should have. Use 1 to make a line.\n  *     If collectionLayout is 'vertical', specifies how many rows instead. Ignored if collectionRows is not set to a falsy value.\n  *\n  * @property {String} [collectionLayout='horizontal']\n  *     If collectionMode is true, specifies whether to arrange vertically or horizontally.\n  *\n  * @property {Number} [collectionTileSize=800]\n  *     If collectionMode is true, specifies the size, in viewport coordinates, for each TiledImage to fit into.\n  *     The TiledImage will be centered within a square of the specified size.\n  *\n  * @property {Number} [collectionTileMargin=80]\n  *     If collectionMode is true, specifies the margin, in viewport coordinates, between each TiledImage.\n  *\n  * @property {String|Boolean} [crossOriginPolicy=false]\n  *     Valid values are 'Anonymous', 'use-credentials', and false. If false, canvas requests will\n  *     not use CORS, and the canvas will be tainted.\n  *\n  * @property {Boolean} [ajaxWithCredentials=false]\n  *     Whether to set the withCredentials XHR flag for AJAX requests.\n  *     Note that this can be overridden at the {@link OpenSeadragon.TileSource} level.\n  *\n  * @property {Boolean} [loadTilesWithAjax=false]\n  *     Whether to load tile data using AJAX requests.\n  *     Note that this can be overridden at the {@link OpenSeadragon.TileSource} level.\n  *\n  * @property {Object} [ajaxHeaders={}]\n  *     A set of headers to include when making AJAX requests for tile sources or tiles.\n  *\n  */ /**\n  * Settings for gestures generated by a pointer device.\n  *\n  * @typedef {Object} GestureSettings\n  * @memberof OpenSeadragon\n  *\n  * @property {Boolean} scrollToZoom\n  *     Set to false to disable zooming on scroll gestures.\n  *\n  * @property {Boolean} clickToZoom\n  *     Set to false to disable zooming on click gestures.\n  *\n  * @property {Boolean} dblClickToZoom\n  *     Set to false to disable zooming on double-click gestures. Note: If set to true\n  *     then clickToZoom should be set to false to prevent multiple zooms.\n  *\n  * @property {Boolean} pinchToZoom\n  *     Set to false to disable zooming on pinch gestures.\n  *\n  * @property {Boolean} flickEnabled\n  *     Set to false to disable the kinetic panning effect (flick) at the end of a drag gesture.\n  *\n  * @property {Number} flickMinSpeed\n  *     If flickEnabled is true, the minimum speed (in pixels-per-second) required to cause the kinetic panning effect (flick) at the end of a drag gesture.\n  *\n  * @property {Number} flickMomentum\n  *     If flickEnabled is true, a constant multiplied by the velocity to determine the distance of the kinetic panning effect (flick) at the end of a drag gesture.\n  *     A larger value will make the flick feel \"lighter\", while a smaller value will make the flick feel \"heavier\".\n  *     Note: springStiffness and animationTime also affect the \"spring\" used to stop the flick animation.\n  *\n  */ /**\n  * The names for the image resources used for the image navigation buttons.\n  *\n  * @typedef {Object} NavImages\n  * @memberof OpenSeadragon\n  *\n  * @property {Object} zoomIn - Images for the zoom-in button.\n  * @property {String} zoomIn.REST\n  * @property {String} zoomIn.GROUP\n  * @property {String} zoomIn.HOVER\n  * @property {String} zoomIn.DOWN\n  *\n  * @property {Object} zoomOut - Images for the zoom-out button.\n  * @property {String} zoomOut.REST\n  * @property {String} zoomOut.GROUP\n  * @property {String} zoomOut.HOVER\n  * @property {String} zoomOut.DOWN\n  *\n  * @property {Object} home - Images for the home button.\n  * @property {String} home.REST\n  * @property {String} home.GROUP\n  * @property {String} home.HOVER\n  * @property {String} home.DOWN\n  *\n  * @property {Object} fullpage - Images for the full-page button.\n  * @property {String} fullpage.REST\n  * @property {String} fullpage.GROUP\n  * @property {String} fullpage.HOVER\n  * @property {String} fullpage.DOWN\n  *\n  * @property {Object} rotateleft - Images for the rotate left button.\n  * @property {String} rotateleft.REST\n  * @property {String} rotateleft.GROUP\n  * @property {String} rotateleft.HOVER\n  * @property {String} rotateleft.DOWN\n  *\n  * @property {Object} rotateright - Images for the rotate right button.\n  * @property {String} rotateright.REST\n  * @property {String} rotateright.GROUP\n  * @property {String} rotateright.HOVER\n  * @property {String} rotateright.DOWN\n  *\n  * @property {Object} flip - Images for the flip button.\n  * @property {String} flip.REST\n  * @property {String} flip.GROUP\n  * @property {String} flip.HOVER\n  * @property {String} flip.DOWN\n  *\n  * @property {Object} previous - Images for the previous button.\n  * @property {String} previous.REST\n  * @property {String} previous.GROUP\n  * @property {String} previous.HOVER\n  * @property {String} previous.DOWN\n  *\n  * @property {Object} next - Images for the next button.\n  * @property {String} next.REST\n  * @property {String} next.GROUP\n  * @property {String} next.HOVER\n  * @property {String} next.DOWN\n  *\n  */ /* eslint-disable no-redeclare */function OpenSeadragon(options){return new OpenSeadragon.Viewer(options);}(function($){/**\n     * The OpenSeadragon version.\n     *\n     * @member {Object} OpenSeadragon.version\n     * @property {String} versionStr - The version number as a string ('major.minor.revision').\n     * @property {Number} major - The major version number.\n     * @property {Number} minor - The minor version number.\n     * @property {Number} revision - The revision number.\n     * @since 1.0.0\n     */$.version={versionStr:'2.4.2',major:parseInt('2',10),minor:parseInt('4',10),revision:parseInt('2',10)};/**\n     * Taken from jquery 1.6.1\n     * [[Class]] -> type pairs\n     * @private\n     */var class2type={'[object Boolean]':'boolean','[object Number]':'number','[object String]':'string','[object Function]':'function','[object Array]':'array','[object Date]':'date','[object RegExp]':'regexp','[object Object]':'object'},// Save a reference to some core methods\ntoString=Object.prototype.toString,hasOwn=Object.prototype.hasOwnProperty;/**\n     * Taken from jQuery 1.6.1\n     * @function isFunction\n     * @memberof OpenSeadragon\n     * @see {@link http://www.jquery.com/ jQuery}\n     */$.isFunction=function(obj){return $.type(obj)===\"function\";};/**\n     * Taken from jQuery 1.6.1\n     * @function isArray\n     * @memberof OpenSeadragon\n     * @see {@link http://www.jquery.com/ jQuery}\n     */$.isArray=Array.isArray||function(obj){return $.type(obj)===\"array\";};/**\n     * A crude way of determining if an object is a window.\n     * Taken from jQuery 1.6.1\n     * @function isWindow\n     * @memberof OpenSeadragon\n     * @see {@link http://www.jquery.com/ jQuery}\n     */$.isWindow=function(obj){return obj&&typeof obj===\"object\"&&\"setInterval\"in obj;};/**\n     * Taken from jQuery 1.6.1\n     * @function type\n     * @memberof OpenSeadragon\n     * @see {@link http://www.jquery.com/ jQuery}\n     */$.type=function(obj){return obj===null||obj===undefined?String(obj):class2type[toString.call(obj)]||\"object\";};/**\n     * Taken from jQuery 1.6.1\n     * @function isPlainObject\n     * @memberof OpenSeadragon\n     * @see {@link http://www.jquery.com/ jQuery}\n     */$.isPlainObject=function(obj){// Must be an Object.\n// Because of IE, we also have to check the presence of the constructor property.\n// Make sure that DOM nodes and window objects don't pass through, as well\nif(!obj||OpenSeadragon.type(obj)!==\"object\"||obj.nodeType||$.isWindow(obj)){return false;}// Not own constructor property must be Object\nif(obj.constructor&&!hasOwn.call(obj,\"constructor\")&&!hasOwn.call(obj.constructor.prototype,\"isPrototypeOf\")){return false;}// Own properties are enumerated firstly, so to speed up,\n// if last one is own, then all properties are own.\nvar lastKey;for(var key in obj){lastKey=key;}return lastKey===undefined||hasOwn.call(obj,lastKey);};/**\n     * Taken from jQuery 1.6.1\n     * @function isEmptyObject\n     * @memberof OpenSeadragon\n     * @see {@link http://www.jquery.com/ jQuery}\n     */$.isEmptyObject=function(obj){for(var name in obj){return false;}return true;};/**\n     * Shim around Object.freeze. Does nothing if Object.freeze is not supported.\n     * @param {Object} obj The object to freeze.\n     * @return {Object} obj The frozen object.\n     */$.freezeObject=function(obj){if(Object.freeze){$.freezeObject=Object.freeze;}else{$.freezeObject=function(obj){return obj;};}return $.freezeObject(obj);};/**\n     * True if the browser supports the HTML5 canvas element\n     * @member {Boolean} supportsCanvas\n     * @memberof OpenSeadragon\n     */$.supportsCanvas=function(){var canvasElement=document.createElement('canvas');return!!($.isFunction(canvasElement.getContext)&&canvasElement.getContext('2d'));}();/**\n     * Test whether the submitted canvas is tainted or not.\n     * @argument {Canvas} canvas The canvas to test.\n     * @returns {Boolean} True if the canvas is tainted.\n     */$.isCanvasTainted=function(canvas){var isTainted=false;try{// We test if the canvas is tainted by retrieving data from it.\n// An exception will be raised if the canvas is tainted.\ncanvas.getContext('2d').getImageData(0,0,1,1);}catch(e){isTainted=true;}return isTainted;};/**\n     * A ratio comparing the device screen's pixel density to the canvas's backing store pixel density,\n     * clamped to a minimum of 1. Defaults to 1 if canvas isn't supported by the browser.\n     * @member {Number} pixelDensityRatio\n     * @memberof OpenSeadragon\n     */$.pixelDensityRatio=function(){if($.supportsCanvas){var context=document.createElement('canvas').getContext('2d');var devicePixelRatio=window.devicePixelRatio||1;var backingStoreRatio=context.webkitBackingStorePixelRatio||context.mozBackingStorePixelRatio||context.msBackingStorePixelRatio||context.oBackingStorePixelRatio||context.backingStorePixelRatio||1;return Math.max(devicePixelRatio,1)/backingStoreRatio;}else{return 1;}}();})(OpenSeadragon);/**\n *  This closure defines all static methods available to the OpenSeadragon\n *  namespace.  Many, if not most, are taked directly from jQuery for use\n *  to simplify and reduce common programming patterns.  More static methods\n *  from jQuery may eventually make their way into this though we are\n *  attempting to avoid an explicit dependency on jQuery only because\n *  OpenSeadragon is a broadly useful code base and would be made less broad\n *  by requiring jQuery fully.\n *\n *  Some static methods have also been refactored from the original OpenSeadragon\n *  project.\n */(function($){/**\n     * Taken from jQuery 1.6.1\n     * @function extend\n     * @memberof OpenSeadragon\n     * @see {@link http://www.jquery.com/ jQuery}\n     */$.extend=function(){var options,name,src,copy,copyIsArray,clone,target=arguments[0]||{},length=arguments.length,deep=false,i=1;// Handle a deep copy situation\nif(typeof target===\"boolean\"){deep=target;target=arguments[1]||{};// skip the boolean and the target\ni=2;}// Handle case when target is a string or something (possible in deep copy)\nif(typeof target!==\"object\"&&!OpenSeadragon.isFunction(target)){target={};}// extend jQuery itself if only one argument is passed\nif(length===i){target=this;--i;}for(;i<length;i++){// Only deal with non-null/undefined values\noptions=arguments[i];if(options!==null||options!==undefined){// Extend the base object\nfor(name in options){src=target[name];copy=options[name];// Prevent never-ending loop\nif(target===copy){continue;}// Recurse if we're merging plain objects or arrays\nif(deep&&copy&&(OpenSeadragon.isPlainObject(copy)||(copyIsArray=OpenSeadragon.isArray(copy)))){if(copyIsArray){copyIsArray=false;clone=src&&OpenSeadragon.isArray(src)?src:[];}else{clone=src&&OpenSeadragon.isPlainObject(src)?src:{};}// Never move original objects, clone them\ntarget[name]=OpenSeadragon.extend(deep,clone,copy);// Don't bring in undefined values\n}else if(copy!==undefined){target[name]=copy;}}}}// Return the modified object\nreturn target;};var isIOSDevice=function isIOSDevice(){if(typeof navigator!=='object'){return false;}var userAgent=navigator.userAgent;if(typeof userAgent!=='string'){return false;}return userAgent.indexOf('iPhone')!==-1||userAgent.indexOf('iPad')!==-1||userAgent.indexOf('iPod')!==-1;};$.extend($,/** @lends OpenSeadragon */{/**\n         * The default values for the optional settings documented at {@link OpenSeadragon.Options}.\n         * @static\n         * @type {Object}\n         */DEFAULT_SETTINGS:{//DATA SOURCE DETAILS\nxmlPath:null,tileSources:null,tileHost:null,initialPage:0,crossOriginPolicy:false,ajaxWithCredentials:false,loadTilesWithAjax:false,ajaxHeaders:{},//PAN AND ZOOM SETTINGS AND CONSTRAINTS\npanHorizontal:true,panVertical:true,constrainDuringPan:false,wrapHorizontal:false,wrapVertical:false,visibilityRatio:0.5,//-> how much of the viewer can be negative space\nminPixelRatio:0.5,//->closer to 0 draws tiles meant for a higher zoom at this zoom\ndefaultZoomLevel:0,minZoomLevel:null,maxZoomLevel:null,homeFillsViewer:false,//UI RESPONSIVENESS AND FEEL\nclickTimeThreshold:300,clickDistThreshold:5,dblClickTimeThreshold:300,dblClickDistThreshold:20,springStiffness:6.5,animationTime:1.2,gestureSettingsMouse:{scrollToZoom:true,clickToZoom:true,dblClickToZoom:false,pinchToZoom:false,zoomToRefPoint:true,flickEnabled:false,flickMinSpeed:120,flickMomentum:0.25,pinchRotate:false},gestureSettingsTouch:{scrollToZoom:false,clickToZoom:false,dblClickToZoom:true,pinchToZoom:true,zoomToRefPoint:true,flickEnabled:true,flickMinSpeed:120,flickMomentum:0.25,pinchRotate:false},gestureSettingsPen:{scrollToZoom:false,clickToZoom:true,dblClickToZoom:false,pinchToZoom:false,zoomToRefPoint:true,flickEnabled:false,flickMinSpeed:120,flickMomentum:0.25,pinchRotate:false},gestureSettingsUnknown:{scrollToZoom:false,clickToZoom:false,dblClickToZoom:true,pinchToZoom:true,zoomToRefPoint:true,flickEnabled:true,flickMinSpeed:120,flickMomentum:0.25,pinchRotate:false},zoomPerClick:2,zoomPerScroll:1.2,zoomPerSecond:1.0,blendTime:0,alwaysBlend:false,autoHideControls:true,immediateRender:false,minZoomImageRatio:0.9,//-> closer to 0 allows zoom out to infinity\nmaxZoomPixelRatio:1.1,//-> higher allows 'over zoom' into pixels\nsmoothTileEdgesMinZoom:1.1,//-> higher than maxZoomPixelRatio disables it\niOSDevice:isIOSDevice(),pixelsPerWheelLine:40,pixelsPerArrowPress:40,autoResize:true,preserveImageSizeOnResize:false,// requires autoResize=true\nminScrollDeltaTime:50,rotationIncrement:90,//DEFAULT CONTROL SETTINGS\nshowSequenceControl:true,//SEQUENCE\nsequenceControlAnchor:null,//SEQUENCE\npreserveViewport:false,//SEQUENCE\npreserveOverlays:false,//SEQUENCE\nnavPrevNextWrap:false,//SEQUENCE\nshowNavigationControl:true,//ZOOM/HOME/FULL/ROTATION\nnavigationControlAnchor:null,//ZOOM/HOME/FULL/ROTATION\nshowZoomControl:true,//ZOOM\nshowHomeControl:true,//HOME\nshowFullPageControl:true,//FULL\nshowRotationControl:false,//ROTATION\nshowFlipControl:false,//FLIP\ncontrolsFadeDelay:2000,//ZOOM/HOME/FULL/SEQUENCE\ncontrolsFadeLength:1500,//ZOOM/HOME/FULL/SEQUENCE\nmouseNavEnabled:true,//GENERAL MOUSE INTERACTIVITY\n//VIEWPORT NAVIGATOR SETTINGS\nshowNavigator:false,navigatorId:null,navigatorPosition:null,navigatorSizeRatio:0.2,navigatorMaintainSizeRatio:false,navigatorTop:null,navigatorLeft:null,navigatorHeight:null,navigatorWidth:null,navigatorAutoResize:true,navigatorAutoFade:true,navigatorRotate:true,navigatorBackground:'#000',navigatorOpacity:0.8,navigatorBorderColor:'#555',navigatorDisplayRegionColor:'#900',// INITIAL ROTATION\ndegrees:0,// INITIAL FLIP STATE\nflipped:false,// APPEARANCE\nopacity:1,preload:false,compositeOperation:null,imageSmoothingEnabled:true,placeholderFillStyle:null,//REFERENCE STRIP SETTINGS\nshowReferenceStrip:false,referenceStripScroll:'horizontal',referenceStripElement:null,referenceStripHeight:null,referenceStripWidth:null,referenceStripPosition:'BOTTOM_LEFT',referenceStripSizeRatio:0.2,//COLLECTION VISUALIZATION SETTINGS\ncollectionRows:3,//or columns depending on layout\ncollectionColumns:0,//columns in horizontal layout, rows in vertical layout\ncollectionLayout:'horizontal',//vertical\ncollectionMode:false,collectionTileSize:800,collectionTileMargin:80,//PERFORMANCE SETTINGS\nimageLoaderLimit:0,maxImageCacheCount:200,timeout:30000,useCanvas:true,// Use canvas element for drawing if available\n//INTERFACE RESOURCE SETTINGS\nprefixUrl:\"/images/\",navImages:{zoomIn:{REST:'zoomin_rest.png',GROUP:'zoomin_grouphover.png',HOVER:'zoomin_hover.png',DOWN:'zoomin_pressed.png'},zoomOut:{REST:'zoomout_rest.png',GROUP:'zoomout_grouphover.png',HOVER:'zoomout_hover.png',DOWN:'zoomout_pressed.png'},home:{REST:'home_rest.png',GROUP:'home_grouphover.png',HOVER:'home_hover.png',DOWN:'home_pressed.png'},fullpage:{REST:'fullpage_rest.png',GROUP:'fullpage_grouphover.png',HOVER:'fullpage_hover.png',DOWN:'fullpage_pressed.png'},rotateleft:{REST:'rotateleft_rest.png',GROUP:'rotateleft_grouphover.png',HOVER:'rotateleft_hover.png',DOWN:'rotateleft_pressed.png'},rotateright:{REST:'rotateright_rest.png',GROUP:'rotateright_grouphover.png',HOVER:'rotateright_hover.png',DOWN:'rotateright_pressed.png'},flip:{// Flip icon designed by Yaroslav Samoylov from the Noun Project and modified by Nelson Campos ncampos@criteriamarathon.com, https://thenounproject.com/term/flip/136289/\nREST:'flip_rest.png',GROUP:'flip_grouphover.png',HOVER:'flip_hover.png',DOWN:'flip_pressed.png'},previous:{REST:'previous_rest.png',GROUP:'previous_grouphover.png',HOVER:'previous_hover.png',DOWN:'previous_pressed.png'},next:{REST:'next_rest.png',GROUP:'next_grouphover.png',HOVER:'next_hover.png',DOWN:'next_pressed.png'}},//DEVELOPER SETTINGS\ndebugMode:false,debugGridColor:['#437AB2','#1B9E77','#D95F02','#7570B3','#E7298A','#66A61E','#E6AB02','#A6761D','#666666']},/**\n         * TODO: get rid of this.  I can't see how it's required at all.  Looks\n         *       like an early legacy code artifact.\n         * @static\n         * @ignore\n         */SIGNAL:\"----seadragon----\",/**\n         * Returns a function which invokes the method as if it were a method belonging to the object.\n         * @function\n         * @param {Object} object\n         * @param {Function} method\n         * @returns {Function}\n         */delegate:function delegate(object,method){return function(){var args=arguments;if(args===undefined){args=[];}return method.apply(object,args);};},/**\n         * An enumeration of Browser vendors.\n         * @static\n         * @type {Object}\n         * @property {Number} UNKNOWN\n         * @property {Number} IE\n         * @property {Number} FIREFOX\n         * @property {Number} SAFARI\n         * @property {Number} CHROME\n         * @property {Number} OPERA\n         */BROWSERS:{UNKNOWN:0,IE:1,FIREFOX:2,SAFARI:3,CHROME:4,OPERA:5},/**\n         * Returns a DOM Element for the given id or element.\n         * @function\n         * @param {String|Element} element Accepts an id or element.\n         * @returns {Element} The element with the given id, null, or the element itself.\n         */getElement:function getElement(element){if(typeof element==\"string\"){element=document.getElementById(element);}return element;},/**\n         * Determines the position of the upper-left corner of the element.\n         * @function\n         * @param {Element|String} element - the element we want the position for.\n         * @returns {OpenSeadragon.Point} - the position of the upper left corner of the element.\n         */getElementPosition:function getElementPosition(element){var result=new $.Point(),isFixed,offsetParent;element=$.getElement(element);isFixed=$.getElementStyle(element).position==\"fixed\";offsetParent=getOffsetParent(element,isFixed);while(offsetParent){result.x+=element.offsetLeft;result.y+=element.offsetTop;if(isFixed){result=result.plus($.getPageScroll());}element=offsetParent;isFixed=$.getElementStyle(element).position==\"fixed\";offsetParent=getOffsetParent(element,isFixed);}return result;},/**\n         * Determines the position of the upper-left corner of the element adjusted for current page and/or element scroll.\n         * @function\n         * @param {Element|String} element - the element we want the position for.\n         * @returns {OpenSeadragon.Point} - the position of the upper left corner of the element adjusted for current page and/or element scroll.\n         */getElementOffset:function getElementOffset(element){element=$.getElement(element);var doc=element&&element.ownerDocument,docElement,win,boundingRect={top:0,left:0};if(!doc){return new $.Point();}docElement=doc.documentElement;if(typeof element.getBoundingClientRect!==typeof undefined){boundingRect=element.getBoundingClientRect();}win=doc==doc.window?doc:doc.nodeType===9?doc.defaultView||doc.parentWindow:false;return new $.Point(boundingRect.left+(win.pageXOffset||docElement.scrollLeft)-(docElement.clientLeft||0),boundingRect.top+(win.pageYOffset||docElement.scrollTop)-(docElement.clientTop||0));},/**\n         * Determines the height and width of the given element.\n         * @function\n         * @param {Element|String} element\n         * @returns {OpenSeadragon.Point}\n         */getElementSize:function getElementSize(element){element=$.getElement(element);return new $.Point(element.clientWidth,element.clientHeight);},/**\n         * Returns the CSSStyle object for the given element.\n         * @function\n         * @param {Element|String} element\n         * @returns {CSSStyle}\n         */getElementStyle:document.documentElement.currentStyle?function(element){element=$.getElement(element);return element.currentStyle;}:function(element){element=$.getElement(element);return window.getComputedStyle(element,\"\");},/**\n         * Returns the property with the correct vendor prefix appended.\n         * @param {String} property the property name\n         * @returns {String} the property with the correct prefix or null if not\n         * supported.\n         */getCssPropertyWithVendorPrefix:function getCssPropertyWithVendorPrefix(property){var memo={};$.getCssPropertyWithVendorPrefix=function(property){if(memo[property]!==undefined){return memo[property];}var style=document.createElement('div').style;var result=null;if(style[property]!==undefined){result=property;}else{var prefixes=['Webkit','Moz','MS','O','webkit','moz','ms','o'];var suffix=$.capitalizeFirstLetter(property);for(var i=0;i<prefixes.length;i++){var prop=prefixes[i]+suffix;if(style[prop]!==undefined){result=prop;break;}}}memo[property]=result;return result;};return $.getCssPropertyWithVendorPrefix(property);},/**\n         * Capitalizes the first letter of a string\n         * @param {String} string\n         * @returns {String} The string with the first letter capitalized\n         */capitalizeFirstLetter:function capitalizeFirstLetter(string){return string.charAt(0).toUpperCase()+string.slice(1);},/**\n         * Compute the modulo of a number but makes sure to always return\n         * a positive value.\n         * @param {Number} number the number to computes the modulo of\n         * @param {Number} modulo the modulo\n         * @returns {Number} the result of the modulo of number\n         */positiveModulo:function positiveModulo(number,modulo){var result=number%modulo;if(result<0){result+=modulo;}return result;},/**\n         * Determines if a point is within the bounding rectangle of the given element (hit-test).\n         * @function\n         * @param {Element|String} element\n         * @param {OpenSeadragon.Point} point\n         * @returns {Boolean}\n         */pointInElement:function pointInElement(element,point){element=$.getElement(element);var offset=$.getElementOffset(element),size=$.getElementSize(element);return point.x>=offset.x&&point.x<offset.x+size.x&&point.y<offset.y+size.y&&point.y>=offset.y;},/**\n         * Gets the latest event, really only useful internally since its\n         * specific to IE behavior.\n         * @function\n         * @param {Event} [event]\n         * @returns {Event}\n         * @deprecated For internal use only\n         * @private\n         */getEvent:function getEvent(event){if(event){$.getEvent=function(event){return event;};}else{$.getEvent=function(){return window.event;};}return $.getEvent(event);},/**\n         * Gets the position of the mouse on the screen for a given event.\n         * @function\n         * @param {Event} [event]\n         * @returns {OpenSeadragon.Point}\n         */getMousePosition:function getMousePosition(event){if(typeof event.pageX==\"number\"){$.getMousePosition=function(event){var result=new $.Point();event=$.getEvent(event);result.x=event.pageX;result.y=event.pageY;return result;};}else if(typeof event.clientX==\"number\"){$.getMousePosition=function(event){var result=new $.Point();event=$.getEvent(event);result.x=event.clientX+document.body.scrollLeft+document.documentElement.scrollLeft;result.y=event.clientY+document.body.scrollTop+document.documentElement.scrollTop;return result;};}else{throw new Error(\"Unknown event mouse position, no known technique.\");}return $.getMousePosition(event);},/**\n         * Determines the page's current scroll position.\n         * @function\n         * @returns {OpenSeadragon.Point}\n         */getPageScroll:function getPageScroll(){var docElement=document.documentElement||{},body=document.body||{};if(typeof window.pageXOffset==\"number\"){$.getPageScroll=function(){return new $.Point(window.pageXOffset,window.pageYOffset);};}else if(body.scrollLeft||body.scrollTop){$.getPageScroll=function(){return new $.Point(document.body.scrollLeft,document.body.scrollTop);};}else if(docElement.scrollLeft||docElement.scrollTop){$.getPageScroll=function(){return new $.Point(document.documentElement.scrollLeft,document.documentElement.scrollTop);};}else{// We can't reassign the function yet, as there was no scroll.\nreturn new $.Point(0,0);}return $.getPageScroll();},/**\n         * Set the page scroll position.\n         * @function\n         * @returns {OpenSeadragon.Point}\n         */setPageScroll:function setPageScroll(scroll){if(typeof window.scrollTo!==\"undefined\"){$.setPageScroll=function(scroll){window.scrollTo(scroll.x,scroll.y);};}else{var originalScroll=$.getPageScroll();if(originalScroll.x===scroll.x&&originalScroll.y===scroll.y){// We are already correctly positioned and there\n// is no way to detect the correct method.\nreturn;}document.body.scrollLeft=scroll.x;document.body.scrollTop=scroll.y;var currentScroll=$.getPageScroll();if(currentScroll.x!==originalScroll.x&&currentScroll.y!==originalScroll.y){$.setPageScroll=function(scroll){document.body.scrollLeft=scroll.x;document.body.scrollTop=scroll.y;};return;}document.documentElement.scrollLeft=scroll.x;document.documentElement.scrollTop=scroll.y;currentScroll=$.getPageScroll();if(currentScroll.x!==originalScroll.x&&currentScroll.y!==originalScroll.y){$.setPageScroll=function(scroll){document.documentElement.scrollLeft=scroll.x;document.documentElement.scrollTop=scroll.y;};return;}// We can't find anything working, so we do nothing.\n$.setPageScroll=function(scroll){};}return $.setPageScroll(scroll);},/**\n         * Determines the size of the browsers window.\n         * @function\n         * @returns {OpenSeadragon.Point}\n         */getWindowSize:function getWindowSize(){var docElement=document.documentElement||{},body=document.body||{};if(typeof window.innerWidth=='number'){$.getWindowSize=function(){return new $.Point(window.innerWidth,window.innerHeight);};}else if(docElement.clientWidth||docElement.clientHeight){$.getWindowSize=function(){return new $.Point(document.documentElement.clientWidth,document.documentElement.clientHeight);};}else if(body.clientWidth||body.clientHeight){$.getWindowSize=function(){return new $.Point(document.body.clientWidth,document.body.clientHeight);};}else{throw new Error(\"Unknown window size, no known technique.\");}return $.getWindowSize();},/**\n         * Wraps the given element in a nest of divs so that the element can\n         * be easily centered using CSS tables\n         * @function\n         * @param {Element|String} element\n         * @returns {Element} outermost wrapper element\n         */makeCenteredNode:function makeCenteredNode(element){// Convert a possible ID to an actual HTMLElement\nelement=$.getElement(element);/*\n                CSS tables require you to have a display:table/row/cell hierarchy so we need to create\n                three nested wrapper divs:\n             */var wrappers=[$.makeNeutralElement('div'),$.makeNeutralElement('div'),$.makeNeutralElement('div')];// It feels like we should be able to pass style dicts to makeNeutralElement:\n$.extend(wrappers[0].style,{display:\"table\",height:\"100%\",width:\"100%\"});$.extend(wrappers[1].style,{display:\"table-row\"});$.extend(wrappers[2].style,{display:\"table-cell\",verticalAlign:\"middle\",textAlign:\"center\"});wrappers[0].appendChild(wrappers[1]);wrappers[1].appendChild(wrappers[2]);wrappers[2].appendChild(element);return wrappers[0];},/**\n         * Creates an easily positionable element of the given type that therefor\n         * serves as an excellent container element.\n         * @function\n         * @param {String} tagName\n         * @returns {Element}\n         */makeNeutralElement:function makeNeutralElement(tagName){var element=document.createElement(tagName),style=element.style;style.background=\"transparent none\";style.border=\"none\";style.margin=\"0px\";style.padding=\"0px\";style.position=\"static\";return element;},/**\n         * Returns the current milliseconds, using Date.now() if available\n         * @function\n         */now:function now(){if(Date.now){$.now=Date.now;}else{$.now=function(){return new Date().getTime();};}return $.now();},/**\n         * Ensures an image is loaded correctly to support alpha transparency.\n         * Generally only IE has issues doing this correctly for formats like\n         * png.\n         * @function\n         * @param {String} src\n         * @returns {Element}\n         */makeTransparentImage:function makeTransparentImage(src){$.makeTransparentImage=function(src){var img=$.makeNeutralElement(\"img\");img.src=src;return img;};if($.Browser.vendor==$.BROWSERS.IE&&$.Browser.version<7){$.makeTransparentImage=function(src){var img=$.makeNeutralElement(\"img\"),element=null;element=$.makeNeutralElement(\"span\");element.style.display=\"inline-block\";img.onload=function(){element.style.width=element.style.width||img.width+\"px\";element.style.height=element.style.height||img.height+\"px\";img.onload=null;img=null;// to prevent memory leaks in IE\n};img.src=src;element.style.filter=\"progid:DXImageTransform.Microsoft.AlphaImageLoader(src='\"+src+\"', sizingMethod='scale')\";return element;};}return $.makeTransparentImage(src);},/**\n         * Sets the opacity of the specified element.\n         * @function\n         * @param {Element|String} element\n         * @param {Number} opacity\n         * @param {Boolean} [usesAlpha]\n         */setElementOpacity:function setElementOpacity(element,opacity,usesAlpha){var ieOpacity,ieFilter;element=$.getElement(element);if(usesAlpha&&!$.Browser.alpha){opacity=Math.round(opacity);}if($.Browser.opacity){element.style.opacity=opacity<1?opacity:\"\";}else{if(opacity<1){ieOpacity=Math.round(100*opacity);ieFilter=\"alpha(opacity=\"+ieOpacity+\")\";element.style.filter=ieFilter;}else{element.style.filter=\"\";}}},/**\n         * Sets the specified element's touch-action style attribute to 'none'.\n         * @function\n         * @param {Element|String} element\n         */setElementTouchActionNone:function setElementTouchActionNone(element){element=$.getElement(element);if(typeof element.style.touchAction!=='undefined'){element.style.touchAction='none';}else if(typeof element.style.msTouchAction!=='undefined'){element.style.msTouchAction='none';}},/**\n         * Add the specified CSS class to the element if not present.\n         * @function\n         * @param {Element|String} element\n         * @param {String} className\n         */addClass:function addClass(element,className){element=$.getElement(element);if(!element.className){element.className=className;}else if((' '+element.className+' ').indexOf(' '+className+' ')===-1){element.className+=' '+className;}},/**\n         * Find the first index at which an element is found in an array or -1\n         * if not present.\n         *\n         * Code taken and adapted from\n         * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf#Compatibility\n         *\n         * @function\n         * @param {Array} array The array from which to find the element\n         * @param {Object} searchElement The element to find\n         * @param {Number} [fromIndex=0] Index to start research.\n         * @returns {Number} The index of the element in the array.\n         */indexOf:function indexOf(array,searchElement,fromIndex){if(Array.prototype.indexOf){this.indexOf=function(array,searchElement,fromIndex){return array.indexOf(searchElement,fromIndex);};}else{this.indexOf=function(array,searchElement,fromIndex){var i,pivot=fromIndex?fromIndex:0,length;if(!array){throw new TypeError();}length=array.length;if(length===0||pivot>=length){return-1;}if(pivot<0){pivot=length-Math.abs(pivot);}for(i=pivot;i<length;i++){if(array[i]===searchElement){return i;}}return-1;};}return this.indexOf(array,searchElement,fromIndex);},/**\n         * Remove the specified CSS class from the element.\n         * @function\n         * @param {Element|String} element\n         * @param {String} className\n         */removeClass:function removeClass(element,className){var oldClasses,newClasses=[],i;element=$.getElement(element);oldClasses=element.className.split(/\\s+/);for(i=0;i<oldClasses.length;i++){if(oldClasses[i]&&oldClasses[i]!==className){newClasses.push(oldClasses[i]);}}element.className=newClasses.join(' ');},/**\n         * Adds an event listener for the given element, eventName and handler.\n         * @function\n         * @param {Element|String} element\n         * @param {String} eventName\n         * @param {Function} handler\n         * @param {Boolean} [useCapture]\n         */addEvent:function(){if(window.addEventListener){return function(element,eventName,handler,useCapture){element=$.getElement(element);element.addEventListener(eventName,handler,useCapture);};}else if(window.attachEvent){return function(element,eventName,handler,useCapture){element=$.getElement(element);element.attachEvent('on'+eventName,handler);};}else{throw new Error(\"No known event model.\");}}(),/**\n         * Remove a given event listener for the given element, event type and\n         * handler.\n         * @function\n         * @param {Element|String} element\n         * @param {String} eventName\n         * @param {Function} handler\n         * @param {Boolean} [useCapture]\n         */removeEvent:function(){if(window.removeEventListener){return function(element,eventName,handler,useCapture){element=$.getElement(element);element.removeEventListener(eventName,handler,useCapture);};}else if(window.detachEvent){return function(element,eventName,handler,useCapture){element=$.getElement(element);element.detachEvent('on'+eventName,handler);};}else{throw new Error(\"No known event model.\");}}(),/**\n         * Cancels the default browser behavior had the event propagated all\n         * the way up the DOM to the window object.\n         * @function\n         * @param {Event} [event]\n         */cancelEvent:function cancelEvent(event){event=$.getEvent(event);if(event.preventDefault){$.cancelEvent=function(event){// W3C for preventing default\nevent.preventDefault();};}else{$.cancelEvent=function(event){event=$.getEvent(event);// legacy for preventing default\nevent.cancel=true;// IE for preventing default\nevent.returnValue=false;};}$.cancelEvent(event);},/**\n         * Stops the propagation of the event up the DOM.\n         * @function\n         * @param {Event} [event]\n         */stopEvent:function stopEvent(event){event=$.getEvent(event);if(event.stopPropagation){// W3C for stopping propagation\n$.stopEvent=function(event){event.stopPropagation();};}else{// IE for stopping propagation\n$.stopEvent=function(event){event=$.getEvent(event);event.cancelBubble=true;};}$.stopEvent(event);},/**\n         * Similar to OpenSeadragon.delegate, but it does not immediately call\n         * the method on the object, returning a function which can be called\n         * repeatedly to delegate the method. It also allows additional arguments\n         * to be passed during construction which will be added during each\n         * invocation, and each invocation can add additional arguments as well.\n         *\n         * @function\n         * @param {Object} object\n         * @param {Function} method\n         * @param [args] any additional arguments are passed as arguments to the\n         *  created callback\n         * @returns {Function}\n         */createCallback:function createCallback(object,method){//TODO: This pattern is painful to use and debug.  It's much cleaner\n//      to use pinning plus anonymous functions.  Get rid of this\n//      pattern!\nvar initialArgs=[],i;for(i=2;i<arguments.length;i++){initialArgs.push(arguments[i]);}return function(){var args=initialArgs.concat([]),i;for(i=0;i<arguments.length;i++){args.push(arguments[i]);}return method.apply(object,args);};},/**\n         * Retrieves the value of a url parameter from the window.location string.\n         * @function\n         * @param {String} key\n         * @returns {String} The value of the url parameter or null if no param matches.\n         */getUrlParameter:function getUrlParameter(key){// eslint-disable-next-line no-use-before-define\nvar value=URLPARAMS[key];return value?value:null;},/**\n         * Retrieves the protocol used by the url. The url can either be absolute\n         * or relative.\n         * @function\n         * @private\n         * @param {String} url The url to retrieve the protocol from.\n         * @return {String} The protocol (http:, https:, file:, ftp: ...)\n         */getUrlProtocol:function getUrlProtocol(url){var match=url.match(/^([a-z]+:)\\/\\//i);if(match===null){// Relative URL, retrive the protocol from window.location\nreturn window.location.protocol;}return match[1].toLowerCase();},/**\n         * Create an XHR object\n         * @private\n         * @param {type} [local] If set to true, the XHR will be file: protocol\n         * compatible if possible (but may raise a warning in the browser).\n         * @returns {XMLHttpRequest}\n         */createAjaxRequest:function createAjaxRequest(local){// IE11 does not support window.ActiveXObject so we just try to\n// create one to see if it is supported.\n// See: http://msdn.microsoft.com/en-us/library/ie/dn423948%28v=vs.85%29.aspx\nvar supportActiveX;try{/* global ActiveXObject:true */supportActiveX=!!new ActiveXObject(\"Microsoft.XMLHTTP\");}catch(e){supportActiveX=false;}if(supportActiveX){if(window.XMLHttpRequest){$.createAjaxRequest=function(local){if(local){return new ActiveXObject(\"Microsoft.XMLHTTP\");}return new XMLHttpRequest();};}else{$.createAjaxRequest=function(){return new ActiveXObject(\"Microsoft.XMLHTTP\");};}}else if(window.XMLHttpRequest){$.createAjaxRequest=function(){return new XMLHttpRequest();};}else{throw new Error(\"Browser doesn't support XMLHttpRequest.\");}return $.createAjaxRequest(local);},/**\n         * Makes an AJAX request.\n         * @param {Object} options\n         * @param {String} options.url - the url to request\n         * @param {Function} options.success - a function to call on a successful response\n         * @param {Function} options.error - a function to call on when an error occurs\n         * @param {Object} options.headers - headers to add to the AJAX request\n         * @param {String} options.responseType - the response type of the the AJAX request\n         * @param {Boolean} [options.withCredentials=false] - whether to set the XHR's withCredentials\n         * @throws {Error}\n         * @returns {XMLHttpRequest}\n         */makeAjaxRequest:function makeAjaxRequest(url,onSuccess,onError){var withCredentials;var headers;var responseType;// Note that our preferred API is that you pass in a single object; the named\n// arguments are for legacy support.\nif($.isPlainObject(url)){onSuccess=url.success;onError=url.error;withCredentials=url.withCredentials;headers=url.headers;responseType=url.responseType||null;url=url.url;}var protocol=$.getUrlProtocol(url);var request=$.createAjaxRequest(protocol===\"file:\");if(!$.isFunction(onSuccess)){throw new Error(\"makeAjaxRequest requires a success callback\");}request.onreadystatechange=function(){// 4 = DONE (https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest#Properties)\nif(request.readyState==4){request.onreadystatechange=function(){};// With protocols other than http/https, a successful request status is in\n// the 200's on Firefox and 0 on other browsers\nif(request.status>=200&&request.status<300||request.status===0&&protocol!==\"http:\"&&protocol!==\"https:\"){onSuccess(request);}else{$.console.log(\"AJAX request returned %d: %s\",request.status,url);if($.isFunction(onError)){onError(request);}}}};try{request.open(\"GET\",url,true);if(responseType){request.responseType=responseType;}if(headers){for(var headerName in headers){if(Object.prototype.hasOwnProperty.call(headers,headerName)&&headers[headerName]){request.setRequestHeader(headerName,headers[headerName]);}}}if(withCredentials){request.withCredentials=true;}request.send(null);}catch(e){var msg=e.message;/*\n                    IE < 10 does not support CORS and an XHR request to a different origin will fail as soon\n                    as send() is called. This is particularly easy to miss during development and appear in\n                    production if you use a CDN or domain sharding and the security policy is likely to break\n                    exception handlers since any attempt to access a property of the request object will\n                    raise an access denied TypeError inside the catch block.\n\n                    To be friendlier, we'll check for this specific error and add a documentation pointer\n                    to point developers in the right direction. We test the exception number because IE's\n                    error messages are localized.\n                */var oldIE=$.Browser.vendor==$.BROWSERS.IE&&$.Browser.version<10;if(oldIE&&typeof e.number!=\"undefined\"&&e.number==-2147024891){msg+=\"\\nSee http://msdn.microsoft.com/en-us/library/ms537505(v=vs.85).aspx#xdomain\";}$.console.log(\"%s while making AJAX request: %s\",e.name,msg);request.onreadystatechange=function(){};if(window.XDomainRequest){// IE9 or IE8 might as well try to use XDomainRequest\nvar xdr=new window.XDomainRequest();if(xdr){xdr.onload=function(e){if($.isFunction(onSuccess)){onSuccess({// Faking an xhr object\nresponseText:xdr.responseText,status:200,// XDomainRequest doesn't support status codes, so we just fake one! :/\nstatusText:'OK'});}};xdr.onerror=function(e){if($.isFunction(onError)){onError({// Faking an xhr object\nresponseText:xdr.responseText,status:444,// 444 No Response\nstatusText:'An error happened. Due to an XDomainRequest deficiency we can not extract any information about this error. Upgrade your browser.'});}};try{xdr.open('GET',url);xdr.send();}catch(e2){if($.isFunction(onError)){onError(request,e);}}}}else{if($.isFunction(onError)){onError(request,e);}}}return request;},/**\n         * Taken from jQuery 1.6.1\n         * @function\n         * @param {Object} options\n         * @param {String} options.url\n         * @param {Function} options.callback\n         * @param {String} [options.param='callback'] The name of the url parameter\n         *      to request the jsonp provider with.\n         * @param {String} [options.callbackName=] The name of the callback to\n         *      request the jsonp provider with.\n         */jsonp:function jsonp(options){var script,url=options.url,head=document.head||document.getElementsByTagName(\"head\")[0]||document.documentElement,jsonpCallback=options.callbackName||'openseadragon'+$.now(),previous=window[jsonpCallback],replace=\"$1\"+jsonpCallback+\"$2\",callbackParam=options.param||'callback',callback=options.callback;url=url.replace(/(\\=)\\?(&|$)|\\?\\?/i,replace);// Add callback manually\nurl+=(/\\?/.test(url)?\"&\":\"?\")+callbackParam+\"=\"+jsonpCallback;// Install callback\nwindow[jsonpCallback]=function(response){if(!previous){try{delete window[jsonpCallback];}catch(e){//swallow\n}}else{window[jsonpCallback]=previous;}if(callback&&$.isFunction(callback)){callback(response);}};script=document.createElement(\"script\");//TODO: having an issue with async info requests\nif(undefined!==options.async||false!==options.async){script.async=\"async\";}if(options.scriptCharset){script.charset=options.scriptCharset;}script.src=url;// Attach handlers for all browsers\nscript.onload=script.onreadystatechange=function(_,isAbort){if(isAbort||!script.readyState||/loaded|complete/.test(script.readyState)){// Handle memory leak in IE\nscript.onload=script.onreadystatechange=null;// Remove the script\nif(head&&script.parentNode){head.removeChild(script);}// Dereference the script\nscript=undefined;}};// Use insertBefore instead of appendChild  to circumvent an IE6 bug.\n// This arises when a base node is used (#2709 and #4378).\nhead.insertBefore(script,head.firstChild);},/**\n         * Fully deprecated. Will throw an error.\n         * @function\n         * @deprecated use {@link OpenSeadragon.Viewer#open}\n         */createFromDZI:function createFromDZI(){throw\"OpenSeadragon.createFromDZI is deprecated, use Viewer.open.\";},/**\n         * Parses an XML string into a DOM Document.\n         * @function\n         * @param {String} string\n         * @returns {Document}\n         */parseXml:function parseXml(string){if(window.DOMParser){$.parseXml=function(string){var xmlDoc=null,parser;parser=new DOMParser();xmlDoc=parser.parseFromString(string,\"text/xml\");return xmlDoc;};}else if(window.ActiveXObject){$.parseXml=function(string){var xmlDoc=null;xmlDoc=new ActiveXObject(\"Microsoft.XMLDOM\");xmlDoc.async=false;xmlDoc.loadXML(string);return xmlDoc;};}else{throw new Error(\"Browser doesn't support XML DOM.\");}return $.parseXml(string);},/**\n         * Parses a JSON string into a Javascript object.\n         * @function\n         * @param {String} string\n         * @returns {Object}\n         */parseJSON:function parseJSON(string){if(window.JSON&&window.JSON.parse){$.parseJSON=window.JSON.parse;}else{// Should only be used by IE8 in non standards mode\n$.parseJSON=function(string){/*jshint evil:true*/ //eslint-disable-next-line no-eval\nreturn eval('('+string+')');};}return $.parseJSON(string);},/**\n         * Reports whether the image format is supported for tiling in this\n         * version.\n         * @function\n         * @param {String} [extension]\n         * @returns {Boolean}\n         */imageFormatSupported:function imageFormatSupported(extension){extension=extension?extension:\"\";// eslint-disable-next-line no-use-before-define\nreturn!!FILEFORMATS[extension.toLowerCase()];}});//TODO: $.console is often used inside a try/catch block which generally\n//      prevents allowings errors to occur with detection until a debugger\n//      is attached.  Although I've been guilty of the same anti-pattern\n//      I eventually was convinced that errors should naturally propagate in\n//      all but the most special cases.\n/**\n     * A convenient alias for console when available, and a simple null\n     * function when console is unavailable.\n     * @static\n     * @private\n     */var nullfunction=function nullfunction(msg){//document.location.hash = msg;\n};$.console=window.console||{log:nullfunction,debug:nullfunction,info:nullfunction,warn:nullfunction,error:nullfunction,assert:nullfunction};/**\n     * The current browser vendor, version, and related information regarding detected features.\n     * @member {Object} Browser\n     * @memberof OpenSeadragon\n     * @static\n     * @type {Object}\n     * @property {OpenSeadragon.BROWSERS} vendor - One of the {@link OpenSeadragon.BROWSERS} enumeration values.\n     * @property {Number} version\n     * @property {Boolean} alpha - Does the browser support image alpha transparency.\n     */$.Browser={vendor:$.BROWSERS.UNKNOWN,version:0,alpha:true};var FILEFORMATS={\"bmp\":false,\"jpeg\":true,\"jpg\":true,\"png\":true,\"tif\":false,\"wdp\":false},URLPARAMS={};(function(){//A small auto-executing routine to determine the browser vendor,\n//version and supporting feature sets.\nvar ver=navigator.appVersion,ua=navigator.userAgent,regex;//console.error( 'appName: ' + navigator.appName );\n//console.error( 'appVersion: ' + navigator.appVersion );\n//console.error( 'userAgent: ' + navigator.userAgent );\nswitch(navigator.appName){case\"Microsoft Internet Explorer\":if(!!window.attachEvent&&!!window.ActiveXObject){$.Browser.vendor=$.BROWSERS.IE;$.Browser.version=parseFloat(ua.substring(ua.indexOf(\"MSIE\")+5,ua.indexOf(\";\",ua.indexOf(\"MSIE\"))));}break;case\"Netscape\":if(window.addEventListener){if(ua.indexOf(\"Firefox\")>=0){$.Browser.vendor=$.BROWSERS.FIREFOX;$.Browser.version=parseFloat(ua.substring(ua.indexOf(\"Firefox\")+8));}else if(ua.indexOf(\"Safari\")>=0){$.Browser.vendor=ua.indexOf(\"Chrome\")>=0?$.BROWSERS.CHROME:$.BROWSERS.SAFARI;$.Browser.version=parseFloat(ua.substring(ua.substring(0,ua.indexOf(\"Safari\")).lastIndexOf(\"/\")+1,ua.indexOf(\"Safari\")));}else{regex=new RegExp(\"Trident/.*rv:([0-9]{1,}[.0-9]{0,})\");if(regex.exec(ua)!==null){$.Browser.vendor=$.BROWSERS.IE;$.Browser.version=parseFloat(RegExp.$1);}}}break;case\"Opera\":$.Browser.vendor=$.BROWSERS.OPERA;$.Browser.version=parseFloat(ver);break;}// ignore '?' portion of query string\nvar query=window.location.search.substring(1),parts=query.split('&'),part,sep,i;for(i=0;i<parts.length;i++){part=parts[i];sep=part.indexOf('=');if(sep>0){var key=part.substring(0,sep),value=part.substring(sep+1);try{URLPARAMS[key]=decodeURIComponent(value);}catch(e){$.console.error(\"Ignoring malformed URL parameter: %s=%s\",key,value);}}}//determine if this browser supports image alpha transparency\n$.Browser.alpha=!($.Browser.vendor==$.BROWSERS.IE&&$.Browser.version<9||$.Browser.vendor==$.BROWSERS.CHROME&&$.Browser.version<2);//determine if this browser supports element.style.opacity\n$.Browser.opacity=!($.Browser.vendor==$.BROWSERS.IE&&$.Browser.version<9);})();// Adding support for HTML5's requestAnimationFrame as suggested by acdha.\n// Implementation taken from matt synder's post here:\n// http://mattsnider.com/cross-browser-and-legacy-supported-requestframeanimation/\n(function(w){// most browsers have an implementation\nvar requestAnimationFrame=w.requestAnimationFrame||w.mozRequestAnimationFrame||w.webkitRequestAnimationFrame||w.msRequestAnimationFrame;var cancelAnimationFrame=w.cancelAnimationFrame||w.mozCancelAnimationFrame||w.webkitCancelAnimationFrame||w.msCancelAnimationFrame;// polyfill, when necessary\nif(requestAnimationFrame&&cancelAnimationFrame){// We can't assign these window methods directly to $ because they\n// expect their \"this\" to be \"window\", so we call them in wrappers.\n$.requestAnimationFrame=function(){return requestAnimationFrame.apply(w,arguments);};$.cancelAnimationFrame=function(){return cancelAnimationFrame.apply(w,arguments);};}else{var aAnimQueue=[],processing=[],iRequestId=0,iIntervalId;// create a mock requestAnimationFrame function\n$.requestAnimationFrame=function(callback){aAnimQueue.push([++iRequestId,callback]);if(!iIntervalId){iIntervalId=setInterval(function(){if(aAnimQueue.length){var time=$.now();// Process all of the currently outstanding frame\n// requests, but none that get added during the\n// processing.\n// Swap the arrays so we don't have to create a new\n// array every frame.\nvar temp=processing;processing=aAnimQueue;aAnimQueue=temp;while(processing.length){processing.shift()[1](time);}}else{// don't continue the interval, if unnecessary\nclearInterval(iIntervalId);iIntervalId=undefined;}},1000/50);// estimating support for 50 frames per second\n}return iRequestId;};// create a mock cancelAnimationFrame function\n$.cancelAnimationFrame=function(requestId){// find the request ID and remove it\nvar i,j;for(i=0,j=aAnimQueue.length;i<j;i+=1){if(aAnimQueue[i][0]===requestId){aAnimQueue.splice(i,1);return;}}// If it's not in the queue, it may be in the set we're currently\n// processing (if cancelAnimationFrame is called from within a\n// requestAnimationFrame callback).\nfor(i=0,j=processing.length;i<j;i+=1){if(processing[i][0]===requestId){processing.splice(i,1);return;}}};}})(window);/**\n     * @private\n     * @inner\n     * @function\n     * @param {Element} element\n     * @param {Boolean} [isFixed]\n     * @returns {Element}\n     */function getOffsetParent(element,isFixed){if(isFixed&&element!=document.body){return document.body;}else{return element.offsetParent;}}})(OpenSeadragon);// Universal Module Definition, supports CommonJS, AMD and simple script tag\n(function(root,factory){if(true){// expose as amd module\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));}else {}})(this,function(){return OpenSeadragon;});/*\n * OpenSeadragon - full-screen support functions\n *\n * Copyright (C) 2009 CodePlex Foundation\n * Copyright (C) 2010-2013 OpenSeadragon contributors\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * - Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * - Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * - Neither the name of CodePlex Foundation nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */(function($){/**\n     * Determine native full screen support we can get from the browser.\n     * @member fullScreenApi\n     * @memberof OpenSeadragon\n     * @type {object}\n     * @property {Boolean} supportsFullScreen Return true if full screen API is supported.\n     * @property {Function} isFullScreen Return true if currently in full screen mode.\n     * @property {Function} getFullScreenElement Return the element currently in full screen mode.\n     * @property {Function} requestFullScreen Make a request to go in full screen mode.\n     * @property {Function} exitFullScreen Make a request to exit full screen mode.\n     * @property {Function} cancelFullScreen Deprecated, use exitFullScreen instead.\n     * @property {String} fullScreenEventName Event fired when the full screen mode change.\n     * @property {String} fullScreenErrorEventName Event fired when a request to go\n     * in full screen mode failed.\n     */var fullScreenApi={supportsFullScreen:false,isFullScreen:function isFullScreen(){return false;},getFullScreenElement:function getFullScreenElement(){return null;},requestFullScreen:function requestFullScreen(){},exitFullScreen:function exitFullScreen(){},cancelFullScreen:function cancelFullScreen(){},fullScreenEventName:'',fullScreenErrorEventName:''};// check for native support\nif(document.exitFullscreen){// W3C standard\nfullScreenApi.supportsFullScreen=true;fullScreenApi.getFullScreenElement=function(){return document.fullscreenElement;};fullScreenApi.requestFullScreen=function(element){return element.requestFullscreen();};fullScreenApi.exitFullScreen=function(){document.exitFullscreen();};fullScreenApi.fullScreenEventName=\"fullscreenchange\";fullScreenApi.fullScreenErrorEventName=\"fullscreenerror\";}else if(document.msExitFullscreen){// IE 11\nfullScreenApi.supportsFullScreen=true;fullScreenApi.getFullScreenElement=function(){return document.msFullscreenElement;};fullScreenApi.requestFullScreen=function(element){return element.msRequestFullscreen();};fullScreenApi.exitFullScreen=function(){document.msExitFullscreen();};fullScreenApi.fullScreenEventName=\"MSFullscreenChange\";fullScreenApi.fullScreenErrorEventName=\"MSFullscreenError\";}else if(document.webkitExitFullscreen){// Recent webkit\nfullScreenApi.supportsFullScreen=true;fullScreenApi.getFullScreenElement=function(){return document.webkitFullscreenElement;};fullScreenApi.requestFullScreen=function(element){return element.webkitRequestFullscreen();};fullScreenApi.exitFullScreen=function(){document.webkitExitFullscreen();};fullScreenApi.fullScreenEventName=\"webkitfullscreenchange\";fullScreenApi.fullScreenErrorEventName=\"webkitfullscreenerror\";}else if(document.webkitCancelFullScreen){// Old webkit\nfullScreenApi.supportsFullScreen=true;fullScreenApi.getFullScreenElement=function(){return document.webkitCurrentFullScreenElement;};fullScreenApi.requestFullScreen=function(element){return element.webkitRequestFullScreen();};fullScreenApi.exitFullScreen=function(){document.webkitCancelFullScreen();};fullScreenApi.fullScreenEventName=\"webkitfullscreenchange\";fullScreenApi.fullScreenErrorEventName=\"webkitfullscreenerror\";}else if(document.mozCancelFullScreen){// Firefox\nfullScreenApi.supportsFullScreen=true;fullScreenApi.getFullScreenElement=function(){return document.mozFullScreenElement;};fullScreenApi.requestFullScreen=function(element){return element.mozRequestFullScreen();};fullScreenApi.exitFullScreen=function(){document.mozCancelFullScreen();};fullScreenApi.fullScreenEventName=\"mozfullscreenchange\";fullScreenApi.fullScreenErrorEventName=\"mozfullscreenerror\";}fullScreenApi.isFullScreen=function(){return fullScreenApi.getFullScreenElement()!==null;};fullScreenApi.cancelFullScreen=function(){$.console.error(\"cancelFullScreen is deprecated. Use exitFullScreen instead.\");fullScreenApi.exitFullScreen();};// export api\n$.extend($,fullScreenApi);})(OpenSeadragon);/*\n * OpenSeadragon - EventSource\n *\n * Copyright (C) 2009 CodePlex Foundation\n * Copyright (C) 2010-2013 OpenSeadragon contributors\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * - Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * - Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * - Neither the name of CodePlex Foundation nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */(function($){/**\n * Event handler method signature used by all OpenSeadragon events.\n *\n * @callback EventHandler\n * @memberof OpenSeadragon\n * @param {Object} event - See individual events for event-specific properties.\n */ /**\n * @class EventSource\n * @classdesc For use by classes which want to support custom, non-browser events.\n *\n * @memberof OpenSeadragon\n */$.EventSource=function(){this.events={};};/** @lends OpenSeadragon.EventSource.prototype */$.EventSource.prototype={/**\n     * Add an event handler to be triggered only once (or a given number of times)\n     * for a given event.\n     * @function\n     * @param {String} eventName - Name of event to register.\n     * @param {OpenSeadragon.EventHandler} handler - Function to call when event\n     * is triggered.\n     * @param {Object} [userData=null] - Arbitrary object to be passed unchanged\n     * to the handler.\n     * @param {Number} [times=1] - The number of times to handle the event\n     * before removing it.\n     */addOnceHandler:function addOnceHandler(eventName,handler,userData,times){var self=this;times=times||1;var count=0;var onceHandler=function onceHandler(event){count++;if(count===times){self.removeHandler(eventName,onceHandler);}handler(event);};this.addHandler(eventName,onceHandler,userData);},/**\n     * Add an event handler for a given event.\n     * @function\n     * @param {String} eventName - Name of event to register.\n     * @param {OpenSeadragon.EventHandler} handler - Function to call when event is triggered.\n     * @param {Object} [userData=null] - Arbitrary object to be passed unchanged to the handler.\n     */addHandler:function addHandler(eventName,handler,userData){var events=this.events[eventName];if(!events){this.events[eventName]=events=[];}if(handler&&$.isFunction(handler)){events[events.length]={handler:handler,userData:userData||null};}},/**\n     * Remove a specific event handler for a given event.\n     * @function\n     * @param {String} eventName - Name of event for which the handler is to be removed.\n     * @param {OpenSeadragon.EventHandler} handler - Function to be removed.\n     */removeHandler:function removeHandler(eventName,handler){var events=this.events[eventName],handlers=[],i;if(!events){return;}if($.isArray(events)){for(i=0;i<events.length;i++){if(events[i].handler!==handler){handlers.push(events[i]);}}this.events[eventName]=handlers;}},/**\n     * Remove all event handlers for a given event type. If no type is given all\n     * event handlers for every event type are removed.\n     * @function\n     * @param {String} eventName - Name of event for which all handlers are to be removed.\n     */removeAllHandlers:function removeAllHandlers(eventName){if(eventName){this.events[eventName]=[];}else{for(var eventType in this.events){this.events[eventType]=[];}}},/**\n     * Get a function which iterates the list of all handlers registered for a given event, calling the handler for each.\n     * @function\n     * @param {String} eventName - Name of event to get handlers for.\n     */getHandler:function getHandler(eventName){var events=this.events[eventName];if(!events||!events.length){return null;}events=events.length===1?[events[0]]:Array.apply(null,events);return function(source,args){var i,length=events.length;for(i=0;i<length;i++){if(events[i]){args.eventSource=source;args.userData=events[i].userData;events[i].handler(args);}}};},/**\n     * Trigger an event, optionally passing additional information.\n     * @function\n     * @param {String} eventName - Name of event to register.\n     * @param {Object} eventArgs - Event-specific data.\n     */raiseEvent:function raiseEvent(eventName,eventArgs){//uncomment if you want to get a log of all events\n//$.console.log( eventName );\nvar handler=this.getHandler(eventName);if(handler){if(!eventArgs){eventArgs={};}handler(this,eventArgs);}}};})(OpenSeadragon);/*\n * OpenSeadragon - MouseTracker\n *\n * Copyright (C) 2009 CodePlex Foundation\n * Copyright (C) 2010-2013 OpenSeadragon contributors\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * - Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * - Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * - Neither the name of CodePlex Foundation nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */(function($){// All MouseTracker instances\nvar MOUSETRACKERS=[];// dictionary from hash to private properties\nvar THIS={};/**\n     * @class MouseTracker\n     * @classdesc Provides simplified handling of common pointer device (mouse, touch, pen, etc.) gestures\n     *            and keyboard events on a specified element.\n     * @memberof OpenSeadragon\n     * @param {Object} options\n     *      Allows configurable properties to be entirely specified by passing\n     *      an options object to the constructor.  The constructor also supports\n     *      the original positional arguments 'element', 'clickTimeThreshold',\n     *      and 'clickDistThreshold' in that order.\n     * @param {Element|String} options.element\n     *      A reference to an element or an element id for which the pointer/key\n     *      events will be monitored.\n     * @param {Boolean} [options.startDisabled=false]\n     *      If true, event tracking on the element will not start until\n     *      {@link OpenSeadragon.MouseTracker.setTracking|setTracking} is called.\n     * @param {Number} options.clickTimeThreshold\n     *      The number of milliseconds within which a pointer down-up event combination\n     *      will be treated as a click gesture.\n     * @param {Number} options.clickDistThreshold\n     *      The maximum distance allowed between a pointer down event and a pointer up event\n     *      to be treated as a click gesture.\n     * @param {Number} options.dblClickTimeThreshold\n     *      The number of milliseconds within which two pointer down-up event combinations\n     *      will be treated as a double-click gesture.\n     * @param {Number} options.dblClickDistThreshold\n     *      The maximum distance allowed between two pointer click events\n     *      to be treated as a click gesture.\n     * @param {Number} [options.stopDelay=50]\n     *      The number of milliseconds without pointer move before the stop\n     *      event is fired.\n     * @param {OpenSeadragon.EventHandler} [options.enterHandler=null]\n     *      An optional handler for pointer enter.\n     * @param {OpenSeadragon.EventHandler} [options.exitHandler=null]\n     *      An optional handler for pointer exit.\n     * @param {OpenSeadragon.EventHandler} [options.pressHandler=null]\n     *      An optional handler for pointer press.\n     * @param {OpenSeadragon.EventHandler} [options.nonPrimaryPressHandler=null]\n     *      An optional handler for pointer non-primary button press.\n     * @param {OpenSeadragon.EventHandler} [options.releaseHandler=null]\n     *      An optional handler for pointer release.\n     * @param {OpenSeadragon.EventHandler} [options.nonPrimaryReleaseHandler=null]\n     *      An optional handler for pointer non-primary button release.\n     * @param {OpenSeadragon.EventHandler} [options.moveHandler=null]\n     *      An optional handler for pointer move.\n     * @param {OpenSeadragon.EventHandler} [options.scrollHandler=null]\n     *      An optional handler for mouse wheel scroll.\n     * @param {OpenSeadragon.EventHandler} [options.clickHandler=null]\n     *      An optional handler for pointer click.\n     * @param {OpenSeadragon.EventHandler} [options.dblClickHandler=null]\n     *      An optional handler for pointer double-click.\n     * @param {OpenSeadragon.EventHandler} [options.dragHandler=null]\n     *      An optional handler for the drag gesture.\n     * @param {OpenSeadragon.EventHandler} [options.dragEndHandler=null]\n     *      An optional handler for after a drag gesture.\n     * @param {OpenSeadragon.EventHandler} [options.pinchHandler=null]\n     *      An optional handler for the pinch gesture.\n     * @param {OpenSeadragon.EventHandler} [options.keyDownHandler=null]\n     *      An optional handler for keydown.\n     * @param {OpenSeadragon.EventHandler} [options.keyUpHandler=null]\n     *      An optional handler for keyup.\n     * @param {OpenSeadragon.EventHandler} [options.keyHandler=null]\n     *      An optional handler for keypress.\n     * @param {OpenSeadragon.EventHandler} [options.focusHandler=null]\n     *      An optional handler for focus.\n     * @param {OpenSeadragon.EventHandler} [options.blurHandler=null]\n     *      An optional handler for blur.\n     * @param {Object} [options.userData=null]\n     *      Arbitrary object to be passed unchanged to any attached handler methods.\n     */$.MouseTracker=function(options){MOUSETRACKERS.push(this);var args=arguments;if(!$.isPlainObject(options)){options={element:args[0],clickTimeThreshold:args[1],clickDistThreshold:args[2]};}this.hash=Math.random();// An unique hash for this tracker.\n/**\n         * The element for which pointer events are being monitored.\n         * @member {Element} element\n         * @memberof OpenSeadragon.MouseTracker#\n         */this.element=$.getElement(options.element);/**\n         * The number of milliseconds within which a pointer down-up event combination\n         * will be treated as a click gesture.\n         * @member {Number} clickTimeThreshold\n         * @memberof OpenSeadragon.MouseTracker#\n         */this.clickTimeThreshold=options.clickTimeThreshold||$.DEFAULT_SETTINGS.clickTimeThreshold;/**\n         * The maximum distance allowed between a pointer down event and a pointer up event\n         * to be treated as a click gesture.\n         * @member {Number} clickDistThreshold\n         * @memberof OpenSeadragon.MouseTracker#\n         */this.clickDistThreshold=options.clickDistThreshold||$.DEFAULT_SETTINGS.clickDistThreshold;/**\n         * The number of milliseconds within which two pointer down-up event combinations\n         * will be treated as a double-click gesture.\n         * @member {Number} dblClickTimeThreshold\n         * @memberof OpenSeadragon.MouseTracker#\n         */this.dblClickTimeThreshold=options.dblClickTimeThreshold||$.DEFAULT_SETTINGS.dblClickTimeThreshold;/**\n         * The maximum distance allowed between two pointer click events\n         * to be treated as a click gesture.\n         * @member {Number} clickDistThreshold\n         * @memberof OpenSeadragon.MouseTracker#\n         */this.dblClickDistThreshold=options.dblClickDistThreshold||$.DEFAULT_SETTINGS.dblClickDistThreshold;/*eslint-disable no-multi-spaces*/this.userData=options.userData||null;this.stopDelay=options.stopDelay||50;this.enterHandler=options.enterHandler||null;this.exitHandler=options.exitHandler||null;this.pressHandler=options.pressHandler||null;this.nonPrimaryPressHandler=options.nonPrimaryPressHandler||null;this.releaseHandler=options.releaseHandler||null;this.nonPrimaryReleaseHandler=options.nonPrimaryReleaseHandler||null;this.moveHandler=options.moveHandler||null;this.scrollHandler=options.scrollHandler||null;this.clickHandler=options.clickHandler||null;this.dblClickHandler=options.dblClickHandler||null;this.dragHandler=options.dragHandler||null;this.dragEndHandler=options.dragEndHandler||null;this.pinchHandler=options.pinchHandler||null;this.stopHandler=options.stopHandler||null;this.keyDownHandler=options.keyDownHandler||null;this.keyUpHandler=options.keyUpHandler||null;this.keyHandler=options.keyHandler||null;this.focusHandler=options.focusHandler||null;this.blurHandler=options.blurHandler||null;/*eslint-enable no-multi-spaces*/ //Store private properties in a scope sealed hash map\nvar _this=this;/**\n         * @private\n         * @property {Boolean} tracking\n         *      Are we currently tracking pointer events for this element.\n         */THIS[this.hash]={click:function click(event){onClick(_this,event);},dblclick:function dblclick(event){onDblClick(_this,event);},keydown:function keydown(event){onKeyDown(_this,event);},keyup:function keyup(event){onKeyUp(_this,event);},keypress:function keypress(event){onKeyPress(_this,event);},focus:function focus(event){onFocus(_this,event);},blur:function blur(event){onBlur(_this,event);},wheel:function wheel(event){onWheel(_this,event);},mousewheel:function mousewheel(event){onMouseWheel(_this,event);},DOMMouseScroll:function DOMMouseScroll(event){onMouseWheel(_this,event);},MozMousePixelScroll:function MozMousePixelScroll(event){onMouseWheel(_this,event);},mouseenter:function mouseenter(event){onMouseEnter(_this,event);},// Used on IE8 only\nmouseleave:function mouseleave(event){onMouseLeave(_this,event);},// Used on IE8 only\nmouseover:function mouseover(event){onMouseOver(_this,event);},mouseout:function mouseout(event){onMouseOut(_this,event);},mousedown:function mousedown(event){onMouseDown(_this,event);},mouseup:function mouseup(event){onMouseUp(_this,event);},mouseupcaptured:function mouseupcaptured(event){onMouseUpCaptured(_this,event);},mousemove:function mousemove(event){onMouseMove(_this,event);},mousemovecaptured:function mousemovecaptured(event){onMouseMoveCaptured(_this,event);},touchstart:function touchstart(event){onTouchStart(_this,event);},touchend:function touchend(event){onTouchEnd(_this,event);},touchendcaptured:function touchendcaptured(event){onTouchEndCaptured(_this,event);},touchmove:function touchmove(event){onTouchMove(_this,event);},touchmovecaptured:function touchmovecaptured(event){onTouchMoveCaptured(_this,event);},touchcancel:function touchcancel(event){onTouchCancel(_this,event);},gesturestart:function gesturestart(event){onGestureStart(_this,event);},gesturechange:function gesturechange(event){onGestureChange(_this,event);},pointerover:function pointerover(event){onPointerOver(_this,event);},MSPointerOver:function MSPointerOver(event){onPointerOver(_this,event);},pointerout:function pointerout(event){onPointerOut(_this,event);},MSPointerOut:function MSPointerOut(event){onPointerOut(_this,event);},pointerdown:function pointerdown(event){onPointerDown(_this,event);},MSPointerDown:function MSPointerDown(event){onPointerDown(_this,event);},pointerup:function pointerup(event){onPointerUp(_this,event);},MSPointerUp:function MSPointerUp(event){onPointerUp(_this,event);},pointermove:function pointermove(event){onPointerMove(_this,event);},MSPointerMove:function MSPointerMove(event){onPointerMove(_this,event);},pointercancel:function pointercancel(event){onPointerCancel(_this,event);},MSPointerCancel:function MSPointerCancel(event){onPointerCancel(_this,event);},pointerupcaptured:function pointerupcaptured(event){onPointerUpCaptured(_this,event);},pointermovecaptured:function pointermovecaptured(event){onPointerMoveCaptured(_this,event);},tracking:false,// Active pointers lists. Array of GesturePointList objects, one for each pointer device type.\n// GesturePointList objects are added each time a pointer is tracked by a new pointer device type (see getActivePointersListByType()).\n// Active pointers are any pointer being tracked for this element which are in the hit-test area\n//     of the element (for hover-capable devices) and/or have contact or a button press initiated in the element.\nactivePointersLists:[],// Tracking for double-click gesture\nlastClickPos:null,dblClickTimeOut:null,// Tracking for pinch gesture\npinchGPoints:[],lastPinchDist:0,currentPinchDist:0,lastPinchCenter:null,currentPinchCenter:null};if(!options.startDisabled){this.setTracking(true);}};/** @lends OpenSeadragon.MouseTracker.prototype */$.MouseTracker.prototype={/**\n         * Clean up any events or objects created by the tracker.\n         * @function\n         */destroy:function destroy(){var i;stopTracking(this);this.element=null;for(i=0;i<MOUSETRACKERS.length;i++){if(MOUSETRACKERS[i]===this){MOUSETRACKERS.splice(i,1);break;}}THIS[this.hash]=null;delete THIS[this.hash];},/**\n         * Are we currently tracking events on this element.\n         * @deprecated Just use this.tracking\n         * @function\n         * @returns {Boolean} Are we currently tracking events on this element.\n         */isTracking:function isTracking(){return THIS[this.hash].tracking;},/**\n         * Enable or disable whether or not we are tracking events on this element.\n         * @function\n         * @param {Boolean} track True to start tracking, false to stop tracking.\n         * @returns {OpenSeadragon.MouseTracker} Chainable.\n         */setTracking:function setTracking(track){if(track){startTracking(this);}else{stopTracking(this);}//chain\nreturn this;},/**\n         * Returns the {@link OpenSeadragon.MouseTracker.GesturePointList|GesturePointList} for all but the given pointer device type.\n         * @function\n         * @param {String} type - The pointer device type: \"mouse\", \"touch\", \"pen\", etc.\n         * @returns {Array.<OpenSeadragon.MouseTracker.GesturePointList>}\n         */getActivePointersListsExceptType:function getActivePointersListsExceptType(type){var delegate=THIS[this.hash];var listArray=[];for(var i=0;i<delegate.activePointersLists.length;++i){if(delegate.activePointersLists[i].type!==type){listArray.push(delegate.activePointersLists[i]);}}return listArray;},/**\n         * Returns the {@link OpenSeadragon.MouseTracker.GesturePointList|GesturePointList} for the given pointer device type,\n         * creating and caching a new {@link OpenSeadragon.MouseTracker.GesturePointList|GesturePointList} if one doesn't already exist for the type.\n         * @function\n         * @param {String} type - The pointer device type: \"mouse\", \"touch\", \"pen\", etc.\n         * @returns {OpenSeadragon.MouseTracker.GesturePointList}\n         */getActivePointersListByType:function getActivePointersListByType(type){var delegate=THIS[this.hash],i,len=delegate.activePointersLists.length,list;for(i=0;i<len;i++){if(delegate.activePointersLists[i].type===type){return delegate.activePointersLists[i];}}list=new $.MouseTracker.GesturePointList(type);delegate.activePointersLists.push(list);return list;},/**\n         * Returns the total number of pointers currently active on the tracked element.\n         * @function\n         * @returns {Number}\n         */getActivePointerCount:function getActivePointerCount(){var delegate=THIS[this.hash],i,len=delegate.activePointersLists.length,count=0;for(i=0;i<len;i++){count+=delegate.activePointersLists[i].getLength();}return count;},/**\n         * Implement or assign implementation to these handlers during or after\n         * calling the constructor.\n         * @function\n         * @param {Object} event\n         * @param {OpenSeadragon.MouseTracker} event.eventSource\n         *      A reference to the tracker instance.\n         * @param {String} event.pointerType\n         *     \"mouse\", \"touch\", \"pen\", etc.\n         * @param {OpenSeadragon.Point} event.position\n         *      The position of the event relative to the tracked element.\n         * @param {Number} event.buttons\n         *      Current buttons pressed.\n         *      Combination of bit flags 0: none, 1: primary (or touch contact), 2: secondary, 4: aux (often middle), 8: X1 (often back), 16: X2 (often forward), 32: pen eraser.\n         * @param {Number} event.pointers\n         *      Number of pointers (all types) active in the tracked element.\n         * @param {Boolean} event.insideElementPressed\n         *      True if the left mouse button is currently being pressed and was\n         *      initiated inside the tracked element, otherwise false.\n         * @param {Boolean} event.buttonDownAny\n         *      Was the button down anywhere in the screen during the event. <span style=\"color:red;\">Deprecated. Use buttons instead.</span>\n         * @param {Boolean} event.isTouchEvent\n         *      True if the original event is a touch event, otherwise false. <span style=\"color:red;\">Deprecated. Use pointerType and/or originalEvent instead.</span>\n         * @param {Object} event.originalEvent\n         *      The original event object.\n         * @param {Boolean} event.preventDefaultAction\n         *      Set to true to prevent the tracker subscriber from performing its default action (subscriber implementation dependent). Default: false.\n         * @param {Object} event.userData\n         *      Arbitrary user-defined object.\n         */enterHandler:function enterHandler(){},/**\n         * Implement or assign implementation to these handlers during or after\n         * calling the constructor.\n         * @function\n         * @param {Object} event\n         * @param {OpenSeadragon.MouseTracker} event.eventSource\n         *      A reference to the tracker instance.\n         * @param {String} event.pointerType\n         *     \"mouse\", \"touch\", \"pen\", etc.\n         * @param {OpenSeadragon.Point} event.position\n         *      The position of the event relative to the tracked element.\n         * @param {Number} event.buttons\n         *      Current buttons pressed.\n         *      Combination of bit flags 0: none, 1: primary (or touch contact), 2: secondary, 4: aux (often middle), 8: X1 (often back), 16: X2 (often forward), 32: pen eraser.\n         * @param {Number} event.pointers\n         *      Number of pointers (all types) active in the tracked element.\n         * @param {Boolean} event.insideElementPressed\n         *      True if the left mouse button is currently being pressed and was\n         *      initiated inside the tracked element, otherwise false.\n         * @param {Boolean} event.buttonDownAny\n         *      Was the button down anywhere in the screen during the event. <span style=\"color:red;\">Deprecated. Use buttons instead.</span>\n         * @param {Boolean} event.isTouchEvent\n         *      True if the original event is a touch event, otherwise false. <span style=\"color:red;\">Deprecated. Use pointerType and/or originalEvent instead.</span>\n         * @param {Object} event.originalEvent\n         *      The original event object.\n         * @param {Boolean} event.preventDefaultAction\n         *      Set to true to prevent the tracker subscriber from performing its default action (subscriber implementation dependent). Default: false.\n         * @param {Object} event.userData\n         *      Arbitrary user-defined object.\n         */exitHandler:function exitHandler(){},/**\n         * Implement or assign implementation to these handlers during or after\n         * calling the constructor.\n         * @function\n         * @param {Object} event\n         * @param {OpenSeadragon.MouseTracker} event.eventSource\n         *      A reference to the tracker instance.\n         * @param {String} event.pointerType\n         *     \"mouse\", \"touch\", \"pen\", etc.\n         * @param {OpenSeadragon.Point} event.position\n         *      The position of the event relative to the tracked element.\n         * @param {Number} event.buttons\n         *      Current buttons pressed.\n         *      Combination of bit flags 0: none, 1: primary (or touch contact), 2: secondary, 4: aux (often middle), 8: X1 (often back), 16: X2 (often forward), 32: pen eraser.\n         * @param {Boolean} event.isTouchEvent\n         *      True if the original event is a touch event, otherwise false. <span style=\"color:red;\">Deprecated. Use pointerType and/or originalEvent instead.</span>\n         * @param {Object} event.originalEvent\n         *      The original event object.\n         * @param {Boolean} event.preventDefaultAction\n         *      Set to true to prevent the tracker subscriber from performing its default action (subscriber implementation dependent). Default: false.\n         * @param {Object} event.userData\n         *      Arbitrary user-defined object.\n         */pressHandler:function pressHandler(){},/**\n         * Implement or assign implementation to these handlers during or after\n         * calling the constructor.\n         * @function\n         * @param {Object} event\n         * @param {OpenSeadragon.MouseTracker} event.eventSource\n         *      A reference to the tracker instance.\n         * @param {String} event.pointerType\n         *     \"mouse\", \"touch\", \"pen\", etc.\n         * @param {OpenSeadragon.Point} event.position\n         *      The position of the event relative to the tracked element.\n         * @param {Number} event.button\n         *      Button which caused the event.\n         *      -1: none, 0: primary/left, 1: aux/middle, 2: secondary/right, 3: X1/back, 4: X2/forward, 5: pen eraser.\n         * @param {Number} event.buttons\n         *      Current buttons pressed.\n         *      Combination of bit flags 0: none, 1: primary (or touch contact), 2: secondary, 4: aux (often middle), 8: X1 (often back), 16: X2 (often forward), 32: pen eraser.\n         * @param {Boolean} event.isTouchEvent\n         *      True if the original event is a touch event, otherwise false. <span style=\"color:red;\">Deprecated. Use pointerType and/or originalEvent instead.</span>\n         * @param {Object} event.originalEvent\n         *      The original event object.\n         * @param {Boolean} event.preventDefaultAction\n         *      Set to true to prevent the tracker subscriber from performing its default action (subscriber implementation dependent). Default: false.\n         * @param {Object} event.userData\n         *      Arbitrary user-defined object.\n         */nonPrimaryPressHandler:function nonPrimaryPressHandler(){},/**\n         * Implement or assign implementation to these handlers during or after\n         * calling the constructor.\n         * @function\n         * @param {Object} event\n         * @param {OpenSeadragon.MouseTracker} event.eventSource\n         *      A reference to the tracker instance.\n         * @param {String} event.pointerType\n         *     \"mouse\", \"touch\", \"pen\", etc.\n         * @param {OpenSeadragon.Point} event.position\n         *      The position of the event relative to the tracked element.\n         * @param {Number} event.buttons\n         *      Current buttons pressed.\n         *      Combination of bit flags 0: none, 1: primary (or touch contact), 2: secondary, 4: aux (often middle), 8: X1 (often back), 16: X2 (often forward), 32: pen eraser.\n         * @param {Boolean} event.insideElementPressed\n         *      True if the left mouse button is currently being pressed and was\n         *      initiated inside the tracked element, otherwise false.\n         * @param {Boolean} event.insideElementReleased\n         *      True if the cursor inside the tracked element when the button was released.\n         * @param {Boolean} event.isTouchEvent\n         *      True if the original event is a touch event, otherwise false. <span style=\"color:red;\">Deprecated. Use pointerType and/or originalEvent instead.</span>\n         * @param {Object} event.originalEvent\n         *      The original event object.\n         * @param {Boolean} event.preventDefaultAction\n         *      Set to true to prevent the tracker subscriber from performing its default action (subscriber implementation dependent). Default: false.\n         * @param {Object} event.userData\n         *      Arbitrary user-defined object.\n         */releaseHandler:function releaseHandler(){},/**\n         * Implement or assign implementation to these handlers during or after\n         * calling the constructor.\n         * @function\n         * @param {Object} event\n         * @param {OpenSeadragon.MouseTracker} event.eventSource\n         *      A reference to the tracker instance.\n         * @param {String} event.pointerType\n         *     \"mouse\", \"touch\", \"pen\", etc.\n         * @param {OpenSeadragon.Point} event.position\n         *      The position of the event relative to the tracked element.\n         * @param {Number} event.button\n         *      Button which caused the event.\n         *      -1: none, 0: primary/left, 1: aux/middle, 2: secondary/right, 3: X1/back, 4: X2/forward, 5: pen eraser.\n         * @param {Number} event.buttons\n         *      Current buttons pressed.\n         *      Combination of bit flags 0: none, 1: primary (or touch contact), 2: secondary, 4: aux (often middle), 8: X1 (often back), 16: X2 (often forward), 32: pen eraser.\n         * @param {Boolean} event.isTouchEvent\n         *      True if the original event is a touch event, otherwise false. <span style=\"color:red;\">Deprecated. Use pointerType and/or originalEvent instead.</span>\n         * @param {Object} event.originalEvent\n         *      The original event object.\n         * @param {Boolean} event.preventDefaultAction\n         *      Set to true to prevent the tracker subscriber from performing its default action (subscriber implementation dependent). Default: false.\n         * @param {Object} event.userData\n         *      Arbitrary user-defined object.\n         */nonPrimaryReleaseHandler:function nonPrimaryReleaseHandler(){},/**\n         * Implement or assign implementation to these handlers during or after\n         * calling the constructor.\n         * @function\n         * @param {Object} event\n         * @param {OpenSeadragon.MouseTracker} event.eventSource\n         *      A reference to the tracker instance.\n         * @param {String} event.pointerType\n         *     \"mouse\", \"touch\", \"pen\", etc.\n         * @param {OpenSeadragon.Point} event.position\n         *      The position of the event relative to the tracked element.\n         * @param {Number} event.buttons\n         *      Current buttons pressed.\n         *      Combination of bit flags 0: none, 1: primary (or touch contact), 2: secondary, 4: aux (often middle), 8: X1 (often back), 16: X2 (often forward), 32: pen eraser.\n         * @param {Boolean} event.isTouchEvent\n         *      True if the original event is a touch event, otherwise false. <span style=\"color:red;\">Deprecated. Use pointerType and/or originalEvent instead.</span>\n         * @param {Object} event.originalEvent\n         *      The original event object.\n         * @param {Boolean} event.preventDefaultAction\n         *      Set to true to prevent the tracker subscriber from performing its default action (subscriber implementation dependent). Default: false.\n         * @param {Object} event.userData\n         *      Arbitrary user-defined object.\n         */moveHandler:function moveHandler(){},/**\n         * Implement or assign implementation to these handlers during or after\n         * calling the constructor.\n         * @function\n         * @param {Object} event\n         * @param {OpenSeadragon.MouseTracker} event.eventSource\n         *      A reference to the tracker instance.\n         * @param {String} event.pointerType\n         *     \"mouse\", \"touch\", \"pen\", etc.\n         * @param {OpenSeadragon.Point} event.position\n         *      The position of the event relative to the tracked element.\n         * @param {Number} event.scroll\n         *      The scroll delta for the event.\n         * @param {Boolean} event.shift\n         *      True if the shift key was pressed during this event.\n         * @param {Boolean} event.isTouchEvent\n         *      True if the original event is a touch event, otherwise false. <span style=\"color:red;\">Deprecated. Use pointerType and/or originalEvent instead. Touch devices no longer generate scroll event.</span>\n         * @param {Object} event.originalEvent\n         *      The original event object.\n         * @param {Boolean} event.preventDefaultAction\n         *      Set to true to prevent the tracker subscriber from performing its default action (subscriber implementation dependent). Default: false.\n         * @param {Object} event.userData\n         *      Arbitrary user-defined object.\n         */scrollHandler:function scrollHandler(){},/**\n         * Implement or assign implementation to these handlers during or after\n         * calling the constructor.\n         * @function\n         * @param {Object} event\n         * @param {OpenSeadragon.MouseTracker} event.eventSource\n         *      A reference to the tracker instance.\n         * @param {String} event.pointerType\n         *     \"mouse\", \"touch\", \"pen\", etc.\n         * @param {OpenSeadragon.Point} event.position\n         *      The position of the event relative to the tracked element.\n         * @param {Boolean} event.quick\n         *      True only if the clickDistThreshold and clickTimeThreshold are both passed. Useful for ignoring drag events.\n         * @param {Boolean} event.shift\n         *      True if the shift key was pressed during this event.\n         * @param {Boolean} event.isTouchEvent\n         *      True if the original event is a touch event, otherwise false. <span style=\"color:red;\">Deprecated. Use pointerType and/or originalEvent instead.</span>\n         * @param {Object} event.originalEvent\n         *      The original event object.\n         * @param {Boolean} event.preventDefaultAction\n         *      Set to true to prevent the tracker subscriber from performing its default action (subscriber implementation dependent). Default: false.\n         * @param {Object} event.userData\n         *      Arbitrary user-defined object.\n         */clickHandler:function clickHandler(){},/**\n         * Implement or assign implementation to these handlers during or after\n         * calling the constructor.\n         * @function\n         * @param {Object} event\n         * @param {OpenSeadragon.MouseTracker} event.eventSource\n         *      A reference to the tracker instance.\n         * @param {String} event.pointerType\n         *     \"mouse\", \"touch\", \"pen\", etc.\n         * @param {OpenSeadragon.Point} event.position\n         *      The position of the event relative to the tracked element.\n         * @param {Boolean} event.shift\n         *      True if the shift key was pressed during this event.\n         * @param {Boolean} event.isTouchEvent\n         *      True if the original event is a touch event, otherwise false. <span style=\"color:red;\">Deprecated. Use pointerType and/or originalEvent instead.</span>\n         * @param {Object} event.originalEvent\n         *      The original event object.\n         * @param {Boolean} event.preventDefaultAction\n         *      Set to true to prevent the tracker subscriber from performing its default action (subscriber implementation dependent). Default: false.\n         * @param {Object} event.userData\n         *      Arbitrary user-defined object.\n         */dblClickHandler:function dblClickHandler(){},/**\n         * Implement or assign implementation to these handlers during or after\n         * calling the constructor.\n         * @function\n         * @param {Object} event\n         * @param {OpenSeadragon.MouseTracker} event.eventSource\n         *      A reference to the tracker instance.\n         * @param {String} event.pointerType\n         *     \"mouse\", \"touch\", \"pen\", etc.\n         * @param {OpenSeadragon.Point} event.position\n         *      The position of the event relative to the tracked element.\n         * @param {Number} event.buttons\n         *      Current buttons pressed.\n         *      Combination of bit flags 0: none, 1: primary (or touch contact), 2: secondary, 4: aux (often middle), 8: X1 (often back), 16: X2 (often forward), 32: pen eraser.\n         * @param {OpenSeadragon.Point} event.delta\n         *      The x,y components of the difference between the current position and the last drag event position.  Useful for ignoring or weighting the events.\n         * @param {Number} event.speed\n         *     Current computed speed, in pixels per second.\n         * @param {Number} event.direction\n         *     Current computed direction, expressed as an angle counterclockwise relative to the positive X axis (-pi to pi, in radians). Only valid if speed > 0.\n         * @param {Boolean} event.shift\n         *      True if the shift key was pressed during this event.\n         * @param {Boolean} event.isTouchEvent\n         *      True if the original event is a touch event, otherwise false. <span style=\"color:red;\">Deprecated. Use pointerType and/or originalEvent instead.</span>\n         * @param {Object} event.originalEvent\n         *      The original event object.\n         * @param {Boolean} event.preventDefaultAction\n         *      Set to true to prevent the tracker subscriber from performing its default action (subscriber implementation dependent). Default: false.\n         * @param {Object} event.userData\n         *      Arbitrary user-defined object.\n         */dragHandler:function dragHandler(){},/**\n         * Implement or assign implementation to these handlers during or after\n         * calling the constructor.\n         * @function\n         * @param {Object} event\n         * @param {OpenSeadragon.MouseTracker} event.eventSource\n         *      A reference to the tracker instance.\n         * @param {String} event.pointerType\n         *     \"mouse\", \"touch\", \"pen\", etc.\n         * @param {OpenSeadragon.Point} event.position\n         *      The position of the event relative to the tracked element.\n         * @param {Number} event.speed\n         *     Speed at the end of a drag gesture, in pixels per second.\n         * @param {Number} event.direction\n         *     Direction at the end of a drag gesture, expressed as an angle counterclockwise relative to the positive X axis (-pi to pi, in radians). Only valid if speed > 0.\n         * @param {Boolean} event.shift\n         *      True if the shift key was pressed during this event.\n         * @param {Boolean} event.isTouchEvent\n         *      True if the original event is a touch event, otherwise false. <span style=\"color:red;\">Deprecated. Use pointerType and/or originalEvent instead.</span>\n         * @param {Object} event.originalEvent\n         *      The original event object.\n         * @param {Boolean} event.preventDefaultAction\n         *      Set to true to prevent the tracker subscriber from performing its default action (subscriber implementation dependent). Default: false.\n         * @param {Object} event.userData\n         *      Arbitrary user-defined object.\n         */dragEndHandler:function dragEndHandler(){},/**\n         * Implement or assign implementation to these handlers during or after\n         * calling the constructor.\n         * @function\n         * @param {Object} event\n         * @param {OpenSeadragon.MouseTracker} event.eventSource\n         *      A reference to the tracker instance.\n         * @param {String} event.pointerType\n         *     \"mouse\", \"touch\", \"pen\", etc.\n         * @param {Array.<OpenSeadragon.MouseTracker.GesturePoint>} event.gesturePoints\n         *      Gesture points associated with the gesture. Velocity data can be found here.\n         * @param {OpenSeadragon.Point} event.lastCenter\n         *      The previous center point of the two pinch contact points relative to the tracked element.\n         * @param {OpenSeadragon.Point} event.center\n         *      The center point of the two pinch contact points relative to the tracked element.\n         * @param {Number} event.lastDistance\n         *      The previous distance between the two pinch contact points in CSS pixels.\n         * @param {Number} event.distance\n         *      The distance between the two pinch contact points in CSS pixels.\n         * @param {Boolean} event.shift\n         *      True if the shift key was pressed during this event.\n         * @param {Object} event.originalEvent\n         *      The original event object.\n         * @param {Boolean} event.preventDefaultAction\n         *      Set to true to prevent the tracker subscriber from performing its default action (subscriber implementation dependent). Default: false.\n         * @param {Object} event.userData\n         *      Arbitrary user-defined object.\n         */pinchHandler:function pinchHandler(){},/**\n         * Implement or assign implementation to these handlers during or after\n         * calling the constructor.\n         * @function\n         * @param {Object} event\n         * @param {OpenSeadragon.MouseTracker} event.eventSource\n         *      A reference to the tracker instance.\n         * @param {String} event.pointerType\n         *     \"mouse\", \"touch\", \"pen\", etc.\n         * @param {OpenSeadragon.Point} event.position\n         *      The position of the event relative to the tracked element.\n         * @param {Number} event.buttons\n         *      Current buttons pressed.\n         *      Combination of bit flags 0: none, 1: primary (or touch contact), 2: secondary, 4: aux (often middle), 8: X1 (often back), 16: X2 (often forward), 32: pen eraser.\n         * @param {Boolean} event.isTouchEvent\n         *      True if the original event is a touch event, otherwise false. <span style=\"color:red;\">Deprecated. Use pointerType and/or originalEvent instead.</span>\n         * @param {Object} event.originalEvent\n         *      The original event object.\n         * @param {Boolean} event.preventDefaultAction\n         *      Set to true to prevent the tracker subscriber from performing its default action (subscriber implementation dependent). Default: false.\n         * @param {Object} event.userData\n         *      Arbitrary user-defined object.\n         */stopHandler:function stopHandler(){},/**\n         * Implement or assign implementation to these handlers during or after\n         * calling the constructor.\n         * @function\n         * @param {Object} event\n         * @param {OpenSeadragon.MouseTracker} event.eventSource\n         *      A reference to the tracker instance.\n         * @param {Number} event.keyCode\n         *      The key code that was pressed.\n         * @param {Boolean} event.ctrl\n         *      True if the ctrl key was pressed during this event.\n         * @param {Boolean} event.shift\n         *      True if the shift key was pressed during this event.\n         * @param {Boolean} event.alt\n         *      True if the alt key was pressed during this event.\n         * @param {Boolean} event.meta\n         *      True if the meta key was pressed during this event.\n         * @param {Object} event.originalEvent\n         *      The original event object.\n         * @param {Boolean} event.preventDefaultAction\n         *      Set to true to prevent the tracker subscriber from performing its default action (subscriber implementation dependent). Default: false.\n         * @param {Object} event.userData\n         *      Arbitrary user-defined object.\n         */keyDownHandler:function keyDownHandler(){},/**\n         * Implement or assign implementation to these handlers during or after\n         * calling the constructor.\n         * @function\n         * @param {Object} event\n         * @param {OpenSeadragon.MouseTracker} event.eventSource\n         *      A reference to the tracker instance.\n         * @param {Number} event.keyCode\n         *      The key code that was pressed.\n         * @param {Boolean} event.ctrl\n         *      True if the ctrl key was pressed during this event.\n         * @param {Boolean} event.shift\n         *      True if the shift key was pressed during this event.\n         * @param {Boolean} event.alt\n         *      True if the alt key was pressed during this event.\n         * @param {Boolean} event.meta\n         *      True if the meta key was pressed during this event.\n         * @param {Object} event.originalEvent\n         *      The original event object.\n         * @param {Boolean} event.preventDefaultAction\n         *      Set to true to prevent the tracker subscriber from performing its default action (subscriber implementation dependent). Default: false.\n         * @param {Object} event.userData\n         *      Arbitrary user-defined object.\n         */keyUpHandler:function keyUpHandler(){},/**\n         * Implement or assign implementation to these handlers during or after\n         * calling the constructor.\n         * @function\n         * @param {Object} event\n         * @param {OpenSeadragon.MouseTracker} event.eventSource\n         *      A reference to the tracker instance.\n         * @param {Number} event.keyCode\n         *      The key code that was pressed.\n         * @param {Boolean} event.ctrl\n         *      True if the ctrl key was pressed during this event.\n         * @param {Boolean} event.shift\n         *      True if the shift key was pressed during this event.\n         * @param {Boolean} event.alt\n         *      True if the alt key was pressed during this event.\n         * @param {Boolean} event.meta\n         *      True if the meta key was pressed during this event.\n         * @param {Object} event.originalEvent\n         *      The original event object.\n         * @param {Boolean} event.preventDefaultAction\n         *      Set to true to prevent the tracker subscriber from performing its default action (subscriber implementation dependent). Default: false.\n         * @param {Object} event.userData\n         *      Arbitrary user-defined object.\n         */keyHandler:function keyHandler(){},/**\n         * Implement or assign implementation to these handlers during or after\n         * calling the constructor.\n         * @function\n         * @param {Object} event\n         * @param {OpenSeadragon.MouseTracker} event.eventSource\n         *      A reference to the tracker instance.\n         * @param {Object} event.originalEvent\n         *      The original event object.\n         * @param {Boolean} event.preventDefaultAction\n         *      Set to true to prevent the tracker subscriber from performing its default action (subscriber implementation dependent). Default: false.\n         * @param {Object} event.userData\n         *      Arbitrary user-defined object.\n         */focusHandler:function focusHandler(){},/**\n         * Implement or assign implementation to these handlers during or after\n         * calling the constructor.\n         * @function\n         * @param {Object} event\n         * @param {OpenSeadragon.MouseTracker} event.eventSource\n         *      A reference to the tracker instance.\n         * @param {Object} event.originalEvent\n         *      The original event object.\n         * @param {Boolean} event.preventDefaultAction\n         *      Set to true to prevent the tracker subscriber from performing its default action (subscriber implementation dependent). Default: false.\n         * @param {Object} event.userData\n         *      Arbitrary user-defined object.\n         */blurHandler:function blurHandler(){}};/**\n     * Resets all active mousetrakers. (Added to patch issue #697 \"Mouse up outside map will cause \"canvas-drag\" event to stick\")\n     *\n     * @private\n     * @member resetAllMouseTrackers\n     * @memberof OpenSeadragon.MouseTracker\n     */$.MouseTracker.resetAllMouseTrackers=function(){for(var i=0;i<MOUSETRACKERS.length;i++){if(MOUSETRACKERS[i].isTracking()){MOUSETRACKERS[i].setTracking(false);MOUSETRACKERS[i].setTracking(true);}}};/**\n     * Provides continuous computation of velocity (speed and direction) of active pointers.\n     * This is a singleton, used by all MouseTracker instances, as it is unlikely there will ever be more than\n     * two active gesture pointers at a time.\n     *\n     * @private\n     * @member gesturePointVelocityTracker\n     * @memberof OpenSeadragon.MouseTracker\n     */$.MouseTracker.gesturePointVelocityTracker=function(){var trackerPoints=[],intervalId=0,lastTime=0;// Generates a unique identifier for a tracked gesture point\nvar _generateGuid=function _generateGuid(tracker,gPoint){return tracker.hash.toString()+gPoint.type+gPoint.id.toString();};// Interval timer callback. Computes velocity for all tracked gesture points.\nvar _doTracking=function _doTracking(){var i,len=trackerPoints.length,trackPoint,gPoint,now=$.now(),elapsedTime,distance,speed;elapsedTime=now-lastTime;lastTime=now;for(i=0;i<len;i++){trackPoint=trackerPoints[i];gPoint=trackPoint.gPoint;// Math.atan2 gives us just what we need for a velocity vector, as we can simply\n//   use cos()/sin() to extract the x/y velocity components.\ngPoint.direction=Math.atan2(gPoint.currentPos.y-trackPoint.lastPos.y,gPoint.currentPos.x-trackPoint.lastPos.x);// speed = distance / elapsed time\ndistance=trackPoint.lastPos.distanceTo(gPoint.currentPos);trackPoint.lastPos=gPoint.currentPos;speed=1000*distance/(elapsedTime+1);// Simple biased average, favors the most recent speed computation. Smooths out erratic gestures a bit.\ngPoint.speed=0.75*speed+0.25*gPoint.speed;}};// Public. Add a gesture point to be tracked\nvar addPoint=function addPoint(tracker,gPoint){var guid=_generateGuid(tracker,gPoint);trackerPoints.push({guid:guid,gPoint:gPoint,lastPos:gPoint.currentPos});// Only fire up the interval timer when there's gesture pointers to track\nif(trackerPoints.length===1){lastTime=$.now();intervalId=window.setInterval(_doTracking,50);}};// Public. Stop tracking a gesture point\nvar removePoint=function removePoint(tracker,gPoint){var guid=_generateGuid(tracker,gPoint),i,len=trackerPoints.length;for(i=0;i<len;i++){if(trackerPoints[i].guid===guid){trackerPoints.splice(i,1);// Only run the interval timer if theres gesture pointers to track\nlen--;if(len===0){window.clearInterval(intervalId);}break;}}};return{addPoint:addPoint,removePoint:removePoint};}();///////////////////////////////////////////////////////////////////////////////\n// Pointer event model and feature detection\n///////////////////////////////////////////////////////////////////////////////\n$.MouseTracker.captureElement=document;/**\n     * Detect available mouse wheel event name.\n     */$.MouseTracker.wheelEventName=$.Browser.vendor==$.BROWSERS.IE&&$.Browser.version>8||'onwheel'in document.createElement('div')?'wheel':// Modern browsers support 'wheel'\ndocument.onmousewheel!==undefined?'mousewheel':// Webkit and IE support at least 'mousewheel'\n'DOMMouseScroll';// Assume old Firefox\n/**\n     * Detect legacy mouse capture support.\n     */$.MouseTracker.supportsMouseCapture=function(){var divElement=document.createElement('div');return $.isFunction(divElement.setCapture)&&$.isFunction(divElement.releaseCapture);}();/**\n     * Detect browser pointer device event model(s) and build appropriate list of events to subscribe to.\n     */$.MouseTracker.subscribeEvents=[\"click\",\"dblclick\",\"keydown\",\"keyup\",\"keypress\",\"focus\",\"blur\",$.MouseTracker.wheelEventName];if($.MouseTracker.wheelEventName==\"DOMMouseScroll\"){// Older Firefox\n$.MouseTracker.subscribeEvents.push(\"MozMousePixelScroll\");}// Note: window.navigator.pointerEnable is deprecated on IE 11 and not part of W3C spec.\nif(window.PointerEvent&&(window.navigator.pointerEnabled||$.Browser.vendor!==$.BROWSERS.IE)){// IE11 and other W3C Pointer Event implementations (see http://www.w3.org/TR/pointerevents)\n$.MouseTracker.havePointerEvents=true;$.MouseTracker.subscribeEvents.push(\"pointerover\",\"pointerout\",\"pointerdown\",\"pointerup\",\"pointermove\",\"pointercancel\");$.MouseTracker.unprefixedPointerEvents=true;if(navigator.maxTouchPoints){$.MouseTracker.maxTouchPoints=navigator.maxTouchPoints;}else{$.MouseTracker.maxTouchPoints=0;}$.MouseTracker.haveMouseEnter=false;}else if(window.MSPointerEvent&&window.navigator.msPointerEnabled){// IE10\n$.MouseTracker.havePointerEvents=true;$.MouseTracker.subscribeEvents.push(\"MSPointerOver\",\"MSPointerOut\",\"MSPointerDown\",\"MSPointerUp\",\"MSPointerMove\",\"MSPointerCancel\");$.MouseTracker.unprefixedPointerEvents=false;if(navigator.msMaxTouchPoints){$.MouseTracker.maxTouchPoints=navigator.msMaxTouchPoints;}else{$.MouseTracker.maxTouchPoints=0;}$.MouseTracker.haveMouseEnter=false;}else{// Legacy W3C mouse events\n$.MouseTracker.havePointerEvents=false;if($.Browser.vendor===$.BROWSERS.IE&&$.Browser.version<9){$.MouseTracker.subscribeEvents.push(\"mouseenter\",\"mouseleave\");$.MouseTracker.haveMouseEnter=true;}else{$.MouseTracker.subscribeEvents.push(\"mouseover\",\"mouseout\");$.MouseTracker.haveMouseEnter=false;}$.MouseTracker.subscribeEvents.push(\"mousedown\",\"mouseup\",\"mousemove\");if('ontouchstart'in window){// iOS, Android, and other W3c Touch Event implementations\n//    (see http://www.w3.org/TR/touch-events/)\n//    (see https://developer.apple.com/library/ios/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html)\n//    (see https://developer.apple.com/library/safari/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html)\n$.MouseTracker.subscribeEvents.push(\"touchstart\",\"touchend\",\"touchmove\",\"touchcancel\");}if('ongesturestart'in window){// iOS (see https://developer.apple.com/library/ios/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html)\n//   Subscribe to these to prevent default gesture handling\n$.MouseTracker.subscribeEvents.push(\"gesturestart\",\"gesturechange\");}$.MouseTracker.mousePointerId=\"legacy-mouse\";$.MouseTracker.maxTouchPoints=10;}///////////////////////////////////////////////////////////////////////////////\n// Classes and typedefs\n///////////////////////////////////////////////////////////////////////////////\n/**\n     * Represents a point of contact on the screen made by a mouse cursor, pen, touch, or other pointer device.\n     *\n     * @typedef {Object} GesturePoint\n     * @memberof OpenSeadragon.MouseTracker\n     *\n     * @property {Number} id\n     *     Identifier unique from all other active GesturePoints for a given pointer device.\n     * @property {String} type\n     *     The pointer device type: \"mouse\", \"touch\", \"pen\", etc.\n     * @property {Boolean} captured\n     *     True if events for the gesture point are captured to the tracked element.\n     * @property {Boolean} isPrimary\n     *     True if the gesture point is a master pointer amongst the set of active pointers for each pointer type. True for mouse and primary (first) touch/pen pointers.\n     * @property {Boolean} insideElementPressed\n     *     True if button pressed or contact point initiated inside the screen area of the tracked element.\n     * @property {Boolean} insideElement\n     *     True if pointer or contact point is currently inside the bounds of the tracked element.\n     * @property {Number} speed\n     *     Current computed speed, in pixels per second.\n     * @property {Number} direction\n     *     Current computed direction, expressed as an angle counterclockwise relative to the positive X axis (-pi to pi, in radians). Only valid if speed > 0.\n     * @property {OpenSeadragon.Point} contactPos\n     *     The initial pointer contact position, relative to the page including any scrolling. Only valid if the pointer has contact (pressed, touch contact, pen contact).\n     * @property {Number} contactTime\n     *     The initial pointer contact time, in milliseconds. Only valid if the pointer has contact (pressed, touch contact, pen contact).\n     * @property {OpenSeadragon.Point} lastPos\n     *     The last pointer position, relative to the page including any scrolling.\n     * @property {Number} lastTime\n     *     The last pointer contact time, in milliseconds.\n     * @property {OpenSeadragon.Point} currentPos\n     *     The current pointer position, relative to the page including any scrolling.\n     * @property {Number} currentTime\n     *     The current pointer contact time, in milliseconds.\n     */ /**\n     * @class GesturePointList\n     * @classdesc Provides an abstraction for a set of active {@link OpenSeadragon.MouseTracker.GesturePoint|GesturePoint} objects for a given pointer device type.\n     *            Active pointers are any pointer being tracked for this element which are in the hit-test area\n     *            of the element (for hover-capable devices) and/or have contact or a button press initiated in the element.\n     * @memberof OpenSeadragon.MouseTracker\n     * @param {String} type - The pointer device type: \"mouse\", \"touch\", \"pen\", etc.\n     */$.MouseTracker.GesturePointList=function(type){this._gPoints=[];/**\n         * The pointer device type: \"mouse\", \"touch\", \"pen\", etc.\n         * @member {String} type\n         * @memberof OpenSeadragon.MouseTracker.GesturePointList#\n         */this.type=type;/**\n         * Current buttons pressed for the device.\n         * Combination of bit flags 0: none, 1: primary (or touch contact), 2: secondary, 4: aux (often middle), 8: X1 (often back), 16: X2 (often forward), 32: pen eraser.\n         * @member {Number} buttons\n         * @memberof OpenSeadragon.MouseTracker.GesturePointList#\n         */this.buttons=0;/**\n         * Current number of contact points (touch points, mouse down, etc.) for the device.\n         * @member {Number} contacts\n         * @memberof OpenSeadragon.MouseTracker.GesturePointList#\n         */this.contacts=0;/**\n         * Current number of clicks for the device. Used for multiple click gesture tracking.\n         * @member {Number} clicks\n         * @memberof OpenSeadragon.MouseTracker.GesturePointList#\n         */this.clicks=0;/**\n         * Current number of captured pointers for the device.\n         * @member {Number} captureCount\n         * @memberof OpenSeadragon.MouseTracker.GesturePointList#\n         */this.captureCount=0;};/** @lends OpenSeadragon.MouseTracker.GesturePointList.prototype */$.MouseTracker.GesturePointList.prototype={/**\n         * @function\n         * @returns {Number} Number of gesture points in the list.\n         */getLength:function getLength(){return this._gPoints.length;},/**\n         * @function\n         * @returns {Array.<OpenSeadragon.MouseTracker.GesturePoint>} The list of gesture points in the list as an array (read-only).\n         */asArray:function asArray(){return this._gPoints;},/**\n         * @function\n         * @param {OpenSeadragon.MouseTracker.GesturePoint} gesturePoint - A gesture point to add to the list.\n         * @returns {Number} Number of gesture points in the list.\n         */add:function add(gp){return this._gPoints.push(gp);},/**\n         * @function\n         * @param {Number} id - The id of the gesture point to remove from the list.\n         * @returns {Number} Number of gesture points in the list.\n         */removeById:function removeById(id){var i,len=this._gPoints.length;for(i=0;i<len;i++){if(this._gPoints[i].id===id){this._gPoints.splice(i,1);break;}}return this._gPoints.length;},/**\n         * @function\n         * @param {Number} index - The index of the gesture point to retrieve from the list.\n         * @returns {OpenSeadragon.MouseTracker.GesturePoint|null} The gesture point at the given index, or null if not found.\n         */getByIndex:function getByIndex(index){if(index<this._gPoints.length){return this._gPoints[index];}return null;},/**\n         * @function\n         * @param {Number} id - The id of the gesture point to retrieve from the list.\n         * @returns {OpenSeadragon.MouseTracker.GesturePoint|null} The gesture point with the given id, or null if not found.\n         */getById:function getById(id){var i,len=this._gPoints.length;for(i=0;i<len;i++){if(this._gPoints[i].id===id){return this._gPoints[i];}}return null;},/**\n         * @function\n         * @returns {OpenSeadragon.MouseTracker.GesturePoint|null} The primary gesture point in the list, or null if not found.\n         */getPrimary:function getPrimary(id){var i,len=this._gPoints.length;for(i=0;i<len;i++){if(this._gPoints[i].isPrimary){return this._gPoints[i];}}return null;},/**\n         * Increment this pointer's contact count.\n         * It will evaluate whether this pointer type is allowed to have multiple contacts.\n         * @function\n         */addContact:function addContact(){++this.contacts;if(this.contacts>1&&(this.type===\"mouse\"||this.type===\"pen\")){this.contacts=1;}},/**\n         * Decrement this pointer's contact count.\n         * It will make sure the count does not go below 0.\n         * @function\n         */removeContact:function removeContact(){--this.contacts;if(this.contacts<0){this.contacts=0;}}};///////////////////////////////////////////////////////////////////////////////\n// Utility functions\n///////////////////////////////////////////////////////////////////////////////\n/**\n     * Removes all tracked pointers.\n     * @private\n     * @inner\n     */function clearTrackedPointers(tracker){var delegate=THIS[tracker.hash],i,pointerListCount=delegate.activePointersLists.length;for(i=0;i<pointerListCount;i++){if(delegate.activePointersLists[i].captureCount>0){$.removeEvent($.MouseTracker.captureElement,'mousemove',delegate.mousemovecaptured,true);$.removeEvent($.MouseTracker.captureElement,'mouseup',delegate.mouseupcaptured,true);$.removeEvent($.MouseTracker.captureElement,$.MouseTracker.unprefixedPointerEvents?'pointermove':'MSPointerMove',delegate.pointermovecaptured,true);$.removeEvent($.MouseTracker.captureElement,$.MouseTracker.unprefixedPointerEvents?'pointerup':'MSPointerUp',delegate.pointerupcaptured,true);$.removeEvent($.MouseTracker.captureElement,'touchmove',delegate.touchmovecaptured,true);$.removeEvent($.MouseTracker.captureElement,'touchend',delegate.touchendcaptured,true);delegate.activePointersLists[i].captureCount=0;}}for(i=0;i<pointerListCount;i++){delegate.activePointersLists.pop();}}/**\n     * Starts tracking pointer events on the tracked element.\n     * @private\n     * @inner\n     */function startTracking(tracker){var delegate=THIS[tracker.hash],event,i;if(!delegate.tracking){for(i=0;i<$.MouseTracker.subscribeEvents.length;i++){event=$.MouseTracker.subscribeEvents[i];$.addEvent(tracker.element,event,delegate[event],false);}clearTrackedPointers(tracker);delegate.tracking=true;}}/**\n     * Stops tracking pointer events on the tracked element.\n     * @private\n     * @inner\n     */function stopTracking(tracker){var delegate=THIS[tracker.hash],event,i;if(delegate.tracking){for(i=0;i<$.MouseTracker.subscribeEvents.length;i++){event=$.MouseTracker.subscribeEvents[i];$.removeEvent(tracker.element,event,delegate[event],false);}clearTrackedPointers(tracker);delegate.tracking=false;}}/**\n     * @private\n     * @inner\n     */function getCaptureEventParams(tracker,pointerType){var delegate=THIS[tracker.hash];if(pointerType==='pointerevent'){return{upName:$.MouseTracker.unprefixedPointerEvents?'pointerup':'MSPointerUp',upHandler:delegate.pointerupcaptured,moveName:$.MouseTracker.unprefixedPointerEvents?'pointermove':'MSPointerMove',moveHandler:delegate.pointermovecaptured};}else if(pointerType==='mouse'){return{upName:'mouseup',upHandler:delegate.mouseupcaptured,moveName:'mousemove',moveHandler:delegate.mousemovecaptured};}else if(pointerType==='touch'){return{upName:'touchend',upHandler:delegate.touchendcaptured,moveName:'touchmove',moveHandler:delegate.touchmovecaptured};}else{throw new Error(\"MouseTracker.getCaptureEventParams: Unknown pointer type.\");}}/**\n     * Begin capturing pointer events to the tracked element.\n     * @private\n     * @inner\n     */function capturePointer(tracker,pointerType,pointerCount){var pointsList=tracker.getActivePointersListByType(pointerType),eventParams;pointsList.captureCount+=pointerCount||1;if(pointsList.captureCount===1){if($.Browser.vendor===$.BROWSERS.IE&&$.Browser.version<9){tracker.element.setCapture(true);}else{eventParams=getCaptureEventParams(tracker,$.MouseTracker.havePointerEvents?'pointerevent':pointerType);// We emulate mouse capture by hanging listeners on the document object.\n//    (Note we listen on the capture phase so the captured handlers will get called first)\n// eslint-disable-next-line no-use-before-define\nif(isInIframe&&canAccessEvents(window.top)){$.addEvent(window.top,eventParams.upName,eventParams.upHandler,true);}$.addEvent($.MouseTracker.captureElement,eventParams.upName,eventParams.upHandler,true);$.addEvent($.MouseTracker.captureElement,eventParams.moveName,eventParams.moveHandler,true);}}}/**\n     * Stop capturing pointer events to the tracked element.\n     * @private\n     * @inner\n     */function releasePointer(tracker,pointerType,pointerCount){var pointsList=tracker.getActivePointersListByType(pointerType),eventParams;pointsList.captureCount-=pointerCount||1;if(pointsList.captureCount===0){if($.Browser.vendor===$.BROWSERS.IE&&$.Browser.version<9){tracker.element.releaseCapture();}else{eventParams=getCaptureEventParams(tracker,$.MouseTracker.havePointerEvents?'pointerevent':pointerType);// We emulate mouse capture by hanging listeners on the document object.\n//    (Note we listen on the capture phase so the captured handlers will get called first)\n// eslint-disable-next-line no-use-before-define\nif(isInIframe&&canAccessEvents(window.top)){$.removeEvent(window.top,eventParams.upName,eventParams.upHandler,true);}$.removeEvent($.MouseTracker.captureElement,eventParams.moveName,eventParams.moveHandler,true);$.removeEvent($.MouseTracker.captureElement,eventParams.upName,eventParams.upHandler,true);}}}/**\n     * Gets a W3C Pointer Events model compatible pointer type string from a DOM pointer event.\n     * IE10 used a long integer value, but the W3C specification (and IE11+) use a string \"mouse\", \"touch\", \"pen\", etc.\n     * @private\n     * @inner\n     */function getPointerType(event){var pointerTypeStr;if($.MouseTracker.unprefixedPointerEvents){pointerTypeStr=event.pointerType;}else{// IE10\n//  MSPOINTER_TYPE_TOUCH: 0x00000002\n//  MSPOINTER_TYPE_PEN:   0x00000003\n//  MSPOINTER_TYPE_MOUSE: 0x00000004\nswitch(event.pointerType){case 0x00000002:pointerTypeStr='touch';break;case 0x00000003:pointerTypeStr='pen';break;case 0x00000004:pointerTypeStr='mouse';break;default:pointerTypeStr='';}}return pointerTypeStr;}/**\n     * @private\n     * @inner\n     */function getMouseAbsolute(event){return $.getMousePosition(event);}/**\n     * @private\n     * @inner\n     */function getMouseRelative(event,element){return getPointRelativeToAbsolute(getMouseAbsolute(event),element);}/**\n     * @private\n     * @inner\n     */function getPointRelativeToAbsolute(point,element){var offset=$.getElementOffset(element);return point.minus(offset);}/**\n     * @private\n     * @inner\n     */function getCenterPoint(point1,point2){return new $.Point((point1.x+point2.x)/2,(point1.y+point2.y)/2);}///////////////////////////////////////////////////////////////////////////////\n// Device-specific DOM event handlers\n///////////////////////////////////////////////////////////////////////////////\n/**\n     * @private\n     * @inner\n     */function onClick(tracker,event){if(tracker.clickHandler){$.cancelEvent(event);}}/**\n     * @private\n     * @inner\n     */function onDblClick(tracker,event){if(tracker.dblClickHandler){$.cancelEvent(event);}}/**\n     * @private\n     * @inner\n     */function onKeyDown(tracker,event){//$.console.log( \"keydown %s %s %s %s %s\", event.keyCode, event.charCode, event.ctrlKey, event.shiftKey, event.altKey );\nvar propagate;if(tracker.keyDownHandler){event=$.getEvent(event);propagate=tracker.keyDownHandler({eventSource:tracker,keyCode:event.keyCode?event.keyCode:event.charCode,ctrl:event.ctrlKey,shift:event.shiftKey,alt:event.altKey,meta:event.metaKey,originalEvent:event,preventDefaultAction:false,userData:tracker.userData});if(!propagate){$.cancelEvent(event);}}}/**\n     * @private\n     * @inner\n     */function onKeyUp(tracker,event){//$.console.log( \"keyup %s %s %s %s %s\", event.keyCode, event.charCode, event.ctrlKey, event.shiftKey, event.altKey );\nvar propagate;if(tracker.keyUpHandler){event=$.getEvent(event);propagate=tracker.keyUpHandler({eventSource:tracker,keyCode:event.keyCode?event.keyCode:event.charCode,ctrl:event.ctrlKey,shift:event.shiftKey,alt:event.altKey,meta:event.metaKey,originalEvent:event,preventDefaultAction:false,userData:tracker.userData});if(!propagate){$.cancelEvent(event);}}}/**\n     * @private\n     * @inner\n     */function onKeyPress(tracker,event){//$.console.log( \"keypress %s %s %s %s %s\", event.keyCode, event.charCode, event.ctrlKey, event.shiftKey, event.altKey );\nvar propagate;if(tracker.keyHandler){event=$.getEvent(event);propagate=tracker.keyHandler({eventSource:tracker,keyCode:event.keyCode?event.keyCode:event.charCode,ctrl:event.ctrlKey,shift:event.shiftKey,alt:event.altKey,meta:event.metaKey,originalEvent:event,preventDefaultAction:false,userData:tracker.userData});if(!propagate){$.cancelEvent(event);}}}/**\n     * @private\n     * @inner\n     */function onFocus(tracker,event){//console.log( \"focus %s\", event );\nvar propagate;if(tracker.focusHandler){event=$.getEvent(event);propagate=tracker.focusHandler({eventSource:tracker,originalEvent:event,preventDefaultAction:false,userData:tracker.userData});if(propagate===false){$.cancelEvent(event);}}}/**\n     * @private\n     * @inner\n     */function onBlur(tracker,event){//console.log( \"blur %s\", event );\nvar propagate;if(tracker.blurHandler){event=$.getEvent(event);propagate=tracker.blurHandler({eventSource:tracker,originalEvent:event,preventDefaultAction:false,userData:tracker.userData});if(propagate===false){$.cancelEvent(event);}}}/**\n     * Handler for 'wheel' events\n     *\n     * @private\n     * @inner\n     */function onWheel(tracker,event){handleWheelEvent(tracker,event,event);}/**\n     * Handler for 'mousewheel', 'DOMMouseScroll', and 'MozMousePixelScroll' events\n     *\n     * @private\n     * @inner\n     */function onMouseWheel(tracker,event){event=$.getEvent(event);// Simulate a 'wheel' event\nvar simulatedEvent={target:event.target||event.srcElement,type:\"wheel\",shiftKey:event.shiftKey||false,clientX:event.clientX,clientY:event.clientY,pageX:event.pageX?event.pageX:event.clientX,pageY:event.pageY?event.pageY:event.clientY,deltaMode:event.type==\"MozMousePixelScroll\"?0:1,// 0=pixel, 1=line, 2=page\ndeltaX:0,deltaZ:0};// Calculate deltaY\nif($.MouseTracker.wheelEventName==\"mousewheel\"){simulatedEvent.deltaY=-event.wheelDelta/$.DEFAULT_SETTINGS.pixelsPerWheelLine;}else{simulatedEvent.deltaY=event.detail;}handleWheelEvent(tracker,simulatedEvent,event);}/**\n     * Handles 'wheel' events.\n     * The event may be simulated by the legacy mouse wheel event handler (onMouseWheel()).\n     *\n     * @private\n     * @inner\n     */function handleWheelEvent(tracker,event,originalEvent){var nDelta=0,propagate;// The nDelta variable is gated to provide smooth z-index scrolling\n//   since the mouse wheel allows for substantial deltas meant for rapid\n//   y-index scrolling.\n// event.deltaMode: 0=pixel, 1=line, 2=page\n// TODO: Deltas in pixel mode should be accumulated then a scroll value computed after $.DEFAULT_SETTINGS.pixelsPerWheelLine threshold reached\nnDelta=event.deltaY<0?1:-1;if(tracker.scrollHandler){propagate=tracker.scrollHandler({eventSource:tracker,pointerType:'mouse',position:getMouseRelative(event,tracker.element),scroll:nDelta,shift:event.shiftKey,isTouchEvent:false,originalEvent:originalEvent,preventDefaultAction:false,userData:tracker.userData});if(propagate===false){$.cancelEvent(originalEvent);}}}/**\n     * @private\n     * @inner\n     */function isParentChild(parent,child){if(parent===child){return false;}while(child&&child!==parent){child=child.parentNode;}return child===parent;}/**\n     * Only used on IE 8\n     *\n     * @private\n     * @inner\n     */function onMouseEnter(tracker,event){event=$.getEvent(event);handleMouseEnter(tracker,event);}/**\n     * @private\n     * @inner\n     */function onMouseOver(tracker,event){event=$.getEvent(event);if(event.currentTarget===event.relatedTarget||isParentChild(event.currentTarget,event.relatedTarget)){return;}handleMouseEnter(tracker,event);}/**\n     * @private\n     * @inner\n     */function handleMouseEnter(tracker,event){var gPoint={id:$.MouseTracker.mousePointerId,type:'mouse',isPrimary:true,currentPos:getMouseAbsolute(event),currentTime:$.now()};updatePointersEnter(tracker,event,[gPoint]);}/**\n     * Only used on IE 8\n     *\n     * @private\n     * @inner\n     */function onMouseLeave(tracker,event){event=$.getEvent(event);handleMouseExit(tracker,event);}/**\n     * @private\n     * @inner\n     */function onMouseOut(tracker,event){event=$.getEvent(event);if(event.currentTarget===event.relatedTarget||isParentChild(event.currentTarget,event.relatedTarget)){return;}handleMouseExit(tracker,event);}/**\n     * @private\n     * @inner\n     */function handleMouseExit(tracker,event){var gPoint={id:$.MouseTracker.mousePointerId,type:'mouse',isPrimary:true,currentPos:getMouseAbsolute(event),currentTime:$.now()};updatePointersExit(tracker,event,[gPoint]);}/**\n     * Returns a W3C DOM level 3 standard button value given an event.button property:\n     *   -1 == none, 0 == primary/left, 1 == middle, 2 == secondary/right, 3 == X1/back, 4 == X2/forward, 5 == eraser (pen)\n     * @private\n     * @inner\n     */function getStandardizedButton(button){if($.Browser.vendor===$.BROWSERS.IE&&$.Browser.version<9){// On IE 8, 0 == none, 1 == left, 2 == right, 3 == left and right, 4 == middle, 5 == left and middle, 6 == right and middle, 7 == all three\n// TODO: Support chorded (multiple) button presses on IE 8?\nif(button===1){return 0;}else if(button===2){return 2;}else if(button===4){return 1;}else{return-1;}}else{return button;}}/**\n     * @private\n     * @inner\n     */function onMouseDown(tracker,event){var gPoint;event=$.getEvent(event);gPoint={id:$.MouseTracker.mousePointerId,type:'mouse',isPrimary:true,currentPos:getMouseAbsolute(event),currentTime:$.now()};if(updatePointersDown(tracker,event,[gPoint],getStandardizedButton(event.button))){$.stopEvent(event);capturePointer(tracker,'mouse');}if(tracker.clickHandler||tracker.dblClickHandler||tracker.pressHandler||tracker.dragHandler||tracker.dragEndHandler){$.cancelEvent(event);}}/**\n     * @private\n     * @inner\n     */function onMouseUp(tracker,event){handleMouseUp(tracker,event);}/**\n     * This handler is attached to the window object (on the capture phase) to emulate mouse capture.\n     * onMouseUp is still attached to the tracked element, so stop propagation to avoid processing twice.\n     *\n     * @private\n     * @inner\n     */function onMouseUpCaptured(tracker,event){handleMouseUp(tracker,event);$.stopEvent(event);}/**\n     * @private\n     * @inner\n     */function handleMouseUp(tracker,event){var gPoint;event=$.getEvent(event);gPoint={id:$.MouseTracker.mousePointerId,type:'mouse',isPrimary:true,currentPos:getMouseAbsolute(event),currentTime:$.now()};if(updatePointersUp(tracker,event,[gPoint],getStandardizedButton(event.button))){releasePointer(tracker,'mouse');}}/**\n     * @private\n     * @inner\n     */function onMouseMove(tracker,event){handleMouseMove(tracker,event);}/**\n     * This handler is attached to the window object (on the capture phase) to emulate mouse capture.\n     * onMouseMove is still attached to the tracked element, so stop propagation to avoid processing twice.\n     *\n     * @private\n     * @inner\n     */function onMouseMoveCaptured(tracker,event){handleMouseMove(tracker,event);$.stopEvent(event);}/**\n     * @private\n     * @inner\n     */function handleMouseMove(tracker,event){var gPoint;event=$.getEvent(event);gPoint={id:$.MouseTracker.mousePointerId,type:'mouse',isPrimary:true,currentPos:getMouseAbsolute(event),currentTime:$.now()};updatePointersMove(tracker,event,[gPoint]);}/**\n     * @private\n     * @inner\n     */function abortContacts(tracker,event,pointsList){var i,gPointCount=pointsList.getLength(),abortGPoints=[];// Check contact count for hoverable pointer types before aborting\nif(pointsList.type==='touch'||pointsList.contacts>0){for(i=0;i<gPointCount;i++){abortGPoints.push(pointsList.getByIndex(i));}if(abortGPoints.length>0){// simulate touchend/mouseup\nupdatePointersUp(tracker,event,abortGPoints,0);// 0 means primary button press/release or touch contact\n// release pointer capture\npointsList.captureCount=1;releasePointer(tracker,pointsList.type);// simulate touchleave/mouseout\nupdatePointersExit(tracker,event,abortGPoints);}}}/**\n     * @private\n     * @inner\n     */function onTouchStart(tracker,event){var time,i,j,touchCount=event.changedTouches.length,gPoints=[],parentGPoints,pointsList=tracker.getActivePointersListByType('touch');time=$.now();if(pointsList.getLength()>event.touches.length-touchCount){$.console.warn('Tracked touch contact count doesn\\'t match event.touches.length. Removing all tracked touch pointers.');abortContacts(tracker,event,pointsList);}for(i=0;i<touchCount;i++){gPoints.push({id:event.changedTouches[i].identifier,type:'touch',// isPrimary not set - let the updatePointers functions determine it\ncurrentPos:getMouseAbsolute(event.changedTouches[i]),currentTime:time});}// simulate touchenter on our tracked element\nupdatePointersEnter(tracker,event,gPoints);// simulate touchenter on our tracked element's tracked ancestor elements\nfor(i=0;i<MOUSETRACKERS.length;i++){if(MOUSETRACKERS[i]!==tracker&&MOUSETRACKERS[i].isTracking()&&isParentChild(MOUSETRACKERS[i].element,tracker.element)){parentGPoints=[];for(j=0;j<touchCount;j++){parentGPoints.push({id:event.changedTouches[j].identifier,type:'touch',// isPrimary not set - let the updatePointers functions determine it\ncurrentPos:getMouseAbsolute(event.changedTouches[j]),currentTime:time});}updatePointersEnter(MOUSETRACKERS[i],event,parentGPoints);}}if(updatePointersDown(tracker,event,gPoints,0)){// 0 means primary button press/release or touch contact\n$.stopEvent(event);capturePointer(tracker,'touch',touchCount);}$.cancelEvent(event);}/**\n     * @private\n     * @inner\n     */function onTouchEnd(tracker,event){handleTouchEnd(tracker,event);}/**\n     * This handler is attached to the window object (on the capture phase) to emulate pointer capture.\n     * onTouchEnd is still attached to the tracked element, so stop propagation to avoid processing twice.\n     *\n     * @private\n     * @inner\n     */function onTouchEndCaptured(tracker,event){handleTouchEnd(tracker,event);$.stopEvent(event);}/**\n     * @private\n     * @inner\n     */function handleTouchEnd(tracker,event){var time,i,j,touchCount=event.changedTouches.length,gPoints=[],parentGPoints;time=$.now();for(i=0;i<touchCount;i++){gPoints.push({id:event.changedTouches[i].identifier,type:'touch',// isPrimary not set - let the updatePointers functions determine it\ncurrentPos:getMouseAbsolute(event.changedTouches[i]),currentTime:time});}if(updatePointersUp(tracker,event,gPoints,0)){releasePointer(tracker,'touch',touchCount);}// simulate touchleave on our tracked element\nupdatePointersExit(tracker,event,gPoints);// simulate touchleave on our tracked element's tracked ancestor elements\nfor(i=0;i<MOUSETRACKERS.length;i++){if(MOUSETRACKERS[i]!==tracker&&MOUSETRACKERS[i].isTracking()&&isParentChild(MOUSETRACKERS[i].element,tracker.element)){parentGPoints=[];for(j=0;j<touchCount;j++){parentGPoints.push({id:event.changedTouches[j].identifier,type:'touch',// isPrimary not set - let the updatePointers functions determine it\ncurrentPos:getMouseAbsolute(event.changedTouches[j]),currentTime:time});}updatePointersExit(MOUSETRACKERS[i],event,parentGPoints);}}$.cancelEvent(event);}/**\n     * @private\n     * @inner\n     */function onTouchMove(tracker,event){handleTouchMove(tracker,event);}/**\n     * This handler is attached to the window object (on the capture phase) to emulate pointer capture.\n     * onTouchMove is still attached to the tracked element, so stop propagation to avoid processing twice.\n     *\n     * @private\n     * @inner\n     */function onTouchMoveCaptured(tracker,event){handleTouchMove(tracker,event);$.stopEvent(event);}/**\n     * @private\n     * @inner\n     */function handleTouchMove(tracker,event){var i,touchCount=event.changedTouches.length,gPoints=[];for(i=0;i<touchCount;i++){gPoints.push({id:event.changedTouches[i].identifier,type:'touch',// isPrimary not set - let the updatePointers functions determine it\ncurrentPos:getMouseAbsolute(event.changedTouches[i]),currentTime:$.now()});}updatePointersMove(tracker,event,gPoints);$.cancelEvent(event);}/**\n     * @private\n     * @inner\n     */function onTouchCancel(tracker,event){var pointsList=tracker.getActivePointersListByType('touch');abortContacts(tracker,event,pointsList);}/**\n     * @private\n     * @inner\n     */function onGestureStart(tracker,event){event.stopPropagation();event.preventDefault();return false;}/**\n     * @private\n     * @inner\n     */function onGestureChange(tracker,event){event.stopPropagation();event.preventDefault();return false;}/**\n     * @private\n     * @inner\n     */function onPointerOver(tracker,event){var gPoint;if(event.currentTarget===event.relatedTarget||isParentChild(event.currentTarget,event.relatedTarget)){return;}gPoint={id:event.pointerId,type:getPointerType(event),isPrimary:event.isPrimary,currentPos:getMouseAbsolute(event),currentTime:$.now()};updatePointersEnter(tracker,event,[gPoint]);}/**\n     * @private\n     * @inner\n     */function onPointerOut(tracker,event){var gPoint;if(event.currentTarget===event.relatedTarget||isParentChild(event.currentTarget,event.relatedTarget)){return;}gPoint={id:event.pointerId,type:getPointerType(event),isPrimary:event.isPrimary,currentPos:getMouseAbsolute(event),currentTime:$.now()};updatePointersExit(tracker,event,[gPoint]);}/**\n     * @private\n     * @inner\n     */function onPointerDown(tracker,event){var gPoint;gPoint={id:event.pointerId,type:getPointerType(event),isPrimary:event.isPrimary,currentPos:getMouseAbsolute(event),currentTime:$.now()};if(updatePointersDown(tracker,event,[gPoint],event.button)){$.stopEvent(event);capturePointer(tracker,gPoint.type);}if(tracker.clickHandler||tracker.dblClickHandler||tracker.pressHandler||tracker.dragHandler||tracker.dragEndHandler||tracker.pinchHandler){$.cancelEvent(event);}}/**\n     * @private\n     * @inner\n     */function onPointerUp(tracker,event){handlePointerUp(tracker,event);}/**\n     * This handler is attached to the window object (on the capture phase) to emulate mouse capture.\n     * onPointerUp is still attached to the tracked element, so stop propagation to avoid processing twice.\n     *\n     * @private\n     * @inner\n     */function onPointerUpCaptured(tracker,event){var pointsList=tracker.getActivePointersListByType(getPointerType(event));if(pointsList.getById(event.pointerId)){handlePointerUp(tracker,event);}$.stopEvent(event);}/**\n     * @private\n     * @inner\n     */function handlePointerUp(tracker,event){var gPoint;gPoint={id:event.pointerId,type:getPointerType(event),isPrimary:event.isPrimary,currentPos:getMouseAbsolute(event),currentTime:$.now()};if(updatePointersUp(tracker,event,[gPoint],event.button)){releasePointer(tracker,gPoint.type);}}/**\n     * @private\n     * @inner\n     */function onPointerMove(tracker,event){handlePointerMove(tracker,event);}/**\n     * This handler is attached to the window object (on the capture phase) to emulate mouse capture.\n     * onPointerMove is still attached to the tracked element, so stop propagation to avoid processing twice.\n     *\n     * @private\n     * @inner\n     */function onPointerMoveCaptured(tracker,event){var pointsList=tracker.getActivePointersListByType(getPointerType(event));if(pointsList.getById(event.pointerId)){handlePointerMove(tracker,event);}$.stopEvent(event);}/**\n     * @private\n     * @inner\n     */function handlePointerMove(tracker,event){// Pointer changed coordinates, button state, pressure, tilt, or contact geometry (e.g. width and height)\nvar gPoint;gPoint={id:event.pointerId,type:getPointerType(event),isPrimary:event.isPrimary,currentPos:getMouseAbsolute(event),currentTime:$.now()};updatePointersMove(tracker,event,[gPoint]);}/**\n     * @private\n     * @inner\n     */function onPointerCancel(tracker,event){var gPoint;gPoint={id:event.pointerId,type:getPointerType(event)};updatePointersCancel(tracker,event,[gPoint]);}///////////////////////////////////////////////////////////////////////////////\n// Device-agnostic DOM event handlers\n///////////////////////////////////////////////////////////////////////////////\n/**\n     * @function\n     * @private\n     * @inner\n     * @param {OpenSeadragon.MouseTracker.GesturePointList} pointsList\n     *     The GesturePointList to track the pointer in.\n     * @param {OpenSeadragon.MouseTracker.GesturePoint} gPoint\n     *      Gesture point to track.\n     * @returns {Number} Number of gesture points in pointsList.\n     */function startTrackingPointer(pointsList,gPoint){// If isPrimary is not known for the pointer then set it according to our rules:\n//    true if the first pointer in the gesture, otherwise false\nif(!Object.prototype.hasOwnProperty.call(gPoint,'isPrimary')){if(pointsList.getLength()===0){gPoint.isPrimary=true;}else{gPoint.isPrimary=false;}}gPoint.speed=0;gPoint.direction=0;gPoint.contactPos=gPoint.currentPos;gPoint.contactTime=gPoint.currentTime;gPoint.lastPos=gPoint.currentPos;gPoint.lastTime=gPoint.currentTime;return pointsList.add(gPoint);}/**\n     * @function\n     * @private\n     * @inner\n     * @param {OpenSeadragon.MouseTracker.GesturePointList} pointsList\n     *     The GesturePointList to stop tracking the pointer on.\n     * @param {OpenSeadragon.MouseTracker.GesturePoint} gPoint\n     *      Gesture point to stop tracking.\n     * @returns {Number} Number of gesture points in pointsList.\n     */function stopTrackingPointer(pointsList,gPoint){var listLength,primaryPoint;if(pointsList.getById(gPoint.id)){listLength=pointsList.removeById(gPoint.id);// If isPrimary is not known for the pointer and we just removed the primary pointer from the list then we need to set another pointer as primary\nif(!Object.prototype.hasOwnProperty.call(gPoint,'isPrimary')){primaryPoint=pointsList.getPrimary();if(!primaryPoint){primaryPoint=pointsList.getByIndex(0);if(primaryPoint){primaryPoint.isPrimary=true;}}}}else{listLength=pointsList.getLength();}return listLength;}/**\n     * @function\n     * @private\n     * @inner\n     * @param {OpenSeadragon.MouseTracker} tracker\n     *     A reference to the MouseTracker instance.\n     * @param {Object} event\n     *     A reference to the originating DOM event.\n     * @param {Array.<OpenSeadragon.MouseTracker.GesturePoint>} gPoints\n     *      Gesture points associated with the event.\n     */function updatePointersEnter(tracker,event,gPoints){var pointsList=tracker.getActivePointersListByType(gPoints[0].type),i,gPointCount=gPoints.length,curGPoint,updateGPoint,propagate;for(i=0;i<gPointCount;i++){curGPoint=gPoints[i];updateGPoint=pointsList.getById(curGPoint.id);if(updateGPoint){// Already tracking the pointer...update it\nupdateGPoint.insideElement=true;updateGPoint.lastPos=updateGPoint.currentPos;updateGPoint.lastTime=updateGPoint.currentTime;updateGPoint.currentPos=curGPoint.currentPos;updateGPoint.currentTime=curGPoint.currentTime;curGPoint=updateGPoint;}else{// Initialize for tracking and add to the tracking list\ncurGPoint.captured=false;curGPoint.insideElementPressed=false;curGPoint.insideElement=true;startTrackingPointer(pointsList,curGPoint);}// Enter\nif(tracker.enterHandler){propagate=tracker.enterHandler({eventSource:tracker,pointerType:curGPoint.type,position:getPointRelativeToAbsolute(curGPoint.currentPos,tracker.element),buttons:pointsList.buttons,pointers:tracker.getActivePointerCount(),insideElementPressed:curGPoint.insideElementPressed,buttonDownAny:pointsList.buttons!==0,isTouchEvent:curGPoint.type==='touch',originalEvent:event,preventDefaultAction:false,userData:tracker.userData});if(propagate===false){$.cancelEvent(event);}}}}/**\n     * @function\n     * @private\n     * @inner\n     * @param {OpenSeadragon.MouseTracker} tracker\n     *     A reference to the MouseTracker instance.\n     * @param {Object} event\n     *     A reference to the originating DOM event.\n     * @param {Array.<OpenSeadragon.MouseTracker.GesturePoint>} gPoints\n     *      Gesture points associated with the event.\n     */function updatePointersExit(tracker,event,gPoints){var pointsList=tracker.getActivePointersListByType(gPoints[0].type),i,gPointCount=gPoints.length,curGPoint,updateGPoint,propagate;for(i=0;i<gPointCount;i++){curGPoint=gPoints[i];updateGPoint=pointsList.getById(curGPoint.id);if(updateGPoint){// Already tracking the pointer. If captured then update it, else stop tracking it\nif(updateGPoint.captured){updateGPoint.insideElement=false;updateGPoint.lastPos=updateGPoint.currentPos;updateGPoint.lastTime=updateGPoint.currentTime;updateGPoint.currentPos=curGPoint.currentPos;updateGPoint.currentTime=curGPoint.currentTime;}else{stopTrackingPointer(pointsList,updateGPoint);}curGPoint=updateGPoint;}// Exit\nif(tracker.exitHandler){propagate=tracker.exitHandler({eventSource:tracker,pointerType:curGPoint.type,position:curGPoint.currentPos&&getPointRelativeToAbsolute(curGPoint.currentPos,tracker.element),buttons:pointsList.buttons,pointers:tracker.getActivePointerCount(),insideElementPressed:updateGPoint?updateGPoint.insideElementPressed:false,buttonDownAny:pointsList.buttons!==0,isTouchEvent:curGPoint.type==='touch',originalEvent:event,preventDefaultAction:false,userData:tracker.userData});if(propagate===false){$.cancelEvent(event);}}}}/**\n     * @function\n     * @private\n     * @inner\n     * @param {OpenSeadragon.MouseTracker} tracker\n     *     A reference to the MouseTracker instance.\n     * @param {Object} event\n     *     A reference to the originating DOM event.\n     * @param {Array.<OpenSeadragon.MouseTracker.GesturePoint>} gPoints\n     *      Gesture points associated with the event.\n     * @param {Number} buttonChanged\n     *      The button involved in the event: -1: none, 0: primary/left, 1: aux/middle, 2: secondary/right, 3: X1/back, 4: X2/forward, 5: pen eraser.\n     *      Note on chorded button presses (a button pressed when another button is already pressed): In the W3C Pointer Events model,\n     *      only one pointerdown/pointerup event combo is fired. Chorded button state changes instead fire pointermove events.\n     *\n     * @returns {Boolean} True if pointers should be captured to the tracked element, otherwise false.\n     */function updatePointersDown(tracker,event,gPoints,buttonChanged){var delegate=THIS[tracker.hash],propagate,pointsList=tracker.getActivePointersListByType(gPoints[0].type),i,gPointCount=gPoints.length,curGPoint,updateGPoint;if(typeof event.buttons!=='undefined'){pointsList.buttons=event.buttons;}else{if($.Browser.vendor===$.BROWSERS.IE&&$.Browser.version<9){if(buttonChanged===0){// Primary\npointsList.buttons+=1;}else if(buttonChanged===1){// Aux\npointsList.buttons+=4;}else if(buttonChanged===2){// Secondary\npointsList.buttons+=2;}else if(buttonChanged===3){// X1 (Back)\npointsList.buttons+=8;}else if(buttonChanged===4){// X2 (Forward)\npointsList.buttons+=16;}else if(buttonChanged===5){// Pen Eraser\npointsList.buttons+=32;}}else{if(buttonChanged===0){// Primary\npointsList.buttons|=1;}else if(buttonChanged===1){// Aux\npointsList.buttons|=4;}else if(buttonChanged===2){// Secondary\npointsList.buttons|=2;}else if(buttonChanged===3){// X1 (Back)\npointsList.buttons|=8;}else if(buttonChanged===4){// X2 (Forward)\npointsList.buttons|=16;}else if(buttonChanged===5){// Pen Eraser\npointsList.buttons|=32;}}}// Some pointers may steal control from another pointer without firing the appropriate release events\n// e.g. Touching a screen while click-dragging with certain mice.\nvar otherPointsLists=tracker.getActivePointersListsExceptType(gPoints[0].type);for(i=0;i<otherPointsLists.length;i++){//If another pointer has contact, simulate the release\nabortContacts(tracker,event,otherPointsLists[i]);// No-op if no active pointer\n}// Only capture and track primary button, pen, and touch contacts\nif(buttonChanged!==0){// Aux Press\nif(tracker.nonPrimaryPressHandler){propagate=tracker.nonPrimaryPressHandler({eventSource:tracker,pointerType:gPoints[0].type,position:getPointRelativeToAbsolute(gPoints[0].currentPos,tracker.element),button:buttonChanged,buttons:pointsList.buttons,isTouchEvent:gPoints[0].type==='touch',originalEvent:event,preventDefaultAction:false,userData:tracker.userData});if(propagate===false){$.cancelEvent(event);}}return false;}for(i=0;i<gPointCount;i++){curGPoint=gPoints[i];updateGPoint=pointsList.getById(curGPoint.id);if(updateGPoint){// Already tracking the pointer...update it\nupdateGPoint.captured=true;updateGPoint.insideElementPressed=true;updateGPoint.insideElement=true;updateGPoint.contactPos=curGPoint.currentPos;updateGPoint.contactTime=curGPoint.currentTime;updateGPoint.lastPos=updateGPoint.currentPos;updateGPoint.lastTime=updateGPoint.currentTime;updateGPoint.currentPos=curGPoint.currentPos;updateGPoint.currentTime=curGPoint.currentTime;curGPoint=updateGPoint;}else{// Initialize for tracking and add to the tracking list (no pointerover or pointermove event occurred before this)\ncurGPoint.captured=true;curGPoint.insideElementPressed=true;curGPoint.insideElement=true;startTrackingPointer(pointsList,curGPoint);}pointsList.addContact();//$.console.log('contacts++ ', pointsList.contacts);\nif(tracker.dragHandler||tracker.dragEndHandler||tracker.pinchHandler){$.MouseTracker.gesturePointVelocityTracker.addPoint(tracker,curGPoint);}if(pointsList.contacts===1){// Press\nif(tracker.pressHandler){propagate=tracker.pressHandler({eventSource:tracker,pointerType:curGPoint.type,position:getPointRelativeToAbsolute(curGPoint.contactPos,tracker.element),buttons:pointsList.buttons,isTouchEvent:curGPoint.type==='touch',originalEvent:event,preventDefaultAction:false,userData:tracker.userData});if(propagate===false){$.cancelEvent(event);}}}else if(pointsList.contacts===2){if(tracker.pinchHandler&&curGPoint.type==='touch'){// Initialize for pinch\ndelegate.pinchGPoints=pointsList.asArray();delegate.lastPinchDist=delegate.currentPinchDist=delegate.pinchGPoints[0].currentPos.distanceTo(delegate.pinchGPoints[1].currentPos);delegate.lastPinchCenter=delegate.currentPinchCenter=getCenterPoint(delegate.pinchGPoints[0].currentPos,delegate.pinchGPoints[1].currentPos);}}}return true;}/**\n     * @function\n     * @private\n     * @inner\n     * @param {OpenSeadragon.MouseTracker} tracker\n     *     A reference to the MouseTracker instance.\n     * @param {Object} event\n     *     A reference to the originating DOM event.\n     * @param {Array.<OpenSeadragon.MouseTracker.GesturePoint>} gPoints\n     *      Gesture points associated with the event.\n     * @param {Number} buttonChanged\n     *      The button involved in the event: -1: none, 0: primary/left, 1: aux/middle, 2: secondary/right, 3: X1/back, 4: X2/forward, 5: pen eraser.\n     *      Note on chorded button presses (a button pressed when another button is already pressed): In the W3C Pointer Events model,\n     *      only one pointerdown/pointerup event combo is fired. Chorded button state changes instead fire pointermove events.\n     *\n     * @returns {Boolean} True if pointer capture should be released from the tracked element, otherwise false.\n     */function updatePointersUp(tracker,event,gPoints,buttonChanged){var delegate=THIS[tracker.hash],pointsList=tracker.getActivePointersListByType(gPoints[0].type),propagate,releasePoint,releaseTime,i,gPointCount=gPoints.length,curGPoint,updateGPoint,releaseCapture=false,wasCaptured=false,quick;if(typeof event.buttons!=='undefined'){pointsList.buttons=event.buttons;}else{if($.Browser.vendor===$.BROWSERS.IE&&$.Browser.version<9){if(buttonChanged===0){// Primary\npointsList.buttons-=1;}else if(buttonChanged===1){// Aux\npointsList.buttons-=4;}else if(buttonChanged===2){// Secondary\npointsList.buttons-=2;}else if(buttonChanged===3){// X1 (Back)\npointsList.buttons-=8;}else if(buttonChanged===4){// X2 (Forward)\npointsList.buttons-=16;}else if(buttonChanged===5){// Pen Eraser\npointsList.buttons-=32;}}else{if(buttonChanged===0){// Primary\npointsList.buttons^=~1;}else if(buttonChanged===1){// Aux\npointsList.buttons^=~4;}else if(buttonChanged===2){// Secondary\npointsList.buttons^=~2;}else if(buttonChanged===3){// X1 (Back)\npointsList.buttons^=~8;}else if(buttonChanged===4){// X2 (Forward)\npointsList.buttons^=~16;}else if(buttonChanged===5){// Pen Eraser\npointsList.buttons^=~32;}}}// Only capture and track primary button, pen, and touch contacts\nif(buttonChanged!==0){// Aux Release\nif(tracker.nonPrimaryReleaseHandler){propagate=tracker.nonPrimaryReleaseHandler({eventSource:tracker,pointerType:gPoints[0].type,position:getPointRelativeToAbsolute(gPoints[0].currentPos,tracker.element),button:buttonChanged,buttons:pointsList.buttons,isTouchEvent:gPoints[0].type==='touch',originalEvent:event,preventDefaultAction:false,userData:tracker.userData});if(propagate===false){$.cancelEvent(event);}}// A primary mouse button may have been released while the non-primary button was down\nvar otherPointsList=tracker.getActivePointersListByType(\"mouse\");// Stop tracking the mouse; see https://github.com/openseadragon/openseadragon/pull/1223\nabortContacts(tracker,event,otherPointsList);// No-op if no active pointer\nreturn false;}// OS-specific gestures (e.g. swipe up with four fingers in iPadOS 13)\nif(typeof gPoints[0].currentPos===\"undefined\"){abortContacts(tracker,event,pointsList);return false;}for(i=0;i<gPointCount;i++){curGPoint=gPoints[i];updateGPoint=pointsList.getById(curGPoint.id);if(updateGPoint){// Update the pointer, stop tracking it if not still in this element\nif(updateGPoint.captured){updateGPoint.captured=false;releaseCapture=true;wasCaptured=true;}updateGPoint.lastPos=updateGPoint.currentPos;updateGPoint.lastTime=updateGPoint.currentTime;updateGPoint.currentPos=curGPoint.currentPos;updateGPoint.currentTime=curGPoint.currentTime;if(!updateGPoint.insideElement){stopTrackingPointer(pointsList,updateGPoint);}releasePoint=updateGPoint.currentPos;releaseTime=updateGPoint.currentTime;if(wasCaptured){// Pointer was activated in our element but could have been removed in any element since events are captured to our element\npointsList.removeContact();//$.console.log('contacts-- ', pointsList.contacts);\nif(tracker.dragHandler||tracker.dragEndHandler||tracker.pinchHandler){$.MouseTracker.gesturePointVelocityTracker.removePoint(tracker,updateGPoint);}if(pointsList.contacts===0){// Release (pressed in our element)\nif(tracker.releaseHandler){propagate=tracker.releaseHandler({eventSource:tracker,pointerType:updateGPoint.type,position:getPointRelativeToAbsolute(releasePoint,tracker.element),buttons:pointsList.buttons,insideElementPressed:updateGPoint.insideElementPressed,insideElementReleased:updateGPoint.insideElement,isTouchEvent:updateGPoint.type==='touch',originalEvent:event,preventDefaultAction:false,userData:tracker.userData});if(propagate===false){$.cancelEvent(event);}}// Drag End\nif(tracker.dragEndHandler&&!updateGPoint.currentPos.equals(updateGPoint.contactPos)){propagate=tracker.dragEndHandler({eventSource:tracker,pointerType:updateGPoint.type,position:getPointRelativeToAbsolute(updateGPoint.currentPos,tracker.element),speed:updateGPoint.speed,direction:updateGPoint.direction,shift:event.shiftKey,isTouchEvent:updateGPoint.type==='touch',originalEvent:event,preventDefaultAction:false,userData:tracker.userData});if(propagate===false){$.cancelEvent(event);}}// Click / Double-Click\nif((tracker.clickHandler||tracker.dblClickHandler)&&updateGPoint.insideElement){quick=releaseTime-updateGPoint.contactTime<=tracker.clickTimeThreshold&&updateGPoint.contactPos.distanceTo(releasePoint)<=tracker.clickDistThreshold;// Click\nif(tracker.clickHandler){propagate=tracker.clickHandler({eventSource:tracker,pointerType:updateGPoint.type,position:getPointRelativeToAbsolute(updateGPoint.currentPos,tracker.element),quick:quick,shift:event.shiftKey,isTouchEvent:updateGPoint.type==='touch',originalEvent:event,preventDefaultAction:false,userData:tracker.userData});if(propagate===false){$.cancelEvent(event);}}// Double-Click\nif(tracker.dblClickHandler&&quick){pointsList.clicks++;if(pointsList.clicks===1){delegate.lastClickPos=releasePoint;/*jshint loopfunc:true*/delegate.dblClickTimeOut=setTimeout(function(){pointsList.clicks=0;},tracker.dblClickTimeThreshold);/*jshint loopfunc:false*/}else if(pointsList.clicks===2){clearTimeout(delegate.dblClickTimeOut);pointsList.clicks=0;if(delegate.lastClickPos.distanceTo(releasePoint)<=tracker.dblClickDistThreshold){propagate=tracker.dblClickHandler({eventSource:tracker,pointerType:updateGPoint.type,position:getPointRelativeToAbsolute(updateGPoint.currentPos,tracker.element),shift:event.shiftKey,isTouchEvent:updateGPoint.type==='touch',originalEvent:event,preventDefaultAction:false,userData:tracker.userData});if(propagate===false){$.cancelEvent(event);}}delegate.lastClickPos=null;}}}}else if(pointsList.contacts===2){if(tracker.pinchHandler&&updateGPoint.type==='touch'){// Reset for pinch\ndelegate.pinchGPoints=pointsList.asArray();delegate.lastPinchDist=delegate.currentPinchDist=delegate.pinchGPoints[0].currentPos.distanceTo(delegate.pinchGPoints[1].currentPos);delegate.lastPinchCenter=delegate.currentPinchCenter=getCenterPoint(delegate.pinchGPoints[0].currentPos,delegate.pinchGPoints[1].currentPos);}}}else{// Pointer was activated in another element but removed in our element\n// Release (pressed in another element)\nif(tracker.releaseHandler){propagate=tracker.releaseHandler({eventSource:tracker,pointerType:updateGPoint.type,position:getPointRelativeToAbsolute(releasePoint,tracker.element),buttons:pointsList.buttons,insideElementPressed:updateGPoint.insideElementPressed,insideElementReleased:updateGPoint.insideElement,isTouchEvent:updateGPoint.type==='touch',originalEvent:event,preventDefaultAction:false,userData:tracker.userData});if(propagate===false){$.cancelEvent(event);}}}}}return releaseCapture;}/**\n     * Call when pointer(s) change coordinates, button state, pressure, tilt, or contact geometry (e.g. width and height)\n     *\n     * @function\n     * @private\n     * @inner\n     * @param {OpenSeadragon.MouseTracker} tracker\n     *     A reference to the MouseTracker instance.\n     * @param {Object} event\n     *     A reference to the originating DOM event.\n     * @param {Array.<OpenSeadragon.MouseTracker.GesturePoint>} gPoints\n     *      Gesture points associated with the event.\n     */function updatePointersMove(tracker,event,gPoints){var delegate=THIS[tracker.hash],pointsList=tracker.getActivePointersListByType(gPoints[0].type),i,gPointCount=gPoints.length,curGPoint,updateGPoint,gPointArray,delta,propagate;if(typeof event.buttons!=='undefined'){pointsList.buttons=event.buttons;}for(i=0;i<gPointCount;i++){curGPoint=gPoints[i];updateGPoint=pointsList.getById(curGPoint.id);if(updateGPoint){// Already tracking the pointer...update it\nif(Object.prototype.hasOwnProperty.call(curGPoint,'isPrimary')){updateGPoint.isPrimary=curGPoint.isPrimary;}updateGPoint.lastPos=updateGPoint.currentPos;updateGPoint.lastTime=updateGPoint.currentTime;updateGPoint.currentPos=curGPoint.currentPos;updateGPoint.currentTime=curGPoint.currentTime;}else{// Initialize for tracking and add to the tracking list (no pointerover or pointerdown event occurred before this)\ncurGPoint.captured=false;curGPoint.insideElementPressed=false;curGPoint.insideElement=true;startTrackingPointer(pointsList,curGPoint);}}// Stop (mouse only)\nif(tracker.stopHandler&&gPoints[0].type==='mouse'){clearTimeout(tracker.stopTimeOut);tracker.stopTimeOut=setTimeout(function(){handlePointerStop(tracker,event,gPoints[0].type);},tracker.stopDelay);}if(pointsList.contacts===0){// Move (no contacts: hovering mouse or other hover-capable device)\nif(tracker.moveHandler){propagate=tracker.moveHandler({eventSource:tracker,pointerType:gPoints[0].type,position:getPointRelativeToAbsolute(gPoints[0].currentPos,tracker.element),buttons:pointsList.buttons,isTouchEvent:gPoints[0].type==='touch',originalEvent:event,preventDefaultAction:false,userData:tracker.userData});if(propagate===false){$.cancelEvent(event);}}}else if(pointsList.contacts===1){// Move (1 contact)\nif(tracker.moveHandler){updateGPoint=pointsList.asArray()[0];propagate=tracker.moveHandler({eventSource:tracker,pointerType:updateGPoint.type,position:getPointRelativeToAbsolute(updateGPoint.currentPos,tracker.element),buttons:pointsList.buttons,isTouchEvent:updateGPoint.type==='touch',originalEvent:event,preventDefaultAction:false,userData:tracker.userData});if(propagate===false){$.cancelEvent(event);}}// Drag\nif(tracker.dragHandler){updateGPoint=pointsList.asArray()[0];delta=updateGPoint.currentPos.minus(updateGPoint.lastPos);propagate=tracker.dragHandler({eventSource:tracker,pointerType:updateGPoint.type,position:getPointRelativeToAbsolute(updateGPoint.currentPos,tracker.element),buttons:pointsList.buttons,delta:delta,speed:updateGPoint.speed,direction:updateGPoint.direction,shift:event.shiftKey,isTouchEvent:updateGPoint.type==='touch',originalEvent:event,preventDefaultAction:false,userData:tracker.userData});if(propagate===false){$.cancelEvent(event);}}}else if(pointsList.contacts===2){// Move (2 contacts, use center)\nif(tracker.moveHandler){gPointArray=pointsList.asArray();propagate=tracker.moveHandler({eventSource:tracker,pointerType:gPointArray[0].type,position:getPointRelativeToAbsolute(getCenterPoint(gPointArray[0].currentPos,gPointArray[1].currentPos),tracker.element),buttons:pointsList.buttons,isTouchEvent:gPointArray[0].type==='touch',originalEvent:event,preventDefaultAction:false,userData:tracker.userData});if(propagate===false){$.cancelEvent(event);}}// Pinch\nif(tracker.pinchHandler&&gPoints[0].type==='touch'){delta=delegate.pinchGPoints[0].currentPos.distanceTo(delegate.pinchGPoints[1].currentPos);if(delta!=delegate.currentPinchDist){delegate.lastPinchDist=delegate.currentPinchDist;delegate.currentPinchDist=delta;delegate.lastPinchCenter=delegate.currentPinchCenter;delegate.currentPinchCenter=getCenterPoint(delegate.pinchGPoints[0].currentPos,delegate.pinchGPoints[1].currentPos);propagate=tracker.pinchHandler({eventSource:tracker,pointerType:'touch',gesturePoints:delegate.pinchGPoints,lastCenter:getPointRelativeToAbsolute(delegate.lastPinchCenter,tracker.element),center:getPointRelativeToAbsolute(delegate.currentPinchCenter,tracker.element),lastDistance:delegate.lastPinchDist,distance:delegate.currentPinchDist,shift:event.shiftKey,originalEvent:event,preventDefaultAction:false,userData:tracker.userData});if(propagate===false){$.cancelEvent(event);}}}}}/**\n     * @function\n     * @private\n     * @inner\n     * @param {OpenSeadragon.MouseTracker} tracker\n     *     A reference to the MouseTracker instance.\n     * @param {Object} event\n     *     A reference to the originating DOM event.\n     * @param {Array.<OpenSeadragon.MouseTracker.GesturePoint>} gPoints\n     *      Gesture points associated with the event.\n     */function updatePointersCancel(tracker,event,gPoints){updatePointersUp(tracker,event,gPoints,0);updatePointersExit(tracker,event,gPoints);}/**\n     * @private\n     * @inner\n     */function handlePointerStop(tracker,originalMoveEvent,pointerType){if(tracker.stopHandler){tracker.stopHandler({eventSource:tracker,pointerType:pointerType,position:getMouseRelative(originalMoveEvent,tracker.element),buttons:tracker.getActivePointersListByType(pointerType).buttons,isTouchEvent:pointerType==='touch',originalEvent:originalMoveEvent,preventDefaultAction:false,userData:tracker.userData});}}/**\n     * True if inside an iframe, otherwise false.\n     * @member {Boolean} isInIframe\n     * @private\n     * @inner\n     */var isInIframe=function(){try{return window.self!==window.top;}catch(e){return true;}}();/**\n     * @function\n     * @private\n     * @inner\n     * @returns {Boolean} True if the target has access rights to events, otherwise false.\n     */function canAccessEvents(target){try{return target.addEventListener&&target.removeEventListener;}catch(e){return false;}}})(OpenSeadragon);/*\n * OpenSeadragon - Control\n *\n * Copyright (C) 2009 CodePlex Foundation\n * Copyright (C) 2010-2013 OpenSeadragon contributors\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * - Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * - Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * - Neither the name of CodePlex Foundation nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */(function($){/**\n * An enumeration of supported locations where controls can be anchored.\n * The anchoring is always relative to the container.\n * @member ControlAnchor\n * @memberof OpenSeadragon\n * @static\n * @type {Object}\n * @property {Number} NONE\n * @property {Number} TOP_LEFT\n * @property {Number} TOP_RIGHT\n * @property {Number} BOTTOM_LEFT\n * @property {Number} BOTTOM_RIGHT\n * @property {Number} ABSOLUTE\n */$.ControlAnchor={NONE:0,TOP_LEFT:1,TOP_RIGHT:2,BOTTOM_RIGHT:3,BOTTOM_LEFT:4,ABSOLUTE:5};/**\n * @class Control\n * @classdesc A Control represents any interface element which is meant to allow the user\n * to interact with the zoomable interface. Any control can be anchored to any\n * element.\n *\n * @memberof OpenSeadragon\n * @param {Element} element - the control element to be anchored in the container.\n * @param {Object } options - All required and optional settings for configuring a control element.\n * @param {OpenSeadragon.ControlAnchor} [options.anchor=OpenSeadragon.ControlAnchor.NONE] - the position of the control\n *  relative to the container.\n * @param {Boolean} [options.attachToViewer=true] - Whether the control should be added directly to the viewer, or\n *  directly to the container\n * @param {Boolean} [options.autoFade=true] - Whether the control should have the autofade behavior\n * @param {Element} container - the element to control will be anchored too.\n */$.Control=function(element,options,container){var parent=element.parentNode;if(typeof options==='number'){$.console.error(\"Passing an anchor directly into the OpenSeadragon.Control constructor is deprecated; \"+\"please use an options object instead.  \"+\"Support for this deprecated variant is scheduled for removal in December 2013\");options={anchor:options};}options.attachToViewer=typeof options.attachToViewer==='undefined'?true:options.attachToViewer;/**\n     * True if the control should have autofade behavior.\n     * @member {Boolean} autoFade\n     * @memberof OpenSeadragon.Control#\n     */this.autoFade=typeof options.autoFade==='undefined'?true:options.autoFade;/**\n     * The element providing the user interface with some type of control (e.g. a zoom-in button).\n     * @member {Element} element\n     * @memberof OpenSeadragon.Control#\n     */this.element=element;/**\n     * The position of the Control relative to its container.\n     * @member {OpenSeadragon.ControlAnchor} anchor\n     * @memberof OpenSeadragon.Control#\n     */this.anchor=options.anchor;/**\n     * The Control's containing element.\n     * @member {Element} container\n     * @memberof OpenSeadragon.Control#\n     */this.container=container;/**\n     * A neutral element surrounding the control element.\n     * @member {Element} wrapper\n     * @memberof OpenSeadragon.Control#\n     */if(this.anchor==$.ControlAnchor.ABSOLUTE){this.wrapper=$.makeNeutralElement(\"div\");this.wrapper.style.position=\"absolute\";this.wrapper.style.top=typeof options.top==\"number\"?options.top+'px':options.top;this.wrapper.style.left=typeof options.left==\"number\"?options.left+'px':options.left;this.wrapper.style.height=typeof options.height==\"number\"?options.height+'px':options.height;this.wrapper.style.width=typeof options.width==\"number\"?options.width+'px':options.width;this.wrapper.style.margin=\"0px\";this.wrapper.style.padding=\"0px\";this.element.style.position=\"relative\";this.element.style.top=\"0px\";this.element.style.left=\"0px\";this.element.style.height=\"100%\";this.element.style.width=\"100%\";}else{this.wrapper=$.makeNeutralElement(\"div\");this.wrapper.style.display=\"inline-block\";if(this.anchor==$.ControlAnchor.NONE){// IE6 fix\nthis.wrapper.style.width=this.wrapper.style.height=\"100%\";}}this.wrapper.appendChild(this.element);if(options.attachToViewer){if(this.anchor==$.ControlAnchor.TOP_RIGHT||this.anchor==$.ControlAnchor.BOTTOM_RIGHT){this.container.insertBefore(this.wrapper,this.container.firstChild);}else{this.container.appendChild(this.wrapper);}}else{parent.appendChild(this.wrapper);}};/** @lends OpenSeadragon.Control.prototype */$.Control.prototype={/**\n     * Removes the control from the container.\n     * @function\n     */destroy:function destroy(){this.wrapper.removeChild(this.element);this.container.removeChild(this.wrapper);},/**\n     * Determines if the control is currently visible.\n     * @function\n     * @return {Boolean} true if currently visible, false otherwise.\n     */isVisible:function isVisible(){return this.wrapper.style.display!=\"none\";},/**\n     * Toggles the visibility of the control.\n     * @function\n     * @param {Boolean} visible - true to make visible, false to hide.\n     */setVisible:function setVisible(visible){this.wrapper.style.display=visible?this.anchor==$.ControlAnchor.ABSOLUTE?'block':'inline-block':\"none\";},/**\n     * Sets the opacity level for the control.\n     * @function\n     * @param {Number} opactiy - a value between 1 and 0 inclusively.\n     */setOpacity:function setOpacity(opacity){if(this.element[$.SIGNAL]&&$.Browser.vendor==$.BROWSERS.IE){$.setElementOpacity(this.element,opacity,true);}else{$.setElementOpacity(this.wrapper,opacity,true);}}};})(OpenSeadragon);/*\n * OpenSeadragon - ControlDock\n *\n * Copyright (C) 2009 CodePlex Foundation\n * Copyright (C) 2010-2013 OpenSeadragon contributors\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * - Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * - Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * - Neither the name of CodePlex Foundation nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */(function($){/**\n     * @class ControlDock\n     * @classdesc Provides a container element (a &lt;form&gt; element) with support for the layout of control elements.\n     *\n     * @memberof OpenSeadragon\n     */$.ControlDock=function(options){var layouts=['topleft','topright','bottomright','bottomleft'],layout,i;$.extend(true,this,{id:'controldock-'+$.now()+'-'+Math.floor(Math.random()*1000000),container:$.makeNeutralElement('div'),controls:[]},options);// Disable the form's submit; otherwise button clicks and return keys\n// can trigger it.\nthis.container.onsubmit=function(){return false;};if(this.element){this.element=$.getElement(this.element);this.element.appendChild(this.container);this.element.style.position='relative';this.container.style.width='100%';this.container.style.height='100%';}for(i=0;i<layouts.length;i++){layout=layouts[i];this.controls[layout]=$.makeNeutralElement(\"div\");this.controls[layout].style.position='absolute';if(layout.match('left')){this.controls[layout].style.left='0px';}if(layout.match('right')){this.controls[layout].style.right='0px';}if(layout.match('top')){this.controls[layout].style.top='0px';}if(layout.match('bottom')){this.controls[layout].style.bottom='0px';}}this.container.appendChild(this.controls.topleft);this.container.appendChild(this.controls.topright);this.container.appendChild(this.controls.bottomright);this.container.appendChild(this.controls.bottomleft);};/** @lends OpenSeadragon.ControlDock.prototype */$.ControlDock.prototype={/**\n         * @function\n         */addControl:function addControl(element,controlOptions){element=$.getElement(element);var div=null;if(getControlIndex(this,element)>=0){return;// they're trying to add a duplicate control\n}switch(controlOptions.anchor){case $.ControlAnchor.TOP_RIGHT:div=this.controls.topright;element.style.position=\"relative\";element.style.paddingRight=\"0px\";element.style.paddingTop=\"0px\";break;case $.ControlAnchor.BOTTOM_RIGHT:div=this.controls.bottomright;element.style.position=\"relative\";element.style.paddingRight=\"0px\";element.style.paddingBottom=\"0px\";break;case $.ControlAnchor.BOTTOM_LEFT:div=this.controls.bottomleft;element.style.position=\"relative\";element.style.paddingLeft=\"0px\";element.style.paddingBottom=\"0px\";break;case $.ControlAnchor.TOP_LEFT:div=this.controls.topleft;element.style.position=\"relative\";element.style.paddingLeft=\"0px\";element.style.paddingTop=\"0px\";break;case $.ControlAnchor.ABSOLUTE:div=this.container;element.style.margin=\"0px\";element.style.padding=\"0px\";break;default:case $.ControlAnchor.NONE:div=this.container;element.style.margin=\"0px\";element.style.padding=\"0px\";break;}this.controls.push(new $.Control(element,controlOptions,div));element.style.display=\"inline-block\";},/**\n         * @function\n         * @return {OpenSeadragon.ControlDock} Chainable.\n         */removeControl:function removeControl(element){element=$.getElement(element);var i=getControlIndex(this,element);if(i>=0){this.controls[i].destroy();this.controls.splice(i,1);}return this;},/**\n         * @function\n         * @return {OpenSeadragon.ControlDock} Chainable.\n         */clearControls:function clearControls(){while(this.controls.length>0){this.controls.pop().destroy();}return this;},/**\n         * @function\n         * @return {Boolean}\n         */areControlsEnabled:function areControlsEnabled(){var i;for(i=this.controls.length-1;i>=0;i--){if(this.controls[i].isVisible()){return true;}}return false;},/**\n         * @function\n         * @return {OpenSeadragon.ControlDock} Chainable.\n         */setControlsEnabled:function setControlsEnabled(enabled){var i;for(i=this.controls.length-1;i>=0;i--){this.controls[i].setVisible(enabled);}return this;}};///////////////////////////////////////////////////////////////////////////////\n// Utility methods\n///////////////////////////////////////////////////////////////////////////////\nfunction getControlIndex(dock,element){var controls=dock.controls,i;for(i=controls.length-1;i>=0;i--){if(controls[i].element==element){return i;}}return-1;}})(OpenSeadragon);/*\n * OpenSeadragon - Placement\n *\n * Copyright (C) 2010-2016 OpenSeadragon contributors\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * - Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * - Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * - Neither the name of CodePlex Foundation nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */(function($){/**\n     * An enumeration of positions to anchor an element.\n     * @member Placement\n     * @memberOf OpenSeadragon\n     * @static\n     * @readonly\n     * @property {OpenSeadragon.Placement} CENTER\n     * @property {OpenSeadragon.Placement} TOP_LEFT\n     * @property {OpenSeadragon.Placement} TOP\n     * @property {OpenSeadragon.Placement} TOP_RIGHT\n     * @property {OpenSeadragon.Placement} RIGHT\n     * @property {OpenSeadragon.Placement} BOTTOM_RIGHT\n     * @property {OpenSeadragon.Placement} BOTTOM\n     * @property {OpenSeadragon.Placement} BOTTOM_LEFT\n     * @property {OpenSeadragon.Placement} LEFT\n     */$.Placement=$.freezeObject({CENTER:0,TOP_LEFT:1,TOP:2,TOP_RIGHT:3,RIGHT:4,BOTTOM_RIGHT:5,BOTTOM:6,BOTTOM_LEFT:7,LEFT:8,properties:{0:{isLeft:false,isHorizontallyCentered:true,isRight:false,isTop:false,isVerticallyCentered:true,isBottom:false},1:{isLeft:true,isHorizontallyCentered:false,isRight:false,isTop:true,isVerticallyCentered:false,isBottom:false},2:{isLeft:false,isHorizontallyCentered:true,isRight:false,isTop:true,isVerticallyCentered:false,isBottom:false},3:{isLeft:false,isHorizontallyCentered:false,isRight:true,isTop:true,isVerticallyCentered:false,isBottom:false},4:{isLeft:false,isHorizontallyCentered:false,isRight:true,isTop:false,isVerticallyCentered:true,isBottom:false},5:{isLeft:false,isHorizontallyCentered:false,isRight:true,isTop:false,isVerticallyCentered:false,isBottom:true},6:{isLeft:false,isHorizontallyCentered:true,isRight:false,isTop:false,isVerticallyCentered:false,isBottom:true},7:{isLeft:true,isHorizontallyCentered:false,isRight:false,isTop:false,isVerticallyCentered:false,isBottom:true},8:{isLeft:true,isHorizontallyCentered:false,isRight:false,isTop:false,isVerticallyCentered:true,isBottom:false}}});})(OpenSeadragon);/*\n * OpenSeadragon - Viewer\n *\n * Copyright (C) 2009 CodePlex Foundation\n * Copyright (C) 2010-2013 OpenSeadragon contributors\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * - Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * - Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * - Neither the name of CodePlex Foundation nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */(function($){// dictionary from hash to private properties\nvar THIS={};var nextHash=1;/**\n *\n * The main point of entry into creating a zoomable image on the page.<br>\n * <br>\n * We have provided an idiomatic javascript constructor which takes\n * a single object, but still support the legacy positional arguments.<br>\n * <br>\n * The options below are given in order that they appeared in the constructor\n * as arguments and we translate a positional call into an idiomatic call.<br>\n * <br>\n * To create a viewer, you can use either of this methods:<br>\n * <ul>\n * <li><code>var viewer = new OpenSeadragon.Viewer(options);</code></li>\n * <li><code>var viewer = OpenSeadragon(options);</code></li>\n * </ul>\n * @class Viewer\n * @classdesc The main OpenSeadragon viewer class.\n *\n * @memberof OpenSeadragon\n * @extends OpenSeadragon.EventSource\n * @extends OpenSeadragon.ControlDock\n * @param {OpenSeadragon.Options} options - Viewer options.\n *\n **/$.Viewer=function(options){var args=arguments,_this=this,i;//backward compatibility for positional args while preferring more\n//idiomatic javascript options object as the only argument\nif(!$.isPlainObject(options)){options={id:args[0],xmlPath:args.length>1?args[1]:undefined,prefixUrl:args.length>2?args[2]:undefined,controls:args.length>3?args[3]:undefined,overlays:args.length>4?args[4]:undefined};}//options.config and the general config argument are deprecated\n//in favor of the more direct specification of optional settings\n//being pass directly on the options object\nif(options.config){$.extend(true,options,options.config);delete options.config;}//Public properties\n//Allow the options object to override global defaults\n$.extend(true,this,{//internal state and dom identifiers\nid:options.id,hash:options.hash||nextHash++,/**\n         * Index for page to be shown first next time open() is called (only used in sequenceMode).\n         * @member {Number} initialPage\n         * @memberof OpenSeadragon.Viewer#\n         */initialPage:0,//dom nodes\n/**\n         * The parent element of this Viewer instance, passed in when the Viewer was created.\n         * @member {Element} element\n         * @memberof OpenSeadragon.Viewer#\n         */element:null,/**\n         * A &lt;div&gt; element (provided by {@link OpenSeadragon.ControlDock}), the base element of this Viewer instance.<br><br>\n         * Child element of {@link OpenSeadragon.Viewer#element}.\n         * @member {Element} container\n         * @memberof OpenSeadragon.Viewer#\n         */container:null,/**\n         * A &lt;div&gt; element, the element where user-input events are handled for panning and zooming.<br><br>\n         * Child element of {@link OpenSeadragon.Viewer#container},\n         * positioned on top of {@link OpenSeadragon.Viewer#keyboardCommandArea}.<br><br>\n         * The parent of {@link OpenSeadragon.Drawer#canvas} instances.\n         * @member {Element} canvas\n         * @memberof OpenSeadragon.Viewer#\n         */canvas:null,// Overlays list. An overlay allows to add html on top of the viewer.\noverlays:[],// Container inside the canvas where overlays are drawn.\noverlaysContainer:null,//private state properties\npreviousBody:[],//This was originally initialized in the constructor and so could never\n//have anything in it.  now it can because we allow it to be specified\n//in the options and is only empty by default if not specified. Also\n//this array was returned from get_controls which I find confusing\n//since this object has a controls property which is treated in other\n//functions like clearControls.  I'm removing the accessors.\ncustomControls:[],//These are originally not part options but declared as members\n//in initialize.  It's still considered idiomatic to put them here\n//source is here for backwards compatibility. It is not an official\n//part of the API and should not be relied upon.\nsource:null,/**\n         * Handles rendering of tiles in the viewer. Created for each TileSource opened.\n         * @member {OpenSeadragon.Drawer} drawer\n         * @memberof OpenSeadragon.Viewer#\n         */drawer:null,/**\n         * Keeps track of all of the tiled images in the scene.\n         * @member {OpenSeadragon.World} world\n         * @memberof OpenSeadragon.Viewer#\n         */world:null,/**\n         * Handles coordinate-related functionality - zoom, pan, rotation, etc. Created for each TileSource opened.\n         * @member {OpenSeadragon.Viewport} viewport\n         * @memberof OpenSeadragon.Viewer#\n         */viewport:null,/**\n         * @member {OpenSeadragon.Navigator} navigator\n         * @memberof OpenSeadragon.Viewer#\n         */navigator:null,//A collection viewport is a separate viewport used to provide\n//simultaneous rendering of sets of tiles\ncollectionViewport:null,collectionDrawer:null,//UI image resources\n//TODO: rename navImages to uiImages\nnavImages:null,//interface button controls\nbuttons:null,//TODO: this is defunct so safely remove it\nprofiler:null},$.DEFAULT_SETTINGS,options);if(typeof this.hash===\"undefined\"){throw new Error(\"A hash must be defined, either by specifying options.id or options.hash.\");}if(typeof THIS[this.hash]!==\"undefined\"){// We don't want to throw an error here, as the user might have discarded\n// the previous viewer with the same hash and now want to recreate it.\n$.console.warn(\"Hash \"+this.hash+\" has already been used.\");}//Private state properties\nTHIS[this.hash]={\"fsBoundsDelta\":new $.Point(1,1),\"prevContainerSize\":null,\"animating\":false,\"forceRedraw\":false,\"mouseInside\":false,\"group\":null,// whether we should be continuously zooming\n\"zooming\":false,// how much we should be continuously zooming by\n\"zoomFactor\":null,\"lastZoomTime\":null,\"fullPage\":false,\"onfullscreenchange\":null};this._sequenceIndex=0;this._firstOpen=true;this._updateRequestId=null;this._loadQueue=[];this.currentOverlays=[];this._lastScrollTime=$.now();// variable used to help normalize the scroll event speed of different devices\n//Inherit some behaviors and properties\n$.EventSource.call(this);this.addHandler('open-failed',function(event){var msg=$.getString(\"Errors.OpenFailed\",event.eventSource,event.message);_this._showMessage(msg);});$.ControlDock.call(this,options);//Deal with tile sources\nif(this.xmlPath){//Deprecated option.  Now it is preferred to use the tileSources option\nthis.tileSources=[this.xmlPath];}this.element=this.element||document.getElementById(this.id);this.canvas=$.makeNeutralElement(\"div\");this.canvas.className=\"openseadragon-canvas\";(function(style){style.width=\"100%\";style.height=\"100%\";style.overflow=\"hidden\";style.position=\"absolute\";style.top=\"0px\";style.left=\"0px\";})(this.canvas.style);$.setElementTouchActionNone(this.canvas);if(options.tabIndex!==\"\"){this.canvas.tabIndex=options.tabIndex===undefined?0:options.tabIndex;}//the container is created through applying the ControlDock constructor above\nthis.container.className=\"openseadragon-container\";(function(style){style.width=\"100%\";style.height=\"100%\";style.position=\"relative\";style.overflow=\"hidden\";style.left=\"0px\";style.top=\"0px\";style.textAlign=\"left\";// needed to protect against\n})(this.container.style);this.container.insertBefore(this.canvas,this.container.firstChild);this.element.appendChild(this.container);//Used for toggling between fullscreen and default container size\n//TODO: these can be closure private and shared across Viewer\n//      instances.\nthis.bodyWidth=document.body.style.width;this.bodyHeight=document.body.style.height;this.bodyOverflow=document.body.style.overflow;this.docOverflow=document.documentElement.style.overflow;this.innerTracker=new $.MouseTracker({element:this.canvas,startDisabled:!this.mouseNavEnabled,clickTimeThreshold:this.clickTimeThreshold,clickDistThreshold:this.clickDistThreshold,dblClickTimeThreshold:this.dblClickTimeThreshold,dblClickDistThreshold:this.dblClickDistThreshold,keyDownHandler:$.delegate(this,onCanvasKeyDown),keyHandler:$.delegate(this,onCanvasKeyPress),clickHandler:$.delegate(this,onCanvasClick),dblClickHandler:$.delegate(this,onCanvasDblClick),dragHandler:$.delegate(this,onCanvasDrag),dragEndHandler:$.delegate(this,onCanvasDragEnd),enterHandler:$.delegate(this,onCanvasEnter),exitHandler:$.delegate(this,onCanvasExit),pressHandler:$.delegate(this,onCanvasPress),releaseHandler:$.delegate(this,onCanvasRelease),nonPrimaryPressHandler:$.delegate(this,onCanvasNonPrimaryPress),nonPrimaryReleaseHandler:$.delegate(this,onCanvasNonPrimaryRelease),scrollHandler:$.delegate(this,onCanvasScroll),pinchHandler:$.delegate(this,onCanvasPinch)});this.outerTracker=new $.MouseTracker({element:this.container,startDisabled:!this.mouseNavEnabled,clickTimeThreshold:this.clickTimeThreshold,clickDistThreshold:this.clickDistThreshold,dblClickTimeThreshold:this.dblClickTimeThreshold,dblClickDistThreshold:this.dblClickDistThreshold,enterHandler:$.delegate(this,onContainerEnter),exitHandler:$.delegate(this,onContainerExit)});if(this.toolbar){this.toolbar=new $.ControlDock({element:this.toolbar});}this.bindStandardControls();THIS[this.hash].prevContainerSize=_getSafeElemSize(this.container);// Create the world\nthis.world=new $.World({viewer:this});this.world.addHandler('add-item',function(event){// For backwards compatibility, we maintain the source property\n_this.source=_this.world.getItemAt(0).source;THIS[_this.hash].forceRedraw=true;if(!_this._updateRequestId){_this._updateRequestId=scheduleUpdate(_this,updateMulti);}});this.world.addHandler('remove-item',function(event){// For backwards compatibility, we maintain the source property\nif(_this.world.getItemCount()){_this.source=_this.world.getItemAt(0).source;}else{_this.source=null;}THIS[_this.hash].forceRedraw=true;});this.world.addHandler('metrics-change',function(event){if(_this.viewport){_this.viewport._setContentBounds(_this.world.getHomeBounds(),_this.world.getContentFactor());}});this.world.addHandler('item-index-change',function(event){// For backwards compatibility, we maintain the source property\n_this.source=_this.world.getItemAt(0).source;});// Create the viewport\nthis.viewport=new $.Viewport({containerSize:THIS[this.hash].prevContainerSize,springStiffness:this.springStiffness,animationTime:this.animationTime,minZoomImageRatio:this.minZoomImageRatio,maxZoomPixelRatio:this.maxZoomPixelRatio,visibilityRatio:this.visibilityRatio,wrapHorizontal:this.wrapHorizontal,wrapVertical:this.wrapVertical,defaultZoomLevel:this.defaultZoomLevel,minZoomLevel:this.minZoomLevel,maxZoomLevel:this.maxZoomLevel,viewer:this,degrees:this.degrees,flipped:this.flipped,navigatorRotate:this.navigatorRotate,homeFillsViewer:this.homeFillsViewer,margins:this.viewportMargins});this.viewport._setContentBounds(this.world.getHomeBounds(),this.world.getContentFactor());// Create the image loader\nthis.imageLoader=new $.ImageLoader({jobLimit:this.imageLoaderLimit,timeout:options.timeout});// Create the tile cache\nthis.tileCache=new $.TileCache({maxImageCacheCount:this.maxImageCacheCount});// Create the drawer\nthis.drawer=new $.Drawer({viewer:this,viewport:this.viewport,element:this.canvas,debugGridColor:this.debugGridColor});// Overlay container\nthis.overlaysContainer=$.makeNeutralElement(\"div\");this.canvas.appendChild(this.overlaysContainer);// Now that we have a drawer, see if it supports rotate. If not we need to remove the rotate buttons\nif(!this.drawer.canRotate()){// Disable/remove the rotate left/right buttons since they aren't supported\nif(this.rotateLeft){i=this.buttons.buttons.indexOf(this.rotateLeft);this.buttons.buttons.splice(i,1);this.buttons.element.removeChild(this.rotateLeft.element);}if(this.rotateRight){i=this.buttons.buttons.indexOf(this.rotateRight);this.buttons.buttons.splice(i,1);this.buttons.element.removeChild(this.rotateRight.element);}}//Instantiate a navigator if configured\nif(this.showNavigator){this.navigator=new $.Navigator({id:this.navigatorId,position:this.navigatorPosition,sizeRatio:this.navigatorSizeRatio,maintainSizeRatio:this.navigatorMaintainSizeRatio,top:this.navigatorTop,left:this.navigatorLeft,width:this.navigatorWidth,height:this.navigatorHeight,autoResize:this.navigatorAutoResize,autoFade:this.navigatorAutoFade,prefixUrl:this.prefixUrl,viewer:this,navigatorRotate:this.navigatorRotate,background:this.navigatorBackground,opacity:this.navigatorOpacity,borderColor:this.navigatorBorderColor,displayRegionColor:this.navigatorDisplayRegionColor,crossOriginPolicy:this.crossOriginPolicy});}// Sequence mode\nif(this.sequenceMode){this.bindSequenceControls();}// Open initial tilesources\nif(this.tileSources){this.open(this.tileSources);}// Add custom controls\nfor(i=0;i<this.customControls.length;i++){this.addControl(this.customControls[i].id,{anchor:this.customControls[i].anchor});}// Initial fade out\n$.requestAnimationFrame(function(){beginControlsAutoHide(_this);});// Initial canvas options\nif(this.imageSmoothingEnabled!==undefined&&!this.imageSmoothingEnabled){this.drawer.setImageSmoothingEnabled(this.imageSmoothingEnabled);}};$.extend($.Viewer.prototype,$.EventSource.prototype,$.ControlDock.prototype,/** @lends OpenSeadragon.Viewer.prototype */{/**\n     * @function\n     * @return {Boolean}\n     */isOpen:function isOpen(){return!!this.world.getItemCount();},// deprecated\nopenDzi:function openDzi(dzi){$.console.error(\"[Viewer.openDzi] this function is deprecated; use Viewer.open() instead.\");return this.open(dzi);},// deprecated\nopenTileSource:function openTileSource(tileSource){$.console.error(\"[Viewer.openTileSource] this function is deprecated; use Viewer.open() instead.\");return this.open(tileSource);},/**\n     * Open tiled images into the viewer, closing any others.\n     * To get the TiledImage instance created by open, add an event listener for\n     * {@link OpenSeadragon.Viewer.html#.event:open}, which when fired can be used to get access\n     * to the instance, i.e., viewer.world.getItemAt(0).\n     * @function\n     * @param {Array|String|Object|Function} tileSources - This can be a TiledImage\n     * specifier, a TileSource specifier, or an array of either. A TiledImage specifier\n     * is the same as the options parameter for {@link OpenSeadragon.Viewer#addTiledImage},\n     * except for the index property; images are added in sequence.\n     * A TileSource specifier is anything you could pass as the tileSource property\n     * of the options parameter for {@link OpenSeadragon.Viewer#addTiledImage}.\n     * @param {Number} initialPage - If sequenceMode is true, display this page initially\n     * for the given tileSources. If specified, will overwrite the Viewer's existing initialPage property.\n     * @return {OpenSeadragon.Viewer} Chainable.\n     * @fires OpenSeadragon.Viewer.event:open\n     * @fires OpenSeadragon.Viewer.event:open-failed\n     */open:function open(tileSources,initialPage){var _this=this;this.close();if(!tileSources){return;}if(this.sequenceMode&&$.isArray(tileSources)){if(this.referenceStrip){this.referenceStrip.destroy();this.referenceStrip=null;}if(typeof initialPage!='undefined'&&!isNaN(initialPage)){this.initialPage=initialPage;}this.tileSources=tileSources;this._sequenceIndex=Math.max(0,Math.min(this.tileSources.length-1,this.initialPage));if(this.tileSources.length){this.open(this.tileSources[this._sequenceIndex]);if(this.showReferenceStrip){this.addReferenceStrip();}}this._updateSequenceButtons(this._sequenceIndex);return;}if(!$.isArray(tileSources)){tileSources=[tileSources];}if(!tileSources.length){return;}this._opening=true;var expected=tileSources.length;var successes=0;var failures=0;var failEvent;var checkCompletion=function checkCompletion(){if(successes+failures===expected){if(successes){if(_this._firstOpen||!_this.preserveViewport){_this.viewport.goHome(true);_this.viewport.update();}_this._firstOpen=false;var source=tileSources[0];if(source.tileSource){source=source.tileSource;}// Global overlays\nif(_this.overlays&&!_this.preserveOverlays){for(var i=0;i<_this.overlays.length;i++){_this.currentOverlays[i]=getOverlayObject(_this,_this.overlays[i]);}}_this._drawOverlays();_this._opening=false;/**\n                     * Raised when the viewer has opened and loaded one or more TileSources.\n                     *\n                     * @event open\n                     * @memberof OpenSeadragon.Viewer\n                     * @type {object}\n                     * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.\n                     * @property {OpenSeadragon.TileSource} source - The tile source that was opened.\n                     * @property {?Object} userData - Arbitrary subscriber-defined object.\n                     */ // TODO: what if there are multiple sources?\n_this.raiseEvent('open',{source:source});}else{_this._opening=false;/**\n                     * Raised when an error occurs loading a TileSource.\n                     *\n                     * @event open-failed\n                     * @memberof OpenSeadragon.Viewer\n                     * @type {object}\n                     * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.\n                     * @property {String} message - Information about what failed.\n                     * @property {String} source - The tile source that failed.\n                     * @property {?Object} userData - Arbitrary subscriber-defined object.\n                     */_this.raiseEvent('open-failed',failEvent);}}};var doOne=function doOne(options){if(!$.isPlainObject(options)||!options.tileSource){options={tileSource:options};}if(options.index!==undefined){$.console.error('[Viewer.open] setting indexes here is not supported; use addTiledImage instead');delete options.index;}if(options.collectionImmediately===undefined){options.collectionImmediately=true;}var originalSuccess=options.success;options.success=function(event){successes++;// TODO: now that options has other things besides tileSource, the overlays\n// should probably be at the options level, not the tileSource level.\nif(options.tileSource.overlays){for(var i=0;i<options.tileSource.overlays.length;i++){_this.addOverlay(options.tileSource.overlays[i]);}}if(originalSuccess){originalSuccess(event);}checkCompletion();};var originalError=options.error;options.error=function(event){failures++;if(!failEvent){failEvent=event;}if(originalError){originalError(event);}checkCompletion();};_this.addTiledImage(options);};// TileSources\nfor(var i=0;i<tileSources.length;i++){doOne(tileSources[i]);}return this;},/**\n     * @function\n     * @return {OpenSeadragon.Viewer} Chainable.\n     * @fires OpenSeadragon.Viewer.event:close\n     */close:function close(){if(!THIS[this.hash]){//this viewer has already been destroyed: returning immediately\nreturn this;}this._opening=false;if(this.navigator){this.navigator.close();}if(!this.preserveOverlays){this.clearOverlays();this.overlaysContainer.innerHTML=\"\";}THIS[this.hash].animating=false;this.world.removeAll();this.imageLoader.clear();/**\n         * Raised when the viewer is closed (see {@link OpenSeadragon.Viewer#close}).\n         *\n         * @event close\n         * @memberof OpenSeadragon.Viewer\n         * @type {object}\n         * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.\n         * @property {?Object} userData - Arbitrary subscriber-defined object.\n         */this.raiseEvent('close');return this;},/**\n     * Function to destroy the viewer and clean up everything created by OpenSeadragon.\n     *\n     * Example:\n     * var viewer = OpenSeadragon({\n     *   [...]\n     * });\n     *\n     * //when you are done with the viewer:\n     * viewer.destroy();\n     * viewer = null; //important\n     *\n     * @function\n     */destroy:function destroy(){if(!THIS[this.hash]){//this viewer has already been destroyed: returning immediately\nreturn;}this.close();this.clearOverlays();this.overlaysContainer.innerHTML=\"\";//TODO: implement this...\n//this.unbindSequenceControls()\n//this.unbindStandardControls()\nif(this.referenceStrip){this.referenceStrip.destroy();this.referenceStrip=null;}if(this._updateRequestId!==null){$.cancelAnimationFrame(this._updateRequestId);this._updateRequestId=null;}if(this.drawer){this.drawer.destroy();}this.removeAllHandlers();// Go through top element (passed to us) and remove all children\n// Use removeChild to make sure it handles SVG or any non-html\n// also it performs better - http://jsperf.com/innerhtml-vs-removechild/15\nif(this.element){while(this.element.firstChild){this.element.removeChild(this.element.firstChild);}}// destroy the mouse trackers\nif(this.innerTracker){this.innerTracker.destroy();}if(this.outerTracker){this.outerTracker.destroy();}THIS[this.hash]=null;delete THIS[this.hash];// clear all our references to dom objects\nthis.canvas=null;this.container=null;// clear our reference to the main element - they will need to pass it in again, creating a new viewer\nthis.element=null;},/**\n     * @function\n     * @return {Boolean}\n     */isMouseNavEnabled:function isMouseNavEnabled(){return this.innerTracker.isTracking();},/**\n     * @function\n     * @param {Boolean} enabled - true to enable, false to disable\n     * @return {OpenSeadragon.Viewer} Chainable.\n     * @fires OpenSeadragon.Viewer.event:mouse-enabled\n     */setMouseNavEnabled:function setMouseNavEnabled(enabled){this.innerTracker.setTracking(enabled);this.outerTracker.setTracking(enabled);/**\n         * Raised when mouse/touch navigation is enabled or disabled (see {@link OpenSeadragon.Viewer#setMouseNavEnabled}).\n         *\n         * @event mouse-enabled\n         * @memberof OpenSeadragon.Viewer\n         * @type {object}\n         * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.\n         * @property {Boolean} enabled\n         * @property {?Object} userData - Arbitrary subscriber-defined object.\n         */this.raiseEvent('mouse-enabled',{enabled:enabled});return this;},/**\n     * @function\n     * @return {Boolean}\n     */areControlsEnabled:function areControlsEnabled(){var enabled=this.controls.length,i;for(i=0;i<this.controls.length;i++){enabled=enabled&&this.controls[i].isVisible();}return enabled;},/**\n     * Shows or hides the controls (e.g. the default navigation buttons).\n     *\n     * @function\n     * @param {Boolean} true to show, false to hide.\n     * @return {OpenSeadragon.Viewer} Chainable.\n     * @fires OpenSeadragon.Viewer.event:controls-enabled\n     */setControlsEnabled:function setControlsEnabled(enabled){if(enabled){abortControlsAutoHide(this);}else{beginControlsAutoHide(this);}/**\n         * Raised when the navigation controls are shown or hidden (see {@link OpenSeadragon.Viewer#setControlsEnabled}).\n         *\n         * @event controls-enabled\n         * @memberof OpenSeadragon.Viewer\n         * @type {object}\n         * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.\n         * @property {Boolean} enabled\n         * @property {?Object} userData - Arbitrary subscriber-defined object.\n         */this.raiseEvent('controls-enabled',{enabled:enabled});return this;},/**\n     * Turns debugging mode on or off for this viewer.\n     *\n     * @function\n     * @param {Boolean} true to turn debug on, false to turn debug off.\n     */setDebugMode:function setDebugMode(debugMode){for(var i=0;i<this.world.getItemCount();i++){this.world.getItemAt(i).debugMode=debugMode;}this.debugMode=debugMode;this.forceRedraw();},/**\n     * @function\n     * @return {Boolean}\n     */isFullPage:function isFullPage(){return THIS[this.hash].fullPage;},/**\n     * Toggle full page mode.\n     * @function\n     * @param {Boolean} fullPage\n     *      If true, enter full page mode.  If false, exit full page mode.\n     * @return {OpenSeadragon.Viewer} Chainable.\n     * @fires OpenSeadragon.Viewer.event:pre-full-page\n     * @fires OpenSeadragon.Viewer.event:full-page\n     */setFullPage:function setFullPage(fullPage){var body=document.body,bodyStyle=body.style,docStyle=document.documentElement.style,_this=this,nodes,i;//don't bother modifying the DOM if we are already in full page mode.\nif(fullPage==this.isFullPage()){return this;}var fullPageEventArgs={fullPage:fullPage,preventDefaultAction:false};/**\n         * Raised when the viewer is about to change to/from full-page mode (see {@link OpenSeadragon.Viewer#setFullPage}).\n         *\n         * @event pre-full-page\n         * @memberof OpenSeadragon.Viewer\n         * @type {object}\n         * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.\n         * @property {Boolean} fullPage - True if entering full-page mode, false if exiting full-page mode.\n         * @property {Boolean} preventDefaultAction - Set to true to prevent full-page mode change. Default: false.\n         * @property {?Object} userData - Arbitrary subscriber-defined object.\n         */this.raiseEvent('pre-full-page',fullPageEventArgs);if(fullPageEventArgs.preventDefaultAction){return this;}if(fullPage){this.elementSize=$.getElementSize(this.element);this.pageScroll=$.getPageScroll();this.elementMargin=this.element.style.margin;this.element.style.margin=\"0\";this.elementPadding=this.element.style.padding;this.element.style.padding=\"0\";this.bodyMargin=bodyStyle.margin;this.docMargin=docStyle.margin;bodyStyle.margin=\"0\";docStyle.margin=\"0\";this.bodyPadding=bodyStyle.padding;this.docPadding=docStyle.padding;bodyStyle.padding=\"0\";docStyle.padding=\"0\";this.bodyWidth=bodyStyle.width;this.docWidth=docStyle.width;bodyStyle.width=\"100%\";docStyle.width=\"100%\";this.bodyHeight=bodyStyle.height;this.docHeight=docStyle.height;bodyStyle.height=\"100%\";docStyle.height=\"100%\";//when entering full screen on the ipad it wasn't sufficient to leave\n//the body intact as only only the top half of the screen would\n//respond to touch events on the canvas, while the bottom half treated\n//them as touch events on the document body.  Thus we remove and store\n//the bodies elements and replace them when we leave full screen.\nthis.previousBody=[];THIS[this.hash].prevElementParent=this.element.parentNode;THIS[this.hash].prevNextSibling=this.element.nextSibling;THIS[this.hash].prevElementWidth=this.element.style.width;THIS[this.hash].prevElementHeight=this.element.style.height;nodes=body.childNodes.length;for(i=0;i<nodes;i++){this.previousBody.push(body.childNodes[0]);body.removeChild(body.childNodes[0]);}//If we've got a toolbar, we need to enable the user to use css to\n//preserve it in fullpage mode\nif(this.toolbar&&this.toolbar.element){//save a reference to the parent so we can put it back\n//in the long run we need a better strategy\nthis.toolbar.parentNode=this.toolbar.element.parentNode;this.toolbar.nextSibling=this.toolbar.element.nextSibling;body.appendChild(this.toolbar.element);//Make sure the user has some ability to style the toolbar based\n//on the mode\n$.addClass(this.toolbar.element,'fullpage');}$.addClass(this.element,'fullpage');body.appendChild(this.element);this.element.style.height=$.getWindowSize().y+'px';this.element.style.width=$.getWindowSize().x+'px';if(this.toolbar&&this.toolbar.element){this.element.style.height=$.getElementSize(this.element).y-$.getElementSize(this.toolbar.element).y+'px';}THIS[this.hash].fullPage=true;// mouse will be inside container now\n$.delegate(this,onContainerEnter)({});}else{this.element.style.margin=this.elementMargin;this.element.style.padding=this.elementPadding;bodyStyle.margin=this.bodyMargin;docStyle.margin=this.docMargin;bodyStyle.padding=this.bodyPadding;docStyle.padding=this.docPadding;bodyStyle.width=this.bodyWidth;docStyle.width=this.docWidth;bodyStyle.height=this.bodyHeight;docStyle.height=this.docHeight;body.removeChild(this.element);nodes=this.previousBody.length;for(i=0;i<nodes;i++){body.appendChild(this.previousBody.shift());}$.removeClass(this.element,'fullpage');THIS[this.hash].prevElementParent.insertBefore(this.element,THIS[this.hash].prevNextSibling);//If we've got a toolbar, we need to enable the user to use css to\n//reset it to its original state\nif(this.toolbar&&this.toolbar.element){body.removeChild(this.toolbar.element);//Make sure the user has some ability to style the toolbar based\n//on the mode\n$.removeClass(this.toolbar.element,'fullpage');this.toolbar.parentNode.insertBefore(this.toolbar.element,this.toolbar.nextSibling);delete this.toolbar.parentNode;delete this.toolbar.nextSibling;}this.element.style.width=THIS[this.hash].prevElementWidth;this.element.style.height=THIS[this.hash].prevElementHeight;// After exiting fullPage or fullScreen, it can take some time\n// before the browser can actually set the scroll.\nvar restoreScrollCounter=0;var restoreScroll=function restoreScroll(){$.setPageScroll(_this.pageScroll);var pageScroll=$.getPageScroll();restoreScrollCounter++;if(restoreScrollCounter<10&&(pageScroll.x!==_this.pageScroll.x||pageScroll.y!==_this.pageScroll.y)){$.requestAnimationFrame(restoreScroll);}};$.requestAnimationFrame(restoreScroll);THIS[this.hash].fullPage=false;// mouse will likely be outside now\n$.delegate(this,onContainerExit)({});}if(this.navigator&&this.viewport){this.navigator.update(this.viewport);}/**\n         * Raised when the viewer has changed to/from full-page mode (see {@link OpenSeadragon.Viewer#setFullPage}).\n         *\n         * @event full-page\n         * @memberof OpenSeadragon.Viewer\n         * @type {object}\n         * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.\n         * @property {Boolean} fullPage - True if changed to full-page mode, false if exited full-page mode.\n         * @property {?Object} userData - Arbitrary subscriber-defined object.\n         */this.raiseEvent('full-page',{fullPage:fullPage});return this;},/**\n     * Toggle full screen mode if supported. Toggle full page mode otherwise.\n     * @function\n     * @param {Boolean} fullScreen\n     *      If true, enter full screen mode.  If false, exit full screen mode.\n     * @return {OpenSeadragon.Viewer} Chainable.\n     * @fires OpenSeadragon.Viewer.event:pre-full-screen\n     * @fires OpenSeadragon.Viewer.event:full-screen\n     */setFullScreen:function setFullScreen(fullScreen){var _this=this;if(!$.supportsFullScreen){return this.setFullPage(fullScreen);}if($.isFullScreen()===fullScreen){return this;}var fullScreeEventArgs={fullScreen:fullScreen,preventDefaultAction:false};/**\n         * Raised when the viewer is about to change to/from full-screen mode (see {@link OpenSeadragon.Viewer#setFullScreen}).\n         * Note: the pre-full-screen event is not raised when the user is exiting\n         * full-screen mode by pressing the Esc key. In that case, consider using\n         * the full-screen, pre-full-page or full-page events.\n         *\n         * @event pre-full-screen\n         * @memberof OpenSeadragon.Viewer\n         * @type {object}\n         * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.\n         * @property {Boolean} fullScreen - True if entering full-screen mode, false if exiting full-screen mode.\n         * @property {Boolean} preventDefaultAction - Set to true to prevent full-screen mode change. Default: false.\n         * @property {?Object} userData - Arbitrary subscriber-defined object.\n         */this.raiseEvent('pre-full-screen',fullScreeEventArgs);if(fullScreeEventArgs.preventDefaultAction){return this;}if(fullScreen){this.setFullPage(true);// If the full page mode is not actually entered, we need to prevent\n// the full screen mode.\nif(!this.isFullPage()){return this;}this.fullPageStyleWidth=this.element.style.width;this.fullPageStyleHeight=this.element.style.height;this.element.style.width='100%';this.element.style.height='100%';var onFullScreenChange=function onFullScreenChange(){var isFullScreen=$.isFullScreen();if(!isFullScreen){$.removeEvent(document,$.fullScreenEventName,onFullScreenChange);$.removeEvent(document,$.fullScreenErrorEventName,onFullScreenChange);_this.setFullPage(false);if(_this.isFullPage()){_this.element.style.width=_this.fullPageStyleWidth;_this.element.style.height=_this.fullPageStyleHeight;}}if(_this.navigator&&_this.viewport){//09/08/2018 - Fabroh : Fix issue #1504 : Ensure to get the navigator updated on fullscreen out with custom location with a timeout\nsetTimeout(function(){_this.navigator.update(_this.viewport);});}/**\n                 * Raised when the viewer has changed to/from full-screen mode (see {@link OpenSeadragon.Viewer#setFullScreen}).\n                 *\n                 * @event full-screen\n                 * @memberof OpenSeadragon.Viewer\n                 * @type {object}\n                 * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.\n                 * @property {Boolean} fullScreen - True if changed to full-screen mode, false if exited full-screen mode.\n                 * @property {?Object} userData - Arbitrary subscriber-defined object.\n                 */_this.raiseEvent('full-screen',{fullScreen:isFullScreen});};$.addEvent(document,$.fullScreenEventName,onFullScreenChange);$.addEvent(document,$.fullScreenErrorEventName,onFullScreenChange);$.requestFullScreen(document.body);}else{$.exitFullScreen();}return this;},/**\n     * @function\n     * @return {Boolean}\n     */isVisible:function isVisible(){return this.container.style.visibility!=\"hidden\";},/**\n     * @function\n     * @param {Boolean} visible\n     * @return {OpenSeadragon.Viewer} Chainable.\n     * @fires OpenSeadragon.Viewer.event:visible\n     */setVisible:function setVisible(visible){this.container.style.visibility=visible?\"\":\"hidden\";/**\n         * Raised when the viewer is shown or hidden (see {@link OpenSeadragon.Viewer#setVisible}).\n         *\n         * @event visible\n         * @memberof OpenSeadragon.Viewer\n         * @type {object}\n         * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.\n         * @property {Boolean} visible\n         * @property {?Object} userData - Arbitrary subscriber-defined object.\n         */this.raiseEvent('visible',{visible:visible});return this;},/**\n     * Add a tiled image to the viewer.\n     * options.tileSource can be anything that {@link OpenSeadragon.Viewer#open}\n     *  supports except arrays of images.\n     * Note that you can specify options.width or options.height, but not both.\n     * The other dimension will be calculated according to the item's aspect ratio.\n     * If collectionMode is on (see {@link OpenSeadragon.Options}), the new image is\n     * automatically arranged with the others.\n     * @function\n     * @param {Object} options\n     * @param {String|Object|Function} options.tileSource - The TileSource specifier.\n     * A String implies a url used to determine the tileSource implementation\n     *      based on the file extension of url. JSONP is implied by *.js,\n     *      otherwise the url is retrieved as text and the resulting text is\n     *      introspected to determine if its json, xml, or text and parsed.\n     * An Object implies an inline configuration which has a single\n     *      property sufficient for being able to determine tileSource\n     *      implementation. If the object has a property which is a function\n     *      named 'getTileUrl', it is treated as a custom TileSource.\n     * @param {Number} [options.index] The index of the item. Added on top of\n     * all other items if not specified.\n     * @param {Boolean} [options.replace=false] If true, the item at options.index will be\n     * removed and the new item is added in its place. options.tileSource will be\n     * interpreted and fetched if necessary before the old item is removed to avoid leaving\n     * a gap in the world.\n     * @param {Number} [options.x=0] The X position for the image in viewport coordinates.\n     * @param {Number} [options.y=0] The Y position for the image in viewport coordinates.\n     * @param {Number} [options.width=1] The width for the image in viewport coordinates.\n     * @param {Number} [options.height] The height for the image in viewport coordinates.\n     * @param {OpenSeadragon.Rect} [options.fitBounds] The bounds in viewport coordinates\n     * to fit the image into. If specified, x, y, width and height get ignored.\n     * @param {OpenSeadragon.Placement} [options.fitBoundsPlacement=OpenSeadragon.Placement.CENTER]\n     * How to anchor the image in the bounds if options.fitBounds is set.\n     * @param {OpenSeadragon.Rect} [options.clip] - An area, in image pixels, to clip to\n     * (portions of the image outside of this area will not be visible). Only works on\n     * browsers that support the HTML5 canvas.\n     * @param {Number} [options.opacity=1] Proportional opacity of the tiled images (1=opaque, 0=hidden)\n     * @param {Boolean} [options.preload=false]  Default switch for loading hidden images (true loads, false blocks)\n     * @param {Number} [options.degrees=0] Initial rotation of the tiled image around\n     * its top left corner in degrees.\n     * @param {String} [options.compositeOperation] How the image is composited onto other images.\n     * @param {String} [options.crossOriginPolicy] The crossOriginPolicy for this specific image,\n     * overriding viewer.crossOriginPolicy.\n     * @param {Boolean} [options.ajaxWithCredentials] Whether to set withCredentials on tile AJAX\n     * @param {Boolean} [options.loadTilesWithAjax]\n     *      Whether to load tile data using AJAX requests.\n     *      Defaults to the setting in {@link OpenSeadragon.Options}.\n     * @param {Object} [options.ajaxHeaders]\n     *      A set of headers to include when making tile AJAX requests.\n     *      Note that these headers will be merged over any headers specified in {@link OpenSeadragon.Options}.\n     *      Specifying a falsy value for a header will clear its existing value set at the Viewer level (if any).\n     * requests.\n     * @param {Function} [options.success] A function that gets called when the image is\n     * successfully added. It's passed the event object which contains a single property:\n     * \"item\", which is the resulting instance of TiledImage.\n     * @param {Function} [options.error] A function that gets called if the image is\n     * unable to be added. It's passed the error event object, which contains \"message\"\n     * and \"source\" properties.\n     * @param {Boolean} [options.collectionImmediately=false] If collectionMode is on,\n     * specifies whether to snap to the new arrangement immediately or to animate to it.\n     * @param {String|CanvasGradient|CanvasPattern|Function} [options.placeholderFillStyle] - See {@link OpenSeadragon.Options}.\n     * @fires OpenSeadragon.World.event:add-item\n     * @fires OpenSeadragon.Viewer.event:add-item-failed\n     */addTiledImage:function addTiledImage(options){$.console.assert(options,\"[Viewer.addTiledImage] options is required\");$.console.assert(options.tileSource,\"[Viewer.addTiledImage] options.tileSource is required\");$.console.assert(!options.replace||options.index>-1&&options.index<this.world.getItemCount(),\"[Viewer.addTiledImage] if options.replace is used, options.index must be a valid index in Viewer.world\");var _this=this;if(options.replace){options.replaceItem=_this.world.getItemAt(options.index);}this._hideMessage();if(options.placeholderFillStyle===undefined){options.placeholderFillStyle=this.placeholderFillStyle;}if(options.opacity===undefined){options.opacity=this.opacity;}if(options.preload===undefined){options.preload=this.preload;}if(options.compositeOperation===undefined){options.compositeOperation=this.compositeOperation;}if(options.crossOriginPolicy===undefined){options.crossOriginPolicy=options.tileSource.crossOriginPolicy!==undefined?options.tileSource.crossOriginPolicy:this.crossOriginPolicy;}if(options.ajaxWithCredentials===undefined){options.ajaxWithCredentials=this.ajaxWithCredentials;}if(options.loadTilesWithAjax===undefined){options.loadTilesWithAjax=this.loadTilesWithAjax;}if(options.ajaxHeaders===undefined||options.ajaxHeaders===null){options.ajaxHeaders=this.ajaxHeaders;}else if($.isPlainObject(options.ajaxHeaders)&&$.isPlainObject(this.ajaxHeaders)){options.ajaxHeaders=$.extend({},this.ajaxHeaders,options.ajaxHeaders);}var myQueueItem={options:options};function raiseAddItemFailed(event){for(var i=0;i<_this._loadQueue.length;i++){if(_this._loadQueue[i]===myQueueItem){_this._loadQueue.splice(i,1);break;}}if(_this._loadQueue.length===0){refreshWorld(myQueueItem);}/**\n             * Raised when an error occurs while adding a item.\n             * @event add-item-failed\n             * @memberOf OpenSeadragon.Viewer\n             * @type {object}\n             * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.\n             * @property {String} message\n             * @property {String} source\n             * @property {Object} options The options passed to the addTiledImage method.\n             * @property {?Object} userData - Arbitrary subscriber-defined object.\n             */_this.raiseEvent('add-item-failed',event);if(options.error){options.error(event);}}function refreshWorld(theItem){if(_this.collectionMode){_this.world.arrange({immediately:theItem.options.collectionImmediately,rows:_this.collectionRows,columns:_this.collectionColumns,layout:_this.collectionLayout,tileSize:_this.collectionTileSize,tileMargin:_this.collectionTileMargin});_this.world.setAutoRefigureSizes(true);}}if($.isArray(options.tileSource)){setTimeout(function(){raiseAddItemFailed({message:\"[Viewer.addTiledImage] Sequences can not be added; add them one at a time instead.\",source:options.tileSource,options:options});});return;}this._loadQueue.push(myQueueItem);function processReadyItems(){var queueItem,tiledImage,optionsClone;while(_this._loadQueue.length){queueItem=_this._loadQueue[0];if(!queueItem.tileSource){break;}_this._loadQueue.splice(0,1);if(queueItem.options.replace){var newIndex=_this.world.getIndexOfItem(queueItem.options.replaceItem);if(newIndex!=-1){queueItem.options.index=newIndex;}_this.world.removeItem(queueItem.options.replaceItem);}tiledImage=new $.TiledImage({viewer:_this,source:queueItem.tileSource,viewport:_this.viewport,drawer:_this.drawer,tileCache:_this.tileCache,imageLoader:_this.imageLoader,x:queueItem.options.x,y:queueItem.options.y,width:queueItem.options.width,height:queueItem.options.height,fitBounds:queueItem.options.fitBounds,fitBoundsPlacement:queueItem.options.fitBoundsPlacement,clip:queueItem.options.clip,placeholderFillStyle:queueItem.options.placeholderFillStyle,opacity:queueItem.options.opacity,preload:queueItem.options.preload,degrees:queueItem.options.degrees,compositeOperation:queueItem.options.compositeOperation,springStiffness:_this.springStiffness,animationTime:_this.animationTime,minZoomImageRatio:_this.minZoomImageRatio,wrapHorizontal:_this.wrapHorizontal,wrapVertical:_this.wrapVertical,immediateRender:_this.immediateRender,blendTime:_this.blendTime,alwaysBlend:_this.alwaysBlend,minPixelRatio:_this.minPixelRatio,smoothTileEdgesMinZoom:_this.smoothTileEdgesMinZoom,iOSDevice:_this.iOSDevice,crossOriginPolicy:queueItem.options.crossOriginPolicy,ajaxWithCredentials:queueItem.options.ajaxWithCredentials,loadTilesWithAjax:queueItem.options.loadTilesWithAjax,ajaxHeaders:queueItem.options.ajaxHeaders,debugMode:_this.debugMode});if(_this.collectionMode){_this.world.setAutoRefigureSizes(false);}_this.world.addItem(tiledImage,{index:queueItem.options.index});if(_this._loadQueue.length===0){//this restores the autoRefigureSizes flag to true.\nrefreshWorld(queueItem);}if(_this.world.getItemCount()===1&&!_this.preserveViewport){_this.viewport.goHome(true);}if(_this.navigator){optionsClone=$.extend({},queueItem.options,{replace:false,// navigator already removed the layer, nothing to replace\noriginalTiledImage:tiledImage,tileSource:queueItem.tileSource});_this.navigator.addTiledImage(optionsClone);}if(queueItem.options.success){queueItem.options.success({item:tiledImage});}}}getTileSourceImplementation(this,options.tileSource,options,function(tileSource){myQueueItem.tileSource=tileSource;// add everybody at the front of the queue that's ready to go\nprocessReadyItems();},function(event){event.options=options;raiseAddItemFailed(event);// add everybody at the front of the queue that's ready to go\nprocessReadyItems();});},/**\n     * Add a simple image to the viewer.\n     * The options are the same as the ones in {@link OpenSeadragon.Viewer#addTiledImage}\n     * except for options.tileSource which is replaced by options.url.\n     * @function\n     * @param {Object} options - See {@link OpenSeadragon.Viewer#addTiledImage}\n     * for all the options\n     * @param {String} options.url - The URL of the image to add.\n     * @fires OpenSeadragon.World.event:add-item\n     * @fires OpenSeadragon.Viewer.event:add-item-failed\n     */addSimpleImage:function addSimpleImage(options){$.console.assert(options,\"[Viewer.addSimpleImage] options is required\");$.console.assert(options.url,\"[Viewer.addSimpleImage] options.url is required\");var opts=$.extend({},options,{tileSource:{type:'image',url:options.url}});delete opts.url;this.addTiledImage(opts);},// deprecated\naddLayer:function addLayer(options){var _this=this;$.console.error(\"[Viewer.addLayer] this function is deprecated; use Viewer.addTiledImage() instead.\");var optionsClone=$.extend({},options,{success:function success(event){_this.raiseEvent(\"add-layer\",{options:options,drawer:event.item});},error:function error(event){_this.raiseEvent(\"add-layer-failed\",event);}});this.addTiledImage(optionsClone);return this;},// deprecated\ngetLayerAtLevel:function getLayerAtLevel(level){$.console.error(\"[Viewer.getLayerAtLevel] this function is deprecated; use World.getItemAt() instead.\");return this.world.getItemAt(level);},// deprecated\ngetLevelOfLayer:function getLevelOfLayer(drawer){$.console.error(\"[Viewer.getLevelOfLayer] this function is deprecated; use World.getIndexOfItem() instead.\");return this.world.getIndexOfItem(drawer);},// deprecated\ngetLayersCount:function getLayersCount(){$.console.error(\"[Viewer.getLayersCount] this function is deprecated; use World.getItemCount() instead.\");return this.world.getItemCount();},// deprecated\nsetLayerLevel:function setLayerLevel(drawer,level){$.console.error(\"[Viewer.setLayerLevel] this function is deprecated; use World.setItemIndex() instead.\");return this.world.setItemIndex(drawer,level);},// deprecated\nremoveLayer:function removeLayer(drawer){$.console.error(\"[Viewer.removeLayer] this function is deprecated; use World.removeItem() instead.\");return this.world.removeItem(drawer);},/**\n     * Force the viewer to redraw its contents.\n     * @returns {OpenSeadragon.Viewer} Chainable.\n     */forceRedraw:function forceRedraw(){THIS[this.hash].forceRedraw=true;return this;},/**\n     * @function\n     * @return {OpenSeadragon.Viewer} Chainable.\n     */bindSequenceControls:function bindSequenceControls(){//////////////////////////////////////////////////////////////////////////\n// Image Sequence Controls\n//////////////////////////////////////////////////////////////////////////\nvar onFocusHandler=$.delegate(this,onFocus),onBlurHandler=$.delegate(this,onBlur),onNextHandler=$.delegate(this,onNext),onPreviousHandler=$.delegate(this,onPrevious),navImages=this.navImages,useGroup=true;if(this.showSequenceControl){if(this.previousButton||this.nextButton){//if we are binding to custom buttons then layout and\n//grouping is the responsibility of the page author\nuseGroup=false;}this.previousButton=new $.Button({element:this.previousButton?$.getElement(this.previousButton):null,clickTimeThreshold:this.clickTimeThreshold,clickDistThreshold:this.clickDistThreshold,tooltip:$.getString(\"Tooltips.PreviousPage\"),srcRest:resolveUrl(this.prefixUrl,navImages.previous.REST),srcGroup:resolveUrl(this.prefixUrl,navImages.previous.GROUP),srcHover:resolveUrl(this.prefixUrl,navImages.previous.HOVER),srcDown:resolveUrl(this.prefixUrl,navImages.previous.DOWN),onRelease:onPreviousHandler,onFocus:onFocusHandler,onBlur:onBlurHandler});this.nextButton=new $.Button({element:this.nextButton?$.getElement(this.nextButton):null,clickTimeThreshold:this.clickTimeThreshold,clickDistThreshold:this.clickDistThreshold,tooltip:$.getString(\"Tooltips.NextPage\"),srcRest:resolveUrl(this.prefixUrl,navImages.next.REST),srcGroup:resolveUrl(this.prefixUrl,navImages.next.GROUP),srcHover:resolveUrl(this.prefixUrl,navImages.next.HOVER),srcDown:resolveUrl(this.prefixUrl,navImages.next.DOWN),onRelease:onNextHandler,onFocus:onFocusHandler,onBlur:onBlurHandler});if(!this.navPrevNextWrap){this.previousButton.disable();}if(!this.tileSources||!this.tileSources.length){this.nextButton.disable();}if(useGroup){this.paging=new $.ButtonGroup({buttons:[this.previousButton,this.nextButton],clickTimeThreshold:this.clickTimeThreshold,clickDistThreshold:this.clickDistThreshold});this.pagingControl=this.paging.element;if(this.toolbar){this.toolbar.addControl(this.pagingControl,{anchor:$.ControlAnchor.BOTTOM_RIGHT});}else{this.addControl(this.pagingControl,{anchor:this.sequenceControlAnchor||$.ControlAnchor.TOP_LEFT});}}}return this;},/**\n     * @function\n     * @return {OpenSeadragon.Viewer} Chainable.\n     */bindStandardControls:function bindStandardControls(){//////////////////////////////////////////////////////////////////////////\n// Navigation Controls\n//////////////////////////////////////////////////////////////////////////\nvar beginZoomingInHandler=$.delegate(this,beginZoomingIn),endZoomingHandler=$.delegate(this,endZooming),doSingleZoomInHandler=$.delegate(this,doSingleZoomIn),beginZoomingOutHandler=$.delegate(this,beginZoomingOut),doSingleZoomOutHandler=$.delegate(this,doSingleZoomOut),onHomeHandler=$.delegate(this,onHome),onFullScreenHandler=$.delegate(this,onFullScreen),onRotateLeftHandler=$.delegate(this,onRotateLeft),onRotateRightHandler=$.delegate(this,onRotateRight),onFlipHandler=$.delegate(this,onFlip),onFocusHandler=$.delegate(this,onFocus),onBlurHandler=$.delegate(this,onBlur),navImages=this.navImages,buttons=[],useGroup=true;if(this.showNavigationControl){if(this.zoomInButton||this.zoomOutButton||this.homeButton||this.fullPageButton||this.rotateLeftButton||this.rotateRightButton||this.flipButton){//if we are binding to custom buttons then layout and\n//grouping is the responsibility of the page author\nuseGroup=false;}if(this.showZoomControl){buttons.push(this.zoomInButton=new $.Button({element:this.zoomInButton?$.getElement(this.zoomInButton):null,clickTimeThreshold:this.clickTimeThreshold,clickDistThreshold:this.clickDistThreshold,tooltip:$.getString(\"Tooltips.ZoomIn\"),srcRest:resolveUrl(this.prefixUrl,navImages.zoomIn.REST),srcGroup:resolveUrl(this.prefixUrl,navImages.zoomIn.GROUP),srcHover:resolveUrl(this.prefixUrl,navImages.zoomIn.HOVER),srcDown:resolveUrl(this.prefixUrl,navImages.zoomIn.DOWN),onPress:beginZoomingInHandler,onRelease:endZoomingHandler,onClick:doSingleZoomInHandler,onEnter:beginZoomingInHandler,onExit:endZoomingHandler,onFocus:onFocusHandler,onBlur:onBlurHandler}));buttons.push(this.zoomOutButton=new $.Button({element:this.zoomOutButton?$.getElement(this.zoomOutButton):null,clickTimeThreshold:this.clickTimeThreshold,clickDistThreshold:this.clickDistThreshold,tooltip:$.getString(\"Tooltips.ZoomOut\"),srcRest:resolveUrl(this.prefixUrl,navImages.zoomOut.REST),srcGroup:resolveUrl(this.prefixUrl,navImages.zoomOut.GROUP),srcHover:resolveUrl(this.prefixUrl,navImages.zoomOut.HOVER),srcDown:resolveUrl(this.prefixUrl,navImages.zoomOut.DOWN),onPress:beginZoomingOutHandler,onRelease:endZoomingHandler,onClick:doSingleZoomOutHandler,onEnter:beginZoomingOutHandler,onExit:endZoomingHandler,onFocus:onFocusHandler,onBlur:onBlurHandler}));}if(this.showHomeControl){buttons.push(this.homeButton=new $.Button({element:this.homeButton?$.getElement(this.homeButton):null,clickTimeThreshold:this.clickTimeThreshold,clickDistThreshold:this.clickDistThreshold,tooltip:$.getString(\"Tooltips.Home\"),srcRest:resolveUrl(this.prefixUrl,navImages.home.REST),srcGroup:resolveUrl(this.prefixUrl,navImages.home.GROUP),srcHover:resolveUrl(this.prefixUrl,navImages.home.HOVER),srcDown:resolveUrl(this.prefixUrl,navImages.home.DOWN),onRelease:onHomeHandler,onFocus:onFocusHandler,onBlur:onBlurHandler}));}if(this.showFullPageControl){buttons.push(this.fullPageButton=new $.Button({element:this.fullPageButton?$.getElement(this.fullPageButton):null,clickTimeThreshold:this.clickTimeThreshold,clickDistThreshold:this.clickDistThreshold,tooltip:$.getString(\"Tooltips.FullPage\"),srcRest:resolveUrl(this.prefixUrl,navImages.fullpage.REST),srcGroup:resolveUrl(this.prefixUrl,navImages.fullpage.GROUP),srcHover:resolveUrl(this.prefixUrl,navImages.fullpage.HOVER),srcDown:resolveUrl(this.prefixUrl,navImages.fullpage.DOWN),onRelease:onFullScreenHandler,onFocus:onFocusHandler,onBlur:onBlurHandler}));}if(this.showRotationControl){buttons.push(this.rotateLeftButton=new $.Button({element:this.rotateLeftButton?$.getElement(this.rotateLeftButton):null,clickTimeThreshold:this.clickTimeThreshold,clickDistThreshold:this.clickDistThreshold,tooltip:$.getString(\"Tooltips.RotateLeft\"),srcRest:resolveUrl(this.prefixUrl,navImages.rotateleft.REST),srcGroup:resolveUrl(this.prefixUrl,navImages.rotateleft.GROUP),srcHover:resolveUrl(this.prefixUrl,navImages.rotateleft.HOVER),srcDown:resolveUrl(this.prefixUrl,navImages.rotateleft.DOWN),onRelease:onRotateLeftHandler,onFocus:onFocusHandler,onBlur:onBlurHandler}));buttons.push(this.rotateRightButton=new $.Button({element:this.rotateRightButton?$.getElement(this.rotateRightButton):null,clickTimeThreshold:this.clickTimeThreshold,clickDistThreshold:this.clickDistThreshold,tooltip:$.getString(\"Tooltips.RotateRight\"),srcRest:resolveUrl(this.prefixUrl,navImages.rotateright.REST),srcGroup:resolveUrl(this.prefixUrl,navImages.rotateright.GROUP),srcHover:resolveUrl(this.prefixUrl,navImages.rotateright.HOVER),srcDown:resolveUrl(this.prefixUrl,navImages.rotateright.DOWN),onRelease:onRotateRightHandler,onFocus:onFocusHandler,onBlur:onBlurHandler}));}if(this.showFlipControl){buttons.push(this.flipButton=new $.Button({element:this.flipButton?$.getElement(this.flipButton):null,clickTimeThreshold:this.clickTimeThreshold,clickDistThreshold:this.clickDistThreshold,tooltip:$.getString(\"Tooltips.Flip\"),srcRest:resolveUrl(this.prefixUrl,navImages.flip.REST),srcGroup:resolveUrl(this.prefixUrl,navImages.flip.GROUP),srcHover:resolveUrl(this.prefixUrl,navImages.flip.HOVER),srcDown:resolveUrl(this.prefixUrl,navImages.flip.DOWN),onRelease:onFlipHandler,onFocus:onFocusHandler,onBlur:onBlurHandler}));}if(useGroup){this.buttons=new $.ButtonGroup({buttons:buttons,clickTimeThreshold:this.clickTimeThreshold,clickDistThreshold:this.clickDistThreshold});this.navControl=this.buttons.element;this.addHandler('open',$.delegate(this,lightUp));if(this.toolbar){this.toolbar.addControl(this.navControl,{anchor:this.navigationControlAnchor||$.ControlAnchor.TOP_LEFT});}else{this.addControl(this.navControl,{anchor:this.navigationControlAnchor||$.ControlAnchor.TOP_LEFT});}}}return this;},/**\n     * Gets the active page of a sequence\n     * @function\n     * @return {Number}\n     */currentPage:function currentPage(){return this._sequenceIndex;},/**\n     * @function\n     * @return {OpenSeadragon.Viewer} Chainable.\n     * @fires OpenSeadragon.Viewer.event:page\n     */goToPage:function goToPage(page){if(this.tileSources&&page>=0&&page<this.tileSources.length){this._sequenceIndex=page;this._updateSequenceButtons(page);this.open(this.tileSources[page]);if(this.referenceStrip){this.referenceStrip.setFocus(page);}/**\n             * Raised when the page is changed on a viewer configured with multiple image sources (see {@link OpenSeadragon.Viewer#goToPage}).\n             *\n             * @event page\n             * @memberof OpenSeadragon.Viewer\n             * @type {Object}\n             * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.\n             * @property {Number} page - The page index.\n             * @property {?Object} userData - Arbitrary subscriber-defined object.\n             */this.raiseEvent('page',{page:page});}return this;},/**\n     * Adds an html element as an overlay to the current viewport.  Useful for\n     * highlighting words or areas of interest on an image or other zoomable\n     * interface. The overlays added via this method are removed when the viewport\n     * is closed which include when changing page.\n     * @method\n     * @param {Element|String|Object} element - A reference to an element or an id for\n     *      the element which will be overlaid. Or an Object specifying the configuration for the overlay.\n     *      If using an object, see {@link OpenSeadragon.Overlay} for a list of\n     *      all available options.\n     * @param {OpenSeadragon.Point|OpenSeadragon.Rect} location - The point or\n     *      rectangle which will be overlaid. This is a viewport relative location.\n     * @param {OpenSeadragon.Placement} [placement=OpenSeadragon.Placement.TOP_LEFT] - The position of the\n     *      viewport which the location coordinates will be treated as relative\n     *      to.\n     * @param {function} [onDraw] - If supplied the callback is called when the overlay\n     *      needs to be drawn. It it the responsibility of the callback to do any drawing/positioning.\n     *      It is passed position, size and element.\n     * @return {OpenSeadragon.Viewer} Chainable.\n     * @fires OpenSeadragon.Viewer.event:add-overlay\n     */addOverlay:function addOverlay(element,location,placement,onDraw){var options;if($.isPlainObject(element)){options=element;}else{options={element:element,location:location,placement:placement,onDraw:onDraw};}element=$.getElement(options.element);if(getOverlayIndex(this.currentOverlays,element)>=0){// they're trying to add a duplicate overlay\nreturn this;}var overlay=getOverlayObject(this,options);this.currentOverlays.push(overlay);overlay.drawHTML(this.overlaysContainer,this.viewport);/**\n         * Raised when an overlay is added to the viewer (see {@link OpenSeadragon.Viewer#addOverlay}).\n         *\n         * @event add-overlay\n         * @memberof OpenSeadragon.Viewer\n         * @type {object}\n         * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.\n         * @property {Element} element - The overlay element.\n         * @property {OpenSeadragon.Point|OpenSeadragon.Rect} location\n         * @property {OpenSeadragon.Placement} placement\n         * @property {?Object} userData - Arbitrary subscriber-defined object.\n         */this.raiseEvent('add-overlay',{element:element,location:options.location,placement:options.placement});return this;},/**\n     * Updates the overlay represented by the reference to the element or\n     * element id moving it to the new location, relative to the new placement.\n     * @method\n     * @param {Element|String} element - A reference to an element or an id for\n     *      the element which is overlaid.\n     * @param {OpenSeadragon.Point|OpenSeadragon.Rect} location - The point or\n     *      rectangle which will be overlaid. This is a viewport relative location.\n     * @param {OpenSeadragon.Placement} [placement=OpenSeadragon.Placement.TOP_LEFT] - The position of the\n     *      viewport which the location coordinates will be treated as relative\n     *      to.\n     * @return {OpenSeadragon.Viewer} Chainable.\n     * @fires OpenSeadragon.Viewer.event:update-overlay\n     */updateOverlay:function updateOverlay(element,location,placement){var i;element=$.getElement(element);i=getOverlayIndex(this.currentOverlays,element);if(i>=0){this.currentOverlays[i].update(location,placement);THIS[this.hash].forceRedraw=true;/**\n             * Raised when an overlay's location or placement changes\n             * (see {@link OpenSeadragon.Viewer#updateOverlay}).\n             *\n             * @event update-overlay\n             * @memberof OpenSeadragon.Viewer\n             * @type {object}\n             * @property {OpenSeadragon.Viewer} eventSource - A reference to the\n             * Viewer which raised the event.\n             * @property {Element} element\n             * @property {OpenSeadragon.Point|OpenSeadragon.Rect} location\n             * @property {OpenSeadragon.Placement} placement\n             * @property {?Object} userData - Arbitrary subscriber-defined object.\n             */this.raiseEvent('update-overlay',{element:element,location:location,placement:placement});}return this;},/**\n     * Removes an overlay identified by the reference element or element id\n     * and schedules an update.\n     * @method\n     * @param {Element|String} element - A reference to the element or an\n     *      element id which represent the ovelay content to be removed.\n     * @return {OpenSeadragon.Viewer} Chainable.\n     * @fires OpenSeadragon.Viewer.event:remove-overlay\n     */removeOverlay:function removeOverlay(element){var i;element=$.getElement(element);i=getOverlayIndex(this.currentOverlays,element);if(i>=0){this.currentOverlays[i].destroy();this.currentOverlays.splice(i,1);THIS[this.hash].forceRedraw=true;/**\n             * Raised when an overlay is removed from the viewer\n             * (see {@link OpenSeadragon.Viewer#removeOverlay}).\n             *\n             * @event remove-overlay\n             * @memberof OpenSeadragon.Viewer\n             * @type {object}\n             * @property {OpenSeadragon.Viewer} eventSource - A reference to the\n             * Viewer which raised the event.\n             * @property {Element} element - The overlay element.\n             * @property {?Object} userData - Arbitrary subscriber-defined object.\n             */this.raiseEvent('remove-overlay',{element:element});}return this;},/**\n     * Removes all currently configured Overlays from this Viewer and schedules\n     * an update.\n     * @method\n     * @return {OpenSeadragon.Viewer} Chainable.\n     * @fires OpenSeadragon.Viewer.event:clear-overlay\n     */clearOverlays:function clearOverlays(){while(this.currentOverlays.length>0){this.currentOverlays.pop().destroy();}THIS[this.hash].forceRedraw=true;/**\n         * Raised when all overlays are removed from the viewer (see {@link OpenSeadragon.Drawer#clearOverlays}).\n         *\n         * @event clear-overlay\n         * @memberof OpenSeadragon.Viewer\n         * @type {object}\n         * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.\n         * @property {?Object} userData - Arbitrary subscriber-defined object.\n         */this.raiseEvent('clear-overlay',{});return this;},/**\n     * Finds an overlay identified by the reference element or element id\n     * and returns it as an object, return null if not found.\n     * @method\n     * @param {Element|String} element - A reference to the element or an\n     *      element id which represents the overlay content.\n     * @return {OpenSeadragon.Overlay} the matching overlay or null if none found.\n     */getOverlayById:function getOverlayById(element){var i;element=$.getElement(element);i=getOverlayIndex(this.currentOverlays,element);if(i>=0){return this.currentOverlays[i];}else{return null;}},/**\n     * Updates the sequence buttons.\n     * @function OpenSeadragon.Viewer.prototype._updateSequenceButtons\n     * @private\n     * @param {Number} Sequence Value\n     */_updateSequenceButtons:function _updateSequenceButtons(page){if(this.nextButton){if(!this.tileSources||this.tileSources.length-1===page){//Disable next button\nif(!this.navPrevNextWrap){this.nextButton.disable();}}else{this.nextButton.enable();}}if(this.previousButton){if(page>0){//Enable previous button\nthis.previousButton.enable();}else{if(!this.navPrevNextWrap){this.previousButton.disable();}}}},/**\n     * Display a message in the viewport\n     * @function OpenSeadragon.Viewer.prototype._showMessage\n     * @private\n     * @param {String} text message\n     */_showMessage:function _showMessage(message){this._hideMessage();var div=$.makeNeutralElement(\"div\");div.appendChild(document.createTextNode(message));this.messageDiv=$.makeCenteredNode(div);$.addClass(this.messageDiv,\"openseadragon-message\");this.container.appendChild(this.messageDiv);},/**\n     * Hide any currently displayed viewport message\n     * @function OpenSeadragon.Viewer.prototype._hideMessage\n     * @private\n     */_hideMessage:function _hideMessage(){var div=this.messageDiv;if(div){div.parentNode.removeChild(div);delete this.messageDiv;}},/**\n     * Gets this viewer's gesture settings for the given pointer device type.\n     * @method\n     * @param {String} type - The pointer device type to get the gesture settings for (\"mouse\", \"touch\", \"pen\", etc.).\n     * @return {OpenSeadragon.GestureSettings}\n     */gestureSettingsByDeviceType:function gestureSettingsByDeviceType(type){switch(type){case'mouse':return this.gestureSettingsMouse;case'touch':return this.gestureSettingsTouch;case'pen':return this.gestureSettingsPen;default:return this.gestureSettingsUnknown;}},// private\n_drawOverlays:function _drawOverlays(){var i,length=this.currentOverlays.length;for(i=0;i<length;i++){this.currentOverlays[i].drawHTML(this.overlaysContainer,this.viewport);}},/**\n     * Cancel the \"in flight\" images.\n     */_cancelPendingImages:function _cancelPendingImages(){this._loadQueue=[];},/**\n     * Removes the reference strip and disables displaying it.\n     * @function\n     */removeReferenceStrip:function removeReferenceStrip(){this.showReferenceStrip=false;if(this.referenceStrip){this.referenceStrip.destroy();this.referenceStrip=null;}},/**\n     * Enables and displays the reference strip based on the currently set tileSources.\n     * Works only when the Viewer has sequenceMode set to true.\n     * @function\n     */addReferenceStrip:function addReferenceStrip(){this.showReferenceStrip=true;if(this.sequenceMode){if(this.referenceStrip){return;}if(this.tileSources.length&&this.tileSources.length>1){this.referenceStrip=new $.ReferenceStrip({id:this.referenceStripElement,position:this.referenceStripPosition,sizeRatio:this.referenceStripSizeRatio,scroll:this.referenceStripScroll,height:this.referenceStripHeight,width:this.referenceStripWidth,tileSources:this.tileSources,prefixUrl:this.prefixUrl,useCanvas:this.useCanvas,viewer:this});this.referenceStrip.setFocus(this._sequenceIndex);}}else{$.console.warn('Attempting to display a reference strip while \"sequenceMode\" is off.');}}});/**\n * _getSafeElemSize is like getElementSize(), but refuses to return 0 for x or y,\n * which was causing some calling operations to return NaN.\n * @returns {Point}\n * @private\n */function _getSafeElemSize(oElement){oElement=$.getElement(oElement);return new $.Point(oElement.clientWidth===0?1:oElement.clientWidth,oElement.clientHeight===0?1:oElement.clientHeight);}/**\n * @function\n * @private\n */function getTileSourceImplementation(viewer,tileSource,imgOptions,successCallback,failCallback){var _this=viewer;//allow plain xml strings or json strings to be parsed here\nif($.type(tileSource)=='string'){//xml should start with \"<\" and end with \">\"\nif(tileSource.match(/^\\s*<.*>\\s*$/)){tileSource=$.parseXml(tileSource);//json should start with \"{\" or \"[\" and end with \"}\" or \"]\"\n}else if(tileSource.match(/^\\s*[\\{\\[].*[\\}\\]]\\s*$/)){try{var tileSourceJ=$.parseJSON(tileSource);tileSource=tileSourceJ;}catch(e){//tileSource = tileSource;\n}}}function waitUntilReady(tileSource,originalTileSource){if(tileSource.ready){successCallback(tileSource);}else{tileSource.addHandler('ready',function(){successCallback(tileSource);});tileSource.addHandler('open-failed',function(event){failCallback({message:event.message,source:originalTileSource});});}}setTimeout(function(){if($.type(tileSource)=='string'){//If its still a string it means it must be a url at this point\ntileSource=new $.TileSource({url:tileSource,crossOriginPolicy:imgOptions.crossOriginPolicy!==undefined?imgOptions.crossOriginPolicy:viewer.crossOriginPolicy,ajaxWithCredentials:viewer.ajaxWithCredentials,ajaxHeaders:viewer.ajaxHeaders,useCanvas:viewer.useCanvas,success:function success(event){successCallback(event.tileSource);}});tileSource.addHandler('open-failed',function(event){failCallback(event);});}else if($.isPlainObject(tileSource)||tileSource.nodeType){if(tileSource.crossOriginPolicy===undefined&&(imgOptions.crossOriginPolicy!==undefined||viewer.crossOriginPolicy!==undefined)){tileSource.crossOriginPolicy=imgOptions.crossOriginPolicy!==undefined?imgOptions.crossOriginPolicy:viewer.crossOriginPolicy;}if(tileSource.ajaxWithCredentials===undefined){tileSource.ajaxWithCredentials=viewer.ajaxWithCredentials;}if(tileSource.useCanvas===undefined){tileSource.useCanvas=viewer.useCanvas;}if($.isFunction(tileSource.getTileUrl)){//Custom tile source\nvar customTileSource=new $.TileSource(tileSource);customTileSource.getTileUrl=tileSource.getTileUrl;successCallback(customTileSource);}else{//inline configuration\nvar $TileSource=$.TileSource.determineType(_this,tileSource);if(!$TileSource){failCallback({message:\"Unable to load TileSource\",source:tileSource});return;}var options=$TileSource.prototype.configure.apply(_this,[tileSource]);waitUntilReady(new $TileSource(options),tileSource);}}else{//can assume it's already a tile source implementation\nwaitUntilReady(tileSource,tileSource);}});}function getOverlayObject(viewer,overlay){if(overlay instanceof $.Overlay){return overlay;}var element=null;if(overlay.element){element=$.getElement(overlay.element);}else{var id=overlay.id?overlay.id:\"openseadragon-overlay-\"+Math.floor(Math.random()*10000000);element=$.getElement(overlay.id);if(!element){element=document.createElement(\"a\");element.href=\"#/overlay/\"+id;}element.id=id;$.addClass(element,overlay.className?overlay.className:\"openseadragon-overlay\");}var location=overlay.location;var width=overlay.width;var height=overlay.height;if(!location){var x=overlay.x;var y=overlay.y;if(overlay.px!==undefined){var rect=viewer.viewport.imageToViewportRectangle(new $.Rect(overlay.px,overlay.py,width||0,height||0));x=rect.x;y=rect.y;width=width!==undefined?rect.width:undefined;height=height!==undefined?rect.height:undefined;}location=new $.Point(x,y);}var placement=overlay.placement;if(placement&&$.type(placement)===\"string\"){placement=$.Placement[overlay.placement.toUpperCase()];}return new $.Overlay({element:element,location:location,placement:placement,onDraw:overlay.onDraw,checkResize:overlay.checkResize,width:width,height:height,rotationMode:overlay.rotationMode});}/**\n * @private\n * @inner\n * Determines the index of the given overlay in the given overlays array.\n */function getOverlayIndex(overlays,element){var i;for(i=overlays.length-1;i>=0;i--){if(overlays[i].element===element){return i;}}return-1;}///////////////////////////////////////////////////////////////////////////////\n// Schedulers provide the general engine for animation\n///////////////////////////////////////////////////////////////////////////////\nfunction scheduleUpdate(viewer,updateFunc){return $.requestAnimationFrame(function(){updateFunc(viewer);});}//provides a sequence in the fade animation\nfunction scheduleControlsFade(viewer){$.requestAnimationFrame(function(){updateControlsFade(viewer);});}//initiates an animation to hide the controls\nfunction beginControlsAutoHide(viewer){if(!viewer.autoHideControls){return;}viewer.controlsShouldFade=true;viewer.controlsFadeBeginTime=$.now()+viewer.controlsFadeDelay;window.setTimeout(function(){scheduleControlsFade(viewer);},viewer.controlsFadeDelay);}//determines if fade animation is done or continues the animation\nfunction updateControlsFade(viewer){var currentTime,deltaTime,opacity,i;if(viewer.controlsShouldFade){currentTime=$.now();deltaTime=currentTime-viewer.controlsFadeBeginTime;opacity=1.0-deltaTime/viewer.controlsFadeLength;opacity=Math.min(1.0,opacity);opacity=Math.max(0.0,opacity);for(i=viewer.controls.length-1;i>=0;i--){if(viewer.controls[i].autoFade){viewer.controls[i].setOpacity(opacity);}}if(opacity>0){// fade again\nscheduleControlsFade(viewer);}}}//stop the fade animation on the controls and show them\nfunction abortControlsAutoHide(viewer){var i;viewer.controlsShouldFade=false;for(i=viewer.controls.length-1;i>=0;i--){viewer.controls[i].setOpacity(1.0);}}///////////////////////////////////////////////////////////////////////////////\n// Default view event handlers.\n///////////////////////////////////////////////////////////////////////////////\nfunction onFocus(){abortControlsAutoHide(this);}function onBlur(){beginControlsAutoHide(this);}function onCanvasKeyDown(event){var canvasKeyDownEventArgs={originalEvent:event.originalEvent,preventDefaultAction:event.preventDefaultAction,preventVerticalPan:event.preventVerticalPan,preventHorizontalPan:event.preventHorizontalPan};/**\n     * Raised when a keyboard key is pressed and the focus is on the {@link OpenSeadragon.Viewer#canvas} element.\n     *\n     * @event canvas-key\n     * @memberof OpenSeadragon.Viewer\n     * @type {object}\n     * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.\n     * @property {Object} originalEvent - The original DOM event.\n     * @property {Boolean} preventDefaultAction - Set to true to prevent default keyboard behaviour. Default: false.\n     * @property {Boolean} preventVerticalPan - Set to true to prevent keyboard vertical panning. Default: false.\n     * @property {Boolean} preventHorizontalPan - Set to true to prevent keyboard horizontal panning. Default: false.\n     * @property {?Object} userData - Arbitrary subscriber-defined object.\n     */this.raiseEvent('canvas-key',canvasKeyDownEventArgs);if(!canvasKeyDownEventArgs.preventDefaultAction&&!event.ctrl&&!event.alt&&!event.meta){switch(event.keyCode){case 38://up arrow\nif(!canvasKeyDownEventArgs.preventVerticalPan){if(event.shift){this.viewport.zoomBy(1.1);}else{this.viewport.panBy(this.viewport.deltaPointsFromPixels(new $.Point(0,-this.pixelsPerArrowPress)));}this.viewport.applyConstraints();}return false;case 40://down arrow\nif(!canvasKeyDownEventArgs.preventVerticalPan){if(event.shift){this.viewport.zoomBy(0.9);}else{this.viewport.panBy(this.viewport.deltaPointsFromPixels(new $.Point(0,this.pixelsPerArrowPress)));}this.viewport.applyConstraints();}return false;case 37://left arrow\nif(!canvasKeyDownEventArgs.preventHorizontalPan){this.viewport.panBy(this.viewport.deltaPointsFromPixels(new $.Point(-this.pixelsPerArrowPress,0)));this.viewport.applyConstraints();}return false;case 39://right arrow\nif(!canvasKeyDownEventArgs.preventHorizontalPan){this.viewport.panBy(this.viewport.deltaPointsFromPixels(new $.Point(this.pixelsPerArrowPress,0)));this.viewport.applyConstraints();}return false;default://console.log( 'navigator keycode %s', event.keyCode );\nreturn true;}}else{return true;}}function onCanvasKeyPress(event){var canvasKeyPressEventArgs={originalEvent:event.originalEvent,preventDefaultAction:event.preventDefaultAction,preventVerticalPan:event.preventVerticalPan,preventHorizontalPan:event.preventHorizontalPan};// This event is documented in onCanvasKeyDown\nthis.raiseEvent('canvas-key',canvasKeyPressEventArgs);if(!canvasKeyPressEventArgs.preventDefaultAction&&!event.ctrl&&!event.alt&&!event.meta){switch(event.keyCode){case 43://=|+\ncase 61://=|+\nthis.viewport.zoomBy(1.1);this.viewport.applyConstraints();return false;case 45://-|_\nthis.viewport.zoomBy(0.9);this.viewport.applyConstraints();return false;case 48://0|)\nthis.viewport.goHome();this.viewport.applyConstraints();return false;case 119://w\ncase 87://W\nif(!canvasKeyPressEventArgs.preventVerticalPan){if(event.shift){this.viewport.zoomBy(1.1);}else{this.viewport.panBy(this.viewport.deltaPointsFromPixels(new $.Point(0,-40)));}this.viewport.applyConstraints();}return false;case 115://s\ncase 83://S\nif(!canvasKeyPressEventArgs.preventVerticalPan){if(event.shift){this.viewport.zoomBy(0.9);}else{this.viewport.panBy(this.viewport.deltaPointsFromPixels(new $.Point(0,40)));}this.viewport.applyConstraints();}return false;case 97://a\nif(!canvasKeyPressEventArgs.preventHorizontalPan){this.viewport.panBy(this.viewport.deltaPointsFromPixels(new $.Point(-40,0)));this.viewport.applyConstraints();}return false;case 100://d\nif(!canvasKeyPressEventArgs.preventHorizontalPan){this.viewport.panBy(this.viewport.deltaPointsFromPixels(new $.Point(40,0)));this.viewport.applyConstraints();}return false;case 114://r - clockwise rotation\nif(this.viewport.flipped){this.viewport.setRotation($.positiveModulo(this.viewport.degrees-this.rotationIncrement,360));}else{this.viewport.setRotation($.positiveModulo(this.viewport.degrees+this.rotationIncrement,360));}this.viewport.applyConstraints();return false;case 82://R - counterclockwise  rotation\nif(this.viewport.flipped){this.viewport.setRotation($.positiveModulo(this.viewport.degrees+this.rotationIncrement,360));}else{this.viewport.setRotation($.positiveModulo(this.viewport.degrees-this.rotationIncrement,360));}this.viewport.applyConstraints();return false;case 102://f\nthis.viewport.toggleFlip();return false;default:// console.log( 'navigator keycode %s', event.keyCode );\nreturn true;}}else{return true;}}function onCanvasClick(event){var gestureSettings;var haveKeyboardFocus=document.activeElement==this.canvas;// If we don't have keyboard focus, request it.\nif(!haveKeyboardFocus){this.canvas.focus();}if(this.viewport.flipped){event.position.x=this.viewport.getContainerSize().x-event.position.x;}var canvasClickEventArgs={tracker:event.eventSource,position:event.position,quick:event.quick,shift:event.shift,originalEvent:event.originalEvent,preventDefaultAction:event.preventDefaultAction};/**\n     * Raised when a mouse press/release or touch/remove occurs on the {@link OpenSeadragon.Viewer#canvas} element.\n     *\n     * @event canvas-click\n     * @memberof OpenSeadragon.Viewer\n     * @type {object}\n     * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.\n     * @property {OpenSeadragon.MouseTracker} tracker - A reference to the MouseTracker which originated this event.\n     * @property {OpenSeadragon.Point} position - The position of the event relative to the tracked element.\n     * @property {Boolean} quick - True only if the clickDistThreshold and clickTimeThreshold are both passed. Useful for differentiating between clicks and drags.\n     * @property {Boolean} shift - True if the shift key was pressed during this event.\n     * @property {Object} originalEvent - The original DOM event.\n     * @property {Boolean} preventDefaultAction - Set to true to prevent default click to zoom behaviour. Default: false.\n     * @property {?Object} userData - Arbitrary subscriber-defined object.\n     */this.raiseEvent('canvas-click',canvasClickEventArgs);if(!canvasClickEventArgs.preventDefaultAction&&this.viewport&&event.quick){gestureSettings=this.gestureSettingsByDeviceType(event.pointerType);if(gestureSettings.clickToZoom){this.viewport.zoomBy(event.shift?1.0/this.zoomPerClick:this.zoomPerClick,gestureSettings.zoomToRefPoint?this.viewport.pointFromPixel(event.position,true):null);this.viewport.applyConstraints();}}}function onCanvasDblClick(event){var gestureSettings;var canvasDblClickEventArgs={tracker:event.eventSource,position:event.position,shift:event.shift,originalEvent:event.originalEvent,preventDefaultAction:event.preventDefaultAction};/**\n     * Raised when a double mouse press/release or touch/remove occurs on the {@link OpenSeadragon.Viewer#canvas} element.\n     *\n     * @event canvas-double-click\n     * @memberof OpenSeadragon.Viewer\n     * @type {object}\n     * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.\n     * @property {OpenSeadragon.MouseTracker} tracker - A reference to the MouseTracker which originated this event.\n     * @property {OpenSeadragon.Point} position - The position of the event relative to the tracked element.\n     * @property {Boolean} shift - True if the shift key was pressed during this event.\n     * @property {Object} originalEvent - The original DOM event.\n     * @property {Boolean} preventDefaultAction - Set to true to prevent default double tap to zoom behaviour. Default: false.\n     * @property {?Object} userData - Arbitrary subscriber-defined object.\n     */this.raiseEvent('canvas-double-click',canvasDblClickEventArgs);if(!canvasDblClickEventArgs.preventDefaultAction&&this.viewport){gestureSettings=this.gestureSettingsByDeviceType(event.pointerType);if(gestureSettings.dblClickToZoom){this.viewport.zoomBy(event.shift?1.0/this.zoomPerClick:this.zoomPerClick,gestureSettings.zoomToRefPoint?this.viewport.pointFromPixel(event.position,true):null);this.viewport.applyConstraints();}}}function onCanvasDrag(event){var gestureSettings;var canvasDragEventArgs={tracker:event.eventSource,position:event.position,delta:event.delta,speed:event.speed,direction:event.direction,shift:event.shift,originalEvent:event.originalEvent,preventDefaultAction:event.preventDefaultAction};/**\n     * Raised when a mouse or touch drag operation occurs on the {@link OpenSeadragon.Viewer#canvas} element.\n     *\n     * @event canvas-drag\n     * @memberof OpenSeadragon.Viewer\n     * @type {object}\n     * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.\n     * @property {OpenSeadragon.MouseTracker} tracker - A reference to the MouseTracker which originated this event.\n     * @property {OpenSeadragon.Point} position - The position of the event relative to the tracked element.\n     * @property {OpenSeadragon.Point} delta - The x,y components of the difference between start drag and end drag.\n     * @property {Number} speed - Current computed speed, in pixels per second.\n     * @property {Number} direction - Current computed direction, expressed as an angle counterclockwise relative to the positive X axis (-pi to pi, in radians). Only valid if speed > 0.\n     * @property {Boolean} shift - True if the shift key was pressed during this event.\n     * @property {Object} originalEvent - The original DOM event.\n     * @property {Boolean} preventDefaultAction - Set to true to prevent default drag behaviour. Default: false.\n     * @property {?Object} userData - Arbitrary subscriber-defined object.\n     */this.raiseEvent('canvas-drag',canvasDragEventArgs);if(!canvasDragEventArgs.preventDefaultAction&&this.viewport){gestureSettings=this.gestureSettingsByDeviceType(event.pointerType);if(!this.panHorizontal){event.delta.x=0;}if(!this.panVertical){event.delta.y=0;}if(this.viewport.flipped){event.delta.x=-event.delta.x;}if(this.constrainDuringPan){var delta=this.viewport.deltaPointsFromPixels(event.delta.negate());this.viewport.centerSpringX.target.value+=delta.x;this.viewport.centerSpringY.target.value+=delta.y;var bounds=this.viewport.getBounds();var constrainedBounds=this.viewport.getConstrainedBounds();this.viewport.centerSpringX.target.value-=delta.x;this.viewport.centerSpringY.target.value-=delta.y;if(bounds.x!=constrainedBounds.x){event.delta.x=0;}if(bounds.y!=constrainedBounds.y){event.delta.y=0;}}this.viewport.panBy(this.viewport.deltaPointsFromPixels(event.delta.negate()),gestureSettings.flickEnabled&&!this.constrainDuringPan);}}function onCanvasDragEnd(event){if(!event.preventDefaultAction&&this.viewport){var gestureSettings=this.gestureSettingsByDeviceType(event.pointerType);if(gestureSettings.flickEnabled&&event.speed>=gestureSettings.flickMinSpeed){var amplitudeX=0;if(this.panHorizontal){amplitudeX=gestureSettings.flickMomentum*event.speed*Math.cos(event.direction);}var amplitudeY=0;if(this.panVertical){amplitudeY=gestureSettings.flickMomentum*event.speed*Math.sin(event.direction);}var center=this.viewport.pixelFromPoint(this.viewport.getCenter(true));var target=this.viewport.pointFromPixel(new $.Point(center.x-amplitudeX,center.y-amplitudeY));this.viewport.panTo(target,false);}this.viewport.applyConstraints();}/**\n     * Raised when a mouse or touch drag operation ends on the {@link OpenSeadragon.Viewer#canvas} element.\n     *\n     * @event canvas-drag-end\n     * @memberof OpenSeadragon.Viewer\n     * @type {object}\n     * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.\n     * @property {OpenSeadragon.MouseTracker} tracker - A reference to the MouseTracker which originated this event.\n     * @property {OpenSeadragon.Point} position - The position of the event relative to the tracked element.\n     * @property {Number} speed - Speed at the end of a drag gesture, in pixels per second.\n     * @property {Number} direction - Direction at the end of a drag gesture, expressed as an angle counterclockwise relative to the positive X axis (-pi to pi, in radians). Only valid if speed > 0.\n     * @property {Boolean} shift - True if the shift key was pressed during this event.\n     * @property {Object} originalEvent - The original DOM event.\n     * @property {?Object} userData - Arbitrary subscriber-defined object.\n     */this.raiseEvent('canvas-drag-end',{tracker:event.eventSource,position:event.position,speed:event.speed,direction:event.direction,shift:event.shift,originalEvent:event.originalEvent});}function onCanvasEnter(event){/**\n     * Raised when a pointer enters the {@link OpenSeadragon.Viewer#canvas} element.\n     *\n     * @event canvas-enter\n     * @memberof OpenSeadragon.Viewer\n     * @type {object}\n     * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.\n     * @property {OpenSeadragon.MouseTracker} tracker - A reference to the MouseTracker which originated this event.\n     * @property {String} pointerType - \"mouse\", \"touch\", \"pen\", etc.\n     * @property {OpenSeadragon.Point} position - The position of the event relative to the tracked element.\n     * @property {Number} buttons - Current buttons pressed. A combination of bit flags 0: none, 1: primary (or touch contact), 2: secondary, 4: aux (often middle), 8: X1 (often back), 16: X2 (often forward), 32: pen eraser.\n     * @property {Number} pointers - Number of pointers (all types) active in the tracked element.\n     * @property {Boolean} insideElementPressed - True if the left mouse button is currently being pressed and was initiated inside the tracked element, otherwise false.\n     * @property {Boolean} buttonDownAny - Was the button down anywhere in the screen during the event. <span style=\"color:red;\">Deprecated. Use buttons instead.</span>\n     * @property {Object} originalEvent - The original DOM event.\n     * @property {?Object} userData - Arbitrary subscriber-defined object.\n     */this.raiseEvent('canvas-enter',{tracker:event.eventSource,pointerType:event.pointerType,position:event.position,buttons:event.buttons,pointers:event.pointers,insideElementPressed:event.insideElementPressed,buttonDownAny:event.buttonDownAny,originalEvent:event.originalEvent});}function onCanvasExit(event){if(window.location!=window.parent.location){$.MouseTracker.resetAllMouseTrackers();}/**\n     * Raised when a pointer leaves the {@link OpenSeadragon.Viewer#canvas} element.\n     *\n     * @event canvas-exit\n     * @memberof OpenSeadragon.Viewer\n     * @type {object}\n     * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.\n     * @property {OpenSeadragon.MouseTracker} tracker - A reference to the MouseTracker which originated this event.\n     * @property {String} pointerType - \"mouse\", \"touch\", \"pen\", etc.\n     * @property {OpenSeadragon.Point} position - The position of the event relative to the tracked element.\n     * @property {Number} buttons - Current buttons pressed. A combination of bit flags 0: none, 1: primary (or touch contact), 2: secondary, 4: aux (often middle), 8: X1 (often back), 16: X2 (often forward), 32: pen eraser.\n     * @property {Number} pointers - Number of pointers (all types) active in the tracked element.\n     * @property {Boolean} insideElementPressed - True if the left mouse button is currently being pressed and was initiated inside the tracked element, otherwise false.\n     * @property {Boolean} buttonDownAny - Was the button down anywhere in the screen during the event. <span style=\"color:red;\">Deprecated. Use buttons instead.</span>\n     * @property {Object} originalEvent - The original DOM event.\n     * @property {?Object} userData - Arbitrary subscriber-defined object.\n     */this.raiseEvent('canvas-exit',{tracker:event.eventSource,pointerType:event.pointerType,position:event.position,buttons:event.buttons,pointers:event.pointers,insideElementPressed:event.insideElementPressed,buttonDownAny:event.buttonDownAny,originalEvent:event.originalEvent});}function onCanvasPress(event){/**\n     * Raised when the primary mouse button is pressed or touch starts on the {@link OpenSeadragon.Viewer#canvas} element.\n     *\n     * @event canvas-press\n     * @memberof OpenSeadragon.Viewer\n     * @type {object}\n     * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.\n     * @property {OpenSeadragon.MouseTracker} tracker - A reference to the MouseTracker which originated this event.\n     * @property {String} pointerType - \"mouse\", \"touch\", \"pen\", etc.\n     * @property {OpenSeadragon.Point} position - The position of the event relative to the tracked element.\n     * @property {Boolean} insideElementPressed - True if the left mouse button is currently being pressed and was initiated inside the tracked element, otherwise false.\n     * @property {Boolean} insideElementReleased - True if the cursor still inside the tracked element when the button was released.\n     * @property {Object} originalEvent - The original DOM event.\n     * @property {?Object} userData - Arbitrary subscriber-defined object.\n     */this.raiseEvent('canvas-press',{tracker:event.eventSource,pointerType:event.pointerType,position:event.position,insideElementPressed:event.insideElementPressed,insideElementReleased:event.insideElementReleased,originalEvent:event.originalEvent});}function onCanvasRelease(event){/**\n     * Raised when the primary mouse button is released or touch ends on the {@link OpenSeadragon.Viewer#canvas} element.\n     *\n     * @event canvas-release\n     * @memberof OpenSeadragon.Viewer\n     * @type {object}\n     * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.\n     * @property {OpenSeadragon.MouseTracker} tracker - A reference to the MouseTracker which originated this event.\n     * @property {String} pointerType - \"mouse\", \"touch\", \"pen\", etc.\n     * @property {OpenSeadragon.Point} position - The position of the event relative to the tracked element.\n     * @property {Boolean} insideElementPressed - True if the left mouse button is currently being pressed and was initiated inside the tracked element, otherwise false.\n     * @property {Boolean} insideElementReleased - True if the cursor still inside the tracked element when the button was released.\n     * @property {Object} originalEvent - The original DOM event.\n     * @property {?Object} userData - Arbitrary subscriber-defined object.\n     */this.raiseEvent('canvas-release',{tracker:event.eventSource,pointerType:event.pointerType,position:event.position,insideElementPressed:event.insideElementPressed,insideElementReleased:event.insideElementReleased,originalEvent:event.originalEvent});}function onCanvasNonPrimaryPress(event){/**\n     * Raised when any non-primary pointer button is pressed on the {@link OpenSeadragon.Viewer#canvas} element.\n     *\n     * @event canvas-nonprimary-press\n     * @memberof OpenSeadragon.Viewer\n     * @type {object}\n     * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.\n     * @property {OpenSeadragon.MouseTracker} tracker - A reference to the MouseTracker which originated this event.\n     * @property {OpenSeadragon.Point} position - The position of the event relative to the tracked element.\n     * @property {String} pointerType - \"mouse\", \"touch\", \"pen\", etc.\n     * @property {Number} button - Button which caused the event.\n     *      -1: none, 0: primary/left, 1: aux/middle, 2: secondary/right, 3: X1/back, 4: X2/forward, 5: pen eraser.\n     * @property {Number} buttons - Current buttons pressed.\n     *      Combination of bit flags 0: none, 1: primary (or touch contact), 2: secondary, 4: aux (often middle), 8: X1 (often back), 16: X2 (often forward), 32: pen eraser.\n     * @property {Object} originalEvent - The original DOM event.\n     * @property {?Object} userData - Arbitrary subscriber-defined object.\n     */this.raiseEvent('canvas-nonprimary-press',{tracker:event.eventSource,position:event.position,pointerType:event.pointerType,button:event.button,buttons:event.buttons,originalEvent:event.originalEvent});}function onCanvasNonPrimaryRelease(event){/**\n     * Raised when any non-primary pointer button is released on the {@link OpenSeadragon.Viewer#canvas} element.\n     *\n     * @event canvas-nonprimary-release\n     * @memberof OpenSeadragon.Viewer\n     * @type {object}\n     * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.\n     * @property {OpenSeadragon.MouseTracker} tracker - A reference to the MouseTracker which originated this event.\n     * @property {OpenSeadragon.Point} position - The position of the event relative to the tracked element.\n     * @property {String} pointerType - \"mouse\", \"touch\", \"pen\", etc.\n     * @property {Number} button - Button which caused the event.\n     *      -1: none, 0: primary/left, 1: aux/middle, 2: secondary/right, 3: X1/back, 4: X2/forward, 5: pen eraser.\n     * @property {Number} buttons - Current buttons pressed.\n     *      Combination of bit flags 0: none, 1: primary (or touch contact), 2: secondary, 4: aux (often middle), 8: X1 (often back), 16: X2 (often forward), 32: pen eraser.\n     * @property {Object} originalEvent - The original DOM event.\n     * @property {?Object} userData - Arbitrary subscriber-defined object.\n     */this.raiseEvent('canvas-nonprimary-release',{tracker:event.eventSource,position:event.position,pointerType:event.pointerType,button:event.button,buttons:event.buttons,originalEvent:event.originalEvent});}function onCanvasPinch(event){var gestureSettings,centerPt,lastCenterPt,panByPt;if(!event.preventDefaultAction&&this.viewport){gestureSettings=this.gestureSettingsByDeviceType(event.pointerType);if(gestureSettings.pinchToZoom){centerPt=this.viewport.pointFromPixel(event.center,true);lastCenterPt=this.viewport.pointFromPixel(event.lastCenter,true);panByPt=lastCenterPt.minus(centerPt);if(!this.panHorizontal){panByPt.x=0;}if(!this.panVertical){panByPt.y=0;}this.viewport.zoomBy(event.distance/event.lastDistance,centerPt,true);if(gestureSettings.zoomToRefPoint){this.viewport.panBy(panByPt,true);}this.viewport.applyConstraints();}if(gestureSettings.pinchRotate){// Pinch rotate\nvar angle1=Math.atan2(event.gesturePoints[0].currentPos.y-event.gesturePoints[1].currentPos.y,event.gesturePoints[0].currentPos.x-event.gesturePoints[1].currentPos.x);var angle2=Math.atan2(event.gesturePoints[0].lastPos.y-event.gesturePoints[1].lastPos.y,event.gesturePoints[0].lastPos.x-event.gesturePoints[1].lastPos.x);this.viewport.setRotation(this.viewport.getRotation()+(angle1-angle2)*(180/Math.PI));}}/**\n     * Raised when a pinch event occurs on the {@link OpenSeadragon.Viewer#canvas} element.\n     *\n     * @event canvas-pinch\n     * @memberof OpenSeadragon.Viewer\n     * @type {object}\n     * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.\n     * @property {OpenSeadragon.MouseTracker} tracker - A reference to the MouseTracker which originated this event.\n     * @property {Array.<OpenSeadragon.MouseTracker.GesturePoint>} gesturePoints - Gesture points associated with the gesture. Velocity data can be found here.\n     * @property {OpenSeadragon.Point} lastCenter - The previous center point of the two pinch contact points relative to the tracked element.\n     * @property {OpenSeadragon.Point} center - The center point of the two pinch contact points relative to the tracked element.\n     * @property {Number} lastDistance - The previous distance between the two pinch contact points in CSS pixels.\n     * @property {Number} distance - The distance between the two pinch contact points in CSS pixels.\n     * @property {Boolean} shift - True if the shift key was pressed during this event.\n     * @property {Object} originalEvent - The original DOM event.\n     * @property {?Object} userData - Arbitrary subscriber-defined object.\n     */this.raiseEvent('canvas-pinch',{tracker:event.eventSource,gesturePoints:event.gesturePoints,lastCenter:event.lastCenter,center:event.center,lastDistance:event.lastDistance,distance:event.distance,shift:event.shift,originalEvent:event.originalEvent});//cancels event\nreturn false;}function onCanvasScroll(event){var gestureSettings,factor,thisScrollTime,deltaScrollTime;/* Certain scroll devices fire the scroll event way too fast so we are injecting a simple adjustment to keep things\n     * partially normalized. If we have already fired an event within the last 'minScrollDelta' milliseconds we skip\n     * this one and wait for the next event. */thisScrollTime=$.now();deltaScrollTime=thisScrollTime-this._lastScrollTime;if(deltaScrollTime>this.minScrollDeltaTime){this._lastScrollTime=thisScrollTime;if(this.viewport.flipped){event.position.x=this.viewport.getContainerSize().x-event.position.x;}if(!event.preventDefaultAction&&this.viewport){gestureSettings=this.gestureSettingsByDeviceType(event.pointerType);if(gestureSettings.scrollToZoom){factor=Math.pow(this.zoomPerScroll,event.scroll);this.viewport.zoomBy(factor,gestureSettings.zoomToRefPoint?this.viewport.pointFromPixel(event.position,true):null);this.viewport.applyConstraints();}}/**\n         * Raised when a scroll event occurs on the {@link OpenSeadragon.Viewer#canvas} element (mouse wheel).\n         *\n         * @event canvas-scroll\n         * @memberof OpenSeadragon.Viewer\n         * @type {object}\n         * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.\n         * @property {OpenSeadragon.MouseTracker} tracker - A reference to the MouseTracker which originated this event.\n         * @property {OpenSeadragon.Point} position - The position of the event relative to the tracked element.\n         * @property {Number} scroll - The scroll delta for the event.\n         * @property {Boolean} shift - True if the shift key was pressed during this event.\n         * @property {Object} originalEvent - The original DOM event.\n         * @property {?Object} userData - Arbitrary subscriber-defined object.\n         */this.raiseEvent('canvas-scroll',{tracker:event.eventSource,position:event.position,scroll:event.scroll,shift:event.shift,originalEvent:event.originalEvent});if(gestureSettings&&gestureSettings.scrollToZoom){//cancels event\nreturn false;}}else{gestureSettings=this.gestureSettingsByDeviceType(event.pointerType);if(gestureSettings&&gestureSettings.scrollToZoom){return false;// We are swallowing this event\n}}}function onContainerEnter(event){THIS[this.hash].mouseInside=true;abortControlsAutoHide(this);/**\n     * Raised when the cursor enters the {@link OpenSeadragon.Viewer#container} element.\n     *\n     * @event container-enter\n     * @memberof OpenSeadragon.Viewer\n     * @type {object}\n     * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.\n     * @property {OpenSeadragon.MouseTracker} tracker - A reference to the MouseTracker which originated this event.\n     * @property {OpenSeadragon.Point} position - The position of the event relative to the tracked element.\n     * @property {Number} buttons - Current buttons pressed. A combination of bit flags 0: none, 1: primary (or touch contact), 2: secondary, 4: aux (often middle), 8: X1 (often back), 16: X2 (often forward), 32: pen eraser.\n     * @property {Number} pointers - Number of pointers (all types) active in the tracked element.\n     * @property {Boolean} insideElementPressed - True if the left mouse button is currently being pressed and was initiated inside the tracked element, otherwise false.\n     * @property {Boolean} buttonDownAny - Was the button down anywhere in the screen during the event. <span style=\"color:red;\">Deprecated. Use buttons instead.</span>\n     * @property {Object} originalEvent - The original DOM event.\n     * @property {?Object} userData - Arbitrary subscriber-defined object.\n     */this.raiseEvent('container-enter',{tracker:event.eventSource,position:event.position,buttons:event.buttons,pointers:event.pointers,insideElementPressed:event.insideElementPressed,buttonDownAny:event.buttonDownAny,originalEvent:event.originalEvent});}function onContainerExit(event){if(event.pointers<1){THIS[this.hash].mouseInside=false;if(!THIS[this.hash].animating){beginControlsAutoHide(this);}}/**\n     * Raised when the cursor leaves the {@link OpenSeadragon.Viewer#container} element.\n     *\n     * @event container-exit\n     * @memberof OpenSeadragon.Viewer\n     * @type {object}\n     * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.\n     * @property {OpenSeadragon.MouseTracker} tracker - A reference to the MouseTracker which originated this event.\n     * @property {OpenSeadragon.Point} position - The position of the event relative to the tracked element.\n     * @property {Number} buttons - Current buttons pressed. A combination of bit flags 0: none, 1: primary (or touch contact), 2: secondary, 4: aux (often middle), 8: X1 (often back), 16: X2 (often forward), 32: pen eraser.\n     * @property {Number} pointers - Number of pointers (all types) active in the tracked element.\n     * @property {Boolean} insideElementPressed - True if the left mouse button is currently being pressed and was initiated inside the tracked element, otherwise false.\n     * @property {Boolean} buttonDownAny - Was the button down anywhere in the screen during the event. <span style=\"color:red;\">Deprecated. Use buttons instead.</span>\n     * @property {Object} originalEvent - The original DOM event.\n     * @property {?Object} userData - Arbitrary subscriber-defined object.\n     */this.raiseEvent('container-exit',{tracker:event.eventSource,position:event.position,buttons:event.buttons,pointers:event.pointers,insideElementPressed:event.insideElementPressed,buttonDownAny:event.buttonDownAny,originalEvent:event.originalEvent});}///////////////////////////////////////////////////////////////////////////////\n// Page update routines ( aka Views - for future reference )\n///////////////////////////////////////////////////////////////////////////////\nfunction updateMulti(viewer){updateOnce(viewer);// Request the next frame, unless we've been closed\nif(viewer.isOpen()){viewer._updateRequestId=scheduleUpdate(viewer,updateMulti);}else{viewer._updateRequestId=false;}}function updateOnce(viewer){//viewer.profiler.beginUpdate();\nif(viewer._opening){return;}if(viewer.autoResize){var containerSize=_getSafeElemSize(viewer.container);var prevContainerSize=THIS[viewer.hash].prevContainerSize;if(!containerSize.equals(prevContainerSize)){var viewport=viewer.viewport;if(viewer.preserveImageSizeOnResize){var resizeRatio=prevContainerSize.x/containerSize.x;var zoom=viewport.getZoom()*resizeRatio;var center=viewport.getCenter();viewport.resize(containerSize,false);viewport.zoomTo(zoom,null,true);viewport.panTo(center,true);}else{// maintain image position\nvar oldBounds=viewport.getBounds();viewport.resize(containerSize,true);viewport.fitBoundsWithConstraints(oldBounds,true);}THIS[viewer.hash].prevContainerSize=containerSize;THIS[viewer.hash].forceRedraw=true;}}var viewportChange=viewer.viewport.update();var animated=viewer.world.update()||viewportChange;if(viewportChange){/**\n         * Raised when any spring animation update occurs (zoom, pan, etc.),\n         * before the viewer has drawn the new location.\n         *\n         * @event viewport-change\n         * @memberof OpenSeadragon.Viewer\n         * @type {object}\n         * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.\n         * @property {?Object} userData - Arbitrary subscriber-defined object.\n         */viewer.raiseEvent('viewport-change');}if(viewer.referenceStrip){animated=viewer.referenceStrip.update(viewer.viewport)||animated;}if(!THIS[viewer.hash].animating&&animated){/**\n         * Raised when any spring animation starts (zoom, pan, etc.).\n         *\n         * @event animation-start\n         * @memberof OpenSeadragon.Viewer\n         * @type {object}\n         * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.\n         * @property {?Object} userData - Arbitrary subscriber-defined object.\n         */viewer.raiseEvent(\"animation-start\");abortControlsAutoHide(viewer);}if(animated||THIS[viewer.hash].forceRedraw||viewer.world.needsDraw()){drawWorld(viewer);viewer._drawOverlays();if(viewer.navigator){viewer.navigator.update(viewer.viewport);}THIS[viewer.hash].forceRedraw=false;if(animated){/**\n             * Raised when any spring animation update occurs (zoom, pan, etc.),\n             * after the viewer has drawn the new location.\n             *\n             * @event animation\n             * @memberof OpenSeadragon.Viewer\n             * @type {object}\n             * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.\n             * @property {?Object} userData - Arbitrary subscriber-defined object.\n             */viewer.raiseEvent(\"animation\");}}if(THIS[viewer.hash].animating&&!animated){/**\n         * Raised when any spring animation ends (zoom, pan, etc.).\n         *\n         * @event animation-finish\n         * @memberof OpenSeadragon.Viewer\n         * @type {object}\n         * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.\n         * @property {?Object} userData - Arbitrary subscriber-defined object.\n         */viewer.raiseEvent(\"animation-finish\");if(!THIS[viewer.hash].mouseInside){beginControlsAutoHide(viewer);}}THIS[viewer.hash].animating=animated;//viewer.profiler.endUpdate();\n}function drawWorld(viewer){viewer.imageLoader.clear();viewer.drawer.clear();viewer.world.draw();/**\n     * <em>- Needs documentation -</em>\n     *\n     * @event update-viewport\n     * @memberof OpenSeadragon.Viewer\n     * @type {object}\n     * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.\n     * @property {?Object} userData - Arbitrary subscriber-defined object.\n     */viewer.raiseEvent('update-viewport',{});}///////////////////////////////////////////////////////////////////////////////\n// Navigation Controls\n///////////////////////////////////////////////////////////////////////////////\nfunction resolveUrl(prefix,url){return prefix?prefix+url:url;}function beginZoomingIn(){THIS[this.hash].lastZoomTime=$.now();THIS[this.hash].zoomFactor=this.zoomPerSecond;THIS[this.hash].zooming=true;scheduleZoom(this);}function beginZoomingOut(){THIS[this.hash].lastZoomTime=$.now();THIS[this.hash].zoomFactor=1.0/this.zoomPerSecond;THIS[this.hash].zooming=true;scheduleZoom(this);}function endZooming(){THIS[this.hash].zooming=false;}function scheduleZoom(viewer){$.requestAnimationFrame($.delegate(viewer,doZoom));}function doZoom(){var currentTime,deltaTime,adjustedFactor;if(THIS[this.hash].zooming&&this.viewport){currentTime=$.now();deltaTime=currentTime-THIS[this.hash].lastZoomTime;adjustedFactor=Math.pow(THIS[this.hash].zoomFactor,deltaTime/1000);this.viewport.zoomBy(adjustedFactor);this.viewport.applyConstraints();THIS[this.hash].lastZoomTime=currentTime;scheduleZoom(this);}}function doSingleZoomIn(){if(this.viewport){THIS[this.hash].zooming=false;this.viewport.zoomBy(this.zoomPerClick/1.0);this.viewport.applyConstraints();}}function doSingleZoomOut(){if(this.viewport){THIS[this.hash].zooming=false;this.viewport.zoomBy(1.0/this.zoomPerClick);this.viewport.applyConstraints();}}function lightUp(){this.buttons.emulateEnter();this.buttons.emulateExit();}function onHome(){if(this.viewport){this.viewport.goHome();}}function onFullScreen(){if(this.isFullPage()&&!$.isFullScreen()){// Is fullPage but not fullScreen\nthis.setFullPage(false);}else{this.setFullScreen(!this.isFullPage());}// correct for no mouseout event on change\nif(this.buttons){this.buttons.emulateExit();}this.fullPageButton.element.focus();if(this.viewport){this.viewport.applyConstraints();}}function onRotateLeft(){if(this.viewport){var currRotation=this.viewport.getRotation();if(this.viewport.flipped){currRotation=$.positiveModulo(currRotation+this.rotationIncrement,360);}else{currRotation=$.positiveModulo(currRotation-this.rotationIncrement,360);}this.viewport.setRotation(currRotation);}}function onRotateRight(){if(this.viewport){var currRotation=this.viewport.getRotation();if(this.viewport.flipped){currRotation=$.positiveModulo(currRotation-this.rotationIncrement,360);}else{currRotation=$.positiveModulo(currRotation+this.rotationIncrement,360);}this.viewport.setRotation(currRotation);}}/**\n * Note: When pressed flip control button\n */function onFlip(){this.viewport.toggleFlip();}function onPrevious(){var previous=this._sequenceIndex-1;if(this.navPrevNextWrap&&previous<0){previous+=this.tileSources.length;}this.goToPage(previous);}function onNext(){var next=this._sequenceIndex+1;if(this.navPrevNextWrap&&next>=this.tileSources.length){next=0;}this.goToPage(next);}})(OpenSeadragon);/*\n * OpenSeadragon - Navigator\n *\n * Copyright (C) 2009 CodePlex Foundation\n * Copyright (C) 2010-2013 OpenSeadragon contributors\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * - Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * - Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * - Neither the name of CodePlex Foundation nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */(function($){/**\n * @class Navigator\n * @classdesc The Navigator provides a small view of the current image as fixed\n * while representing the viewport as a moving box serving as a frame\n * of reference in the larger viewport as to which portion of the image\n * is currently being examined.  The navigator's viewport can be interacted\n * with using the keyboard or the mouse.\n *\n * @memberof OpenSeadragon\n * @extends OpenSeadragon.Viewer\n * @extends OpenSeadragon.EventSource\n * @param {Object} options\n */$.Navigator=function(options){var viewer=options.viewer,_this=this,viewerSize,navigatorSize;//We may need to create a new element and id if they did not\n//provide the id for the existing element\nif(!options.id){options.id='navigator-'+$.now();this.element=$.makeNeutralElement(\"div\");options.controlOptions={anchor:$.ControlAnchor.TOP_RIGHT,attachToViewer:true,autoFade:options.autoFade};if(options.position){if('BOTTOM_RIGHT'==options.position){options.controlOptions.anchor=$.ControlAnchor.BOTTOM_RIGHT;}else if('BOTTOM_LEFT'==options.position){options.controlOptions.anchor=$.ControlAnchor.BOTTOM_LEFT;}else if('TOP_RIGHT'==options.position){options.controlOptions.anchor=$.ControlAnchor.TOP_RIGHT;}else if('TOP_LEFT'==options.position){options.controlOptions.anchor=$.ControlAnchor.TOP_LEFT;}else if('ABSOLUTE'==options.position){options.controlOptions.anchor=$.ControlAnchor.ABSOLUTE;options.controlOptions.top=options.top;options.controlOptions.left=options.left;options.controlOptions.height=options.height;options.controlOptions.width=options.width;}}}else{this.element=document.getElementById(options.id);options.controlOptions={anchor:$.ControlAnchor.NONE,attachToViewer:false,autoFade:false};}this.element.id=options.id;this.element.className+=' navigator';options=$.extend(true,{sizeRatio:$.DEFAULT_SETTINGS.navigatorSizeRatio},options,{element:this.element,tabIndex:-1,// No keyboard navigation, omit from tab order\n//These need to be overridden to prevent recursion since\n//the navigator is a viewer and a viewer has a navigator\nshowNavigator:false,mouseNavEnabled:false,showNavigationControl:false,showSequenceControl:false,immediateRender:true,blendTime:0,animationTime:0,autoResize:options.autoResize,// prevent resizing the navigator from adding unwanted space around the image\nminZoomImageRatio:1.0,background:options.background,opacity:options.opacity,borderColor:options.borderColor,displayRegionColor:options.displayRegionColor});options.minPixelRatio=this.minPixelRatio=viewer.minPixelRatio;$.setElementTouchActionNone(this.element);this.borderWidth=2;//At some browser magnification levels the display regions lines up correctly, but at some there appears to\n//be a one pixel gap.\nthis.fudge=new $.Point(1,1);this.totalBorderWidths=new $.Point(this.borderWidth*2,this.borderWidth*2).minus(this.fudge);if(options.controlOptions.anchor!=$.ControlAnchor.NONE){(function(style,borderWidth){style.margin='0px';style.border=borderWidth+'px solid '+options.borderColor;style.padding='0px';style.background=options.background;style.opacity=options.opacity;style.overflow='hidden';})(this.element.style,this.borderWidth);}this.displayRegion=$.makeNeutralElement(\"div\");this.displayRegion.id=this.element.id+'-displayregion';this.displayRegion.className='displayregion';(function(style,borderWidth){style.position='relative';style.top='0px';style.left='0px';style.fontSize='0px';style.overflow='hidden';style.border=borderWidth+'px solid '+options.displayRegionColor;style.margin='0px';style.padding='0px';//TODO: IE doesn't like this property being set\n//try{ style.outline  = '2px auto #909'; }catch(e){/*ignore*/}\nstyle.background='transparent';// We use square bracket notation on the statement below, because float is a keyword.\n// This is important for the Google Closure compiler, if nothing else.\n/*jshint sub:true */style['float']='left';//Webkit\nstyle.cssFloat='left';//Firefox\nstyle.styleFloat='left';//IE\nstyle.zIndex=999999999;style.cursor='default';})(this.displayRegion.style,this.borderWidth);this.displayRegionContainer=$.makeNeutralElement(\"div\");this.displayRegionContainer.id=this.element.id+'-displayregioncontainer';this.displayRegionContainer.className=\"displayregioncontainer\";this.displayRegionContainer.style.width=\"100%\";this.displayRegionContainer.style.height=\"100%\";viewer.addControl(this.element,options.controlOptions);this._resizeWithViewer=options.controlOptions.anchor!=$.ControlAnchor.ABSOLUTE&&options.controlOptions.anchor!=$.ControlAnchor.NONE;if(options.width&&options.height){this.setWidth(options.width);this.setHeight(options.height);}else if(this._resizeWithViewer){viewerSize=$.getElementSize(viewer.element);this.element.style.height=Math.round(viewerSize.y*options.sizeRatio)+'px';this.element.style.width=Math.round(viewerSize.x*options.sizeRatio)+'px';this.oldViewerSize=viewerSize;navigatorSize=$.getElementSize(this.element);this.elementArea=navigatorSize.x*navigatorSize.y;}this.oldContainerSize=new $.Point(0,0);$.Viewer.apply(this,[options]);this.displayRegionContainer.appendChild(this.displayRegion);this.element.getElementsByTagName('div')[0].appendChild(this.displayRegionContainer);function rotate(degrees){_setTransformRotate(_this.displayRegionContainer,degrees);_setTransformRotate(_this.displayRegion,-degrees);_this.viewport.setRotation(degrees);}if(options.navigatorRotate){var degrees=options.viewer.viewport?options.viewer.viewport.getRotation():options.viewer.degrees||0;rotate(degrees);options.viewer.addHandler(\"rotate\",function(args){rotate(args.degrees);});}// Remove the base class' (Viewer's) innerTracker and replace it with our own\nthis.innerTracker.destroy();this.innerTracker=new $.MouseTracker({element:this.element,dragHandler:$.delegate(this,onCanvasDrag),clickHandler:$.delegate(this,onCanvasClick),releaseHandler:$.delegate(this,onCanvasRelease),scrollHandler:$.delegate(this,onCanvasScroll)});this.addHandler(\"reset-size\",function(){if(_this.viewport){_this.viewport.goHome(true);}});viewer.world.addHandler(\"item-index-change\",function(event){window.setTimeout(function(){var item=_this.world.getItemAt(event.previousIndex);_this.world.setItemIndex(item,event.newIndex);},1);});viewer.world.addHandler(\"remove-item\",function(event){var theirItem=event.item;var myItem=_this._getMatchingItem(theirItem);if(myItem){_this.world.removeItem(myItem);}});this.update(viewer.viewport);};$.extend($.Navigator.prototype,$.EventSource.prototype,$.Viewer.prototype,/** @lends OpenSeadragon.Navigator.prototype */{/**\n     * Used to notify the navigator when its size has changed.\n     * Especially useful when {@link OpenSeadragon.Options}.navigatorAutoResize is set to false and the navigator is resizable.\n     * @function\n     */updateSize:function updateSize(){if(this.viewport){var containerSize=new $.Point(this.container.clientWidth===0?1:this.container.clientWidth,this.container.clientHeight===0?1:this.container.clientHeight);if(!containerSize.equals(this.oldContainerSize)){this.viewport.resize(containerSize,true);this.viewport.goHome(true);this.oldContainerSize=containerSize;this.drawer.clear();this.world.draw();}}},/**\n     * Explicitly sets the width of the navigator, in web coordinates. Disables automatic resizing.\n     * @param {Number|String} width - the new width, either a number of pixels or a CSS string, such as \"100%\"\n     */setWidth:function setWidth(width){this.width=width;this.element.style.width=typeof width==\"number\"?width+'px':width;this._resizeWithViewer=false;},/**\n     * Explicitly sets the height of the navigator, in web coordinates. Disables automatic resizing.\n     * @param {Number|String} height - the new height, either a number of pixels or a CSS string, such as \"100%\"\n     */setHeight:function setHeight(height){this.height=height;this.element.style.height=typeof height==\"number\"?height+'px':height;this._resizeWithViewer=false;},/**\n      * Flip navigator element\n      * @param {Boolean} state - Flip state to set.\n      */setFlip:function setFlip(state){this.viewport.setFlip(state);this.setDisplayTransform(this.viewer.viewport.getFlip()?\"scale(-1,1)\":\"scale(1,1)\");return this;},setDisplayTransform:function setDisplayTransform(rule){setElementTransform(this.displayRegion,rule);setElementTransform(this.canvas,rule);setElementTransform(this.element,rule);},/**\n     * Used to update the navigator minimap's viewport rectangle when a change in the viewer's viewport occurs.\n     * @function\n     * @param {OpenSeadragon.Viewport} The viewport this navigator is tracking.\n     */update:function update(viewport){var viewerSize,newWidth,newHeight,bounds,topleft,bottomright;viewerSize=$.getElementSize(this.viewer.element);if(this._resizeWithViewer&&viewerSize.x&&viewerSize.y&&!viewerSize.equals(this.oldViewerSize)){this.oldViewerSize=viewerSize;if(this.maintainSizeRatio||!this.elementArea){newWidth=viewerSize.x*this.sizeRatio;newHeight=viewerSize.y*this.sizeRatio;}else{newWidth=Math.sqrt(this.elementArea*(viewerSize.x/viewerSize.y));newHeight=this.elementArea/newWidth;}this.element.style.width=Math.round(newWidth)+'px';this.element.style.height=Math.round(newHeight)+'px';if(!this.elementArea){this.elementArea=newWidth*newHeight;}this.updateSize();}if(viewport&&this.viewport){bounds=viewport.getBoundsNoRotate(true);topleft=this.viewport.pixelFromPointNoRotate(bounds.getTopLeft(),false);bottomright=this.viewport.pixelFromPointNoRotate(bounds.getBottomRight(),false).minus(this.totalBorderWidths);//update style for navigator-box\nvar style=this.displayRegion.style;style.display=this.world.getItemCount()?'block':'none';style.top=Math.round(topleft.y)+'px';style.left=Math.round(topleft.x)+'px';var width=Math.abs(topleft.x-bottomright.x);var height=Math.abs(topleft.y-bottomright.y);// make sure width and height are non-negative so IE doesn't throw\nstyle.width=Math.round(Math.max(width,0))+'px';style.height=Math.round(Math.max(height,0))+'px';}},// overrides Viewer.addTiledImage\naddTiledImage:function addTiledImage(options){var _this=this;var original=options.originalTiledImage;delete options.original;var optionsClone=$.extend({},options,{success:function success(event){var myItem=event.item;myItem._originalForNavigator=original;_this._matchBounds(myItem,original,true);function matchBounds(){_this._matchBounds(myItem,original);}function matchOpacity(){_this._matchOpacity(myItem,original);}function matchCompositeOperation(){_this._matchCompositeOperation(myItem,original);}original.addHandler('bounds-change',matchBounds);original.addHandler('clip-change',matchBounds);original.addHandler('opacity-change',matchOpacity);original.addHandler('composite-operation-change',matchCompositeOperation);}});return $.Viewer.prototype.addTiledImage.apply(this,[optionsClone]);},// private\n_getMatchingItem:function _getMatchingItem(theirItem){var count=this.world.getItemCount();var item;for(var i=0;i<count;i++){item=this.world.getItemAt(i);if(item._originalForNavigator===theirItem){return item;}}return null;},// private\n_matchBounds:function _matchBounds(myItem,theirItem,immediately){var bounds=theirItem.getBoundsNoRotate();myItem.setPosition(bounds.getTopLeft(),immediately);myItem.setWidth(bounds.width,immediately);myItem.setRotation(theirItem.getRotation(),immediately);myItem.setClip(theirItem.getClip());},// private\n_matchOpacity:function _matchOpacity(myItem,theirItem){myItem.setOpacity(theirItem.opacity);},// private\n_matchCompositeOperation:function _matchCompositeOperation(myItem,theirItem){myItem.setCompositeOperation(theirItem.compositeOperation);}});/**\n * @private\n * @inner\n * @function\n */function onCanvasClick(event){var canvasClickEventArgs={tracker:event.eventSource,position:event.position,quick:event.quick,shift:event.shift,originalEvent:event.originalEvent,preventDefaultAction:event.preventDefaultAction};/**\n   * Raised when a click event occurs on the {@link OpenSeadragon.Viewer#navigator} element.\n   *\n   * @event navigator-click\n   * @memberof OpenSeadragon.Viewer\n   * @type {object}\n   * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.\n   * @property {OpenSeadragon.MouseTracker} tracker - A reference to the MouseTracker which originated this event.\n   * @property {OpenSeadragon.Point} position - The position of the event relative to the tracked element.\n   * @property {Boolean} quick - True only if the clickDistThreshold and clickTimeThreshold are both passed. Useful for differentiating between clicks and drags.\n   * @property {Boolean} shift - True if the shift key was pressed during this event.\n   * @property {Object} originalEvent - The original DOM event.\n   * @property {?Object} userData - Arbitrary subscriber-defined object.\n   * @property {Boolean} preventDefaultAction - Set to true to prevent default click to zoom behaviour. Default: false.\n   */this.viewer.raiseEvent('navigator-click',canvasClickEventArgs);if(!canvasClickEventArgs.preventDefaultAction&&event.quick&&this.viewer.viewport&&(this.panVertical||this.panHorizontal)){if(this.viewer.viewport.flipped){event.position.x=this.viewport.getContainerSize().x-event.position.x;}var target=this.viewport.pointFromPixel(event.position);if(!this.panVertical){// perform only horizonal pan\ntarget.y=this.viewer.viewport.getCenter(true).y;}else if(!this.panHorizontal){// perform only vertical pan\ntarget.x=this.viewer.viewport.getCenter(true).x;}this.viewer.viewport.panTo(target);this.viewer.viewport.applyConstraints();}}/**\n * @private\n * @inner\n * @function\n */function onCanvasDrag(event){var canvasDragEventArgs={tracker:event.eventSource,position:event.position,delta:event.delta,speed:event.speed,direction:event.direction,shift:event.shift,originalEvent:event.originalEvent,preventDefaultAction:event.preventDefaultAction};/**\n     * Raised when a drag event occurs on the {@link OpenSeadragon.Viewer#navigator} element.\n     *\n     * @event navigator-drag\n     * @memberof OpenSeadragon.Viewer\n     * @type {object}\n     * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.\n     * @property {OpenSeadragon.MouseTracker} tracker - A reference to the MouseTracker which originated this event.\n     * @property {OpenSeadragon.Point} position - The position of the event relative to the tracked element.\n     * @property {OpenSeadragon.Point} delta - The x,y components of the difference between start drag and end drag.\n     * @property {Number} speed - Current computed speed, in pixels per second.\n     * @property {Number} direction - Current computed direction, expressed as an angle counterclockwise relative to the positive X axis (-pi to pi, in radians). Only valid if speed > 0.\n     * @property {Boolean} shift - True if the shift key was pressed during this event.\n     * @property {Object} originalEvent - The original DOM event.\n     * @property {?Object} userData - Arbitrary subscriber-defined object.\n     * @property {Boolean} preventDefaultAction - Set to true to prevent default click to zoom behaviour. Default: false.\n     */this.viewer.raiseEvent('navigator-drag',canvasDragEventArgs);if(!canvasDragEventArgs.preventDefaultAction&&this.viewer.viewport){if(!this.panHorizontal){event.delta.x=0;}if(!this.panVertical){event.delta.y=0;}if(this.viewer.viewport.flipped){event.delta.x=-event.delta.x;}this.viewer.viewport.panBy(this.viewport.deltaPointsFromPixels(event.delta));if(this.viewer.constrainDuringPan){this.viewer.viewport.applyConstraints();}}}/**\n * @private\n * @inner\n * @function\n */function onCanvasRelease(event){if(event.insideElementPressed&&this.viewer.viewport){this.viewer.viewport.applyConstraints();}}/**\n * @private\n * @inner\n * @function\n */function onCanvasScroll(event){/**\n     * Raised when a scroll event occurs on the {@link OpenSeadragon.Viewer#navigator} element (mouse wheel, touch pinch, etc.).\n     *\n     * @event navigator-scroll\n     * @memberof OpenSeadragon.Viewer\n     * @type {object}\n     * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.\n     * @property {OpenSeadragon.MouseTracker} tracker - A reference to the MouseTracker which originated this event.\n     * @property {OpenSeadragon.Point} position - The position of the event relative to the tracked element.\n     * @property {Number} scroll - The scroll delta for the event.\n     * @property {Boolean} shift - True if the shift key was pressed during this event.\n     * @property {Object} originalEvent - The original DOM event.\n     * @property {?Object} userData - Arbitrary subscriber-defined object.\n     */this.viewer.raiseEvent('navigator-scroll',{tracker:event.eventSource,position:event.position,scroll:event.scroll,shift:event.shift,originalEvent:event.originalEvent});//don't scroll the page up and down if the user is scrolling\n//in the navigator\nreturn false;}/**\n    * @function\n    * @private\n    * @param {Object} element\n    * @param {Number} degrees\n    */function _setTransformRotate(element,degrees){setElementTransform(element,\"rotate(\"+degrees+\"deg)\");}function setElementTransform(element,rule){element.style.webkitTransform=rule;element.style.mozTransform=rule;element.style.msTransform=rule;element.style.oTransform=rule;element.style.transform=rule;}})(OpenSeadragon);/*\n * OpenSeadragon - getString/setString\n *\n * Copyright (C) 2009 CodePlex Foundation\n * Copyright (C) 2010-2013 OpenSeadragon contributors\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * - Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * - Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * - Neither the name of CodePlex Foundation nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */(function($){//TODO: I guess this is where the i18n needs to be reimplemented.  I'll look\n//      into existing patterns for i18n in javascript but i think that mimicking\n//      pythons gettext might be a reasonable approach.\nvar I18N={Errors:{Dzc:\"Sorry, we don't support Deep Zoom Collections!\",Dzi:\"Hmm, this doesn't appear to be a valid Deep Zoom Image.\",Xml:\"Hmm, this doesn't appear to be a valid Deep Zoom Image.\",ImageFormat:\"Sorry, we don't support {0}-based Deep Zoom Images.\",Security:\"It looks like a security restriction stopped us from \"+\"loading this Deep Zoom Image.\",Status:\"This space unintentionally left blank ({0} {1}).\",OpenFailed:\"Unable to open {0}: {1}\"},Tooltips:{FullPage:\"Toggle full page\",Home:\"Go home\",ZoomIn:\"Zoom in\",ZoomOut:\"Zoom out\",NextPage:\"Next page\",PreviousPage:\"Previous page\",RotateLeft:\"Rotate left\",RotateRight:\"Rotate right\",Flip:\"Flip Horizontally\"}};$.extend($,/** @lends OpenSeadragon */{/**\n     * @function\n     * @param {String} property\n     */getString:function getString(prop){var props=prop.split('.'),string=null,args=arguments,container=I18N,i;for(i=0;i<props.length-1;i++){// in case not a subproperty\ncontainer=container[props[i]]||{};}string=container[props[i]];if(typeof string!=\"string\"){$.console.log(\"Untranslated source string:\",prop);string=\"\";// FIXME: this breaks gettext()-style convention, which would return source\n}return string.replace(/\\{\\d+\\}/g,function(capture){var i=parseInt(capture.match(/\\d+/),10)+1;return i<args.length?args[i]:\"\";});},/**\n     * @function\n     * @param {String} property\n     * @param {*} value\n     */setString:function setString(prop,value){var props=prop.split('.'),container=I18N,i;for(i=0;i<props.length-1;i++){if(!container[props[i]]){container[props[i]]={};}container=container[props[i]];}container[props[i]]=value;}});})(OpenSeadragon);/*\n * OpenSeadragon - Point\n *\n * Copyright (C) 2009 CodePlex Foundation\n * Copyright (C) 2010-2013 OpenSeadragon contributors\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * - Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * - Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * - Neither the name of CodePlex Foundation nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */(function($){/**\n * @class Point\n * @classdesc A Point is really used as a 2-dimensional vector, equally useful for\n * representing a point on a plane, or the height and width of a plane\n * not requiring any other frame of reference.\n *\n * @memberof OpenSeadragon\n * @param {Number} [x] The vector component 'x'. Defaults to the origin at 0.\n * @param {Number} [y] The vector component 'y'. Defaults to the origin at 0.\n */$.Point=function(x,y){/**\n     * The vector component 'x'.\n     * @member {Number} x\n     * @memberof OpenSeadragon.Point#\n     */this.x=typeof x==\"number\"?x:0;/**\n     * The vector component 'y'.\n     * @member {Number} y\n     * @memberof OpenSeadragon.Point#\n     */this.y=typeof y==\"number\"?y:0;};/** @lends OpenSeadragon.Point.prototype */$.Point.prototype={/**\n     * @function\n     * @returns {OpenSeadragon.Point} a duplicate of this Point\n     */clone:function clone(){return new $.Point(this.x,this.y);},/**\n     * Add another Point to this point and return a new Point.\n     * @function\n     * @param {OpenSeadragon.Point} point The point to add vector components.\n     * @returns {OpenSeadragon.Point} A new point representing the sum of the\n     *  vector components\n     */plus:function plus(point){return new $.Point(this.x+point.x,this.y+point.y);},/**\n     * Subtract another Point to this point and return a new Point.\n     * @function\n     * @param {OpenSeadragon.Point} point The point to subtract vector components.\n     * @returns {OpenSeadragon.Point} A new point representing the subtraction of the\n     *  vector components\n     */minus:function minus(point){return new $.Point(this.x-point.x,this.y-point.y);},/**\n     * Multiply this point by a factor and return a new Point.\n     * @function\n     * @param {Number} factor The factor to multiply vector components.\n     * @returns {OpenSeadragon.Point} A new point representing the multiplication\n     *  of the vector components by the factor\n     */times:function times(factor){return new $.Point(this.x*factor,this.y*factor);},/**\n     * Divide this point by a factor and return a new Point.\n     * @function\n     * @param {Number} factor The factor to divide vector components.\n     * @returns {OpenSeadragon.Point} A new point representing the division of the\n     *  vector components by the factor\n     */divide:function divide(factor){return new $.Point(this.x/factor,this.y/factor);},/**\n     * Compute the opposite of this point and return a new Point.\n     * @function\n     * @returns {OpenSeadragon.Point} A new point representing the opposite of the\n     *  vector components\n     */negate:function negate(){return new $.Point(-this.x,-this.y);},/**\n     * Compute the distance between this point and another point.\n     * @function\n     * @param {OpenSeadragon.Point} point The point to compute the distance with.\n     * @returns {Number} The distance between the 2 points\n     */distanceTo:function distanceTo(point){return Math.sqrt(Math.pow(this.x-point.x,2)+Math.pow(this.y-point.y,2));},/**\n     * Compute the squared distance between this point and another point.\n     * Useful for optimizing things like comparing distances.\n     * @function\n     * @param {OpenSeadragon.Point} point The point to compute the squared distance with.\n     * @returns {Number} The squared distance between the 2 points\n     */squaredDistanceTo:function squaredDistanceTo(point){return Math.pow(this.x-point.x,2)+Math.pow(this.y-point.y,2);},/**\n     * Apply a function to each coordinate of this point and return a new point.\n     * @function\n     * @param {function} func The function to apply to each coordinate.\n     * @returns {OpenSeadragon.Point} A new point with the coordinates computed\n     * by the specified function\n     */apply:function apply(func){return new $.Point(func(this.x),func(this.y));},/**\n     * Check if this point is equal to another one.\n     * @function\n     * @param {OpenSeadragon.Point} point The point to compare this point with.\n     * @returns {Boolean} true if they are equal, false otherwise.\n     */equals:function equals(point){return point instanceof $.Point&&this.x===point.x&&this.y===point.y;},/**\n     * Rotates the point around the specified pivot\n     * From http://stackoverflow.com/questions/4465931/rotate-rectangle-around-a-point\n     * @function\n     * @param {Number} degress to rotate around the pivot.\n     * @param {OpenSeadragon.Point} [pivot=(0,0)] Point around which to rotate.\n     * Defaults to the origin.\n     * @returns {OpenSeadragon.Point}. A new point representing the point rotated around the specified pivot\n     */rotate:function rotate(degrees,pivot){pivot=pivot||new $.Point(0,0);var cos;var sin;// Avoid float computations when possible\nif(degrees%90===0){var d=$.positiveModulo(degrees,360);switch(d){case 0:cos=1;sin=0;break;case 90:cos=0;sin=1;break;case 180:cos=-1;sin=0;break;case 270:cos=0;sin=-1;break;}}else{var angle=degrees*Math.PI/180.0;cos=Math.cos(angle);sin=Math.sin(angle);}var x=cos*(this.x-pivot.x)-sin*(this.y-pivot.y)+pivot.x;var y=sin*(this.x-pivot.x)+cos*(this.y-pivot.y)+pivot.y;return new $.Point(x,y);},/**\n     * Convert this point to a string in the format (x,y) where x and y are\n     * rounded to the nearest integer.\n     * @function\n     * @returns {String} A string representation of this point.\n     */toString:function toString(){return\"(\"+Math.round(this.x*100)/100+\",\"+Math.round(this.y*100)/100+\")\";}};})(OpenSeadragon);/*\n * OpenSeadragon - TileSource\n *\n * Copyright (C) 2009 CodePlex Foundation\n * Copyright (C) 2010-2013 OpenSeadragon contributors\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * - Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * - Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * - Neither the name of CodePlex Foundation nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */(function($){/**\n * @class TileSource\n * @classdesc The TileSource contains the most basic implementation required to create a\n * smooth transition between layers in an image pyramid. It has only a single key\n * interface that must be implemented to complete its key functionality:\n * 'getTileUrl'.  It also has several optional interfaces that can be\n * implemented if a new TileSource wishes to support configuration via a simple\n * object or array ('configure') and if the tile source supports or requires\n * configuration via retrieval of a document on the network ala AJAX or JSONP,\n * ('getImageInfo').\n * <br/>\n * By default the image pyramid is split into N layers where the image's longest\n * side in M (in pixels), where N is the smallest integer which satisfies\n *      <strong>2^(N+1) >= M</strong>.\n *\n * @memberof OpenSeadragon\n * @extends OpenSeadragon.EventSource\n * @param {Object} options\n *      You can either specify a URL, or literally define the TileSource (by specifying\n *      width, height, tileSize, tileOverlap, minLevel, and maxLevel). For the former,\n *      the extending class is expected to implement 'getImageInfo' and 'configure'.\n *      For the latter, the construction is assumed to occur through\n *      the extending classes implementation of 'configure'.\n * @param {String} [options.url]\n *      The URL for the data necessary for this TileSource.\n * @param {String} [options.referenceStripThumbnailUrl]\n *      The URL for a thumbnail image to be used by the reference strip\n * @param {Function} [options.success]\n *      A function to be called upon successful creation.\n * @param {Boolean} [options.ajaxWithCredentials]\n *      If this TileSource needs to make an AJAX call, this specifies whether to set\n *      the XHR's withCredentials (for accessing secure data).\n * @param {Object} [options.ajaxHeaders]\n *      A set of headers to include in AJAX requests.\n * @param {Number} [options.width]\n *      Width of the source image at max resolution in pixels.\n * @param {Number} [options.height]\n *      Height of the source image at max resolution in pixels.\n * @param {Number} [options.tileSize]\n *      The size of the tiles to assumed to make up each pyramid layer in pixels.\n *      Tile size determines the point at which the image pyramid must be\n *      divided into a matrix of smaller images.\n *      Use options.tileWidth and options.tileHeight to support non-square tiles.\n * @param {Number} [options.tileWidth]\n *      The width of the tiles to assumed to make up each pyramid layer in pixels.\n * @param {Number} [options.tileHeight]\n *      The height of the tiles to assumed to make up each pyramid layer in pixels.\n * @param {Number} [options.tileOverlap]\n *      The number of pixels each tile is expected to overlap touching tiles.\n * @param {Number} [options.minLevel]\n *      The minimum level to attempt to load.\n * @param {Number} [options.maxLevel]\n *      The maximum level to attempt to load.\n */$.TileSource=function(width,height,tileSize,tileOverlap,minLevel,maxLevel){var _this=this;var args=arguments,options,i;if($.isPlainObject(width)){options=width;}else{options={width:args[0],height:args[1],tileSize:args[2],tileOverlap:args[3],minLevel:args[4],maxLevel:args[5]};}//Tile sources supply some events, namely 'ready' when they must be configured\n//by asynchronously fetching their configuration data.\n$.EventSource.call(this);//we allow options to override anything we don't treat as\n//required via idiomatic options or which is functionally\n//set depending on the state of the readiness of this tile\n//source\n$.extend(true,this,options);if(!this.success){//Any functions that are passed as arguments are bound to the ready callback\nfor(i=0;i<arguments.length;i++){if($.isFunction(arguments[i])){this.success=arguments[i];//only one callback per constructor\nbreak;}}}if(this.success){this.addHandler('ready',function(event){_this.success(event);});}/**\n     * Ratio of width to height\n     * @member {Number} aspectRatio\n     * @memberof OpenSeadragon.TileSource#\n     */ /**\n     * Vector storing x and y dimensions ( width and height respectively ).\n     * @member {OpenSeadragon.Point} dimensions\n     * @memberof OpenSeadragon.TileSource#\n     */ /**\n     * The overlap in pixels each tile shares with its adjacent neighbors.\n     * @member {Number} tileOverlap\n     * @memberof OpenSeadragon.TileSource#\n     */ /**\n     * The minimum pyramid level this tile source supports or should attempt to load.\n     * @member {Number} minLevel\n     * @memberof OpenSeadragon.TileSource#\n     */ /**\n     * The maximum pyramid level this tile source supports or should attempt to load.\n     * @member {Number} maxLevel\n     * @memberof OpenSeadragon.TileSource#\n     */ /**\n     *\n     * @member {Boolean} ready\n     * @memberof OpenSeadragon.TileSource#\n     */if('string'==$.type(arguments[0])){this.url=arguments[0];}if(this.url){//in case the getImageInfo method is overridden and/or implies an\n//async mechanism set some safe defaults first\nthis.aspectRatio=1;this.dimensions=new $.Point(10,10);this._tileWidth=0;this._tileHeight=0;this.tileOverlap=0;this.minLevel=0;this.maxLevel=0;this.ready=false;//configuration via url implies the extending class\n//implements and 'configure'\nthis.getImageInfo(this.url);}else{//explicit configuration via positional args in constructor\n//or the more idiomatic 'options' object\nthis.ready=true;this.aspectRatio=options.width&&options.height?options.width/options.height:1;this.dimensions=new $.Point(options.width,options.height);if(this.tileSize){this._tileWidth=this._tileHeight=this.tileSize;delete this.tileSize;}else{if(this.tileWidth){// We were passed tileWidth in options, but we want to rename it\n// with a leading underscore to make clear that it is not safe to directly modify it\nthis._tileWidth=this.tileWidth;delete this.tileWidth;}else{this._tileWidth=0;}if(this.tileHeight){// See note above about renaming this.tileWidth\nthis._tileHeight=this.tileHeight;delete this.tileHeight;}else{this._tileHeight=0;}}this.tileOverlap=options.tileOverlap?options.tileOverlap:0;this.minLevel=options.minLevel?options.minLevel:0;this.maxLevel=undefined!==options.maxLevel&&null!==options.maxLevel?options.maxLevel:options.width&&options.height?Math.ceil(Math.log(Math.max(options.width,options.height))/Math.log(2)):0;if(this.success&&$.isFunction(this.success)){this.success(this);}}};/** @lends OpenSeadragon.TileSource.prototype */$.TileSource.prototype={getTileSize:function getTileSize(level){$.console.error(\"[TileSource.getTileSize] is deprecated. \"+\"Use TileSource.getTileWidth() and TileSource.getTileHeight() instead\");return this._tileWidth;},/**\n     * Return the tileWidth for a given level.\n     * Subclasses should override this if tileWidth can be different at different levels\n     *   such as in IIIFTileSource.  Code should use this function rather than reading\n     *   from ._tileWidth directly.\n     * @function\n     * @param {Number} level\n     */getTileWidth:function getTileWidth(level){if(!this._tileWidth){return this.getTileSize(level);}return this._tileWidth;},/**\n     * Return the tileHeight for a given level.\n     * Subclasses should override this if tileHeight can be different at different levels\n     *   such as in IIIFTileSource.  Code should use this function rather than reading\n     *   from ._tileHeight directly.\n     * @function\n     * @param {Number} level\n     */getTileHeight:function getTileHeight(level){if(!this._tileHeight){return this.getTileSize(level);}return this._tileHeight;},/**\n     * @function\n     * @param {Number} level\n     */getLevelScale:function getLevelScale(level){// see https://github.com/openseadragon/openseadragon/issues/22\n// we use the tilesources implementation of getLevelScale to generate\n// a memoized re-implementation\nvar levelScaleCache={},i;for(i=0;i<=this.maxLevel;i++){levelScaleCache[i]=1/Math.pow(2,this.maxLevel-i);}this.getLevelScale=function(_level){return levelScaleCache[_level];};return this.getLevelScale(level);},/**\n     * @function\n     * @param {Number} level\n     */getNumTiles:function getNumTiles(level){var scale=this.getLevelScale(level),x=Math.ceil(scale*this.dimensions.x/this.getTileWidth(level)),y=Math.ceil(scale*this.dimensions.y/this.getTileHeight(level));return new $.Point(x,y);},/**\n     * @function\n     * @param {Number} level\n     */getPixelRatio:function getPixelRatio(level){var imageSizeScaled=this.dimensions.times(this.getLevelScale(level)),rx=1.0/imageSizeScaled.x,ry=1.0/imageSizeScaled.y;return new $.Point(rx,ry);},/**\n     * @function\n     * @returns {Number} The highest level in this tile source that can be contained in a single tile.\n     */getClosestLevel:function getClosestLevel(){var i,tiles;for(i=this.minLevel+1;i<=this.maxLevel;i++){tiles=this.getNumTiles(i);if(tiles.x>1||tiles.y>1){break;}}return i-1;},/**\n     * @function\n     * @param {Number} level\n     * @param {OpenSeadragon.Point} point\n     */getTileAtPoint:function getTileAtPoint(level,point){var validPoint=point.x>=0&&point.x<=1&&point.y>=0&&point.y<=1/this.aspectRatio;$.console.assert(validPoint,\"[TileSource.getTileAtPoint] must be called with a valid point.\");var widthScaled=this.dimensions.x*this.getLevelScale(level);var pixelX=point.x*widthScaled;var pixelY=point.y*widthScaled;var x=Math.floor(pixelX/this.getTileWidth(level));var y=Math.floor(pixelY/this.getTileHeight(level));// When point.x == 1 or point.y == 1 / this.aspectRatio we want to\n// return the last tile of the row/column\nif(point.x>=1){x=this.getNumTiles(level).x-1;}var EPSILON=1e-15;if(point.y>=1/this.aspectRatio-EPSILON){y=this.getNumTiles(level).y-1;}return new $.Point(x,y);},/**\n     * @function\n     * @param {Number} level\n     * @param {Number} x\n     * @param {Number} y\n     * @param {Boolean} [isSource=false] Whether to return the source bounds of the tile.\n     * @returns {OpenSeadragon.Rect} Either where this tile fits (in normalized coordinates) or the\n     * portion of the tile to use as the source of the drawing operation (in pixels), depending on\n     * the isSource parameter.\n     */getTileBounds:function getTileBounds(level,x,y,isSource){var dimensionsScaled=this.dimensions.times(this.getLevelScale(level)),tileWidth=this.getTileWidth(level),tileHeight=this.getTileHeight(level),px=x===0?0:tileWidth*x-this.tileOverlap,py=y===0?0:tileHeight*y-this.tileOverlap,sx=tileWidth+(x===0?1:2)*this.tileOverlap,sy=tileHeight+(y===0?1:2)*this.tileOverlap,scale=1.0/dimensionsScaled.x;sx=Math.min(sx,dimensionsScaled.x-px);sy=Math.min(sy,dimensionsScaled.y-py);if(isSource){return new $.Rect(0,0,sx,sy);}return new $.Rect(px*scale,py*scale,sx*scale,sy*scale);},/**\n     * Responsible for retrieving, and caching the\n     * image metadata pertinent to this TileSources implementation.\n     * @function\n     * @param {String} url\n     * @throws {Error}\n     */getImageInfo:function getImageInfo(url){var _this=this,callbackName,callback,readySource,options,urlParts,filename,lastDot;if(url){urlParts=url.split('/');filename=urlParts[urlParts.length-1];lastDot=filename.lastIndexOf('.');if(lastDot>-1){urlParts[urlParts.length-1]=filename.slice(0,lastDot);}}callback=function callback(data){if(typeof data===\"string\"){data=$.parseXml(data);}var $TileSource=$.TileSource.determineType(_this,data,url);if(!$TileSource){/**\n                 * Raised when an error occurs loading a TileSource.\n                 *\n                 * @event open-failed\n                 * @memberof OpenSeadragon.TileSource\n                 * @type {object}\n                 * @property {OpenSeadragon.TileSource} eventSource - A reference to the TileSource which raised the event.\n                 * @property {String} message\n                 * @property {String} source\n                 * @property {?Object} userData - Arbitrary subscriber-defined object.\n                 */_this.raiseEvent('open-failed',{message:\"Unable to load TileSource\",source:url});return;}options=$TileSource.prototype.configure.apply(_this,[data,url]);if(options.ajaxWithCredentials===undefined){options.ajaxWithCredentials=_this.ajaxWithCredentials;}readySource=new $TileSource(options);_this.ready=true;/**\n             * Raised when a TileSource is opened and initialized.\n             *\n             * @event ready\n             * @memberof OpenSeadragon.TileSource\n             * @type {object}\n             * @property {OpenSeadragon.TileSource} eventSource - A reference to the TileSource which raised the event.\n             * @property {Object} tileSource\n             * @property {?Object} userData - Arbitrary subscriber-defined object.\n             */_this.raiseEvent('ready',{tileSource:readySource});};if(url.match(/\\.js$/)){//TODO: Its not very flexible to require tile sources to end jsonp\n//      request for info  with a url that ends with '.js' but for\n//      now it's the only way I see to distinguish uniformly.\ncallbackName=url.split('/').pop().replace('.js','');$.jsonp({url:url,async:false,callbackName:callbackName,callback:callback});}else{// request info via xhr asynchronously.\n$.makeAjaxRequest({url:url,withCredentials:this.ajaxWithCredentials,headers:this.ajaxHeaders,success:function success(xhr){var data=processResponse(xhr);callback(data);},error:function error(xhr,exc){var msg;/*\n                        IE < 10 will block XHR requests to different origins. Any property access on the request\n                        object will raise an exception which we'll attempt to handle by formatting the original\n                        exception rather than the second one raised when we try to access xhr.status\n                     */try{msg=\"HTTP \"+xhr.status+\" attempting to load TileSource\";}catch(e){var formattedExc;if(typeof exc==\"undefined\"||!exc.toString){formattedExc=\"Unknown error\";}else{formattedExc=exc.toString();}msg=formattedExc+\" attempting to load TileSource\";}/***\n                     * Raised when an error occurs loading a TileSource.\n                     *\n                     * @event open-failed\n                     * @memberof OpenSeadragon.TileSource\n                     * @type {object}\n                     * @property {OpenSeadragon.TileSource} eventSource - A reference to the TileSource which raised the event.\n                     * @property {String} message\n                     * @property {String} source\n                     * @property {?Object} userData - Arbitrary subscriber-defined object.\n                     */_this.raiseEvent('open-failed',{message:msg,source:url});}});}},/**\n     * Responsible determining if a the particular TileSource supports the\n     * data format ( and allowed to apply logic against the url the data was\n     * loaded from, if any ). Overriding implementations are expected to do\n     * something smart with data and / or url to determine support.  Also\n     * understand that iteration order of TileSources is not guarunteed so\n     * please make sure your data or url is expressive enough to ensure a simple\n     * and sufficient mechanisim for clear determination.\n     * @function\n     * @param {String|Object|Array|Document} data\n     * @param {String} url - the url the data was loaded\n     *      from if any.\n     * @return {Boolean}\n     */supports:function supports(data,url){return false;},/**\n     * Responsible for parsing and configuring the\n     * image metadata pertinent to this TileSources implementation.\n     * This method is not implemented by this class other than to throw an Error\n     * announcing you have to implement it.  Because of the variety of tile\n     * server technologies, and various specifications for building image\n     * pyramids, this method is here to allow easy integration.\n     * @function\n     * @param {String|Object|Array|Document} data\n     * @param {String} url - the url the data was loaded\n     *      from if any.\n     * @return {Object} options - A dictionary of keyword arguments sufficient\n     *      to configure this tile sources constructor.\n     * @throws {Error}\n     */configure:function configure(data,url){throw new Error(\"Method not implemented.\");},/**\n     * Responsible for retrieving the url which will return an image for the\n     * region specified by the given x, y, and level components.\n     * This method is not implemented by this class other than to throw an Error\n     * announcing you have to implement it.  Because of the variety of tile\n     * server technologies, and various specifications for building image\n     * pyramids, this method is here to allow easy integration.\n     * @function\n     * @param {Number} level\n     * @param {Number} x\n     * @param {Number} y\n     * @throws {Error}\n     */getTileUrl:function getTileUrl(level,x,y){throw new Error(\"Method not implemented.\");},/**\n     * Responsible for retrieving the headers which will be attached to the image request for the\n     * region specified by the given x, y, and level components.\n     * This option is only relevant if {@link OpenSeadragon.Options}.loadTilesWithAjax is set to true.\n     * The headers returned here will override headers specified at the Viewer or TiledImage level.\n     * Specifying a falsy value for a header will clear its existing value set at the Viewer or\n     * TiledImage level (if any).\n     * @function\n     * @param {Number} level\n     * @param {Number} x\n     * @param {Number} y\n     * @returns {Object}\n     */getTileAjaxHeaders:function getTileAjaxHeaders(level,x,y){return{};},/**\n     * @function\n     * @param {Number} level\n     * @param {Number} x\n     * @param {Number} y\n     */tileExists:function tileExists(level,x,y){var numTiles=this.getNumTiles(level);return level>=this.minLevel&&level<=this.maxLevel&&x>=0&&y>=0&&x<numTiles.x&&y<numTiles.y;}};$.extend(true,$.TileSource.prototype,$.EventSource.prototype);/**\n * Decides whether to try to process the response as xml, json, or hand back\n * the text\n * @private\n * @inner\n * @function\n * @param {XMLHttpRequest} xhr - the completed network request\n */function processResponse(xhr){var responseText=xhr.responseText,status=xhr.status,statusText,data;if(!xhr){throw new Error($.getString(\"Errors.Security\"));}else if(xhr.status!==200&&xhr.status!==0){status=xhr.status;statusText=status==404?\"Not Found\":xhr.statusText;throw new Error($.getString(\"Errors.Status\",status,statusText));}if(responseText.match(/\\s*<.*/)){try{data=xhr.responseXML&&xhr.responseXML.documentElement?xhr.responseXML:$.parseXml(responseText);}catch(e){data=xhr.responseText;}}else if(responseText.match(/\\s*[\\{\\[].*/)){try{data=$.parseJSON(responseText);}catch(e){data=responseText;}}else{data=responseText;}return data;}/**\n * Determines the TileSource Implementation by introspection of OpenSeadragon\n * namespace, calling each TileSource implementation of 'isType'\n * @private\n * @inner\n * @function\n * @param {Object|Array|Document} data - the tile source configuration object\n * @param {String} url - the url where the tile source configuration object was\n *      loaded from, if any.\n */$.TileSource.determineType=function(tileSource,data,url){var property;for(property in OpenSeadragon){if(property.match(/.+TileSource$/)&&$.isFunction(OpenSeadragon[property])&&$.isFunction(OpenSeadragon[property].prototype.supports)&&OpenSeadragon[property].prototype.supports.call(tileSource,data,url)){return OpenSeadragon[property];}}$.console.error(\"No TileSource was able to open %s %s\",url,data);};})(OpenSeadragon);/*\n * OpenSeadragon - DziTileSource\n *\n * Copyright (C) 2009 CodePlex Foundation\n * Copyright (C) 2010-2013 OpenSeadragon contributors\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * - Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * - Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * - Neither the name of CodePlex Foundation nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */(function($){/**\n * @class DziTileSource\n * @memberof OpenSeadragon\n * @extends OpenSeadragon.TileSource\n * @param {Number|Object} width - the pixel width of the image or the idiomatic\n *      options object which is used instead of positional arguments.\n * @param {Number} height\n * @param {Number} tileSize\n * @param {Number} tileOverlap\n * @param {String} tilesUrl\n * @param {String} fileFormat\n * @param {OpenSeadragon.DisplayRect[]} displayRects\n * @property {String} tilesUrl\n * @property {String} fileFormat\n * @property {OpenSeadragon.DisplayRect[]} displayRects\n */$.DziTileSource=function(width,height,tileSize,tileOverlap,tilesUrl,fileFormat,displayRects,minLevel,maxLevel){var i,rect,level,options;if($.isPlainObject(width)){options=width;}else{options={width:arguments[0],height:arguments[1],tileSize:arguments[2],tileOverlap:arguments[3],tilesUrl:arguments[4],fileFormat:arguments[5],displayRects:arguments[6],minLevel:arguments[7],maxLevel:arguments[8]};}this._levelRects={};this.tilesUrl=options.tilesUrl;this.fileFormat=options.fileFormat;this.displayRects=options.displayRects;if(this.displayRects){for(i=this.displayRects.length-1;i>=0;i--){rect=this.displayRects[i];for(level=rect.minLevel;level<=rect.maxLevel;level++){if(!this._levelRects[level]){this._levelRects[level]=[];}this._levelRects[level].push(rect);}}}$.TileSource.apply(this,[options]);};$.extend($.DziTileSource.prototype,$.TileSource.prototype,/** @lends OpenSeadragon.DziTileSource.prototype */{/**\n     * Determine if the data and/or url imply the image service is supported by\n     * this tile source.\n     * @function\n     * @param {Object|Array} data\n     * @param {String} optional - url\n     */supports:function supports(data,url){var ns;if(data.Image){ns=data.Image.xmlns;}else if(data.documentElement){if(\"Image\"==data.documentElement.localName||\"Image\"==data.documentElement.tagName){ns=data.documentElement.namespaceURI;}}ns=(ns||'').toLowerCase();return ns.indexOf('schemas.microsoft.com/deepzoom/2008')!==-1||ns.indexOf('schemas.microsoft.com/deepzoom/2009')!==-1;},/**\n     *\n     * @function\n     * @param {Object|XMLDocument} data - the raw configuration\n     * @param {String} url - the url the data was retrieved from if any.\n     * @return {Object} options - A dictionary of keyword arguments sufficient\n     *      to configure this tile sources constructor.\n     */configure:function configure(data,url){var options;if(!$.isPlainObject(data)){options=configureFromXML(this,data);}else{options=configureFromObject(this,data);}if(url&&!options.tilesUrl){options.tilesUrl=url.replace(/([^\\/]+?)(\\.(dzi|xml|js)?(\\?[^\\/]*)?)?\\/?$/,'$1_files/');if(url.search(/\\.(dzi|xml|js)\\?/)!=-1){options.queryParams=url.match(/\\?.*/);}else{options.queryParams='';}}return options;},/**\n     * @function\n     * @param {Number} level\n     * @param {Number} x\n     * @param {Number} y\n     */getTileUrl:function getTileUrl(level,x,y){return[this.tilesUrl,level,'/',x,'_',y,'.',this.fileFormat,this.queryParams].join('');},/**\n     * @function\n     * @param {Number} level\n     * @param {Number} x\n     * @param {Number} y\n     */tileExists:function tileExists(level,x,y){var rects=this._levelRects[level],rect,scale,xMin,yMin,xMax,yMax,i;if(this.minLevel&&level<this.minLevel||this.maxLevel&&level>this.maxLevel){return false;}if(!rects||!rects.length){return true;}for(i=rects.length-1;i>=0;i--){rect=rects[i];if(level<rect.minLevel||level>rect.maxLevel){continue;}scale=this.getLevelScale(level);xMin=rect.x*scale;yMin=rect.y*scale;xMax=xMin+rect.width*scale;yMax=yMin+rect.height*scale;xMin=Math.floor(xMin/this._tileWidth);yMin=Math.floor(yMin/this._tileWidth);// DZI tiles are square, so we just use _tileWidth\nxMax=Math.ceil(xMax/this._tileWidth);yMax=Math.ceil(yMax/this._tileWidth);if(xMin<=x&&x<xMax&&yMin<=y&&y<yMax){return true;}}return false;}});/**\n * @private\n * @inner\n * @function\n */function configureFromXML(tileSource,xmlDoc){if(!xmlDoc||!xmlDoc.documentElement){throw new Error($.getString(\"Errors.Xml\"));}var root=xmlDoc.documentElement,rootName=root.localName||root.tagName,ns=xmlDoc.documentElement.namespaceURI,configuration=null,displayRects=[],dispRectNodes,dispRectNode,rectNode,sizeNode,i;if(rootName==\"Image\"){try{sizeNode=root.getElementsByTagName(\"Size\")[0];if(sizeNode===undefined){sizeNode=root.getElementsByTagNameNS(ns,\"Size\")[0];}configuration={Image:{xmlns:\"http://schemas.microsoft.com/deepzoom/2008\",Url:root.getAttribute(\"Url\"),Format:root.getAttribute(\"Format\"),DisplayRect:null,Overlap:parseInt(root.getAttribute(\"Overlap\"),10),TileSize:parseInt(root.getAttribute(\"TileSize\"),10),Size:{Height:parseInt(sizeNode.getAttribute(\"Height\"),10),Width:parseInt(sizeNode.getAttribute(\"Width\"),10)}}};if(!$.imageFormatSupported(configuration.Image.Format)){throw new Error($.getString(\"Errors.ImageFormat\",configuration.Image.Format.toUpperCase()));}dispRectNodes=root.getElementsByTagName(\"DisplayRect\");if(dispRectNodes===undefined){dispRectNodes=root.getElementsByTagNameNS(ns,\"DisplayRect\")[0];}for(i=0;i<dispRectNodes.length;i++){dispRectNode=dispRectNodes[i];rectNode=dispRectNode.getElementsByTagName(\"Rect\")[0];if(rectNode===undefined){rectNode=dispRectNode.getElementsByTagNameNS(ns,\"Rect\")[0];}displayRects.push({Rect:{X:parseInt(rectNode.getAttribute(\"X\"),10),Y:parseInt(rectNode.getAttribute(\"Y\"),10),Width:parseInt(rectNode.getAttribute(\"Width\"),10),Height:parseInt(rectNode.getAttribute(\"Height\"),10),MinLevel:parseInt(dispRectNode.getAttribute(\"MinLevel\"),10),MaxLevel:parseInt(dispRectNode.getAttribute(\"MaxLevel\"),10)}});}if(displayRects.length){configuration.Image.DisplayRect=displayRects;}return configureFromObject(tileSource,configuration);}catch(e){throw e instanceof Error?e:new Error($.getString(\"Errors.Dzi\"));}}else if(rootName==\"Collection\"){throw new Error($.getString(\"Errors.Dzc\"));}else if(rootName==\"Error\"){var messageNode=root.getElementsByTagName(\"Message\")[0];var message=messageNode.firstChild.nodeValue;throw new Error(message);}throw new Error($.getString(\"Errors.Dzi\"));}/**\n * @private\n * @inner\n * @function\n */function configureFromObject(tileSource,configuration){var imageData=configuration.Image,tilesUrl=imageData.Url,fileFormat=imageData.Format,sizeData=imageData.Size,dispRectData=imageData.DisplayRect||[],width=parseInt(sizeData.Width,10),height=parseInt(sizeData.Height,10),tileSize=parseInt(imageData.TileSize,10),tileOverlap=parseInt(imageData.Overlap,10),displayRects=[],rectData,i;//TODO: need to figure out out to better handle image format compatibility\n//      which actually includes additional file formats like xml and pdf\n//      and plain text for various tilesource implementations to avoid low\n//      level errors.\n//\n//      For now, just don't perform the check.\n//\n/*if ( !imageFormatSupported( fileFormat ) ) {\n        throw new Error(\n            $.getString( \"Errors.ImageFormat\", fileFormat.toUpperCase() )\n        );\n    }*/for(i=0;i<dispRectData.length;i++){rectData=dispRectData[i].Rect;displayRects.push(new $.DisplayRect(parseInt(rectData.X,10),parseInt(rectData.Y,10),parseInt(rectData.Width,10),parseInt(rectData.Height,10),parseInt(rectData.MinLevel,10),parseInt(rectData.MaxLevel,10)));}return $.extend(true,{width:width,/* width *required */height:height,/* height *required */tileSize:tileSize,/* tileSize *required */tileOverlap:tileOverlap,/* tileOverlap *required */minLevel:null,/* minLevel */maxLevel:null,/* maxLevel */tilesUrl:tilesUrl,/* tilesUrl */fileFormat:fileFormat,/* fileFormat */displayRects:displayRects/* displayRects */},configuration);}})(OpenSeadragon);/*\n * OpenSeadragon - IIIFTileSource\n *\n * Copyright (C) 2009 CodePlex Foundation\n * Copyright (C) 2010-2013 OpenSeadragon contributors\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * - Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * - Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * - Neither the name of CodePlex Foundation nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */(function($){/**\n * @class IIIFTileSource\n * @classdesc A client implementation of the International Image Interoperability Framework\n * Format: Image API 1.0 - 2.1\n *\n * @memberof OpenSeadragon\n * @extends OpenSeadragon.TileSource\n * @see http://iiif.io/api/image/\n * @param {String} [options.tileFormat='jpg']\n *      The extension that will be used when requiring tiles.\n */$.IIIFTileSource=function(options){/* eslint-disable camelcase */$.extend(true,this,options);if(!(this.height&&this.width&&this['@id'])){throw new Error('IIIF required parameters not provided.');}options.tileSizePerScaleFactor={};this.tileFormat=this.tileFormat||'jpg';this.version=options.version;// N.B. 2.0 renamed scale_factors to scaleFactors\nif(this.tile_width&&this.tile_height){options.tileWidth=this.tile_width;options.tileHeight=this.tile_height;}else if(this.tile_width){options.tileSize=this.tile_width;}else if(this.tile_height){options.tileSize=this.tile_height;}else if(this.tiles){// Version 2.0 forwards\nif(this.tiles.length==1){options.tileWidth=this.tiles[0].width;// Use height if provided, otherwise assume square tiles and use width.\noptions.tileHeight=this.tiles[0].height||this.tiles[0].width;this.scale_factors=this.tiles[0].scaleFactors;}else{// Multiple tile sizes at different levels\nthis.scale_factors=[];for(var t=0;t<this.tiles.length;t++){for(var sf=0;sf<this.tiles[t].scaleFactors.length;sf++){var scaleFactor=this.tiles[t].scaleFactors[sf];this.scale_factors.push(scaleFactor);options.tileSizePerScaleFactor[scaleFactor]={width:this.tiles[t].width,height:this.tiles[t].height||this.tiles[t].width};}}}}else if(canBeTiled(options)){// use the largest of tileOptions that is smaller than the short dimension\nvar shortDim=Math.min(this.height,this.width),tileOptions=[256,512,1024],smallerTiles=[];for(var c=0;c<tileOptions.length;c++){if(tileOptions[c]<=shortDim){smallerTiles.push(tileOptions[c]);}}if(smallerTiles.length>0){options.tileSize=Math.max.apply(null,smallerTiles);}else{// If we're smaller than 256, just use the short side.\noptions.tileSize=shortDim;}}else if(this.sizes&&this.sizes.length>0){// This info.json can't be tiled, but we can still construct a legacy pyramid from the sizes array.\n// In this mode, IIIFTileSource will call functions from the abstract baseTileSource or the\n// LegacyTileSource instead of performing IIIF tiling.\nthis.emulateLegacyImagePyramid=true;options.levels=constructLevels(this);// use the largest available size to define tiles\n$.extend(true,options,{width:options.levels[options.levels.length-1].width,height:options.levels[options.levels.length-1].height,tileSize:Math.max(options.height,options.width),tileOverlap:0,minLevel:0,maxLevel:options.levels.length-1});this.levels=options.levels;}else{$.console.error(\"Nothing in the info.json to construct image pyramids from\");}if(!options.maxLevel&&!this.emulateLegacyImagePyramid){if(!this.scale_factors){options.maxLevel=Number(Math.ceil(Math.log(Math.max(this.width,this.height),2)));}else{var maxScaleFactor=Math.max.apply(null,this.scale_factors);options.maxLevel=Math.round(Math.log(maxScaleFactor)*Math.LOG2E);}}$.TileSource.apply(this,[options]);};$.extend($.IIIFTileSource.prototype,$.TileSource.prototype,/** @lends OpenSeadragon.IIIFTileSource.prototype */{/**\n     * Determine if the data and/or url imply the image service is supported by\n     * this tile source.\n     * @function\n     * @param {Object|Array} data\n     * @param {String} optional - url\n     */supports:function supports(data,url){// Version 2.0 and forwards\nif(data.protocol&&data.protocol=='http://iiif.io/api/image'){return true;// Version 1.1\n}else if(data['@context']&&(data['@context']==\"http://library.stanford.edu/iiif/image-api/1.1/context.json\"||data['@context']==\"http://iiif.io/api/image/1/context.json\")){// N.B. the iiif.io context is wrong, but where the representation lives so likely to be used\nreturn true;// Version 1.0\n}else if(data.profile&&data.profile.indexOf(\"http://library.stanford.edu/iiif/image-api/compliance.html\")===0){return true;}else if(data.identifier&&data.width&&data.height){return true;}else if(data.documentElement&&\"info\"==data.documentElement.tagName&&\"http://library.stanford.edu/iiif/image-api/ns/\"==data.documentElement.namespaceURI){return true;// Not IIIF\n}else{return false;}},/**\n     *\n     * @function\n     * @param {Object} data - the raw configuration\n     * @example <caption>IIIF 1.1 Info Looks like this</caption>\n     * {\n     *   \"@context\" : \"http://library.stanford.edu/iiif/image-api/1.1/context.json\",\n     *   \"@id\" : \"http://iiif.example.com/prefix/1E34750D-38DB-4825-A38A-B60A345E591C\",\n     *   \"width\" : 6000,\n     *   \"height\" : 4000,\n     *   \"scale_factors\" : [ 1, 2, 4 ],\n     *   \"tile_width\" : 1024,\n     *   \"tile_height\" : 1024,\n     *   \"formats\" : [ \"jpg\", \"png\" ],\n     *   \"qualities\" : [ \"native\", \"grey\" ],\n     *   \"profile\" : \"http://library.stanford.edu/iiif/image-api/1.1/compliance.html#level0\"\n     * }\n     */configure:function configure(data,url){// Try to deduce our version and fake it upwards if needed\nif(!$.isPlainObject(data)){var options=configureFromXml10(data);options['@context']=\"http://iiif.io/api/image/1.0/context.json\";options['@id']=url.replace('/info.xml','');options.version=1;return options;}else{if(!data['@context']){data['@context']='http://iiif.io/api/image/1.0/context.json';data['@id']=url.replace('/info.json','');data.version=1;}else{var context=data['@context'];if(Array.isArray(context)){for(var i=0;i<context.length;i++){if(typeof context[i]==='string'&&(/^http:\\/\\/iiif\\.io\\/api\\/image\\/[1-3]\\/context\\.json$/.test(context[i])||context[i]==='http://library.stanford.edu/iiif/image-api/1.1/context.json')){context=context[i];break;}}}switch(context){case'http://iiif.io/api/image/1/context.json':case'http://library.stanford.edu/iiif/image-api/1.1/context.json':data.version=1;break;case'http://iiif.io/api/image/2/context.json':data.version=2;break;case'http://iiif.io/api/image/3/context.json':data.version=3;break;default:$.console.error('Data has a @context property which contains no known IIIF context URI.');}}if(!data['@id']&&data['id']){data['@id']=data['id'];}if(data.preferredFormats){for(var f=0;f<data.preferredFormats.length;f++){if(OpenSeadragon.imageFormatSupported(data.preferredFormats[f])){data.tileFormat=data.preferredFormats[f];break;}}}return data;}},/**\n     * Return the tileWidth for the given level.\n     * @function\n     * @param {Number} level\n     */getTileWidth:function getTileWidth(level){if(this.emulateLegacyImagePyramid){return $.TileSource.prototype.getTileWidth.call(this,level);}var scaleFactor=Math.pow(2,this.maxLevel-level);if(this.tileSizePerScaleFactor&&this.tileSizePerScaleFactor[scaleFactor]){return this.tileSizePerScaleFactor[scaleFactor].width;}return this._tileWidth;},/**\n     * Return the tileHeight for the given level.\n     * @function\n     * @param {Number} level\n     */getTileHeight:function getTileHeight(level){if(this.emulateLegacyImagePyramid){return $.TileSource.prototype.getTileHeight.call(this,level);}var scaleFactor=Math.pow(2,this.maxLevel-level);if(this.tileSizePerScaleFactor&&this.tileSizePerScaleFactor[scaleFactor]){return this.tileSizePerScaleFactor[scaleFactor].height;}return this._tileHeight;},/**\n     * @function\n     * @param {Number} level\n     */getLevelScale:function getLevelScale(level){if(this.emulateLegacyImagePyramid){var levelScale=NaN;if(this.levels.length>0&&level>=this.minLevel&&level<=this.maxLevel){levelScale=this.levels[level].width/this.levels[this.maxLevel].width;}return levelScale;}return $.TileSource.prototype.getLevelScale.call(this,level);},/**\n     * @function\n     * @param {Number} level\n     */getNumTiles:function getNumTiles(level){if(this.emulateLegacyImagePyramid){var scale=this.getLevelScale(level);if(scale){return new $.Point(1,1);}else{return new $.Point(0,0);}}return $.TileSource.prototype.getNumTiles.call(this,level);},/**\n     * @function\n     * @param {Number} level\n     * @param {OpenSeadragon.Point} point\n     */getTileAtPoint:function getTileAtPoint(level,point){if(this.emulateLegacyImagePyramid){return new $.Point(0,0);}return $.TileSource.prototype.getTileAtPoint.call(this,level,point);},/**\n     * Responsible for retrieving the url which will return an image for the\n     * region specified by the given x, y, and level components.\n     * @function\n     * @param {Number} level - z index\n     * @param {Number} x\n     * @param {Number} y\n     * @throws {Error}\n     */getTileUrl:function getTileUrl(level,x,y){if(this.emulateLegacyImagePyramid){var url=null;if(this.levels.length>0&&level>=this.minLevel&&level<=this.maxLevel){url=this.levels[level].url;}return url;}//# constants\nvar IIIF_ROTATION='0',//## get the scale (level as a decimal)\nscale=Math.pow(0.5,this.maxLevel-level),//# image dimensions at this level\nlevelWidth=Math.ceil(this.width*scale),levelHeight=Math.ceil(this.height*scale),//## iiif region\ntileWidth,tileHeight,iiifTileSizeWidth,iiifTileSizeHeight,iiifRegion,iiifTileX,iiifTileY,iiifTileW,iiifTileH,iiifSize,iiifSizeW,iiifSizeH,iiifQuality,uri;tileWidth=this.getTileWidth(level);tileHeight=this.getTileHeight(level);iiifTileSizeWidth=Math.ceil(tileWidth/scale);iiifTileSizeHeight=Math.ceil(tileHeight/scale);if(this.version===1){iiifQuality=\"native.\"+this.tileFormat;}else{iiifQuality=\"default.\"+this.tileFormat;}if(levelWidth<tileWidth&&levelHeight<tileHeight){if(this.version===2&&levelWidth===this.width){iiifSize=\"max\";}else if(this.version===3&&levelWidth===this.width&&levelHeight===this.height){iiifSize=\"max\";}else if(this.version===3){iiifSize=levelWidth+\",\"+levelHeight;}else{iiifSize=levelWidth+\",\";}iiifRegion='full';}else{iiifTileX=x*iiifTileSizeWidth;iiifTileY=y*iiifTileSizeHeight;iiifTileW=Math.min(iiifTileSizeWidth,this.width-iiifTileX);iiifTileH=Math.min(iiifTileSizeHeight,this.height-iiifTileY);if(x===0&&y===0&&iiifTileW===this.width&&iiifTileH===this.height){iiifRegion=\"full\";}else{iiifRegion=[iiifTileX,iiifTileY,iiifTileW,iiifTileH].join(',');}iiifSizeW=Math.ceil(iiifTileW*scale);iiifSizeH=Math.ceil(iiifTileH*scale);if(this.version===2&&iiifSizeW===this.width){iiifSize=\"max\";}else if(this.version===3&&iiifSizeW===this.width&&iiifSizeH===this.height){iiifSize=\"max\";}else if(this.version===3){iiifSize=iiifSizeW+\",\"+iiifSizeH;}else{iiifSize=iiifSizeW+\",\";}}uri=[this['@id'],iiifRegion,iiifSize,IIIF_ROTATION,iiifQuality].join('/');return uri;},__testonly__:{canBeTiled:canBeTiled,constructLevels:constructLevels}});/**\n     * Determine whether arbitrary tile requests can be made against a service with the given profile\n     * @function\n     * @param {array} profile - IIIF profile array\n     * @throws {Error}\n     */function canBeTiled(options){var level0Profiles=[\"http://library.stanford.edu/iiif/image-api/compliance.html#level0\",\"http://library.stanford.edu/iiif/image-api/1.1/compliance.html#level0\",\"http://iiif.io/api/image/2/level0.json\",\"level0\",\"https://iiif.io/api/image/3/level0.json\"];var profileLevel=Array.isArray(options.profile)?options.profile[0]:options.profile;var isLevel0=level0Profiles.indexOf(profileLevel)!==-1;var hasCanoncicalSizeFeature=false;if(options.version===2&&options.profile.length>1&&options.profile[1].supports){hasCanoncicalSizeFeature=options.profile[1].supports.indexOf(\"sizeByW\")!==-1;}if(options.version===3&&options.extraFeatures){hasCanoncicalSizeFeature=options.extraFeatures.indexOf(\"sizeByWh\")!==-1;}return!isLevel0||hasCanoncicalSizeFeature;}/**\n     * Build the legacy pyramid URLs (one tile per level)\n     * @function\n     * @param {object} options - infoJson\n     * @throws {Error}\n     */function constructLevels(options){var levels=[];for(var i=0;i<options.sizes.length;i++){levels.push({url:options['@id']+'/full/'+options.sizes[i].width+','+(options.version===3?options.sizes[i].height:'')+'/0/default.'+options.tileFormat,width:options.sizes[i].width,height:options.sizes[i].height});}return levels.sort(function(a,b){return a.width-b.width;});}function configureFromXml10(xmlDoc){//parse the xml\nif(!xmlDoc||!xmlDoc.documentElement){throw new Error($.getString(\"Errors.Xml\"));}var root=xmlDoc.documentElement,rootName=root.tagName,configuration=null;if(rootName==\"info\"){try{configuration={};parseXML10(root,configuration);return configuration;}catch(e){throw e instanceof Error?e:new Error($.getString(\"Errors.IIIF\"));}}throw new Error($.getString(\"Errors.IIIF\"));}function parseXML10(node,configuration,property){var i,value;if(node.nodeType==3&&property){//text node\nvalue=node.nodeValue.trim();if(value.match(/^\\d*$/)){value=Number(value);}if(!configuration[property]){configuration[property]=value;}else{if(!$.isArray(configuration[property])){configuration[property]=[configuration[property]];}configuration[property].push(value);}}else if(node.nodeType==1){for(i=0;i<node.childNodes.length;i++){parseXML10(node.childNodes[i],configuration,node.nodeName);}}}})(OpenSeadragon);/*\n * OpenSeadragon - OsmTileSource\n *\n * Copyright (C) 2009 CodePlex Foundation\n * Copyright (C) 2010-2013 OpenSeadragon contributors\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * - Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * - Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * - Neither the name of CodePlex Foundation nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */ /*\n * Derived from the OSM tile source in Rainer Simon's seajax-utils project\n * <http://github.com/rsimon/seajax-utils>.  Rainer Simon has contributed\n * the included code to the OpenSeadragon project under the New BSD license;\n * see <https://github.com/openseadragon/openseadragon/issues/58>.\n */(function($){/**\n * @class OsmTileSource\n * @classdesc A tilesource implementation for OpenStreetMap.<br><br>\n *\n * Note 1. Zoomlevels. Deep Zoom and OSM define zoom levels differently. In  Deep\n * Zoom, level 0 equals an image of 1x1 pixels. In OSM, level 0 equals an image of\n * 256x256 levels (see http://gasi.ch/blog/inside-deep-zoom-2). I.e. there is a\n * difference of log2(256)=8 levels.<br><br>\n *\n * Note 2. Image dimension. According to the OSM Wiki\n * (http://wiki.openstreetmap.org/wiki/Slippy_map_tilenames#Zoom_levels)\n * the highest Mapnik zoom level has 256.144x256.144 tiles, with a 256x256\n * pixel size. I.e. the Deep Zoom image dimension is 65.572.864x65.572.864\n * pixels.\n *\n * @memberof OpenSeadragon\n * @extends OpenSeadragon.TileSource\n * @param {Number|Object} width - the pixel width of the image or the idiomatic\n *      options object which is used instead of positional arguments.\n * @param {Number} height\n * @param {Number} tileSize\n * @param {Number} tileOverlap\n * @param {String} tilesUrl\n */$.OsmTileSource=function(width,height,tileSize,tileOverlap,tilesUrl){var options;if($.isPlainObject(width)){options=width;}else{options={width:arguments[0],height:arguments[1],tileSize:arguments[2],tileOverlap:arguments[3],tilesUrl:arguments[4]};}//apply default setting for standard public OpenStreatMaps service\n//but allow them to be specified so fliks can host there own instance\n//or apply against other services supportting the same standard\nif(!options.width||!options.height){options.width=65572864;options.height=65572864;}if(!options.tileSize){options.tileSize=256;options.tileOverlap=0;}if(!options.tilesUrl){options.tilesUrl=\"http://tile.openstreetmap.org/\";}options.minLevel=8;$.TileSource.apply(this,[options]);};$.extend($.OsmTileSource.prototype,$.TileSource.prototype,/** @lends OpenSeadragon.OsmTileSource.prototype */{/**\n     * Determine if the data and/or url imply the image service is supported by\n     * this tile source.\n     * @function\n     * @param {Object|Array} data\n     * @param {String} optional - url\n     */supports:function supports(data,url){return data.type&&\"openstreetmaps\"==data.type;},/**\n     *\n     * @function\n     * @param {Object} data - the raw configuration\n     * @param {String} url - the url the data was retrieved from if any.\n     * @return {Object} options - A dictionary of keyword arguments sufficient\n     *      to configure this tile sources constructor.\n     */configure:function configure(data,url){return data;},/**\n     * @function\n     * @param {Number} level\n     * @param {Number} x\n     * @param {Number} y\n     */getTileUrl:function getTileUrl(level,x,y){return this.tilesUrl+(level-8)+\"/\"+x+\"/\"+y+\".png\";}});})(OpenSeadragon);/*\n * OpenSeadragon - TmsTileSource\n *\n * Copyright (C) 2009 CodePlex Foundation\n * Copyright (C) 2010-2013 OpenSeadragon contributors\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * - Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * - Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * - Neither the name of CodePlex Foundation nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */ /*\n * Derived from the TMS tile source in Rainer Simon's seajax-utils project\n * <http://github.com/rsimon/seajax-utils>.  Rainer Simon has contributed\n * the included code to the OpenSeadragon project under the New BSD license;\n * see <https://github.com/openseadragon/openseadragon/issues/58>.\n */(function($){/**\n * @class TmsTileSource\n * @classdesc A tilesource implementation for Tiled Map Services (TMS).\n * TMS tile scheme ( [ as supported by OpenLayers ] is described here\n * ( http://openlayers.org/dev/examples/tms.html ).\n *\n * @memberof OpenSeadragon\n * @extends OpenSeadragon.TileSource\n * @param {Number|Object} width - the pixel width of the image or the idiomatic\n *      options object which is used instead of positional arguments.\n * @param {Number} height\n * @param {Number} tileSize\n * @param {Number} tileOverlap\n * @param {String} tilesUrl\n */$.TmsTileSource=function(width,height,tileSize,tileOverlap,tilesUrl){var options;if($.isPlainObject(width)){options=width;}else{options={width:arguments[0],height:arguments[1],tileSize:arguments[2],tileOverlap:arguments[3],tilesUrl:arguments[4]};}// TMS has integer multiples of 256 for width/height and adds buffer\n// if necessary -> account for this!\nvar bufferedWidth=Math.ceil(options.width/256)*256,bufferedHeight=Math.ceil(options.height/256)*256,max;// Compute number of zoomlevels in this tileset\nif(bufferedWidth>bufferedHeight){max=bufferedWidth/256;}else{max=bufferedHeight/256;}options.maxLevel=Math.ceil(Math.log(max)/Math.log(2))-1;options.tileSize=256;options.width=bufferedWidth;options.height=bufferedHeight;$.TileSource.apply(this,[options]);};$.extend($.TmsTileSource.prototype,$.TileSource.prototype,/** @lends OpenSeadragon.TmsTileSource.prototype */{/**\n     * Determine if the data and/or url imply the image service is supported by\n     * this tile source.\n     * @function\n     * @param {Object|Array} data\n     * @param {String} optional - url\n     */supports:function supports(data,url){return data.type&&\"tiledmapservice\"==data.type;},/**\n     *\n     * @function\n     * @param {Object} data - the raw configuration\n     * @param {String} url - the url the data was retrieved from if any.\n     * @return {Object} options - A dictionary of keyword arguments sufficient\n     *      to configure this tile sources constructor.\n     */configure:function configure(data,url){return data;},/**\n     * @function\n     * @param {Number} level\n     * @param {Number} x\n     * @param {Number} y\n     */getTileUrl:function getTileUrl(level,x,y){// Convert from Deep Zoom definition to TMS zoom definition\nvar yTiles=this.getNumTiles(level).y-1;return this.tilesUrl+level+\"/\"+x+\"/\"+(yTiles-y)+\".png\";}});})(OpenSeadragon);(function($){/**\n     * @class ZoomifyTileSource\n     * @classdesc A tilesource implementation for the zoomify format.\n     *\n     * A description of the format can be found here:\n     * https://ecommons.cornell.edu/bitstream/handle/1813/5410/Introducing_Zoomify_Image.pdf\n     *\n     * There are two ways of creating a zoomify tilesource for openseadragon\n     *\n     * 1) Supplying all necessary information in the tilesource object. A minimal example object for this method looks like this:\n     *\n     * {\n     *      type: \"zoomifytileservice\",\n     *      width: 1000,\n     *      height: 1000,\n     *      tilesUrl: \"/test/data/zoomify/\"\n     * }\n     *\n     * The tileSize is currently hardcoded to 256 (the usual Zoomify default). The tileUrl must the path to the image _directory_.\n     *\n     * 2) Loading image metadata from xml file: (CURRENTLY NOT SUPPORTED)\n     *\n     * When creating zoomify formatted images one \"xml\" like file with name ImageProperties.xml\n     * will be created as well. Here is an example of such a file:\n     *\n     * <IMAGE_PROPERTIES WIDTH=\"1000\" HEIGHT=\"1000\" NUMTILES=\"21\" NUMIMAGES=\"1\" VERSION=\"1.8\" TILESIZE=\"256\" />\n     *\n     * To use this xml file as metadata source you must supply the path to the ImageProperties.xml file and leave out all other parameters:\n     * As stated above, this method of loading a zoomify tilesource is currently not supported\n     *\n     * {\n     *      type: \"zoomifytileservice\",\n     *      tilesUrl: \"/test/data/zoomify/ImageProperties.xml\"\n     * }\n\n    *\n    * @memberof OpenSeadragon\n     * @extends OpenSeadragon.TileSource\n     * @param {Number} width - the pixel width of the image.\n     * @param {Number} height\n     * @param {Number} tileSize\n     * @param {String} tilesUrl\n     */$.ZoomifyTileSource=function(options){options.tileSize=256;var currentImageSize={x:options.width,y:options.height};options.imageSizes=[{x:options.width,y:options.height}];options.gridSize=[this._getGridSize(options.width,options.height,options.tileSize)];while(parseInt(currentImageSize.x,10)>options.tileSize||parseInt(currentImageSize.y,10)>options.tileSize){currentImageSize.x=Math.floor(currentImageSize.x/2);currentImageSize.y=Math.floor(currentImageSize.y/2);options.imageSizes.push({x:currentImageSize.x,y:currentImageSize.y});options.gridSize.push(this._getGridSize(currentImageSize.x,currentImageSize.y,options.tileSize));}options.imageSizes.reverse();options.gridSize.reverse();options.minLevel=0;options.maxLevel=options.gridSize.length-1;OpenSeadragon.TileSource.apply(this,[options]);};$.extend($.ZoomifyTileSource.prototype,$.TileSource.prototype,/** @lends OpenSeadragon.ZoomifyTileSource.prototype */{//private\n_getGridSize:function _getGridSize(width,height,tileSize){return{x:Math.ceil(width/tileSize),y:Math.ceil(height/tileSize)};},//private\n_calculateAbsoluteTileNumber:function _calculateAbsoluteTileNumber(level,x,y){var num=0;var size={};//Sum up all tiles below the level we want the number of tiles\nfor(var z=0;z<level;z++){size=this.gridSize[z];num+=size.x*size.y;}//Add the tiles of the level\nsize=this.gridSize[level];num+=size.x*y+x;return num;},/**\n         * Determine if the data and/or url imply the image service is supported by\n         * this tile source.\n         * @function\n         * @param {Object|Array} data\n         * @param {String} optional - url\n         */supports:function supports(data,url){return data.type&&\"zoomifytileservice\"==data.type;},/**\n         *\n         * @function\n         * @param {Object} data - the raw configuration\n         * @param {String} url - the url the data was retrieved from if any.\n         * @return {Object} options - A dictionary of keyword arguments sufficient\n         *      to configure this tile sources constructor.\n         */configure:function configure(data,url){return data;},/**\n         * @function\n         * @param {Number} level\n         * @param {Number} x\n         * @param {Number} y\n         */getTileUrl:function getTileUrl(level,x,y){//console.log(level);\nvar result=0;var num=this._calculateAbsoluteTileNumber(level,x,y);result=Math.floor(num/256);return this.tilesUrl+'TileGroup'+result+'/'+level+'-'+x+'-'+y+'.jpg';}});})(OpenSeadragon);/*\n * OpenSeadragon - LegacyTileSource\n *\n * Copyright (C) 2009 CodePlex Foundation\n * Copyright (C) 2010-2013 OpenSeadragon contributors\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * - Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * - Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * - Neither the name of CodePlex Foundation nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */(function($){/**\n * @class LegacyTileSource\n * @classdesc The LegacyTileSource allows simple, traditional image pyramids to be loaded\n * into an OpenSeadragon Viewer.  Basically, this translates to the historically\n * common practice of starting with a 'master' image, maybe a tiff for example,\n * and generating a set of 'service' images like one or more thumbnails, a medium\n * resolution image and a high resolution image in standard web formats like\n * png or jpg.\n *\n * @memberof OpenSeadragon\n * @extends OpenSeadragon.TileSource\n * @param {Array} levels An array of file descriptions, each is an object with\n *      a 'url', a 'width', and a 'height'.  Overriding classes can expect more\n *      properties but these properties are sufficient for this implementation.\n *      Additionally, the levels are required to be listed in order from\n *      smallest to largest.\n * @property {Number} aspectRatio\n * @property {Number} dimensions\n * @property {Number} tileSize\n * @property {Number} tileOverlap\n * @property {Number} minLevel\n * @property {Number} maxLevel\n * @property {Array}  levels\n */$.LegacyTileSource=function(levels){var options,width,height;if($.isArray(levels)){options={type:'legacy-image-pyramid',levels:levels};}//clean up the levels to make sure we support all formats\noptions.levels=filterFiles(options.levels);if(options.levels.length>0){width=options.levels[options.levels.length-1].width;height=options.levels[options.levels.length-1].height;}else{width=0;height=0;$.console.error(\"No supported image formats found\");}$.extend(true,options,{width:width,height:height,tileSize:Math.max(height,width),tileOverlap:0,minLevel:0,maxLevel:options.levels.length>0?options.levels.length-1:0});$.TileSource.apply(this,[options]);this.levels=options.levels;};$.extend($.LegacyTileSource.prototype,$.TileSource.prototype,/** @lends OpenSeadragon.LegacyTileSource.prototype */{/**\n     * Determine if the data and/or url imply the image service is supported by\n     * this tile source.\n     * @function\n     * @param {Object|Array} data\n     * @param {String} optional - url\n     */supports:function supports(data,url){return data.type&&\"legacy-image-pyramid\"==data.type||data.documentElement&&\"legacy-image-pyramid\"==data.documentElement.getAttribute('type');},/**\n     *\n     * @function\n     * @param {Object|XMLDocument} configuration - the raw configuration\n     * @param {String} dataUrl - the url the data was retrieved from if any.\n     * @return {Object} options - A dictionary of keyword arguments sufficient\n     *      to configure this tile sources constructor.\n     */configure:function configure(configuration,dataUrl){var options;if(!$.isPlainObject(configuration)){options=configureFromXML(this,configuration);}else{options=configureFromObject(this,configuration);}return options;},/**\n     * @function\n     * @param {Number} level\n     */getLevelScale:function getLevelScale(level){var levelScale=NaN;if(this.levels.length>0&&level>=this.minLevel&&level<=this.maxLevel){levelScale=this.levels[level].width/this.levels[this.maxLevel].width;}return levelScale;},/**\n     * @function\n     * @param {Number} level\n     */getNumTiles:function getNumTiles(level){var scale=this.getLevelScale(level);if(scale){return new $.Point(1,1);}else{return new $.Point(0,0);}},/**\n     * This method is not implemented by this class other than to throw an Error\n     * announcing you have to implement it.  Because of the variety of tile\n     * server technologies, and various specifications for building image\n     * pyramids, this method is here to allow easy integration.\n     * @function\n     * @param {Number} level\n     * @param {Number} x\n     * @param {Number} y\n     * @throws {Error}\n     */getTileUrl:function getTileUrl(level,x,y){var url=null;if(this.levels.length>0&&level>=this.minLevel&&level<=this.maxLevel){url=this.levels[level].url;}return url;}});/**\n * This method removes any files from the Array which don't conform to our\n * basic requirements for a 'level' in the LegacyTileSource.\n * @private\n * @inner\n * @function\n */function filterFiles(files){var filtered=[],file,i;for(i=0;i<files.length;i++){file=files[i];if(file.height&&file.width&&file.url){//This is sufficient to serve as a level\nfiltered.push({url:file.url,width:Number(file.width),height:Number(file.height)});}else{$.console.error('Unsupported image format: %s',file.url?file.url:'<no URL>');}}return filtered.sort(function(a,b){return a.height-b.height;});}/**\n * @private\n * @inner\n * @function\n */function configureFromXML(tileSource,xmlDoc){if(!xmlDoc||!xmlDoc.documentElement){throw new Error($.getString(\"Errors.Xml\"));}var root=xmlDoc.documentElement,rootName=root.tagName,conf=null,levels=[],level,i;if(rootName==\"image\"){try{conf={type:root.getAttribute(\"type\"),levels:[]};levels=root.getElementsByTagName(\"level\");for(i=0;i<levels.length;i++){level=levels[i];conf.levels.push({url:level.getAttribute(\"url\"),width:parseInt(level.getAttribute(\"width\"),10),height:parseInt(level.getAttribute(\"height\"),10)});}return configureFromObject(tileSource,conf);}catch(e){throw e instanceof Error?e:new Error('Unknown error parsing Legacy Image Pyramid XML.');}}else if(rootName==\"collection\"){throw new Error('Legacy Image Pyramid Collections not yet supported.');}else if(rootName==\"error\"){throw new Error('Error: '+xmlDoc);}throw new Error('Unknown element '+rootName);}/**\n * @private\n * @inner\n * @function\n */function configureFromObject(tileSource,configuration){return configuration.levels;}})(OpenSeadragon);/*\n * OpenSeadragon - ImageTileSource\n *\n * Copyright (C) 2009 CodePlex Foundation\n * Copyright (C) 2010-2013 OpenSeadragon contributors\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * - Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * - Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * - Neither the name of CodePlex Foundation nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */(function($){/**\n     * @class ImageTileSource\n     * @classdesc The ImageTileSource allows a simple image to be loaded\n     * into an OpenSeadragon Viewer.\n     * There are 2 ways to open an ImageTileSource:\n     * 1. viewer.open({type: 'image', url: fooUrl});\n     * 2. viewer.open(new OpenSeadragon.ImageTileSource({url: fooUrl}));\n     *\n     * With the first syntax, the crossOriginPolicy, ajaxWithCredentials and\n     * useCanvas options are inherited from the viewer if they are not\n     * specified directly in the options object.\n     *\n     * @memberof OpenSeadragon\n     * @extends OpenSeadragon.TileSource\n     * @param {Object} options Options object.\n     * @param {String} options.url URL of the image\n     * @param {Boolean} [options.buildPyramid=true] If set to true (default), a\n     * pyramid will be built internally to provide a better downsampling.\n     * @param {String|Boolean} [options.crossOriginPolicy=false] Valid values are\n     * 'Anonymous', 'use-credentials', and false. If false, image requests will\n     * not use CORS preventing internal pyramid building for images from other\n     * domains.\n     * @param {String|Boolean} [options.ajaxWithCredentials=false] Whether to set\n     * the withCredentials XHR flag for AJAX requests (when loading tile sources).\n     * @param {Boolean} [options.useCanvas=true] Set to false to prevent any use\n     * of the canvas API.\n     */$.ImageTileSource=function(options){options=$.extend({buildPyramid:true,crossOriginPolicy:false,ajaxWithCredentials:false,useCanvas:true},options);$.TileSource.apply(this,[options]);};$.extend($.ImageTileSource.prototype,$.TileSource.prototype,/** @lends OpenSeadragon.ImageTileSource.prototype */{/**\n         * Determine if the data and/or url imply the image service is supported by\n         * this tile source.\n         * @function\n         * @param {Object|Array} data\n         * @param {String} optional - url\n         */supports:function supports(data,url){return data.type&&data.type===\"image\";},/**\n         *\n         * @function\n         * @param {Object} options - the options\n         * @param {String} dataUrl - the url the image was retrieved from, if any.\n         * @return {Object} options - A dictionary of keyword arguments sufficient\n         *      to configure this tile sources constructor.\n         */configure:function configure(options,dataUrl){return options;},/**\n         * Responsible for retrieving, and caching the\n         * image metadata pertinent to this TileSources implementation.\n         * @function\n         * @param {String} url\n         * @throws {Error}\n         */getImageInfo:function getImageInfo(url){var image=this._image=new Image();var _this=this;if(this.crossOriginPolicy){image.crossOrigin=this.crossOriginPolicy;}if(this.ajaxWithCredentials){image.useCredentials=this.ajaxWithCredentials;}$.addEvent(image,'load',function(){/* IE8 fix since it has no naturalWidth and naturalHeight */_this.width=Object.prototype.hasOwnProperty.call(image,'naturalWidth')?image.naturalWidth:image.width;_this.height=Object.prototype.hasOwnProperty.call(image,'naturalHeight')?image.naturalHeight:image.height;_this.aspectRatio=_this.width/_this.height;_this.dimensions=new $.Point(_this.width,_this.height);_this._tileWidth=_this.width;_this._tileHeight=_this.height;_this.tileOverlap=0;_this.minLevel=0;_this.levels=_this._buildLevels();_this.maxLevel=_this.levels.length-1;_this.ready=true;// Note: this event is documented elsewhere, in TileSource\n_this.raiseEvent('ready',{tileSource:_this});});$.addEvent(image,'error',function(){// Note: this event is documented elsewhere, in TileSource\n_this.raiseEvent('open-failed',{message:\"Error loading image at \"+url,source:url});});image.src=url;},/**\n         * @function\n         * @param {Number} level\n         */getLevelScale:function getLevelScale(level){var levelScale=NaN;if(level>=this.minLevel&&level<=this.maxLevel){levelScale=this.levels[level].width/this.levels[this.maxLevel].width;}return levelScale;},/**\n         * @function\n         * @param {Number} level\n         */getNumTiles:function getNumTiles(level){var scale=this.getLevelScale(level);if(scale){return new $.Point(1,1);}else{return new $.Point(0,0);}},/**\n         * Retrieves a tile url\n         * @function\n         * @param {Number} level Level of the tile\n         * @param {Number} x x coordinate of the tile\n         * @param {Number} y y coordinate of the tile\n         */getTileUrl:function getTileUrl(level,x,y){var url=null;if(level>=this.minLevel&&level<=this.maxLevel){url=this.levels[level].url;}return url;},/**\n         * Retrieves a tile context 2D\n         * @function\n         * @param {Number} level Level of the tile\n         * @param {Number} x x coordinate of the tile\n         * @param {Number} y y coordinate of the tile\n         */getContext2D:function getContext2D(level,x,y){var context=null;if(level>=this.minLevel&&level<=this.maxLevel){context=this.levels[level].context2D;}return context;},// private\n//\n// Builds the different levels of the pyramid if possible\n// (i.e. if canvas API enabled and no canvas tainting issue).\n_buildLevels:function _buildLevels(){var levels=[{url:this._image.src,/* IE8 fix since it has no naturalWidth and naturalHeight */width:Object.prototype.hasOwnProperty.call(this._image,'naturalWidth')?this._image.naturalWidth:this._image.width,height:Object.prototype.hasOwnProperty.call(this._image,'naturalHeight')?this._image.naturalHeight:this._image.height}];if(!this.buildPyramid||!$.supportsCanvas||!this.useCanvas){// We don't need the image anymore. Allows it to be GC.\ndelete this._image;return levels;}/* IE8 fix since it has no naturalWidth and naturalHeight */var currentWidth=Object.prototype.hasOwnProperty.call(this._image,'naturalWidth')?this._image.naturalWidth:this._image.width;var currentHeight=Object.prototype.hasOwnProperty.call(this._image,'naturalHeight')?this._image.naturalHeight:this._image.height;var bigCanvas=document.createElement(\"canvas\");var bigContext=bigCanvas.getContext(\"2d\");bigCanvas.width=currentWidth;bigCanvas.height=currentHeight;bigContext.drawImage(this._image,0,0,currentWidth,currentHeight);// We cache the context of the highest level because the browser\n// is a lot faster at downsampling something it already has\n// downsampled before.\nlevels[0].context2D=bigContext;// We don't need the image anymore. Allows it to be GC.\ndelete this._image;if($.isCanvasTainted(bigCanvas)){// If the canvas is tainted, we can't compute the pyramid.\nreturn levels;}// We build smaller levels until either width or height becomes\n// 1 pixel wide.\nwhile(currentWidth>=2&&currentHeight>=2){currentWidth=Math.floor(currentWidth/2);currentHeight=Math.floor(currentHeight/2);var smallCanvas=document.createElement(\"canvas\");var smallContext=smallCanvas.getContext(\"2d\");smallCanvas.width=currentWidth;smallCanvas.height=currentHeight;smallContext.drawImage(bigCanvas,0,0,currentWidth,currentHeight);levels.splice(0,0,{context2D:smallContext,width:currentWidth,height:currentHeight});bigCanvas=smallCanvas;bigContext=smallContext;}return levels;}});})(OpenSeadragon);/*\n * OpenSeadragon - TileSourceCollection\n *\n * Copyright (C) 2009 CodePlex Foundation\n * Copyright (C) 2010-2013 OpenSeadragon contributors\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * - Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * - Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * - Neither the name of CodePlex Foundation nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */(function($){// deprecated\n$.TileSourceCollection=function(tileSize,tileSources,rows,layout){$.console.error('TileSourceCollection is deprecated; use World instead');};})(OpenSeadragon);/*\n * OpenSeadragon - Button\n *\n * Copyright (C) 2009 CodePlex Foundation\n * Copyright (C) 2010-2013 OpenSeadragon contributors\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * - Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * - Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * - Neither the name of CodePlex Foundation nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */(function($){/**\n * An enumeration of button states\n * @member ButtonState\n * @memberof OpenSeadragon\n * @static\n * @type {Object}\n * @property {Number} REST\n * @property {Number} GROUP\n * @property {Number} HOVER\n * @property {Number} DOWN\n */$.ButtonState={REST:0,GROUP:1,HOVER:2,DOWN:3};/**\n * @class Button\n * @classdesc Manages events, hover states for individual buttons, tool-tips, as well\n * as fading the buttons out when the user has not interacted with them\n * for a specified period.\n *\n * @memberof OpenSeadragon\n * @extends OpenSeadragon.EventSource\n * @param {Object} options\n * @param {Element} [options.element=null] Element to use as the button. If not specified, an HTML &lt;div&gt; element is created.\n * @param {String} [options.tooltip=null] Provides context help for the button when the\n *  user hovers over it.\n * @param {String} [options.srcRest=null] URL of image to use in 'rest' state.\n * @param {String} [options.srcGroup=null] URL of image to use in 'up' state.\n * @param {String} [options.srcHover=null] URL of image to use in 'hover' state.\n * @param {String} [options.srcDown=null] URL of image to use in 'down' state.\n * @param {Number} [options.fadeDelay=0] How long to wait before fading.\n * @param {Number} [options.fadeLength=2000] How long should it take to fade the button.\n * @param {OpenSeadragon.EventHandler} [options.onPress=null] Event handler callback for {@link OpenSeadragon.Button.event:press}.\n * @param {OpenSeadragon.EventHandler} [options.onRelease=null] Event handler callback for {@link OpenSeadragon.Button.event:release}.\n * @param {OpenSeadragon.EventHandler} [options.onClick=null] Event handler callback for {@link OpenSeadragon.Button.event:click}.\n * @param {OpenSeadragon.EventHandler} [options.onEnter=null] Event handler callback for {@link OpenSeadragon.Button.event:enter}.\n * @param {OpenSeadragon.EventHandler} [options.onExit=null] Event handler callback for {@link OpenSeadragon.Button.event:exit}.\n * @param {OpenSeadragon.EventHandler} [options.onFocus=null] Event handler callback for {@link OpenSeadragon.Button.event:focus}.\n * @param {OpenSeadragon.EventHandler} [options.onBlur=null] Event handler callback for {@link OpenSeadragon.Button.event:blur}.\n */$.Button=function(options){var _this=this;$.EventSource.call(this);$.extend(true,this,{tooltip:null,srcRest:null,srcGroup:null,srcHover:null,srcDown:null,clickTimeThreshold:$.DEFAULT_SETTINGS.clickTimeThreshold,clickDistThreshold:$.DEFAULT_SETTINGS.clickDistThreshold,/**\n         * How long to wait before fading.\n         * @member {Number} fadeDelay\n         * @memberof OpenSeadragon.Button#\n         */fadeDelay:0,/**\n         * How long should it take to fade the button.\n         * @member {Number} fadeLength\n         * @memberof OpenSeadragon.Button#\n         */fadeLength:2000,onPress:null,onRelease:null,onClick:null,onEnter:null,onExit:null,onFocus:null,onBlur:null},options);/**\n     * The button element.\n     * @member {Element} element\n     * @memberof OpenSeadragon.Button#\n     */this.element=options.element||$.makeNeutralElement(\"div\");//if the user has specified the element to bind the control to explicitly\n//then do not add the default control images\nif(!options.element){this.imgRest=$.makeTransparentImage(this.srcRest);this.imgGroup=$.makeTransparentImage(this.srcGroup);this.imgHover=$.makeTransparentImage(this.srcHover);this.imgDown=$.makeTransparentImage(this.srcDown);this.imgRest.alt=this.imgGroup.alt=this.imgHover.alt=this.imgDown.alt=this.tooltip;this.element.style.position=\"relative\";$.setElementTouchActionNone(this.element);this.imgGroup.style.position=this.imgHover.style.position=this.imgDown.style.position=\"absolute\";this.imgGroup.style.top=this.imgHover.style.top=this.imgDown.style.top=\"0px\";this.imgGroup.style.left=this.imgHover.style.left=this.imgDown.style.left=\"0px\";this.imgHover.style.visibility=this.imgDown.style.visibility=\"hidden\";if($.Browser.vendor==$.BROWSERS.FIREFOX&&$.Browser.version<3){this.imgGroup.style.top=this.imgHover.style.top=this.imgDown.style.top=\"\";}this.element.appendChild(this.imgRest);this.element.appendChild(this.imgGroup);this.element.appendChild(this.imgHover);this.element.appendChild(this.imgDown);}this.addHandler(\"press\",this.onPress);this.addHandler(\"release\",this.onRelease);this.addHandler(\"click\",this.onClick);this.addHandler(\"enter\",this.onEnter);this.addHandler(\"exit\",this.onExit);this.addHandler(\"focus\",this.onFocus);this.addHandler(\"blur\",this.onBlur);/**\n     * The button's current state.\n     * @member {OpenSeadragon.ButtonState} currentState\n     * @memberof OpenSeadragon.Button#\n     */this.currentState=$.ButtonState.GROUP;// When the button last began to fade.\nthis.fadeBeginTime=null;// Whether this button should fade after user stops interacting with the viewport.\nthis.shouldFade=false;this.element.style.display=\"inline-block\";this.element.style.position=\"relative\";this.element.title=this.tooltip;/**\n     * Tracks mouse/touch/key events on the button.\n     * @member {OpenSeadragon.MouseTracker} tracker\n     * @memberof OpenSeadragon.Button#\n     */this.tracker=new $.MouseTracker({element:this.element,clickTimeThreshold:this.clickTimeThreshold,clickDistThreshold:this.clickDistThreshold,enterHandler:function enterHandler(event){if(event.insideElementPressed){inTo(_this,$.ButtonState.DOWN);/**\n                 * Raised when the cursor enters the Button element.\n                 *\n                 * @event enter\n                 * @memberof OpenSeadragon.Button\n                 * @type {object}\n                 * @property {OpenSeadragon.Button} eventSource - A reference to the Button which raised the event.\n                 * @property {Object} originalEvent - The original DOM event.\n                 * @property {?Object} userData - Arbitrary subscriber-defined object.\n                 */_this.raiseEvent(\"enter\",{originalEvent:event.originalEvent});}else if(!event.buttonDownAny){inTo(_this,$.ButtonState.HOVER);}},focusHandler:function focusHandler(event){this.enterHandler(event);/**\n             * Raised when the Button element receives focus.\n             *\n             * @event focus\n             * @memberof OpenSeadragon.Button\n             * @type {object}\n             * @property {OpenSeadragon.Button} eventSource - A reference to the Button which raised the event.\n             * @property {Object} originalEvent - The original DOM event.\n             * @property {?Object} userData - Arbitrary subscriber-defined object.\n             */_this.raiseEvent(\"focus\",{originalEvent:event.originalEvent});},exitHandler:function exitHandler(event){outTo(_this,$.ButtonState.GROUP);if(event.insideElementPressed){/**\n                 * Raised when the cursor leaves the Button element.\n                 *\n                 * @event exit\n                 * @memberof OpenSeadragon.Button\n                 * @type {object}\n                 * @property {OpenSeadragon.Button} eventSource - A reference to the Button which raised the event.\n                 * @property {Object} originalEvent - The original DOM event.\n                 * @property {?Object} userData - Arbitrary subscriber-defined object.\n                 */_this.raiseEvent(\"exit\",{originalEvent:event.originalEvent});}},blurHandler:function blurHandler(event){this.exitHandler(event);/**\n             * Raised when the Button element loses focus.\n             *\n             * @event blur\n             * @memberof OpenSeadragon.Button\n             * @type {object}\n             * @property {OpenSeadragon.Button} eventSource - A reference to the Button which raised the event.\n             * @property {Object} originalEvent - The original DOM event.\n             * @property {?Object} userData - Arbitrary subscriber-defined object.\n             */_this.raiseEvent(\"blur\",{originalEvent:event.originalEvent});},pressHandler:function pressHandler(event){inTo(_this,$.ButtonState.DOWN);/**\n             * Raised when a mouse button is pressed or touch occurs in the Button element.\n             *\n             * @event press\n             * @memberof OpenSeadragon.Button\n             * @type {object}\n             * @property {OpenSeadragon.Button} eventSource - A reference to the Button which raised the event.\n             * @property {Object} originalEvent - The original DOM event.\n             * @property {?Object} userData - Arbitrary subscriber-defined object.\n             */_this.raiseEvent(\"press\",{originalEvent:event.originalEvent});},releaseHandler:function releaseHandler(event){if(event.insideElementPressed&&event.insideElementReleased){outTo(_this,$.ButtonState.HOVER);/**\n                 * Raised when the mouse button is released or touch ends in the Button element.\n                 *\n                 * @event release\n                 * @memberof OpenSeadragon.Button\n                 * @type {object}\n                 * @property {OpenSeadragon.Button} eventSource - A reference to the Button which raised the event.\n                 * @property {Object} originalEvent - The original DOM event.\n                 * @property {?Object} userData - Arbitrary subscriber-defined object.\n                 */_this.raiseEvent(\"release\",{originalEvent:event.originalEvent});}else if(event.insideElementPressed){outTo(_this,$.ButtonState.GROUP);}else{inTo(_this,$.ButtonState.HOVER);}},clickHandler:function clickHandler(event){if(event.quick){/**\n                 * Raised when a mouse button is pressed and released or touch is initiated and ended in the Button element within the time and distance threshold.\n                 *\n                 * @event click\n                 * @memberof OpenSeadragon.Button\n                 * @type {object}\n                 * @property {OpenSeadragon.Button} eventSource - A reference to the Button which raised the event.\n                 * @property {Object} originalEvent - The original DOM event.\n                 * @property {?Object} userData - Arbitrary subscriber-defined object.\n                 */_this.raiseEvent(\"click\",{originalEvent:event.originalEvent});}},keyHandler:function keyHandler(event){//console.log( \"%s : handling key %s!\", _this.tooltip, event.keyCode);\nif(13===event.keyCode){/***\n                 * Raised when a mouse button is pressed and released or touch is initiated and ended in the Button element within the time and distance threshold.\n                 *\n                 * @event click\n                 * @memberof OpenSeadragon.Button\n                 * @type {object}\n                 * @property {OpenSeadragon.Button} eventSource - A reference to the Button which raised the event.\n                 * @property {Object} originalEvent - The original DOM event.\n                 * @property {?Object} userData - Arbitrary subscriber-defined object.\n                 */_this.raiseEvent(\"click\",{originalEvent:event.originalEvent});/***\n                 * Raised when the mouse button is released or touch ends in the Button element.\n                 *\n                 * @event release\n                 * @memberof OpenSeadragon.Button\n                 * @type {object}\n                 * @property {OpenSeadragon.Button} eventSource - A reference to the Button which raised the event.\n                 * @property {Object} originalEvent - The original DOM event.\n                 * @property {?Object} userData - Arbitrary subscriber-defined object.\n                 */_this.raiseEvent(\"release\",{originalEvent:event.originalEvent});return false;}return true;}});outTo(this,$.ButtonState.REST);};$.extend($.Button.prototype,$.EventSource.prototype,/** @lends OpenSeadragon.Button.prototype */{/**\n     * TODO: Determine what this function is intended to do and if it's actually\n     * useful as an API point.\n     * @function\n     */notifyGroupEnter:function notifyGroupEnter(){inTo(this,$.ButtonState.GROUP);},/**\n     * TODO: Determine what this function is intended to do and if it's actually\n     * useful as an API point.\n     * @function\n     */notifyGroupExit:function notifyGroupExit(){outTo(this,$.ButtonState.REST);},/**\n     * @function\n     */disable:function disable(){this.notifyGroupExit();this.element.disabled=true;$.setElementOpacity(this.element,0.2,true);},/**\n     * @function\n     */enable:function enable(){this.element.disabled=false;$.setElementOpacity(this.element,1.0,true);this.notifyGroupEnter();}});function scheduleFade(button){$.requestAnimationFrame(function(){updateFade(button);});}function updateFade(button){var currentTime,deltaTime,opacity;if(button.shouldFade){currentTime=$.now();deltaTime=currentTime-button.fadeBeginTime;opacity=1.0-deltaTime/button.fadeLength;opacity=Math.min(1.0,opacity);opacity=Math.max(0.0,opacity);if(button.imgGroup){$.setElementOpacity(button.imgGroup,opacity,true);}if(opacity>0){// fade again\nscheduleFade(button);}}}function beginFading(button){button.shouldFade=true;button.fadeBeginTime=$.now()+button.fadeDelay;window.setTimeout(function(){scheduleFade(button);},button.fadeDelay);}function stopFading(button){button.shouldFade=false;if(button.imgGroup){$.setElementOpacity(button.imgGroup,1.0,true);}}function inTo(button,newState){if(button.element.disabled){return;}if(newState>=$.ButtonState.GROUP&&button.currentState==$.ButtonState.REST){stopFading(button);button.currentState=$.ButtonState.GROUP;}if(newState>=$.ButtonState.HOVER&&button.currentState==$.ButtonState.GROUP){if(button.imgHover){button.imgHover.style.visibility=\"\";}button.currentState=$.ButtonState.HOVER;}if(newState>=$.ButtonState.DOWN&&button.currentState==$.ButtonState.HOVER){if(button.imgDown){button.imgDown.style.visibility=\"\";}button.currentState=$.ButtonState.DOWN;}}function outTo(button,newState){if(button.element.disabled){return;}if(newState<=$.ButtonState.HOVER&&button.currentState==$.ButtonState.DOWN){if(button.imgDown){button.imgDown.style.visibility=\"hidden\";}button.currentState=$.ButtonState.HOVER;}if(newState<=$.ButtonState.GROUP&&button.currentState==$.ButtonState.HOVER){if(button.imgHover){button.imgHover.style.visibility=\"hidden\";}button.currentState=$.ButtonState.GROUP;}if(newState<=$.ButtonState.REST&&button.currentState==$.ButtonState.GROUP){beginFading(button);button.currentState=$.ButtonState.REST;}}})(OpenSeadragon);/*\n * OpenSeadragon - ButtonGroup\n *\n * Copyright (C) 2009 CodePlex Foundation\n * Copyright (C) 2010-2013 OpenSeadragon contributors\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * - Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * - Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * - Neither the name of CodePlex Foundation nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */(function($){/**\n * @class ButtonGroup\n * @classdesc Manages events on groups of buttons.\n *\n * @memberof OpenSeadragon\n * @param {Object} options - A dictionary of settings applied against the entire group of buttons.\n * @param {Array} options.buttons Array of buttons\n * @param {Element} [options.element] Element to use as the container\n **/$.ButtonGroup=function(options){$.extend(true,this,{/**\n         * An array containing the buttons themselves.\n         * @member {Array} buttons\n         * @memberof OpenSeadragon.ButtonGroup#\n         */buttons:[],clickTimeThreshold:$.DEFAULT_SETTINGS.clickTimeThreshold,clickDistThreshold:$.DEFAULT_SETTINGS.clickDistThreshold,labelText:\"\"},options);// copy the button elements  TODO: Why?\nvar buttons=this.buttons.concat([]),_this=this,i;/**\n     * The shared container for the buttons.\n     * @member {Element} element\n     * @memberof OpenSeadragon.ButtonGroup#\n     */this.element=options.element||$.makeNeutralElement(\"div\");// TODO What if there IS an options.group specified?\nif(!options.group){this.element.style.display=\"inline-block\";//this.label   = $.makeNeutralElement( \"label\" );\n//TODO: support labels for ButtonGroups\n//this.label.innerHTML = this.labelText;\n//this.element.appendChild( this.label );\nfor(i=0;i<buttons.length;i++){this.element.appendChild(buttons[i].element);}}$.setElementTouchActionNone(this.element);/**\n     * Tracks mouse/touch/key events across the group of buttons.\n     * @member {OpenSeadragon.MouseTracker} tracker\n     * @memberof OpenSeadragon.ButtonGroup#\n     */this.tracker=new $.MouseTracker({element:this.element,clickTimeThreshold:this.clickTimeThreshold,clickDistThreshold:this.clickDistThreshold,enterHandler:function enterHandler(event){var i;for(i=0;i<_this.buttons.length;i++){_this.buttons[i].notifyGroupEnter();}},exitHandler:function exitHandler(event){var i;if(!event.insideElementPressed){for(i=0;i<_this.buttons.length;i++){_this.buttons[i].notifyGroupExit();}}}});};/** @lends OpenSeadragon.ButtonGroup.prototype */$.ButtonGroup.prototype={/**\n     * TODO: Figure out why this is used on the public API and if a more useful\n     * api can be created.\n     * @function\n     * @private\n     */emulateEnter:function emulateEnter(){this.tracker.enterHandler({eventSource:this.tracker});},/**\n     * TODO: Figure out why this is used on the public API and if a more useful\n     * api can be created.\n     * @function\n     * @private\n     */emulateExit:function emulateExit(){this.tracker.exitHandler({eventSource:this.tracker});}};})(OpenSeadragon);/*\n * OpenSeadragon - Rect\n *\n * Copyright (C) 2009 CodePlex Foundation\n * Copyright (C) 2010-2013 OpenSeadragon contributors\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * - Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * - Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * - Neither the name of CodePlex Foundation nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */(function($){/**\n * @class Rect\n * @classdesc A Rectangle is described by it top left coordinates (x, y), width,\n * height and degrees of rotation around (x, y).\n * Note that the coordinate system used is the one commonly used with images:\n * x increases when going to the right\n * y increases when going to the bottom\n * degrees increases clockwise with 0 being the horizontal\n *\n * The constructor normalizes the rectangle to always have 0 <= degrees < 90\n *\n * @memberof OpenSeadragon\n * @param {Number} [x=0] The vector component 'x'.\n * @param {Number} [y=0] The vector component 'y'.\n * @param {Number} [width=0] The vector component 'width'.\n * @param {Number} [height=0] The vector component 'height'.\n * @param {Number} [degrees=0] Rotation of the rectangle around (x,y) in degrees.\n */$.Rect=function(x,y,width,height,degrees){/**\n     * The vector component 'x'.\n     * @member {Number} x\n     * @memberof OpenSeadragon.Rect#\n     */this.x=typeof x===\"number\"?x:0;/**\n     * The vector component 'y'.\n     * @member {Number} y\n     * @memberof OpenSeadragon.Rect#\n     */this.y=typeof y===\"number\"?y:0;/**\n     * The vector component 'width'.\n     * @member {Number} width\n     * @memberof OpenSeadragon.Rect#\n     */this.width=typeof width===\"number\"?width:0;/**\n     * The vector component 'height'.\n     * @member {Number} height\n     * @memberof OpenSeadragon.Rect#\n     */this.height=typeof height===\"number\"?height:0;/**\n     * The rotation of the rectangle, in degrees.\n     * @member {Number} degrees\n     * @memberof OpenSeadragon.Rect#\n     */this.degrees=typeof degrees===\"number\"?degrees:0;// Normalizes the rectangle.\nthis.degrees=$.positiveModulo(this.degrees,360);var newTopLeft,newWidth;if(this.degrees>=270){newTopLeft=this.getTopRight();this.x=newTopLeft.x;this.y=newTopLeft.y;newWidth=this.height;this.height=this.width;this.width=newWidth;this.degrees-=270;}else if(this.degrees>=180){newTopLeft=this.getBottomRight();this.x=newTopLeft.x;this.y=newTopLeft.y;this.degrees-=180;}else if(this.degrees>=90){newTopLeft=this.getBottomLeft();this.x=newTopLeft.x;this.y=newTopLeft.y;newWidth=this.height;this.height=this.width;this.width=newWidth;this.degrees-=90;}};/**\n * Builds a rectangle having the 3 specified points as summits.\n * @static\n * @memberof OpenSeadragon.Rect\n * @param {OpenSeadragon.Point} topLeft\n * @param {OpenSeadragon.Point} topRight\n * @param {OpenSeadragon.Point} bottomLeft\n * @returns {OpenSeadragon.Rect}\n */$.Rect.fromSummits=function(topLeft,topRight,bottomLeft){var width=topLeft.distanceTo(topRight);var height=topLeft.distanceTo(bottomLeft);var diff=topRight.minus(topLeft);var radians=Math.atan(diff.y/diff.x);if(diff.x<0){radians+=Math.PI;}else if(diff.y<0){radians+=2*Math.PI;}return new $.Rect(topLeft.x,topLeft.y,width,height,radians/Math.PI*180);};/** @lends OpenSeadragon.Rect.prototype */$.Rect.prototype={/**\n     * @function\n     * @returns {OpenSeadragon.Rect} a duplicate of this Rect\n     */clone:function clone(){return new $.Rect(this.x,this.y,this.width,this.height,this.degrees);},/**\n     * The aspect ratio is simply the ratio of width to height.\n     * @function\n     * @returns {Number} The ratio of width to height.\n     */getAspectRatio:function getAspectRatio(){return this.width/this.height;},/**\n     * Provides the coordinates of the upper-left corner of the rectangle as a\n     * point.\n     * @function\n     * @returns {OpenSeadragon.Point} The coordinate of the upper-left corner of\n     *  the rectangle.\n     */getTopLeft:function getTopLeft(){return new $.Point(this.x,this.y);},/**\n     * Provides the coordinates of the bottom-right corner of the rectangle as a\n     * point.\n     * @function\n     * @returns {OpenSeadragon.Point} The coordinate of the bottom-right corner of\n     *  the rectangle.\n     */getBottomRight:function getBottomRight(){return new $.Point(this.x+this.width,this.y+this.height).rotate(this.degrees,this.getTopLeft());},/**\n     * Provides the coordinates of the top-right corner of the rectangle as a\n     * point.\n     * @function\n     * @returns {OpenSeadragon.Point} The coordinate of the top-right corner of\n     *  the rectangle.\n     */getTopRight:function getTopRight(){return new $.Point(this.x+this.width,this.y).rotate(this.degrees,this.getTopLeft());},/**\n     * Provides the coordinates of the bottom-left corner of the rectangle as a\n     * point.\n     * @function\n     * @returns {OpenSeadragon.Point} The coordinate of the bottom-left corner of\n     *  the rectangle.\n     */getBottomLeft:function getBottomLeft(){return new $.Point(this.x,this.y+this.height).rotate(this.degrees,this.getTopLeft());},/**\n     * Computes the center of the rectangle.\n     * @function\n     * @returns {OpenSeadragon.Point} The center of the rectangle as represented\n     *  as represented by a 2-dimensional vector (x,y)\n     */getCenter:function getCenter(){return new $.Point(this.x+this.width/2.0,this.y+this.height/2.0).rotate(this.degrees,this.getTopLeft());},/**\n     * Returns the width and height component as a vector OpenSeadragon.Point\n     * @function\n     * @returns {OpenSeadragon.Point} The 2 dimensional vector representing the\n     *  the width and height of the rectangle.\n     */getSize:function getSize(){return new $.Point(this.width,this.height);},/**\n     * Determines if two Rectangles have equivalent components.\n     * @function\n     * @param {OpenSeadragon.Rect} rectangle The Rectangle to compare to.\n     * @return {Boolean} 'true' if all components are equal, otherwise 'false'.\n     */equals:function equals(other){return other instanceof $.Rect&&this.x===other.x&&this.y===other.y&&this.width===other.width&&this.height===other.height&&this.degrees===other.degrees;},/**\n    * Multiply all dimensions (except degrees) in this Rect by a factor and\n    * return a new Rect.\n    * @function\n    * @param {Number} factor The factor to multiply vector components.\n    * @returns {OpenSeadragon.Rect} A new rect representing the multiplication\n    *  of the vector components by the factor\n    */times:function times(factor){return new $.Rect(this.x*factor,this.y*factor,this.width*factor,this.height*factor,this.degrees);},/**\n    * Translate/move this Rect by a vector and return new Rect.\n    * @function\n    * @param {OpenSeadragon.Point} delta The translation vector.\n    * @returns {OpenSeadragon.Rect} A new rect with altered position\n    */translate:function translate(delta){return new $.Rect(this.x+delta.x,this.y+delta.y,this.width,this.height,this.degrees);},/**\n     * Returns the smallest rectangle that will contain this and the given\n     * rectangle bounding boxes.\n     * @param {OpenSeadragon.Rect} rect\n     * @return {OpenSeadragon.Rect} The new rectangle.\n     */union:function union(rect){var thisBoundingBox=this.getBoundingBox();var otherBoundingBox=rect.getBoundingBox();var left=Math.min(thisBoundingBox.x,otherBoundingBox.x);var top=Math.min(thisBoundingBox.y,otherBoundingBox.y);var right=Math.max(thisBoundingBox.x+thisBoundingBox.width,otherBoundingBox.x+otherBoundingBox.width);var bottom=Math.max(thisBoundingBox.y+thisBoundingBox.height,otherBoundingBox.y+otherBoundingBox.height);return new $.Rect(left,top,right-left,bottom-top);},/**\n     * Returns the bounding box of the intersection of this rectangle with the\n     * given rectangle.\n     * @param {OpenSeadragon.Rect} rect\n     * @return {OpenSeadragon.Rect} the bounding box of the intersection\n     * or null if the rectangles don't intersect.\n     */intersection:function intersection(rect){// Simplified version of Weiler Atherton clipping algorithm\n// https://en.wikipedia.org/wiki/Weiler%E2%80%93Atherton_clipping_algorithm\n// Because we just want the bounding box of the intersection,\n// we can just compute the bounding box of:\n// 1. all the summits of this which are inside rect\n// 2. all the summits of rect which are inside this\n// 3. all the intersections of rect and this\nvar EPSILON=0.0000000001;var intersectionPoints=[];var thisTopLeft=this.getTopLeft();if(rect.containsPoint(thisTopLeft,EPSILON)){intersectionPoints.push(thisTopLeft);}var thisTopRight=this.getTopRight();if(rect.containsPoint(thisTopRight,EPSILON)){intersectionPoints.push(thisTopRight);}var thisBottomLeft=this.getBottomLeft();if(rect.containsPoint(thisBottomLeft,EPSILON)){intersectionPoints.push(thisBottomLeft);}var thisBottomRight=this.getBottomRight();if(rect.containsPoint(thisBottomRight,EPSILON)){intersectionPoints.push(thisBottomRight);}var rectTopLeft=rect.getTopLeft();if(this.containsPoint(rectTopLeft,EPSILON)){intersectionPoints.push(rectTopLeft);}var rectTopRight=rect.getTopRight();if(this.containsPoint(rectTopRight,EPSILON)){intersectionPoints.push(rectTopRight);}var rectBottomLeft=rect.getBottomLeft();if(this.containsPoint(rectBottomLeft,EPSILON)){intersectionPoints.push(rectBottomLeft);}var rectBottomRight=rect.getBottomRight();if(this.containsPoint(rectBottomRight,EPSILON)){intersectionPoints.push(rectBottomRight);}var thisSegments=this._getSegments();var rectSegments=rect._getSegments();for(var i=0;i<thisSegments.length;i++){var thisSegment=thisSegments[i];for(var j=0;j<rectSegments.length;j++){var rectSegment=rectSegments[j];var intersect=getIntersection(thisSegment[0],thisSegment[1],rectSegment[0],rectSegment[1]);if(intersect){intersectionPoints.push(intersect);}}}// Get intersection point of segments [a,b] and [c,d]\nfunction getIntersection(a,b,c,d){// http://stackoverflow.com/a/1968345/1440403\nvar abVector=b.minus(a);var cdVector=d.minus(c);var denom=-cdVector.x*abVector.y+abVector.x*cdVector.y;if(denom===0){return null;}var s=(abVector.x*(a.y-c.y)-abVector.y*(a.x-c.x))/denom;var t=(cdVector.x*(a.y-c.y)-cdVector.y*(a.x-c.x))/denom;if(-EPSILON<=s&&s<=1-EPSILON&&-EPSILON<=t&&t<=1-EPSILON){return new $.Point(a.x+t*abVector.x,a.y+t*abVector.y);}return null;}if(intersectionPoints.length===0){return null;}var minX=intersectionPoints[0].x;var maxX=intersectionPoints[0].x;var minY=intersectionPoints[0].y;var maxY=intersectionPoints[0].y;for(var k=1;k<intersectionPoints.length;k++){var point=intersectionPoints[k];if(point.x<minX){minX=point.x;}if(point.x>maxX){maxX=point.x;}if(point.y<minY){minY=point.y;}if(point.y>maxY){maxY=point.y;}}return new $.Rect(minX,minY,maxX-minX,maxY-minY);},// private\n_getSegments:function _getSegments(){var topLeft=this.getTopLeft();var topRight=this.getTopRight();var bottomLeft=this.getBottomLeft();var bottomRight=this.getBottomRight();return[[topLeft,topRight],[topRight,bottomRight],[bottomRight,bottomLeft],[bottomLeft,topLeft]];},/**\n     * Rotates a rectangle around a point.\n     * @function\n     * @param {Number} degrees The angle in degrees to rotate.\n     * @param {OpenSeadragon.Point} [pivot] The point about which to rotate.\n     * Defaults to the center of the rectangle.\n     * @return {OpenSeadragon.Rect}\n     */rotate:function rotate(degrees,pivot){degrees=$.positiveModulo(degrees,360);if(degrees===0){return this.clone();}pivot=pivot||this.getCenter();var newTopLeft=this.getTopLeft().rotate(degrees,pivot);var newTopRight=this.getTopRight().rotate(degrees,pivot);var diff=newTopRight.minus(newTopLeft);// Handle floating point error\ndiff=diff.apply(function(x){var EPSILON=1e-15;return Math.abs(x)<EPSILON?0:x;});var radians=Math.atan(diff.y/diff.x);if(diff.x<0){radians+=Math.PI;}else if(diff.y<0){radians+=2*Math.PI;}return new $.Rect(newTopLeft.x,newTopLeft.y,this.width,this.height,radians/Math.PI*180);},/**\n     * Retrieves the smallest horizontal (degrees=0) rectangle which contains\n     * this rectangle.\n     * @returns {OpenSeadragon.Rect}\n     */getBoundingBox:function getBoundingBox(){if(this.degrees===0){return this.clone();}var topLeft=this.getTopLeft();var topRight=this.getTopRight();var bottomLeft=this.getBottomLeft();var bottomRight=this.getBottomRight();var minX=Math.min(topLeft.x,topRight.x,bottomLeft.x,bottomRight.x);var maxX=Math.max(topLeft.x,topRight.x,bottomLeft.x,bottomRight.x);var minY=Math.min(topLeft.y,topRight.y,bottomLeft.y,bottomRight.y);var maxY=Math.max(topLeft.y,topRight.y,bottomLeft.y,bottomRight.y);return new $.Rect(minX,minY,maxX-minX,maxY-minY);},/**\n     * Retrieves the smallest horizontal (degrees=0) rectangle which contains\n     * this rectangle and has integers x, y, width and height\n     * @returns {OpenSeadragon.Rect}\n     */getIntegerBoundingBox:function getIntegerBoundingBox(){var boundingBox=this.getBoundingBox();var x=Math.floor(boundingBox.x);var y=Math.floor(boundingBox.y);var width=Math.ceil(boundingBox.width+boundingBox.x-x);var height=Math.ceil(boundingBox.height+boundingBox.y-y);return new $.Rect(x,y,width,height);},/**\n     * Determines whether a point is inside this rectangle (edge included).\n     * @function\n     * @param {OpenSeadragon.Point} point\n     * @param {Number} [epsilon=0] the margin of error allowed\n     * @returns {Boolean} true if the point is inside this rectangle, false\n     * otherwise.\n     */containsPoint:function containsPoint(point,epsilon){epsilon=epsilon||0;// See http://stackoverflow.com/a/2752754/1440403 for explanation\nvar topLeft=this.getTopLeft();var topRight=this.getTopRight();var bottomLeft=this.getBottomLeft();var topDiff=topRight.minus(topLeft);var leftDiff=bottomLeft.minus(topLeft);return(point.x-topLeft.x)*topDiff.x+(point.y-topLeft.y)*topDiff.y>=-epsilon&&(point.x-topRight.x)*topDiff.x+(point.y-topRight.y)*topDiff.y<=epsilon&&(point.x-topLeft.x)*leftDiff.x+(point.y-topLeft.y)*leftDiff.y>=-epsilon&&(point.x-bottomLeft.x)*leftDiff.x+(point.y-bottomLeft.y)*leftDiff.y<=epsilon;},/**\n     * Provides a string representation of the rectangle which is useful for\n     * debugging.\n     * @function\n     * @returns {String} A string representation of the rectangle.\n     */toString:function toString(){return\"[\"+Math.round(this.x*100)/100+\", \"+Math.round(this.y*100)/100+\", \"+Math.round(this.width*100)/100+\"x\"+Math.round(this.height*100)/100+\", \"+Math.round(this.degrees*100)/100+\"deg\"+\"]\";}};})(OpenSeadragon);/*\n * OpenSeadragon - ReferenceStrip\n *\n * Copyright (C) 2009 CodePlex Foundation\n * Copyright (C) 2010-2013 OpenSeadragon contributors\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * - Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * - Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * - Neither the name of CodePlex Foundation nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */(function($){// dictionary from id to private properties\nvar THIS={};/**\n *  The CollectionDrawer is a reimplementation if the Drawer API that\n *  focuses on allowing a viewport to be redefined as a collection\n *  of smaller viewports, defined by a clear number of rows and / or\n *  columns of which each item in the matrix of viewports has its own\n *  source.\n *\n *  This idea is a reexpression of the idea of dzi collections\n *  which allows a clearer algorithm to reuse the tile sources already\n *  supported by OpenSeadragon, in heterogenious or homogenious\n *  sequences just like mixed groups already supported by the viewer\n *  for the purpose of image sequnces.\n *\n *  TODO:   The difficult part of this feature is figuring out how to express\n *          this functionality as a combination of the functionality already\n *          provided by Drawer, Viewport, TileSource, and Navigator.  It may\n *          require better abstraction at those points in order to efficiently\n *          reuse those paradigms.\n */ /**\n * @class ReferenceStrip\n * @memberof OpenSeadragon\n * @param {Object} options\n */$.ReferenceStrip=function(options){var _this=this,viewer=options.viewer,viewerSize=$.getElementSize(viewer.element),element,style,i;//We may need to create a new element and id if they did not\n//provide the id for the existing element\nif(!options.id){options.id='referencestrip-'+$.now();this.element=$.makeNeutralElement(\"div\");this.element.id=options.id;this.element.className='referencestrip';}options=$.extend(true,{sizeRatio:$.DEFAULT_SETTINGS.referenceStripSizeRatio,position:$.DEFAULT_SETTINGS.referenceStripPosition,scroll:$.DEFAULT_SETTINGS.referenceStripScroll,clickTimeThreshold:$.DEFAULT_SETTINGS.clickTimeThreshold},options,{//required overrides\nelement:this.element,//These need to be overridden to prevent recursion since\n//the navigator is a viewer and a viewer has a navigator\nshowNavigator:false,mouseNavEnabled:false,showNavigationControl:false,showSequenceControl:false});$.extend(this,options);//Private state properties\nTHIS[this.id]={\"animating\":false};this.minPixelRatio=this.viewer.minPixelRatio;style=this.element.style;style.marginTop='0px';style.marginRight='0px';style.marginBottom='0px';style.marginLeft='0px';style.left='0px';style.bottom='0px';style.border='0px';style.background='#000';style.position='relative';$.setElementTouchActionNone(this.element);$.setElementOpacity(this.element,0.8);this.viewer=viewer;this.innerTracker=new $.MouseTracker({element:this.element,dragHandler:$.delegate(this,onStripDrag),scrollHandler:$.delegate(this,onStripScroll),enterHandler:$.delegate(this,onStripEnter),exitHandler:$.delegate(this,onStripExit),keyDownHandler:$.delegate(this,onKeyDown),keyHandler:$.delegate(this,onKeyPress)});//Controls the position and orientation of the reference strip and sets the\n//appropriate width and height\nif(options.width&&options.height){this.element.style.width=options.width+'px';this.element.style.height=options.height+'px';viewer.addControl(this.element,{anchor:$.ControlAnchor.BOTTOM_LEFT});}else{if(\"horizontal\"==options.scroll){this.element.style.width=viewerSize.x*options.sizeRatio*viewer.tileSources.length+12*viewer.tileSources.length+'px';this.element.style.height=viewerSize.y*options.sizeRatio+'px';viewer.addControl(this.element,{anchor:$.ControlAnchor.BOTTOM_LEFT});}else{this.element.style.height=viewerSize.y*options.sizeRatio*viewer.tileSources.length+12*viewer.tileSources.length+'px';this.element.style.width=viewerSize.x*options.sizeRatio+'px';viewer.addControl(this.element,{anchor:$.ControlAnchor.TOP_LEFT});}}this.panelWidth=viewerSize.x*this.sizeRatio+8;this.panelHeight=viewerSize.y*this.sizeRatio+8;this.panels=[];this.miniViewers={};/*jshint loopfunc:true*/for(i=0;i<viewer.tileSources.length;i++){element=$.makeNeutralElement('div');element.id=this.element.id+\"-\"+i;element.style.width=_this.panelWidth+'px';element.style.height=_this.panelHeight+'px';element.style.display='inline';element.style[\"float\"]='left';//Webkit\nelement.style.cssFloat='left';//Firefox\nelement.style.styleFloat='left';//IE\nelement.style.padding='2px';$.setElementTouchActionNone(element);element.innerTracker=new $.MouseTracker({element:element,clickTimeThreshold:this.clickTimeThreshold,clickDistThreshold:this.clickDistThreshold,pressHandler:function pressHandler(event){event.eventSource.dragging=$.now();},releaseHandler:function releaseHandler(event){var tracker=event.eventSource,id=tracker.element.id,page=Number(id.split('-')[2]),now=$.now();if(event.insideElementPressed&&event.insideElementReleased&&tracker.dragging&&now-tracker.dragging<tracker.clickTimeThreshold){tracker.dragging=null;viewer.goToPage(page);}}});this.element.appendChild(element);element.activePanel=false;this.panels.push(element);}loadPanels(this,this.scroll=='vertical'?viewerSize.y:viewerSize.x,0);this.setFocus(0);};$.extend($.ReferenceStrip.prototype,$.EventSource.prototype,$.Viewer.prototype,/** @lends OpenSeadragon.ReferenceStrip.prototype */{/**\n     * @function\n     */setFocus:function setFocus(page){var element=this.element.querySelector('#'+this.element.id+'-'+page),viewerSize=$.getElementSize(this.viewer.canvas),scrollWidth=Number(this.element.style.width.replace('px','')),scrollHeight=Number(this.element.style.height.replace('px','')),offsetLeft=-Number(this.element.style.marginLeft.replace('px','')),offsetTop=-Number(this.element.style.marginTop.replace('px','')),offset;if(this.currentSelected!==element){if(this.currentSelected){this.currentSelected.style.background='#000';}this.currentSelected=element;this.currentSelected.style.background='#999';if('horizontal'==this.scroll){//right left\noffset=Number(page)*(this.panelWidth+3);if(offset>offsetLeft+viewerSize.x-this.panelWidth){offset=Math.min(offset,scrollWidth-viewerSize.x);this.element.style.marginLeft=-offset+'px';loadPanels(this,viewerSize.x,-offset);}else if(offset<offsetLeft){offset=Math.max(0,offset-viewerSize.x/2);this.element.style.marginLeft=-offset+'px';loadPanels(this,viewerSize.x,-offset);}}else{offset=Number(page)*(this.panelHeight+3);if(offset>offsetTop+viewerSize.y-this.panelHeight){offset=Math.min(offset,scrollHeight-viewerSize.y);this.element.style.marginTop=-offset+'px';loadPanels(this,viewerSize.y,-offset);}else if(offset<offsetTop){offset=Math.max(0,offset-viewerSize.y/2);this.element.style.marginTop=-offset+'px';loadPanels(this,viewerSize.y,-offset);}}this.currentPage=page;onStripEnter.call(this,{eventSource:this.innerTracker});}},/**\n     * @function\n     */update:function update(){if(THIS[this.id].animating){$.console.log('image reference strip update');return true;}return false;},// Overrides Viewer.destroy\ndestroy:function destroy(){if(this.miniViewers){for(var key in this.miniViewers){this.miniViewers[key].destroy();}}if(this.element){this.element.parentNode.removeChild(this.element);}}});/**\n * @private\n * @inner\n * @function\n */function onStripDrag(event){var offsetLeft=Number(this.element.style.marginLeft.replace('px','')),offsetTop=Number(this.element.style.marginTop.replace('px','')),scrollWidth=Number(this.element.style.width.replace('px','')),scrollHeight=Number(this.element.style.height.replace('px','')),viewerSize=$.getElementSize(this.viewer.canvas);this.dragging=true;if(this.element){if('horizontal'==this.scroll){if(-event.delta.x>0){//forward\nif(offsetLeft>-(scrollWidth-viewerSize.x)){this.element.style.marginLeft=offsetLeft+event.delta.x*2+'px';loadPanels(this,viewerSize.x,offsetLeft+event.delta.x*2);}}else if(-event.delta.x<0){//reverse\nif(offsetLeft<0){this.element.style.marginLeft=offsetLeft+event.delta.x*2+'px';loadPanels(this,viewerSize.x,offsetLeft+event.delta.x*2);}}}else{if(-event.delta.y>0){//forward\nif(offsetTop>-(scrollHeight-viewerSize.y)){this.element.style.marginTop=offsetTop+event.delta.y*2+'px';loadPanels(this,viewerSize.y,offsetTop+event.delta.y*2);}}else if(-event.delta.y<0){//reverse\nif(offsetTop<0){this.element.style.marginTop=offsetTop+event.delta.y*2+'px';loadPanels(this,viewerSize.y,offsetTop+event.delta.y*2);}}}}return false;}/**\n * @private\n * @inner\n * @function\n */function onStripScroll(event){var offsetLeft=Number(this.element.style.marginLeft.replace('px','')),offsetTop=Number(this.element.style.marginTop.replace('px','')),scrollWidth=Number(this.element.style.width.replace('px','')),scrollHeight=Number(this.element.style.height.replace('px','')),viewerSize=$.getElementSize(this.viewer.canvas);if(this.element){if('horizontal'==this.scroll){if(event.scroll>0){//forward\nif(offsetLeft>-(scrollWidth-viewerSize.x)){this.element.style.marginLeft=offsetLeft-event.scroll*60+'px';loadPanels(this,viewerSize.x,offsetLeft-event.scroll*60);}}else if(event.scroll<0){//reverse\nif(offsetLeft<0){this.element.style.marginLeft=offsetLeft-event.scroll*60+'px';loadPanels(this,viewerSize.x,offsetLeft-event.scroll*60);}}}else{if(event.scroll<0){//scroll up\nif(offsetTop>viewerSize.y-scrollHeight){this.element.style.marginTop=offsetTop+event.scroll*60+'px';loadPanels(this,viewerSize.y,offsetTop+event.scroll*60);}}else if(event.scroll>0){//scroll dowm\nif(offsetTop<0){this.element.style.marginTop=offsetTop+event.scroll*60+'px';loadPanels(this,viewerSize.y,offsetTop+event.scroll*60);}}}}//cancels event\nreturn false;}function loadPanels(strip,viewerSize,scroll){var panelSize,activePanelsStart,activePanelsEnd,miniViewer,style,i,element;if('horizontal'==strip.scroll){panelSize=strip.panelWidth;}else{panelSize=strip.panelHeight;}activePanelsStart=Math.ceil(viewerSize/panelSize)+5;activePanelsEnd=Math.ceil((Math.abs(scroll)+viewerSize)/panelSize)+1;activePanelsStart=activePanelsEnd-activePanelsStart;activePanelsStart=activePanelsStart<0?0:activePanelsStart;for(i=activePanelsStart;i<activePanelsEnd&&i<strip.panels.length;i++){element=strip.panels[i];if(!element.activePanel){var miniTileSource;var originalTileSource=strip.viewer.tileSources[i];if(originalTileSource.referenceStripThumbnailUrl){miniTileSource={type:'image',url:originalTileSource.referenceStripThumbnailUrl};}else{miniTileSource=originalTileSource;}miniViewer=new $.Viewer({id:element.id,tileSources:[miniTileSource],element:element,navigatorSizeRatio:strip.sizeRatio,showNavigator:false,mouseNavEnabled:false,showNavigationControl:false,showSequenceControl:false,immediateRender:true,blendTime:0,animationTime:0,loadTilesWithAjax:strip.viewer.loadTilesWithAjax,ajaxHeaders:strip.viewer.ajaxHeaders,useCanvas:strip.useCanvas});miniViewer.displayRegion=$.makeNeutralElement(\"div\");miniViewer.displayRegion.id=element.id+'-displayregion';miniViewer.displayRegion.className='displayregion';style=miniViewer.displayRegion.style;style.position='relative';style.top='0px';style.left='0px';style.fontSize='0px';style.overflow='hidden';style[\"float\"]='left';//Webkit\nstyle.cssFloat='left';//Firefox\nstyle.styleFloat='left';//IE\nstyle.zIndex=999999999;style.cursor='default';style.width=strip.panelWidth-4+'px';style.height=strip.panelHeight-4+'px';// TODO: What is this for? Future keyboard navigation support?\nminiViewer.displayRegion.innerTracker=new $.MouseTracker({element:miniViewer.displayRegion,startDisabled:true});element.getElementsByTagName('div')[0].appendChild(miniViewer.displayRegion);strip.miniViewers[element.id]=miniViewer;element.activePanel=true;}}}/**\n * @private\n * @inner\n * @function\n */function onStripEnter(event){var element=event.eventSource.element;//$.setElementOpacity(element, 0.8);\n//element.style.border = '1px solid #555';\n//element.style.background = '#000';\nif('horizontal'==this.scroll){//element.style.paddingTop = \"0px\";\nelement.style.marginBottom=\"0px\";}else{//element.style.paddingRight = \"0px\";\nelement.style.marginLeft=\"0px\";}return false;}/**\n * @private\n * @inner\n * @function\n */function onStripExit(event){var element=event.eventSource.element;if('horizontal'==this.scroll){//element.style.paddingTop = \"10px\";\nelement.style.marginBottom=\"-\"+$.getElementSize(element).y/2+\"px\";}else{//element.style.paddingRight = \"10px\";\nelement.style.marginLeft=\"-\"+$.getElementSize(element).x/2+\"px\";}return false;}/**\n * @private\n * @inner\n * @function\n */function onKeyDown(event){//console.log( event.keyCode );\nif(!event.preventDefaultAction&&!event.ctrl&&!event.alt&&!event.meta){switch(event.keyCode){case 38://up arrow\nonStripScroll.call(this,{eventSource:this.tracker,position:null,scroll:1,shift:null});return false;case 40://down arrow\nonStripScroll.call(this,{eventSource:this.tracker,position:null,scroll:-1,shift:null});return false;case 37://left arrow\nonStripScroll.call(this,{eventSource:this.tracker,position:null,scroll:-1,shift:null});return false;case 39://right arrow\nonStripScroll.call(this,{eventSource:this.tracker,position:null,scroll:1,shift:null});return false;default://console.log( 'navigator keycode %s', event.keyCode );\nreturn true;}}else{return true;}}/**\n * @private\n * @inner\n * @function\n */function onKeyPress(event){//console.log( event.keyCode );\nif(!event.preventDefaultAction&&!event.ctrl&&!event.alt&&!event.meta){switch(event.keyCode){case 61://=|+\nonStripScroll.call(this,{eventSource:this.tracker,position:null,scroll:1,shift:null});return false;case 45://-|_\nonStripScroll.call(this,{eventSource:this.tracker,position:null,scroll:-1,shift:null});return false;case 48://0|)\ncase 119://w\ncase 87://W\nonStripScroll.call(this,{eventSource:this.tracker,position:null,scroll:1,shift:null});return false;case 115://s\ncase 83://S\nonStripScroll.call(this,{eventSource:this.tracker,position:null,scroll:-1,shift:null});return false;case 97://a\nonStripScroll.call(this,{eventSource:this.tracker,position:null,scroll:-1,shift:null});return false;case 100://d\nonStripScroll.call(this,{eventSource:this.tracker,position:null,scroll:1,shift:null});return false;default://console.log( 'navigator keycode %s', event.keyCode );\nreturn true;}}else{return true;}}})(OpenSeadragon);/*\n * OpenSeadragon - DisplayRect\n *\n * Copyright (C) 2009 CodePlex Foundation\n * Copyright (C) 2010-2013 OpenSeadragon contributors\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * - Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * - Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * - Neither the name of CodePlex Foundation nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */(function($){/**\n * @class DisplayRect\n * @classdesc A display rectangle is very similar to {@link OpenSeadragon.Rect} but adds two\n * fields, 'minLevel' and 'maxLevel' which denote the supported zoom levels\n * for this rectangle.\n *\n * @memberof OpenSeadragon\n * @extends OpenSeadragon.Rect\n * @param {Number} x The vector component 'x'.\n * @param {Number} y The vector component 'y'.\n * @param {Number} width The vector component 'height'.\n * @param {Number} height The vector component 'width'.\n * @param {Number} minLevel The lowest zoom level supported.\n * @param {Number} maxLevel The highest zoom level supported.\n */$.DisplayRect=function(x,y,width,height,minLevel,maxLevel){$.Rect.apply(this,[x,y,width,height]);/**\n     * The lowest zoom level supported.\n     * @member {Number} minLevel\n     * @memberof OpenSeadragon.DisplayRect#\n     */this.minLevel=minLevel;/**\n     * The highest zoom level supported.\n     * @member {Number} maxLevel\n     * @memberof OpenSeadragon.DisplayRect#\n     */this.maxLevel=maxLevel;};$.extend($.DisplayRect.prototype,$.Rect.prototype);})(OpenSeadragon);/*\n * OpenSeadragon - Spring\n *\n * Copyright (C) 2009 CodePlex Foundation\n * Copyright (C) 2010-2013 OpenSeadragon contributors\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * - Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * - Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * - Neither the name of CodePlex Foundation nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */(function($){/**\n * @class Spring\n * @memberof OpenSeadragon\n * @param {Object} options - Spring configuration settings.\n * @param {Number} options.springStiffness - Spring stiffness. Must be greater than zero.\n * The closer to zero, the closer to linear animation.\n * @param {Number} options.animationTime - Animation duration per spring, in seconds.\n * Must be zero or greater.\n * @param {Number} [options.initial=0] - Initial value of spring.\n * @param {Boolean} [options.exponential=false] - Whether this spring represents\n * an exponential scale (such as zoom) and should be animated accordingly. Note that\n * exponential springs must have non-zero values.\n */$.Spring=function(options){var args=arguments;if(typeof options!='object'){//allows backward compatible use of ( initialValue, config ) as\n//constructor parameters\noptions={initial:args.length&&typeof args[0]==\"number\"?args[0]:undefined,/**\n             * Spring stiffness.\n             * @member {Number} springStiffness\n             * @memberof OpenSeadragon.Spring#\n             */springStiffness:args.length>1?args[1].springStiffness:5.0,/**\n             * Animation duration per spring.\n             * @member {Number} animationTime\n             * @memberof OpenSeadragon.Spring#\n             */animationTime:args.length>1?args[1].animationTime:1.5};}$.console.assert(typeof options.springStiffness===\"number\"&&options.springStiffness!==0,\"[OpenSeadragon.Spring] options.springStiffness must be a non-zero number\");$.console.assert(typeof options.animationTime===\"number\"&&options.animationTime>=0,\"[OpenSeadragon.Spring] options.animationTime must be a number greater than or equal to 0\");if(options.exponential){this._exponential=true;delete options.exponential;}$.extend(true,this,options);/**\n     * @member {Object} current\n     * @memberof OpenSeadragon.Spring#\n     * @property {Number} value\n     * @property {Number} time\n     */this.current={value:typeof this.initial==\"number\"?this.initial:this._exponential?0:1,time:$.now()// always work in milliseconds\n};$.console.assert(!this._exponential||this.current.value!==0,\"[OpenSeadragon.Spring] value must be non-zero for exponential springs\");/**\n     * @member {Object} start\n     * @memberof OpenSeadragon.Spring#\n     * @property {Number} value\n     * @property {Number} time\n     */this.start={value:this.current.value,time:this.current.time};/**\n     * @member {Object} target\n     * @memberof OpenSeadragon.Spring#\n     * @property {Number} value\n     * @property {Number} time\n     */this.target={value:this.current.value,time:this.current.time};if(this._exponential){this.start._logValue=Math.log(this.start.value);this.target._logValue=Math.log(this.target.value);this.current._logValue=Math.log(this.current.value);}};/** @lends OpenSeadragon.Spring.prototype */$.Spring.prototype={/**\n     * @function\n     * @param {Number} target\n     */resetTo:function resetTo(target){$.console.assert(!this._exponential||target!==0,\"[OpenSeadragon.Spring.resetTo] target must be non-zero for exponential springs\");this.start.value=this.target.value=this.current.value=target;this.start.time=this.target.time=this.current.time=$.now();if(this._exponential){this.start._logValue=Math.log(this.start.value);this.target._logValue=Math.log(this.target.value);this.current._logValue=Math.log(this.current.value);}},/**\n     * @function\n     * @param {Number} target\n     */springTo:function springTo(target){$.console.assert(!this._exponential||target!==0,\"[OpenSeadragon.Spring.springTo] target must be non-zero for exponential springs\");this.start.value=this.current.value;this.start.time=this.current.time;this.target.value=target;this.target.time=this.start.time+1000*this.animationTime;if(this._exponential){this.start._logValue=Math.log(this.start.value);this.target._logValue=Math.log(this.target.value);}},/**\n     * @function\n     * @param {Number} delta\n     */shiftBy:function shiftBy(delta){this.start.value+=delta;this.target.value+=delta;if(this._exponential){$.console.assert(this.target.value!==0&&this.start.value!==0,\"[OpenSeadragon.Spring.shiftBy] spring value must be non-zero for exponential springs\");this.start._logValue=Math.log(this.start.value);this.target._logValue=Math.log(this.target.value);}},setExponential:function setExponential(value){this._exponential=value;if(this._exponential){$.console.assert(this.current.value!==0&&this.target.value!==0&&this.start.value!==0,\"[OpenSeadragon.Spring.setExponential] spring value must be non-zero for exponential springs\");this.start._logValue=Math.log(this.start.value);this.target._logValue=Math.log(this.target.value);this.current._logValue=Math.log(this.current.value);}},/**\n     * @function\n     * @returns true if the value got updated, false otherwise\n     */update:function update(){this.current.time=$.now();var startValue,targetValue;if(this._exponential){startValue=this.start._logValue;targetValue=this.target._logValue;}else{startValue=this.start.value;targetValue=this.target.value;}var currentValue=this.current.time>=this.target.time?targetValue:startValue+(targetValue-startValue)*transform(this.springStiffness,(this.current.time-this.start.time)/(this.target.time-this.start.time));var oldValue=this.current.value;if(this._exponential){this.current.value=Math.exp(currentValue);}else{this.current.value=currentValue;}return oldValue!=this.current.value;},/**\n     * Returns whether the spring is at the target value\n     * @function\n     * @returns {Boolean} True if at target value, false otherwise\n     */isAtTargetValue:function isAtTargetValue(){return this.current.value===this.target.value;}};/**\n * @private\n */function transform(stiffness,x){return(1.0-Math.exp(stiffness*-x))/(1.0-Math.exp(-stiffness));}})(OpenSeadragon);/*\n * OpenSeadragon - ImageLoader\n *\n * Copyright (C) 2009 CodePlex Foundation\n * Copyright (C) 2010-2013 OpenSeadragon contributors\n\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * - Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * - Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * - Neither the name of CodePlex Foundation nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */(function($){/**\n * @private\n * @class ImageJob\n * @classdesc Handles downloading of a single image.\n * @param {Object} options - Options for this ImageJob.\n * @param {String} [options.src] - URL of image to download.\n * @param {String} [options.loadWithAjax] - Whether to load this image with AJAX.\n * @param {String} [options.ajaxHeaders] - Headers to add to the image request if using AJAX.\n * @param {String} [options.crossOriginPolicy] - CORS policy to use for downloads\n * @param {Function} [options.callback] - Called once image has been downloaded.\n * @param {Function} [options.abort] - Called when this image job is aborted.\n * @param {Number} [options.timeout] - The max number of milliseconds that this image job may take to complete.\n */function ImageJob(options){$.extend(true,this,{timeout:$.DEFAULT_SETTINGS.timeout,jobId:null},options);/**\n     * Image object which will contain downloaded image.\n     * @member {Image} image\n     * @memberof OpenSeadragon.ImageJob#\n     */this.image=null;}ImageJob.prototype={errorMsg:null,/**\n     * Starts the image job.\n     * @method\n     */start:function start(){var self=this;var selfAbort=this.abort;this.image=new Image();this.image.onload=function(){self.finish(true);};this.image.onabort=this.image.onerror=function(){self.errorMsg=\"Image load aborted\";self.finish(false);};this.jobId=window.setTimeout(function(){self.errorMsg=\"Image load exceeded timeout (\"+self.timeout+\" ms)\";self.finish(false);},this.timeout);// Load the tile with an AJAX request if the loadWithAjax option is\n// set. Otherwise load the image by setting the source proprety of the image object.\nif(this.loadWithAjax){this.request=$.makeAjaxRequest({url:this.src,withCredentials:this.ajaxWithCredentials,headers:this.ajaxHeaders,responseType:\"arraybuffer\",success:function success(request){var blb;// Make the raw data into a blob.\n// BlobBuilder fallback adapted from\n// http://stackoverflow.com/questions/15293694/blob-constructor-browser-compatibility\ntry{blb=new window.Blob([request.response]);}catch(e){var BlobBuilder=window.BlobBuilder||window.WebKitBlobBuilder||window.MozBlobBuilder||window.MSBlobBuilder;if(e.name==='TypeError'&&BlobBuilder){var bb=new BlobBuilder();bb.append(request.response);blb=bb.getBlob();}}// If the blob is empty for some reason consider the image load a failure.\nif(blb.size===0){self.errorMsg=\"Empty image response.\";self.finish(false);}// Create a URL for the blob data and make it the source of the image object.\n// This will still trigger Image.onload to indicate a successful tile load.\nvar url=(window.URL||window.webkitURL).createObjectURL(blb);self.image.src=url;},error:function error(request){self.errorMsg=\"Image load aborted - XHR error\";self.finish(false);}});// Provide a function to properly abort the request.\nthis.abort=function(){self.request.abort();// Call the existing abort function if available\nif(typeof selfAbort===\"function\"){selfAbort();}};}else{if(this.crossOriginPolicy!==false){this.image.crossOrigin=this.crossOriginPolicy;}this.image.src=this.src;}},finish:function finish(successful){this.image.onload=this.image.onerror=this.image.onabort=null;if(!successful){this.image=null;}if(this.jobId){window.clearTimeout(this.jobId);}this.callback(this);}};/**\n * @class ImageLoader\n * @memberof OpenSeadragon\n * @classdesc Handles downloading of a set of images using asynchronous queue pattern.\n * You generally won't have to interact with the ImageLoader directly.\n * @param {Object} options - Options for this ImageLoader.\n * @param {Number} [options.jobLimit] - The number of concurrent image requests. See imageLoaderLimit in {@link OpenSeadragon.Options} for details.\n * @param {Number} [options.timeout] - The max number of milliseconds that an image job may take to complete.\n */$.ImageLoader=function(options){$.extend(true,this,{jobLimit:$.DEFAULT_SETTINGS.imageLoaderLimit,timeout:$.DEFAULT_SETTINGS.timeout,jobQueue:[],jobsInProgress:0},options);};/** @lends OpenSeadragon.ImageLoader.prototype */$.ImageLoader.prototype={/**\n     * Add an unloaded image to the loader queue.\n     * @method\n     * @param {Object} options - Options for this job.\n     * @param {String} [options.src] - URL of image to download.\n     * @param {String} [options.loadWithAjax] - Whether to load this image with AJAX.\n     * @param {String} [options.ajaxHeaders] - Headers to add to the image request if using AJAX.\n     * @param {String|Boolean} [options.crossOriginPolicy] - CORS policy to use for downloads\n     * @param {Boolean} [options.ajaxWithCredentials] - Whether to set withCredentials on AJAX\n     * requests.\n     * @param {Function} [options.callback] - Called once image has been downloaded.\n     * @param {Function} [options.abort] - Called when this image job is aborted.\n     */addJob:function addJob(options){var _this=this,complete=function complete(job){completeJob(_this,job,options.callback);},jobOptions={src:options.src,loadWithAjax:options.loadWithAjax,ajaxHeaders:options.loadWithAjax?options.ajaxHeaders:null,crossOriginPolicy:options.crossOriginPolicy,ajaxWithCredentials:options.ajaxWithCredentials,callback:complete,abort:options.abort,timeout:this.timeout},newJob=new ImageJob(jobOptions);if(!this.jobLimit||this.jobsInProgress<this.jobLimit){newJob.start();this.jobsInProgress++;}else{this.jobQueue.push(newJob);}},/**\n     * Clear any unstarted image loading jobs from the queue.\n     * @method\n     */clear:function clear(){for(var i=0;i<this.jobQueue.length;i++){var job=this.jobQueue[i];if(typeof job.abort===\"function\"){job.abort();}}this.jobQueue=[];}};/**\n * Cleans up ImageJob once completed.\n * @method\n * @private\n * @param loader - ImageLoader used to start job.\n * @param job - The ImageJob that has completed.\n * @param callback - Called once cleanup is finished.\n */function completeJob(loader,job,callback){var nextJob;loader.jobsInProgress--;if((!loader.jobLimit||loader.jobsInProgress<loader.jobLimit)&&loader.jobQueue.length>0){nextJob=loader.jobQueue.shift();nextJob.start();loader.jobsInProgress++;}callback(job.image,job.errorMsg,job.request);}})(OpenSeadragon);/*\n * OpenSeadragon - Tile\n *\n * Copyright (C) 2009 CodePlex Foundation\n * Copyright (C) 2010-2013 OpenSeadragon contributors\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * - Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * - Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * - Neither the name of CodePlex Foundation nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */(function($){/**\n * @class Tile\n * @memberof OpenSeadragon\n * @param {Number} level The zoom level this tile belongs to.\n * @param {Number} x The vector component 'x'.\n * @param {Number} y The vector component 'y'.\n * @param {OpenSeadragon.Rect} bounds Where this tile fits, in normalized\n *      coordinates.\n * @param {Boolean} exists Is this tile a part of a sparse image? ( Also has\n *      this tile failed to load? )\n * @param {String} url The URL of this tile's image.\n * @param {CanvasRenderingContext2D} context2D The context2D of this tile if it\n * is provided directly by the tile source.\n * @param {Boolean} loadWithAjax Whether this tile image should be loaded with an AJAX request .\n * @param {Object} ajaxHeaders The headers to send with this tile's AJAX request (if applicable).\n * @param {OpenSeadragon.Rect} sourceBounds The portion of the tile to use as the source of the\n * drawing operation, in pixels. Note that this only works when drawing with canvas; when drawing\n * with HTML the entire tile is always used.\n */$.Tile=function(level,x,y,bounds,exists,url,context2D,loadWithAjax,ajaxHeaders,sourceBounds){/**\n     * The zoom level this tile belongs to.\n     * @member {Number} level\n     * @memberof OpenSeadragon.Tile#\n     */this.level=level;/**\n     * The vector component 'x'.\n     * @member {Number} x\n     * @memberof OpenSeadragon.Tile#\n     */this.x=x;/**\n     * The vector component 'y'.\n     * @member {Number} y\n     * @memberof OpenSeadragon.Tile#\n     */this.y=y;/**\n     * Where this tile fits, in normalized coordinates\n     * @member {OpenSeadragon.Rect} bounds\n     * @memberof OpenSeadragon.Tile#\n     */this.bounds=bounds;/**\n    * The portion of the tile to use as the source of the drawing operation, in pixels. Note that\n    * this only works when drawing with canvas; when drawing with HTML the entire tile is always used.\n    * @member {OpenSeadragon.Rect} sourceBounds\n    * @memberof OpenSeadragon.Tile#\n    */this.sourceBounds=sourceBounds;/**\n     * Is this tile a part of a sparse image? Also has this tile failed to load?\n     * @member {Boolean} exists\n     * @memberof OpenSeadragon.Tile#\n     */this.exists=exists;/**\n     * The URL of this tile's image.\n     * @member {String} url\n     * @memberof OpenSeadragon.Tile#\n     */this.url=url;/**\n     * The context2D of this tile if it is provided directly by the tile source.\n     * @member {CanvasRenderingContext2D} context2D\n     * @memberOf OpenSeadragon.Tile#\n     */this.context2D=context2D;/**\n     * Whether to load this tile's image with an AJAX request.\n     * @member {Boolean} loadWithAjax\n     * @memberof OpenSeadragon.Tile#\n     */this.loadWithAjax=loadWithAjax;/**\n     * The headers to be used in requesting this tile's image.\n     * Only used if loadWithAjax is set to true.\n     * @member {Object} ajaxHeaders\n     * @memberof OpenSeadragon.Tile#\n     */this.ajaxHeaders=ajaxHeaders;/**\n     * The unique cache key for this tile.\n     * @member {String} cacheKey\n     * @memberof OpenSeadragon.Tile#\n     */if(this.ajaxHeaders){this.cacheKey=this.url+\"+\"+JSON.stringify(this.ajaxHeaders);}else{this.cacheKey=this.url;}/**\n     * Is this tile loaded?\n     * @member {Boolean} loaded\n     * @memberof OpenSeadragon.Tile#\n     */this.loaded=false;/**\n     * Is this tile loading?\n     * @member {Boolean} loading\n     * @memberof OpenSeadragon.Tile#\n     */this.loading=false;/**\n     * The HTML div element for this tile\n     * @member {Element} element\n     * @memberof OpenSeadragon.Tile#\n     */this.element=null;/**\n     * The HTML img element for this tile.\n     * @member {Element} imgElement\n     * @memberof OpenSeadragon.Tile#\n     */this.imgElement=null;/**\n     * The Image object for this tile.\n     * @member {Object} image\n     * @memberof OpenSeadragon.Tile#\n     */this.image=null;/**\n     * The alias of this.element.style.\n     * @member {String} style\n     * @memberof OpenSeadragon.Tile#\n     */this.style=null;/**\n     * This tile's position on screen, in pixels.\n     * @member {OpenSeadragon.Point} position\n     * @memberof OpenSeadragon.Tile#\n     */this.position=null;/**\n     * This tile's size on screen, in pixels.\n     * @member {OpenSeadragon.Point} size\n     * @memberof OpenSeadragon.Tile#\n     */this.size=null;/**\n     * The start time of this tile's blending.\n     * @member {Number} blendStart\n     * @memberof OpenSeadragon.Tile#\n     */this.blendStart=null;/**\n     * The current opacity this tile should be.\n     * @member {Number} opacity\n     * @memberof OpenSeadragon.Tile#\n     */this.opacity=null;/**\n     * The squared distance of this tile to the viewport center.\n     * Use for comparing tiles.\n     * @private\n     * @member {Number} squaredDistance\n     * @memberof OpenSeadragon.Tile#\n     */this.squaredDistance=null;/**\n     * The visibility score of this tile.\n     * @member {Number} visibility\n     * @memberof OpenSeadragon.Tile#\n     */this.visibility=null;/**\n     * Whether this tile is currently being drawn.\n     * @member {Boolean} beingDrawn\n     * @memberof OpenSeadragon.Tile#\n     */this.beingDrawn=false;/**\n     * Timestamp the tile was last touched.\n     * @member {Number} lastTouchTime\n     * @memberof OpenSeadragon.Tile#\n     */this.lastTouchTime=0;/**\n     * Whether this tile is in the right-most column for its level.\n     * @member {Boolean} isRightMost\n     * @memberof OpenSeadragon.Tile#\n     */this.isRightMost=false;/**\n     * Whether this tile is in the bottom-most row for its level.\n     * @member {Boolean} isBottomMost\n     * @memberof OpenSeadragon.Tile#\n     */this.isBottomMost=false;};/** @lends OpenSeadragon.Tile.prototype */$.Tile.prototype={/**\n     * Provides a string representation of this tiles level and (x,y)\n     * components.\n     * @function\n     * @returns {String}\n     */toString:function toString(){return this.level+\"/\"+this.x+\"_\"+this.y;},// private\n_hasTransparencyChannel:function _hasTransparencyChannel(){return!!this.context2D||this.url.match('.png');},/**\n     * Renders the tile in an html container.\n     * @function\n     * @param {Element} container\n     */drawHTML:function drawHTML(container){if(!this.cacheImageRecord){$.console.warn('[Tile.drawHTML] attempting to draw tile %s when it\\'s not cached',this.toString());return;}if(!this.loaded){$.console.warn(\"Attempting to draw tile %s when it's not yet loaded.\",this.toString());return;}//EXPERIMENTAL - trying to figure out how to scale the container\n//               content during animation of the container size.\nif(!this.element){this.element=$.makeNeutralElement(\"div\");this.imgElement=this.cacheImageRecord.getImage().cloneNode();this.imgElement.style.msInterpolationMode=\"nearest-neighbor\";this.imgElement.style.width=\"100%\";this.imgElement.style.height=\"100%\";this.style=this.element.style;this.style.position=\"absolute\";}if(this.element.parentNode!=container){container.appendChild(this.element);}if(this.imgElement.parentNode!=this.element){this.element.appendChild(this.imgElement);}this.style.top=this.position.y+\"px\";this.style.left=this.position.x+\"px\";this.style.height=this.size.y+\"px\";this.style.width=this.size.x+\"px\";$.setElementOpacity(this.element,this.opacity);},/**\n     * Renders the tile in a canvas-based context.\n     * @function\n     * @param {Canvas} context\n     * @param {Function} drawingHandler - Method for firing the drawing event.\n     * drawingHandler({context, tile, rendered})\n     * where <code>rendered</code> is the context with the pre-drawn image.\n     * @param {Number} [scale=1] - Apply a scale to position and size\n     * @param {OpenSeadragon.Point} [translate] - A translation vector\n     */drawCanvas:function drawCanvas(context,drawingHandler,scale,translate){var position=this.position.times($.pixelDensityRatio),size=this.size.times($.pixelDensityRatio),rendered;if(!this.context2D&&!this.cacheImageRecord){$.console.warn('[Tile.drawCanvas] attempting to draw tile %s when it\\'s not cached',this.toString());return;}rendered=this.context2D||this.cacheImageRecord.getRenderedContext();if(!this.loaded||!rendered){$.console.warn(\"Attempting to draw tile %s when it's not yet loaded.\",this.toString());return;}context.save();context.globalAlpha=this.opacity;if(typeof scale==='number'&&scale!==1){// draw tile at a different scale\nposition=position.times(scale);size=size.times(scale);}if(translate instanceof $.Point){// shift tile position slightly\nposition=position.plus(translate);}//if we are supposed to be rendering fully opaque rectangle,\n//ie its done fading or fading is turned off, and if we are drawing\n//an image with an alpha channel, then the only way\n//to avoid seeing the tile underneath is to clear the rectangle\nif(context.globalAlpha===1&&this._hasTransparencyChannel()){//clearing only the inside of the rectangle occupied\n//by the png prevents edge flikering\ncontext.clearRect(position.x,position.y,size.x,size.y);}// This gives the application a chance to make image manipulation\n// changes as we are rendering the image\ndrawingHandler({context:context,tile:this,rendered:rendered});var sourceWidth,sourceHeight;if(this.sourceBounds){sourceWidth=Math.min(this.sourceBounds.width,rendered.canvas.width);sourceHeight=Math.min(this.sourceBounds.height,rendered.canvas.height);}else{sourceWidth=rendered.canvas.width;sourceHeight=rendered.canvas.height;}context.drawImage(rendered.canvas,0,0,sourceWidth,sourceHeight,position.x,position.y,size.x,size.y);context.restore();},/**\n     * Get the ratio between current and original size.\n     * @function\n     * @return {Float}\n     */getScaleForEdgeSmoothing:function getScaleForEdgeSmoothing(){var context;if(this.cacheImageRecord){context=this.cacheImageRecord.getRenderedContext();}else if(this.context2D){context=this.context2D;}else{$.console.warn('[Tile.drawCanvas] attempting to get tile scale %s when tile\\'s not cached',this.toString());return 1;}return context.canvas.width/(this.size.x*$.pixelDensityRatio);},/**\n     * Get a translation vector that when applied to the tile position produces integer coordinates.\n     * Needed to avoid swimming and twitching.\n     * @function\n     * @param {Number} [scale=1] - Scale to be applied to position.\n     * @return {OpenSeadragon.Point}\n     */getTranslationForEdgeSmoothing:function getTranslationForEdgeSmoothing(scale,canvasSize,sketchCanvasSize){// The translation vector must have positive values, otherwise the image goes a bit off\n// the sketch canvas to the top and left and we must use negative coordinates to repaint it\n// to the main canvas. In that case, some browsers throw:\n// INDEX_SIZE_ERR: DOM Exception 1: Index or size was negative, or greater than the allowed value.\nvar x=Math.max(1,Math.ceil((sketchCanvasSize.x-canvasSize.x)/2));var y=Math.max(1,Math.ceil((sketchCanvasSize.y-canvasSize.y)/2));return new $.Point(x,y).minus(this.position.times($.pixelDensityRatio).times(scale||1).apply(function(x){return x%1;}));},/**\n     * Removes tile from its container.\n     * @function\n     */unload:function unload(){if(this.imgElement&&this.imgElement.parentNode){this.imgElement.parentNode.removeChild(this.imgElement);}if(this.element&&this.element.parentNode){this.element.parentNode.removeChild(this.element);}this.element=null;this.imgElement=null;this.loaded=false;this.loading=false;}};})(OpenSeadragon);/*\n * OpenSeadragon - Overlay\n *\n * Copyright (C) 2009 CodePlex Foundation\n * Copyright (C) 2010-2013 OpenSeadragon contributors\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * - Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * - Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * - Neither the name of CodePlex Foundation nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */(function($){/**\n     * An enumeration of positions that an overlay may be assigned relative to\n     * the viewport.\n     * It is identical to OpenSeadragon.Placement but is kept for backward\n     * compatibility.\n     * @member OverlayPlacement\n     * @memberof OpenSeadragon\n     * @see OpenSeadragon.Placement\n     * @static\n     * @readonly\n     * @type {Object}\n     * @property {Number} CENTER\n     * @property {Number} TOP_LEFT\n     * @property {Number} TOP\n     * @property {Number} TOP_RIGHT\n     * @property {Number} RIGHT\n     * @property {Number} BOTTOM_RIGHT\n     * @property {Number} BOTTOM\n     * @property {Number} BOTTOM_LEFT\n     * @property {Number} LEFT\n     */$.OverlayPlacement=$.Placement;/**\n     * An enumeration of possible ways to handle overlays rotation\n     * @member OverlayRotationMode\n     * @memberOf OpenSeadragon\n     * @static\n     * @readonly\n     * @property {Number} NO_ROTATION The overlay ignore the viewport rotation.\n     * @property {Number} EXACT The overlay use CSS 3 transforms to rotate with\n     * the viewport. If the overlay contains text, it will get rotated as well.\n     * @property {Number} BOUNDING_BOX The overlay adjusts for rotation by\n     * taking the size of the bounding box of the rotated bounds.\n     * Only valid for overlays with Rect location and scalable in both directions.\n     */$.OverlayRotationMode=$.freezeObject({NO_ROTATION:1,EXACT:2,BOUNDING_BOX:3});/**\n     * @class Overlay\n     * @classdesc Provides a way to float an HTML element on top of the viewer element.\n     *\n     * @memberof OpenSeadragon\n     * @param {Object} options\n     * @param {Element} options.element\n     * @param {OpenSeadragon.Point|OpenSeadragon.Rect} options.location - The\n     * location of the overlay on the image. If a {@link OpenSeadragon.Point}\n     * is specified, the overlay will be located at this location with respect\n     * to the placement option. If a {@link OpenSeadragon.Rect} is specified,\n     * the overlay will be placed at this location with the corresponding width\n     * and height and placement TOP_LEFT.\n     * @param {OpenSeadragon.Placement} [options.placement=OpenSeadragon.Placement.TOP_LEFT]\n     * Defines what part of the overlay should be at the specified options.location\n     * @param {OpenSeadragon.Overlay.OnDrawCallback} [options.onDraw]\n     * @param {Boolean} [options.checkResize=true] Set to false to avoid to\n     * check the size of the overlay every time it is drawn in the directions\n     * which are not scaled. It will improve performances but will cause a\n     * misalignment if the overlay size changes.\n     * @param {Number} [options.width] The width of the overlay in viewport\n     * coordinates. If specified, the width of the overlay will be adjusted when\n     * the zoom changes.\n     * @param {Number} [options.height] The height of the overlay in viewport\n     * coordinates. If specified, the height of the overlay will be adjusted when\n     * the zoom changes.\n     * @param {Boolean} [options.rotationMode=OpenSeadragon.OverlayRotationMode.EXACT]\n     * How to handle the rotation of the viewport.\n     */$.Overlay=function(element,location,placement){/**\n         * onDraw callback signature used by {@link OpenSeadragon.Overlay}.\n         *\n         * @callback OnDrawCallback\n         * @memberof OpenSeadragon.Overlay\n         * @param {OpenSeadragon.Point} position\n         * @param {OpenSeadragon.Point} size\n         * @param {Element} element\n         */var options;if($.isPlainObject(element)){options=element;}else{options={element:element,location:location,placement:placement};}this.element=options.element;this.style=options.element.style;this._init(options);};/** @lends OpenSeadragon.Overlay.prototype */$.Overlay.prototype={// private\n_init:function _init(options){this.location=options.location;this.placement=options.placement===undefined?$.Placement.TOP_LEFT:options.placement;this.onDraw=options.onDraw;this.checkResize=options.checkResize===undefined?true:options.checkResize;// When this.width is not null, the overlay get scaled horizontally\nthis.width=options.width===undefined?null:options.width;// When this.height is not null, the overlay get scaled vertically\nthis.height=options.height===undefined?null:options.height;this.rotationMode=options.rotationMode||$.OverlayRotationMode.EXACT;// Having a rect as location is a syntactic sugar\nif(this.location instanceof $.Rect){this.width=this.location.width;this.height=this.location.height;this.location=this.location.getTopLeft();this.placement=$.Placement.TOP_LEFT;}// Deprecated properties kept for backward compatibility.\nthis.scales=this.width!==null&&this.height!==null;this.bounds=new $.Rect(this.location.x,this.location.y,this.width,this.height);this.position=this.location;},/**\n         * Internal function to adjust the position of an overlay\n         * depending on it size and placement.\n         * @function\n         * @param {OpenSeadragon.Point} position\n         * @param {OpenSeadragon.Point} size\n         */adjust:function adjust(position,size){var properties=$.Placement.properties[this.placement];if(!properties){return;}if(properties.isHorizontallyCentered){position.x-=size.x/2;}else if(properties.isRight){position.x-=size.x;}if(properties.isVerticallyCentered){position.y-=size.y/2;}else if(properties.isBottom){position.y-=size.y;}},/**\n         * @function\n         */destroy:function destroy(){var element=this.element;var style=this.style;if(element.parentNode){element.parentNode.removeChild(element);//this should allow us to preserve overlays when required between\n//pages\nif(element.prevElementParent){style.display='none';//element.prevElementParent.insertBefore(\n//    element,\n//    element.prevNextSibling\n//);\ndocument.body.appendChild(element);}}// clear the onDraw callback\nthis.onDraw=null;style.top=\"\";style.left=\"\";style.position=\"\";if(this.width!==null){style.width=\"\";}if(this.height!==null){style.height=\"\";}var transformOriginProp=$.getCssPropertyWithVendorPrefix('transformOrigin');var transformProp=$.getCssPropertyWithVendorPrefix('transform');if(transformOriginProp&&transformProp){style[transformOriginProp]=\"\";style[transformProp]=\"\";}},/**\n         * @function\n         * @param {Element} container\n         */drawHTML:function drawHTML(container,viewport){var element=this.element;if(element.parentNode!==container){//save the source parent for later if we need it\nelement.prevElementParent=element.parentNode;element.prevNextSibling=element.nextSibling;container.appendChild(element);// have to set position before calculating size, fix #1116\nthis.style.position=\"absolute\";// this.size is used by overlays which don't get scaled in at\n// least one direction when this.checkResize is set to false.\nthis.size=$.getElementSize(element);}var positionAndSize=this._getOverlayPositionAndSize(viewport);var position=positionAndSize.position;var size=this.size=positionAndSize.size;var rotate=positionAndSize.rotate;// call the onDraw callback if it exists to allow one to overwrite\n// the drawing/positioning/sizing of the overlay\nif(this.onDraw){this.onDraw(position,size,this.element);}else{var style=this.style;style.left=position.x+\"px\";style.top=position.y+\"px\";if(this.width!==null){style.width=size.x+\"px\";}if(this.height!==null){style.height=size.y+\"px\";}var transformOriginProp=$.getCssPropertyWithVendorPrefix('transformOrigin');var transformProp=$.getCssPropertyWithVendorPrefix('transform');if(transformOriginProp&&transformProp){if(rotate){style[transformOriginProp]=this._getTransformOrigin();style[transformProp]=\"rotate(\"+rotate+\"deg)\";}else{style[transformOriginProp]=\"\";style[transformProp]=\"\";}}if(style.display!=='none'){style.display='block';}}},// private\n_getOverlayPositionAndSize:function _getOverlayPositionAndSize(viewport){var position=viewport.pixelFromPoint(this.location,true);var size=this._getSizeInPixels(viewport);this.adjust(position,size);var rotate=0;if(viewport.degrees&&this.rotationMode!==$.OverlayRotationMode.NO_ROTATION){// BOUNDING_BOX is only valid if both directions get scaled.\n// Get replaced by EXACT otherwise.\nif(this.rotationMode===$.OverlayRotationMode.BOUNDING_BOX&&this.width!==null&&this.height!==null){var rect=new $.Rect(position.x,position.y,size.x,size.y);var boundingBox=this._getBoundingBox(rect,viewport.degrees);position=boundingBox.getTopLeft();size=boundingBox.getSize();}else{rotate=viewport.degrees;}}return{position:position,size:size,rotate:rotate};},// private\n_getSizeInPixels:function _getSizeInPixels(viewport){var width=this.size.x;var height=this.size.y;if(this.width!==null||this.height!==null){var scaledSize=viewport.deltaPixelsFromPointsNoRotate(new $.Point(this.width||0,this.height||0),true);if(this.width!==null){width=scaledSize.x;}if(this.height!==null){height=scaledSize.y;}}if(this.checkResize&&(this.width===null||this.height===null)){var eltSize=this.size=$.getElementSize(this.element);if(this.width===null){width=eltSize.x;}if(this.height===null){height=eltSize.y;}}return new $.Point(width,height);},// private\n_getBoundingBox:function _getBoundingBox(rect,degrees){var refPoint=this._getPlacementPoint(rect);return rect.rotate(degrees,refPoint).getBoundingBox();},// private\n_getPlacementPoint:function _getPlacementPoint(rect){var result=new $.Point(rect.x,rect.y);var properties=$.Placement.properties[this.placement];if(properties){if(properties.isHorizontallyCentered){result.x+=rect.width/2;}else if(properties.isRight){result.x+=rect.width;}if(properties.isVerticallyCentered){result.y+=rect.height/2;}else if(properties.isBottom){result.y+=rect.height;}}return result;},// private\n_getTransformOrigin:function _getTransformOrigin(){var result=\"\";var properties=$.Placement.properties[this.placement];if(!properties){return result;}if(properties.isLeft){result=\"left\";}else if(properties.isRight){result=\"right\";}if(properties.isTop){result+=\" top\";}else if(properties.isBottom){result+=\" bottom\";}return result;},/**\n         * Changes the overlay settings.\n         * @function\n         * @param {OpenSeadragon.Point|OpenSeadragon.Rect|Object} location\n         * If an object is specified, the options are the same than the constructor\n         * except for the element which can not be changed.\n         * @param {OpenSeadragon.Placement} placement\n         */update:function update(location,placement){var options=$.isPlainObject(location)?location:{location:location,placement:placement};this._init({location:options.location||this.location,placement:options.placement!==undefined?options.placement:this.placement,onDraw:options.onDraw||this.onDraw,checkResize:options.checkResize||this.checkResize,width:options.width!==undefined?options.width:this.width,height:options.height!==undefined?options.height:this.height,rotationMode:options.rotationMode||this.rotationMode});},/**\n         * Returns the current bounds of the overlay in viewport coordinates\n         * @function\n         * @param {OpenSeadragon.Viewport} viewport the viewport\n         * @returns {OpenSeadragon.Rect} overlay bounds\n         */getBounds:function getBounds(viewport){$.console.assert(viewport,'A viewport must now be passed to Overlay.getBounds.');var width=this.width;var height=this.height;if(width===null||height===null){var size=viewport.deltaPointsFromPixelsNoRotate(this.size,true);if(width===null){width=size.x;}if(height===null){height=size.y;}}var location=this.location.clone();this.adjust(location,new $.Point(width,height));return this._adjustBoundsForRotation(viewport,new $.Rect(location.x,location.y,width,height));},// private\n_adjustBoundsForRotation:function _adjustBoundsForRotation(viewport,bounds){if(!viewport||viewport.degrees===0||this.rotationMode===$.OverlayRotationMode.EXACT){return bounds;}if(this.rotationMode===$.OverlayRotationMode.BOUNDING_BOX){// If overlay not fully scalable, BOUNDING_BOX falls back to EXACT\nif(this.width===null||this.height===null){return bounds;}// It is easier to just compute the position and size and\n// convert to viewport coordinates.\nvar positionAndSize=this._getOverlayPositionAndSize(viewport);return viewport.viewerElementToViewportRectangle(new $.Rect(positionAndSize.position.x,positionAndSize.position.y,positionAndSize.size.x,positionAndSize.size.y));}// NO_ROTATION case\nreturn bounds.rotate(-viewport.degrees,this._getPlacementPoint(bounds));}};})(OpenSeadragon);/*\n * OpenSeadragon - Drawer\n *\n * Copyright (C) 2009 CodePlex Foundation\n * Copyright (C) 2010-2013 OpenSeadragon contributors\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * - Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * - Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * - Neither the name of CodePlex Foundation nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */(function($){/**\n * @class Drawer\n * @memberof OpenSeadragon\n * @classdesc Handles rendering of tiles for an {@link OpenSeadragon.Viewer}.\n * @param {Object} options - Options for this Drawer.\n * @param {OpenSeadragon.Viewer} options.viewer - The Viewer that owns this Drawer.\n * @param {OpenSeadragon.Viewport} options.viewport - Reference to Viewer viewport.\n * @param {Element} options.element - Parent element.\n * @param {Number} [options.debugGridColor] - See debugGridColor in {@link OpenSeadragon.Options} for details.\n */$.Drawer=function(options){$.console.assert(options.viewer,\"[Drawer] options.viewer is required\");//backward compatibility for positional args while preferring more\n//idiomatic javascript options object as the only argument\nvar args=arguments;if(!$.isPlainObject(options)){options={source:args[0],// Reference to Viewer tile source.\nviewport:args[1],// Reference to Viewer viewport.\nelement:args[2]// Parent element.\n};}$.console.assert(options.viewport,\"[Drawer] options.viewport is required\");$.console.assert(options.element,\"[Drawer] options.element is required\");if(options.source){$.console.error(\"[Drawer] options.source is no longer accepted; use TiledImage instead\");}this.viewer=options.viewer;this.viewport=options.viewport;this.debugGridColor=typeof options.debugGridColor==='string'?[options.debugGridColor]:options.debugGridColor||$.DEFAULT_SETTINGS.debugGridColor;if(options.opacity){$.console.error(\"[Drawer] options.opacity is no longer accepted; set the opacity on the TiledImage instead\");}this.useCanvas=$.supportsCanvas&&(this.viewer?this.viewer.useCanvas:true);/**\n     * The parent element of this Drawer instance, passed in when the Drawer was created.\n     * The parent of {@link OpenSeadragon.Drawer#canvas}.\n     * @member {Element} container\n     * @memberof OpenSeadragon.Drawer#\n     */this.container=$.getElement(options.element);/**\n     * A &lt;canvas&gt; element if the browser supports them, otherwise a &lt;div&gt; element.\n     * Child element of {@link OpenSeadragon.Drawer#container}.\n     * @member {Element} canvas\n     * @memberof OpenSeadragon.Drawer#\n     */this.canvas=$.makeNeutralElement(this.useCanvas?\"canvas\":\"div\");/**\n     * 2d drawing context for {@link OpenSeadragon.Drawer#canvas} if it's a &lt;canvas&gt; element, otherwise null.\n     * @member {Object} context\n     * @memberof OpenSeadragon.Drawer#\n     */this.context=this.useCanvas?this.canvas.getContext(\"2d\"):null;/**\n     * Sketch canvas used to temporarily draw tiles which cannot be drawn directly\n     * to the main canvas due to opacity. Lazily initialized.\n     */this.sketchCanvas=null;this.sketchContext=null;/**\n     * @member {Element} element\n     * @memberof OpenSeadragon.Drawer#\n     * @deprecated Alias for {@link OpenSeadragon.Drawer#container}.\n     */this.element=this.container;// We force our container to ltr because our drawing math doesn't work in rtl.\n// This issue only affects our canvas renderer, but we do it always for consistency.\n// Note that this means overlays you want to be rtl need to be explicitly set to rtl.\nthis.container.dir='ltr';// check canvas available width and height, set canvas width and height such that the canvas backing store is set to the proper pixel density\nif(this.useCanvas){var viewportSize=this._calculateCanvasSize();this.canvas.width=viewportSize.x;this.canvas.height=viewportSize.y;}this.canvas.style.width=\"100%\";this.canvas.style.height=\"100%\";this.canvas.style.position=\"absolute\";$.setElementOpacity(this.canvas,this.opacity,true);// explicit left-align\nthis.container.style.textAlign=\"left\";this.container.appendChild(this.canvas);// Image smoothing for canvas rendering (only if canvas is used).\n// Canvas default is \"true\", so this will only be changed if user specified \"false\".\nthis._imageSmoothingEnabled=true;};/** @lends OpenSeadragon.Drawer.prototype */$.Drawer.prototype={// deprecated\naddOverlay:function addOverlay(element,location,placement,onDraw){$.console.error(\"drawer.addOverlay is deprecated. Use viewer.addOverlay instead.\");this.viewer.addOverlay(element,location,placement,onDraw);return this;},// deprecated\nupdateOverlay:function updateOverlay(element,location,placement){$.console.error(\"drawer.updateOverlay is deprecated. Use viewer.updateOverlay instead.\");this.viewer.updateOverlay(element,location,placement);return this;},// deprecated\nremoveOverlay:function removeOverlay(element){$.console.error(\"drawer.removeOverlay is deprecated. Use viewer.removeOverlay instead.\");this.viewer.removeOverlay(element);return this;},// deprecated\nclearOverlays:function clearOverlays(){$.console.error(\"drawer.clearOverlays is deprecated. Use viewer.clearOverlays instead.\");this.viewer.clearOverlays();return this;},/**\n     * This function converts the given point from to the drawer coordinate by\n     * multiplying it with the pixel density.\n     * This function does not take rotation into account, thus assuming provided\n     * point is at 0 degree.\n     * @param {OpenSeadragon.Point} point - the pixel point to convert\n     */viewportCoordToDrawerCoord:function viewportCoordToDrawerCoord(point){var vpPoint=this.viewport.pixelFromPointNoRotate(point,true);return new $.Point(vpPoint.x*$.pixelDensityRatio,vpPoint.y*$.pixelDensityRatio);},/**\n     * This function will create multiple polygon paths on the drawing context by provided polygons,\n     * then clip the context to the paths.\n     * @param {(OpenSeadragon.Point[])[]} polygons - an array of polygons. A polygon is an array of OpenSeadragon.Point\n     * @param {Boolean} useSketch - Whether to use the sketch canvas or not.\n     */clipWithPolygons:function clipWithPolygons(polygons,useSketch){if(!this.useCanvas){return;}var context=this._getContext(useSketch);context.beginPath();polygons.forEach(function(polygon){polygon.forEach(function(coord,i){context[i===0?'moveTo':'lineTo'](coord.x,coord.y);});});context.clip();},/**\n     * Set the opacity of the drawer.\n     * @param {Number} opacity\n     * @return {OpenSeadragon.Drawer} Chainable.\n     */setOpacity:function setOpacity(opacity){$.console.error(\"drawer.setOpacity is deprecated. Use tiledImage.setOpacity instead.\");var world=this.viewer.world;for(var i=0;i<world.getItemCount();i++){world.getItemAt(i).setOpacity(opacity);}return this;},/**\n     * Get the opacity of the drawer.\n     * @returns {Number}\n     */getOpacity:function getOpacity(){$.console.error(\"drawer.getOpacity is deprecated. Use tiledImage.getOpacity instead.\");var world=this.viewer.world;var maxOpacity=0;for(var i=0;i<world.getItemCount();i++){var opacity=world.getItemAt(i).getOpacity();if(opacity>maxOpacity){maxOpacity=opacity;}}return maxOpacity;},// deprecated\nneedsUpdate:function needsUpdate(){$.console.error(\"[Drawer.needsUpdate] this function is deprecated. Use World.needsDraw instead.\");return this.viewer.world.needsDraw();},// deprecated\nnumTilesLoaded:function numTilesLoaded(){$.console.error(\"[Drawer.numTilesLoaded] this function is deprecated. Use TileCache.numTilesLoaded instead.\");return this.viewer.tileCache.numTilesLoaded();},// deprecated\nreset:function reset(){$.console.error(\"[Drawer.reset] this function is deprecated. Use World.resetItems instead.\");this.viewer.world.resetItems();return this;},// deprecated\nupdate:function update(){$.console.error(\"[Drawer.update] this function is deprecated. Use Drawer.clear and World.draw instead.\");this.clear();this.viewer.world.draw();return this;},/**\n     * @return {Boolean} True if rotation is supported.\n     */canRotate:function canRotate(){return this.useCanvas;},/**\n     * Destroy the drawer (unload current loaded tiles)\n     */destroy:function destroy(){//force unloading of current canvas (1x1 will be gc later, trick not necessarily needed)\nthis.canvas.width=1;this.canvas.height=1;this.sketchCanvas=null;this.sketchContext=null;},/**\n     * Clears the Drawer so it's ready to draw another frame.\n     */clear:function clear(){this.canvas.innerHTML=\"\";if(this.useCanvas){var viewportSize=this._calculateCanvasSize();if(this.canvas.width!=viewportSize.x||this.canvas.height!=viewportSize.y){this.canvas.width=viewportSize.x;this.canvas.height=viewportSize.y;this._updateImageSmoothingEnabled(this.context);if(this.sketchCanvas!==null){var sketchCanvasSize=this._calculateSketchCanvasSize();this.sketchCanvas.width=sketchCanvasSize.x;this.sketchCanvas.height=sketchCanvasSize.y;this._updateImageSmoothingEnabled(this.sketchContext);}}this._clear();}},_clear:function _clear(useSketch,bounds){if(!this.useCanvas){return;}var context=this._getContext(useSketch);if(bounds){context.clearRect(bounds.x,bounds.y,bounds.width,bounds.height);}else{var canvas=context.canvas;context.clearRect(0,0,canvas.width,canvas.height);}},/**\n     * Scale from OpenSeadragon viewer rectangle to drawer rectangle\n     * (ignoring rotation)\n     * @param {OpenSeadragon.Rect} rectangle - The rectangle in viewport coordinate system.\n     * @return {OpenSeadragon.Rect} Rectangle in drawer coordinate system.\n     */viewportToDrawerRectangle:function viewportToDrawerRectangle(rectangle){var topLeft=this.viewport.pixelFromPointNoRotate(rectangle.getTopLeft(),true);var size=this.viewport.deltaPixelsFromPointsNoRotate(rectangle.getSize(),true);return new $.Rect(topLeft.x*$.pixelDensityRatio,topLeft.y*$.pixelDensityRatio,size.x*$.pixelDensityRatio,size.y*$.pixelDensityRatio);},/**\n     * Draws the given tile.\n     * @param {OpenSeadragon.Tile} tile - The tile to draw.\n     * @param {Function} drawingHandler - Method for firing the drawing event if using canvas.\n     * drawingHandler({context, tile, rendered})\n     * @param {Boolean} useSketch - Whether to use the sketch canvas or not.\n     * where <code>rendered</code> is the context with the pre-drawn image.\n     * @param {Float} [scale=1] - Apply a scale to tile position and size. Defaults to 1.\n     * @param {OpenSeadragon.Point} [translate] A translation vector to offset tile position\n     */drawTile:function drawTile(tile,drawingHandler,useSketch,scale,translate){$.console.assert(tile,'[Drawer.drawTile] tile is required');$.console.assert(drawingHandler,'[Drawer.drawTile] drawingHandler is required');if(this.useCanvas){var context=this._getContext(useSketch);scale=scale||1;tile.drawCanvas(context,drawingHandler,scale,translate);}else{tile.drawHTML(this.canvas);}},_getContext:function _getContext(useSketch){var context=this.context;if(useSketch){if(this.sketchCanvas===null){this.sketchCanvas=document.createElement(\"canvas\");var sketchCanvasSize=this._calculateSketchCanvasSize();this.sketchCanvas.width=sketchCanvasSize.x;this.sketchCanvas.height=sketchCanvasSize.y;this.sketchContext=this.sketchCanvas.getContext(\"2d\");// If the viewport is not currently rotated, the sketchCanvas\n// will have the same size as the main canvas. However, if\n// the viewport get rotated later on, we will need to resize it.\nif(this.viewport.getRotation()===0){var self=this;this.viewer.addHandler('rotate',function resizeSketchCanvas(){if(self.viewport.getRotation()===0){return;}self.viewer.removeHandler('rotate',resizeSketchCanvas);var sketchCanvasSize=self._calculateSketchCanvasSize();self.sketchCanvas.width=sketchCanvasSize.x;self.sketchCanvas.height=sketchCanvasSize.y;});}this._updateImageSmoothingEnabled(this.sketchContext);}context=this.sketchContext;}return context;},// private\nsaveContext:function saveContext(useSketch){if(!this.useCanvas){return;}this._getContext(useSketch).save();},// private\nrestoreContext:function restoreContext(useSketch){if(!this.useCanvas){return;}this._getContext(useSketch).restore();},// private\nsetClip:function setClip(rect,useSketch){if(!this.useCanvas){return;}var context=this._getContext(useSketch);context.beginPath();context.rect(rect.x,rect.y,rect.width,rect.height);context.clip();},// private\ndrawRectangle:function drawRectangle(rect,fillStyle,useSketch){if(!this.useCanvas){return;}var context=this._getContext(useSketch);context.save();context.fillStyle=fillStyle;context.fillRect(rect.x,rect.y,rect.width,rect.height);context.restore();},/**\n     * Blends the sketch canvas in the main canvas.\n     * @param {Object} options The options\n     * @param {Float} options.opacity The opacity of the blending.\n     * @param {Float} [options.scale=1] The scale at which tiles were drawn on\n     * the sketch. Default is 1.\n     * Use scale to draw at a lower scale and then enlarge onto the main canvas.\n     * @param {OpenSeadragon.Point} [options.translate] A translation vector\n     * that was used to draw the tiles\n     * @param {String} [options.compositeOperation] - How the image is\n     * composited onto other images; see compositeOperation in\n     * {@link OpenSeadragon.Options} for possible values.\n     * @param {OpenSeadragon.Rect} [options.bounds] The part of the sketch\n     * canvas to blend in the main canvas. If specified, options.scale and\n     * options.translate get ignored.\n     */blendSketch:function blendSketch(opacity,scale,translate,compositeOperation){var options=opacity;if(!$.isPlainObject(options)){options={opacity:opacity,scale:scale,translate:translate,compositeOperation:compositeOperation};}if(!this.useCanvas||!this.sketchCanvas){return;}opacity=options.opacity;compositeOperation=options.compositeOperation;var bounds=options.bounds;this.context.save();this.context.globalAlpha=opacity;if(compositeOperation){this.context.globalCompositeOperation=compositeOperation;}if(bounds){// Internet Explorer, Microsoft Edge, and Safari have problems\n// when you call context.drawImage with negative x or y\n// or x + width or y + height greater than the canvas width or height respectively.\nif(bounds.x<0){bounds.width+=bounds.x;bounds.x=0;}if(bounds.x+bounds.width>this.canvas.width){bounds.width=this.canvas.width-bounds.x;}if(bounds.y<0){bounds.height+=bounds.y;bounds.y=0;}if(bounds.y+bounds.height>this.canvas.height){bounds.height=this.canvas.height-bounds.y;}this.context.drawImage(this.sketchCanvas,bounds.x,bounds.y,bounds.width,bounds.height,bounds.x,bounds.y,bounds.width,bounds.height);}else{scale=options.scale||1;translate=options.translate;var position=translate instanceof $.Point?translate:new $.Point(0,0);var widthExt=0;var heightExt=0;if(translate){var widthDiff=this.sketchCanvas.width-this.canvas.width;var heightDiff=this.sketchCanvas.height-this.canvas.height;widthExt=Math.round(widthDiff/2);heightExt=Math.round(heightDiff/2);}this.context.drawImage(this.sketchCanvas,position.x-widthExt*scale,position.y-heightExt*scale,(this.canvas.width+2*widthExt)*scale,(this.canvas.height+2*heightExt)*scale,-widthExt,-heightExt,this.canvas.width+2*widthExt,this.canvas.height+2*heightExt);}this.context.restore();},// private\ndrawDebugInfo:function drawDebugInfo(tile,count,i,tiledImage){if(!this.useCanvas){return;}var colorIndex=this.viewer.world.getIndexOfItem(tiledImage)%this.debugGridColor.length;var context=this.context;context.save();context.lineWidth=2*$.pixelDensityRatio;context.font='small-caps bold '+13*$.pixelDensityRatio+'px arial';context.strokeStyle=this.debugGridColor[colorIndex];context.fillStyle=this.debugGridColor[colorIndex];if(this.viewport.degrees!==0){this._offsetForRotation({degrees:this.viewport.degrees});}if(tiledImage.getRotation(true)%360!==0){this._offsetForRotation({degrees:tiledImage.getRotation(true),point:tiledImage.viewport.pixelFromPointNoRotate(tiledImage._getRotationPoint(true),true)});}if(tiledImage.viewport.degrees===0&&tiledImage.getRotation(true)%360===0){if(tiledImage._drawer.viewer.viewport.getFlip()){tiledImage._drawer._flip();}}context.strokeRect(tile.position.x*$.pixelDensityRatio,tile.position.y*$.pixelDensityRatio,tile.size.x*$.pixelDensityRatio,tile.size.y*$.pixelDensityRatio);var tileCenterX=(tile.position.x+tile.size.x/2)*$.pixelDensityRatio;var tileCenterY=(tile.position.y+tile.size.y/2)*$.pixelDensityRatio;// Rotate the text the right way around.\ncontext.translate(tileCenterX,tileCenterY);context.rotate(Math.PI/180*-this.viewport.degrees);context.translate(-tileCenterX,-tileCenterY);if(tile.x===0&&tile.y===0){context.fillText(\"Zoom: \"+this.viewport.getZoom(),tile.position.x*$.pixelDensityRatio,(tile.position.y-30)*$.pixelDensityRatio);context.fillText(\"Pan: \"+this.viewport.getBounds().toString(),tile.position.x*$.pixelDensityRatio,(tile.position.y-20)*$.pixelDensityRatio);}context.fillText(\"Level: \"+tile.level,(tile.position.x+10)*$.pixelDensityRatio,(tile.position.y+20)*$.pixelDensityRatio);context.fillText(\"Column: \"+tile.x,(tile.position.x+10)*$.pixelDensityRatio,(tile.position.y+30)*$.pixelDensityRatio);context.fillText(\"Row: \"+tile.y,(tile.position.x+10)*$.pixelDensityRatio,(tile.position.y+40)*$.pixelDensityRatio);context.fillText(\"Order: \"+i+\" of \"+count,(tile.position.x+10)*$.pixelDensityRatio,(tile.position.y+50)*$.pixelDensityRatio);context.fillText(\"Size: \"+tile.size.toString(),(tile.position.x+10)*$.pixelDensityRatio,(tile.position.y+60)*$.pixelDensityRatio);context.fillText(\"Position: \"+tile.position.toString(),(tile.position.x+10)*$.pixelDensityRatio,(tile.position.y+70)*$.pixelDensityRatio);if(this.viewport.degrees!==0){this._restoreRotationChanges();}if(tiledImage.getRotation(true)%360!==0){this._restoreRotationChanges();}if(tiledImage.viewport.degrees===0&&tiledImage.getRotation(true)%360===0){if(tiledImage._drawer.viewer.viewport.getFlip()){tiledImage._drawer._flip();}}context.restore();},// private\ndebugRect:function debugRect(rect){if(this.useCanvas){var context=this.context;context.save();context.lineWidth=2*$.pixelDensityRatio;context.strokeStyle=this.debugGridColor[0];context.fillStyle=this.debugGridColor[0];context.strokeRect(rect.x*$.pixelDensityRatio,rect.y*$.pixelDensityRatio,rect.width*$.pixelDensityRatio,rect.height*$.pixelDensityRatio);context.restore();}},/**\n     * Turns image smoothing on or off for this viewer. Note: Ignored in some (especially older) browsers that do not support this property.\n     *\n     * @function\n     * @param {Boolean} [imageSmoothingEnabled] - Whether or not the image is\n     * drawn smoothly on the canvas; see imageSmoothingEnabled in\n     * {@link OpenSeadragon.Options} for more explanation.\n     */setImageSmoothingEnabled:function setImageSmoothingEnabled(imageSmoothingEnabled){if(this.useCanvas){this._imageSmoothingEnabled=imageSmoothingEnabled;this._updateImageSmoothingEnabled(this.context);this.viewer.forceRedraw();}},// private\n_updateImageSmoothingEnabled:function _updateImageSmoothingEnabled(context){context.msImageSmoothingEnabled=this._imageSmoothingEnabled;context.imageSmoothingEnabled=this._imageSmoothingEnabled;},/**\n     * Get the canvas size\n     * @param {Boolean} sketch If set to true return the size of the sketch canvas\n     * @returns {OpenSeadragon.Point} The size of the canvas\n     */getCanvasSize:function getCanvasSize(sketch){var canvas=this._getContext(sketch).canvas;return new $.Point(canvas.width,canvas.height);},getCanvasCenter:function getCanvasCenter(){return new $.Point(this.canvas.width/2,this.canvas.height/2);},// private\n_offsetForRotation:function _offsetForRotation(options){var point=options.point?options.point.times($.pixelDensityRatio):this.getCanvasCenter();var context=this._getContext(options.useSketch);context.save();context.translate(point.x,point.y);if(this.viewer.viewport.flipped){context.rotate(Math.PI/180*-options.degrees);context.scale(-1,1);}else{context.rotate(Math.PI/180*options.degrees);}context.translate(-point.x,-point.y);},// private\n_flip:function _flip(options){options=options||{};var point=options.point?options.point.times($.pixelDensityRatio):this.getCanvasCenter();var context=this._getContext(options.useSketch);context.translate(point.x,0);context.scale(-1,1);context.translate(-point.x,0);},// private\n_restoreRotationChanges:function _restoreRotationChanges(useSketch){var context=this._getContext(useSketch);context.restore();},// private\n_calculateCanvasSize:function _calculateCanvasSize(){var pixelDensityRatio=$.pixelDensityRatio;var viewportSize=this.viewport.getContainerSize();return{// canvas width and height are integers\nx:Math.round(viewportSize.x*pixelDensityRatio),y:Math.round(viewportSize.y*pixelDensityRatio)};},// private\n_calculateSketchCanvasSize:function _calculateSketchCanvasSize(){var canvasSize=this._calculateCanvasSize();if(this.viewport.getRotation()===0){return canvasSize;}// If the viewport is rotated, we need a larger sketch canvas in order\n// to support edge smoothing.\nvar sketchCanvasSize=Math.ceil(Math.sqrt(canvasSize.x*canvasSize.x+canvasSize.y*canvasSize.y));return{x:sketchCanvasSize,y:sketchCanvasSize};}};})(OpenSeadragon);/*\n * OpenSeadragon - Viewport\n *\n * Copyright (C) 2009 CodePlex Foundation\n * Copyright (C) 2010-2013 OpenSeadragon contributors\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * - Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * - Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * - Neither the name of CodePlex Foundation nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */(function($){/**\n * @class Viewport\n * @memberof OpenSeadragon\n * @classdesc Handles coordinate-related functionality (zoom, pan, rotation, etc.)\n * for an {@link OpenSeadragon.Viewer}.\n * @param {Object} options - Options for this Viewport.\n * @param {Object} [options.margins] - See viewportMargins in {@link OpenSeadragon.Options}.\n * @param {Number} [options.springStiffness] - See springStiffness in {@link OpenSeadragon.Options}.\n * @param {Number} [options.animationTime] - See animationTime in {@link OpenSeadragon.Options}.\n * @param {Number} [options.minZoomImageRatio] - See minZoomImageRatio in {@link OpenSeadragon.Options}.\n * @param {Number} [options.maxZoomPixelRatio] - See maxZoomPixelRatio in {@link OpenSeadragon.Options}.\n * @param {Number} [options.visibilityRatio] - See visibilityRatio in {@link OpenSeadragon.Options}.\n * @param {Boolean} [options.wrapHorizontal] - See wrapHorizontal in {@link OpenSeadragon.Options}.\n * @param {Boolean} [options.wrapVertical] - See wrapVertical in {@link OpenSeadragon.Options}.\n * @param {Number} [options.defaultZoomLevel] - See defaultZoomLevel in {@link OpenSeadragon.Options}.\n * @param {Number} [options.minZoomLevel] - See minZoomLevel in {@link OpenSeadragon.Options}.\n * @param {Number} [options.maxZoomLevel] - See maxZoomLevel in {@link OpenSeadragon.Options}.\n * @param {Number} [options.degrees] - See degrees in {@link OpenSeadragon.Options}.\n * @param {Boolean} [options.homeFillsViewer] - See homeFillsViewer in {@link OpenSeadragon.Options}.\n */$.Viewport=function(options){//backward compatibility for positional args while preferring more\n//idiomatic javascript options object as the only argument\nvar args=arguments;if(args.length&&args[0]instanceof $.Point){options={containerSize:args[0],contentSize:args[1],config:args[2]};}//options.config and the general config argument are deprecated\n//in favor of the more direct specification of optional settings\n//being passed directly on the options object\nif(options.config){$.extend(true,options,options.config);delete options.config;}this._margins=$.extend({left:0,top:0,right:0,bottom:0},options.margins||{});delete options.margins;$.extend(true,this,{//required settings\ncontainerSize:null,contentSize:null,//internal state properties\nzoomPoint:null,viewer:null,//configurable options\nspringStiffness:$.DEFAULT_SETTINGS.springStiffness,animationTime:$.DEFAULT_SETTINGS.animationTime,minZoomImageRatio:$.DEFAULT_SETTINGS.minZoomImageRatio,maxZoomPixelRatio:$.DEFAULT_SETTINGS.maxZoomPixelRatio,visibilityRatio:$.DEFAULT_SETTINGS.visibilityRatio,wrapHorizontal:$.DEFAULT_SETTINGS.wrapHorizontal,wrapVertical:$.DEFAULT_SETTINGS.wrapVertical,defaultZoomLevel:$.DEFAULT_SETTINGS.defaultZoomLevel,minZoomLevel:$.DEFAULT_SETTINGS.minZoomLevel,maxZoomLevel:$.DEFAULT_SETTINGS.maxZoomLevel,degrees:$.DEFAULT_SETTINGS.degrees,flipped:$.DEFAULT_SETTINGS.flipped,homeFillsViewer:$.DEFAULT_SETTINGS.homeFillsViewer},options);this._updateContainerInnerSize();this.centerSpringX=new $.Spring({initial:0,springStiffness:this.springStiffness,animationTime:this.animationTime});this.centerSpringY=new $.Spring({initial:0,springStiffness:this.springStiffness,animationTime:this.animationTime});this.zoomSpring=new $.Spring({exponential:true,initial:1,springStiffness:this.springStiffness,animationTime:this.animationTime});this._oldCenterX=this.centerSpringX.current.value;this._oldCenterY=this.centerSpringY.current.value;this._oldZoom=this.zoomSpring.current.value;this._setContentBounds(new $.Rect(0,0,1,1),1);this.goHome(true);this.update();};/** @lends OpenSeadragon.Viewport.prototype */$.Viewport.prototype={/**\n     * Updates the viewport's home bounds and constraints for the given content size.\n     * @function\n     * @param {OpenSeadragon.Point} contentSize - size of the content in content units\n     * @return {OpenSeadragon.Viewport} Chainable.\n     * @fires OpenSeadragon.Viewer.event:reset-size\n     */resetContentSize:function resetContentSize(contentSize){$.console.assert(contentSize,\"[Viewport.resetContentSize] contentSize is required\");$.console.assert(contentSize instanceof $.Point,\"[Viewport.resetContentSize] contentSize must be an OpenSeadragon.Point\");$.console.assert(contentSize.x>0,\"[Viewport.resetContentSize] contentSize.x must be greater than 0\");$.console.assert(contentSize.y>0,\"[Viewport.resetContentSize] contentSize.y must be greater than 0\");this._setContentBounds(new $.Rect(0,0,1,contentSize.y/contentSize.x),contentSize.x);return this;},// deprecated\nsetHomeBounds:function setHomeBounds(bounds,contentFactor){$.console.error(\"[Viewport.setHomeBounds] this function is deprecated; The content bounds should not be set manually.\");this._setContentBounds(bounds,contentFactor);},// Set the viewport's content bounds\n// @param {OpenSeadragon.Rect} bounds - the new bounds in viewport coordinates\n// without rotation\n// @param {Number} contentFactor - how many content units per viewport unit\n// @fires OpenSeadragon.Viewer.event:reset-size\n// @private\n_setContentBounds:function _setContentBounds(bounds,contentFactor){$.console.assert(bounds,\"[Viewport._setContentBounds] bounds is required\");$.console.assert(bounds instanceof $.Rect,\"[Viewport._setContentBounds] bounds must be an OpenSeadragon.Rect\");$.console.assert(bounds.width>0,\"[Viewport._setContentBounds] bounds.width must be greater than 0\");$.console.assert(bounds.height>0,\"[Viewport._setContentBounds] bounds.height must be greater than 0\");this._contentBoundsNoRotate=bounds.clone();this._contentSizeNoRotate=this._contentBoundsNoRotate.getSize().times(contentFactor);this._contentBounds=bounds.rotate(this.degrees).getBoundingBox();this._contentSize=this._contentBounds.getSize().times(contentFactor);this._contentAspectRatio=this._contentSize.x/this._contentSize.y;if(this.viewer){/**\n             * Raised when the viewer's content size or home bounds are reset\n             * (see {@link OpenSeadragon.Viewport#resetContentSize}).\n             *\n             * @event reset-size\n             * @memberof OpenSeadragon.Viewer\n             * @type {object}\n             * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.\n             * @property {OpenSeadragon.Point} contentSize\n             * @property {OpenSeadragon.Rect} contentBounds - Content bounds.\n             * @property {OpenSeadragon.Rect} homeBounds - Content bounds.\n             * Deprecated use contentBounds instead.\n             * @property {Number} contentFactor\n             * @property {?Object} userData - Arbitrary subscriber-defined object.\n             */this.viewer.raiseEvent('reset-size',{contentSize:this._contentSizeNoRotate.clone(),contentFactor:contentFactor,homeBounds:this._contentBoundsNoRotate.clone(),contentBounds:this._contentBounds.clone()});}},/**\n     * Returns the home zoom in \"viewport zoom\" value.\n     * @function\n     * @returns {Number} The home zoom in \"viewport zoom\".\n     */getHomeZoom:function getHomeZoom(){if(this.defaultZoomLevel){return this.defaultZoomLevel;}var aspectFactor=this._contentAspectRatio/this.getAspectRatio();var output;if(this.homeFillsViewer){// fill the viewer and clip the image\noutput=aspectFactor>=1?aspectFactor:1;}else{output=aspectFactor>=1?1:aspectFactor;}return output/this._contentBounds.width;},/**\n     * Returns the home bounds in viewport coordinates.\n     * @function\n     * @returns {OpenSeadragon.Rect} The home bounds in vewport coordinates.\n     */getHomeBounds:function getHomeBounds(){return this.getHomeBoundsNoRotate().rotate(-this.getRotation());},/**\n     * Returns the home bounds in viewport coordinates.\n     * This method ignores the viewport rotation. Use\n     * {@link OpenSeadragon.Viewport#getHomeBounds} to take it into account.\n     * @function\n     * @returns {OpenSeadragon.Rect} The home bounds in vewport coordinates.\n     */getHomeBoundsNoRotate:function getHomeBoundsNoRotate(){var center=this._contentBounds.getCenter();var width=1.0/this.getHomeZoom();var height=width/this.getAspectRatio();return new $.Rect(center.x-width/2.0,center.y-height/2.0,width,height);},/**\n     * @function\n     * @param {Boolean} immediately\n     * @fires OpenSeadragon.Viewer.event:home\n     */goHome:function goHome(immediately){if(this.viewer){/**\n             * Raised when the \"home\" operation occurs (see {@link OpenSeadragon.Viewport#goHome}).\n             *\n             * @event home\n             * @memberof OpenSeadragon.Viewer\n             * @type {object}\n             * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.\n             * @property {Boolean} immediately\n             * @property {?Object} userData - Arbitrary subscriber-defined object.\n             */this.viewer.raiseEvent('home',{immediately:immediately});}return this.fitBounds(this.getHomeBounds(),immediately);},/**\n     * @function\n     */getMinZoom:function getMinZoom(){var homeZoom=this.getHomeZoom(),zoom=this.minZoomLevel?this.minZoomLevel:this.minZoomImageRatio*homeZoom;return zoom;},/**\n     * @function\n     */getMaxZoom:function getMaxZoom(){var zoom=this.maxZoomLevel;if(!zoom){zoom=this._contentSize.x*this.maxZoomPixelRatio/this._containerInnerSize.x;zoom/=this._contentBounds.width;}return Math.max(zoom,this.getHomeZoom());},/**\n     * @function\n     */getAspectRatio:function getAspectRatio(){return this._containerInnerSize.x/this._containerInnerSize.y;},/**\n     * @function\n     * @returns {OpenSeadragon.Point} The size of the container, in screen coordinates.\n     */getContainerSize:function getContainerSize(){return new $.Point(this.containerSize.x,this.containerSize.y);},/**\n     * The margins push the \"home\" region in from the sides by the specified amounts.\n     * @function\n     * @returns {Object} Properties (Numbers, in screen coordinates): left, top, right, bottom.\n     */getMargins:function getMargins(){return $.extend({},this._margins);// Make a copy so we are not returning our original\n},/**\n     * The margins push the \"home\" region in from the sides by the specified amounts.\n     * @function\n     * @param {Object} margins - Properties (Numbers, in screen coordinates): left, top, right, bottom.\n     */setMargins:function setMargins(margins){$.console.assert($.type(margins)==='object','[Viewport.setMargins] margins must be an object');this._margins=$.extend({left:0,top:0,right:0,bottom:0},margins);this._updateContainerInnerSize();if(this.viewer){this.viewer.forceRedraw();}},/**\n     * Returns the bounds of the visible area in viewport coordinates.\n     * @function\n     * @param {Boolean} current - Pass true for the current location; defaults to false (target location).\n     * @returns {OpenSeadragon.Rect} The location you are zoomed/panned to, in viewport coordinates.\n     */getBounds:function getBounds(current){return this.getBoundsNoRotate(current).rotate(-this.getRotation());},/**\n     * Returns the bounds of the visible area in viewport coordinates.\n     * This method ignores the viewport rotation. Use\n     * {@link OpenSeadragon.Viewport#getBounds} to take it into account.\n     * @function\n     * @param {Boolean} current - Pass true for the current location; defaults to false (target location).\n     * @returns {OpenSeadragon.Rect} The location you are zoomed/panned to, in viewport coordinates.\n     */getBoundsNoRotate:function getBoundsNoRotate(current){var center=this.getCenter(current);var width=1.0/this.getZoom(current);var height=width/this.getAspectRatio();return new $.Rect(center.x-width/2.0,center.y-height/2.0,width,height);},/**\n     * @function\n     * @param {Boolean} current - Pass true for the current location; defaults to false (target location).\n     * @returns {OpenSeadragon.Rect} The location you are zoomed/panned to,\n     * including the space taken by margins, in viewport coordinates.\n     */getBoundsWithMargins:function getBoundsWithMargins(current){return this.getBoundsNoRotateWithMargins(current).rotate(-this.getRotation(),this.getCenter(current));},/**\n     * @function\n     * @param {Boolean} current - Pass true for the current location; defaults to false (target location).\n     * @returns {OpenSeadragon.Rect} The location you are zoomed/panned to,\n     * including the space taken by margins, in viewport coordinates.\n     */getBoundsNoRotateWithMargins:function getBoundsNoRotateWithMargins(current){var bounds=this.getBoundsNoRotate(current);var factor=this._containerInnerSize.x*this.getZoom(current);bounds.x-=this._margins.left/factor;bounds.y-=this._margins.top/factor;bounds.width+=(this._margins.left+this._margins.right)/factor;bounds.height+=(this._margins.top+this._margins.bottom)/factor;return bounds;},/**\n     * @function\n     * @param {Boolean} current - Pass true for the current location; defaults to false (target location).\n     */getCenter:function getCenter(current){var centerCurrent=new $.Point(this.centerSpringX.current.value,this.centerSpringY.current.value),centerTarget=new $.Point(this.centerSpringX.target.value,this.centerSpringY.target.value),oldZoomPixel,zoom,width,height,bounds,newZoomPixel,deltaZoomPixels,deltaZoomPoints;if(current){return centerCurrent;}else if(!this.zoomPoint){return centerTarget;}oldZoomPixel=this.pixelFromPoint(this.zoomPoint,true);zoom=this.getZoom();width=1.0/zoom;height=width/this.getAspectRatio();bounds=new $.Rect(centerCurrent.x-width/2.0,centerCurrent.y-height/2.0,width,height);newZoomPixel=this._pixelFromPoint(this.zoomPoint,bounds);deltaZoomPixels=newZoomPixel.minus(oldZoomPixel);deltaZoomPoints=deltaZoomPixels.divide(this._containerInnerSize.x*zoom);return centerTarget.plus(deltaZoomPoints);},/**\n     * @function\n     * @param {Boolean} current - Pass true for the current location; defaults to false (target location).\n     */getZoom:function getZoom(current){if(current){return this.zoomSpring.current.value;}else{return this.zoomSpring.target.value;}},// private\n_applyZoomConstraints:function _applyZoomConstraints(zoom){return Math.max(Math.min(zoom,this.getMaxZoom()),this.getMinZoom());},/**\n     * @function\n     * @private\n     * @param {OpenSeadragon.Rect} bounds\n     * @return {OpenSeadragon.Rect} constrained bounds.\n     */_applyBoundaryConstraints:function _applyBoundaryConstraints(bounds){var newBounds=new $.Rect(bounds.x,bounds.y,bounds.width,bounds.height);if(this.wrapHorizontal){//do nothing\n}else{var horizontalThreshold=this.visibilityRatio*newBounds.width;var boundsRight=newBounds.x+newBounds.width;var contentRight=this._contentBoundsNoRotate.x+this._contentBoundsNoRotate.width;var leftDx=this._contentBoundsNoRotate.x-boundsRight+horizontalThreshold;var rightDx=contentRight-newBounds.x-horizontalThreshold;if(horizontalThreshold>this._contentBoundsNoRotate.width){newBounds.x+=(leftDx+rightDx)/2;}else if(rightDx<0){newBounds.x+=rightDx;}else if(leftDx>0){newBounds.x+=leftDx;}}if(this.wrapVertical){//do nothing\n}else{var verticalThreshold=this.visibilityRatio*newBounds.height;var boundsBottom=newBounds.y+newBounds.height;var contentBottom=this._contentBoundsNoRotate.y+this._contentBoundsNoRotate.height;var topDy=this._contentBoundsNoRotate.y-boundsBottom+verticalThreshold;var bottomDy=contentBottom-newBounds.y-verticalThreshold;if(verticalThreshold>this._contentBoundsNoRotate.height){newBounds.y+=(topDy+bottomDy)/2;}else if(bottomDy<0){newBounds.y+=bottomDy;}else if(topDy>0){newBounds.y+=topDy;}}return newBounds;},/**\n     * @function\n     * @private\n     * @param {Boolean} [immediately=false] - whether the function that triggered this event was\n     * called with the \"immediately\" flag\n     */_raiseConstraintsEvent:function _raiseConstraintsEvent(immediately){if(this.viewer){/**\n             * Raised when the viewport constraints are applied (see {@link OpenSeadragon.Viewport#applyConstraints}).\n             *\n             * @event constrain\n             * @memberof OpenSeadragon.Viewer\n             * @type {object}\n             * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.\n             * @property {Boolean} immediately - whether the function that triggered this event was\n             * called with the \"immediately\" flag\n             * @property {?Object} userData - Arbitrary subscriber-defined object.\n             */this.viewer.raiseEvent('constrain',{immediately:immediately});}},/**\n     * Enforces the minZoom, maxZoom and visibilityRatio constraints by\n     * zooming and panning to the closest acceptable zoom and location.\n     * @function\n     * @param {Boolean} [immediately=false]\n     * @return {OpenSeadragon.Viewport} Chainable.\n     * @fires OpenSeadragon.Viewer.event:constrain\n     */applyConstraints:function applyConstraints(immediately){var actualZoom=this.getZoom();var constrainedZoom=this._applyZoomConstraints(actualZoom);if(actualZoom!==constrainedZoom){this.zoomTo(constrainedZoom,this.zoomPoint,immediately);}var bounds=this.getBoundsNoRotate();var constrainedBounds=this._applyBoundaryConstraints(bounds);this._raiseConstraintsEvent(immediately);if(bounds.x!==constrainedBounds.x||bounds.y!==constrainedBounds.y||immediately){this.fitBounds(constrainedBounds.rotate(-this.getRotation()),immediately);}return this;},/**\n     * Equivalent to {@link OpenSeadragon.Viewport#applyConstraints}\n     * @function\n     * @param {Boolean} [immediately=false]\n     * @return {OpenSeadragon.Viewport} Chainable.\n     * @fires OpenSeadragon.Viewer.event:constrain\n     */ensureVisible:function ensureVisible(immediately){return this.applyConstraints(immediately);},/**\n     * @function\n     * @private\n     * @param {OpenSeadragon.Rect} bounds\n     * @param {Object} options (immediately=false, constraints=false)\n     * @return {OpenSeadragon.Viewport} Chainable.\n     */_fitBounds:function _fitBounds(bounds,options){options=options||{};var immediately=options.immediately||false;var constraints=options.constraints||false;var aspect=this.getAspectRatio();var center=bounds.getCenter();// Compute width and height of bounding box.\nvar newBounds=new $.Rect(bounds.x,bounds.y,bounds.width,bounds.height,bounds.degrees+this.getRotation()).getBoundingBox();if(newBounds.getAspectRatio()>=aspect){newBounds.height=newBounds.width/aspect;}else{newBounds.width=newBounds.height*aspect;}// Compute x and y from width, height and center position\nnewBounds.x=center.x-newBounds.width/2;newBounds.y=center.y-newBounds.height/2;var newZoom=1.0/newBounds.width;if(constraints){var newBoundsAspectRatio=newBounds.getAspectRatio();var newConstrainedZoom=this._applyZoomConstraints(newZoom);if(newZoom!==newConstrainedZoom){newZoom=newConstrainedZoom;newBounds.width=1.0/newZoom;newBounds.x=center.x-newBounds.width/2;newBounds.height=newBounds.width/newBoundsAspectRatio;newBounds.y=center.y-newBounds.height/2;}newBounds=this._applyBoundaryConstraints(newBounds);center=newBounds.getCenter();this._raiseConstraintsEvent(immediately);}if(immediately){this.panTo(center,true);return this.zoomTo(newZoom,null,true);}this.panTo(this.getCenter(true),true);this.zoomTo(this.getZoom(true),null,true);var oldBounds=this.getBounds();var oldZoom=this.getZoom();if(oldZoom===0||Math.abs(newZoom/oldZoom-1)<0.00000001){this.zoomTo(newZoom,true);return this.panTo(center,immediately);}newBounds=newBounds.rotate(-this.getRotation());var referencePoint=newBounds.getTopLeft().times(newZoom).minus(oldBounds.getTopLeft().times(oldZoom)).divide(newZoom-oldZoom);return this.zoomTo(newZoom,referencePoint,immediately);},/**\n     * Makes the viewport zoom and pan so that the specified bounds take\n     * as much space as possible in the viewport.\n     * Note: this method ignores the constraints (minZoom, maxZoom and\n     * visibilityRatio).\n     * Use {@link OpenSeadragon.Viewport#fitBoundsWithConstraints} to enforce\n     * them.\n     * @function\n     * @param {OpenSeadragon.Rect} bounds\n     * @param {Boolean} [immediately=false]\n     * @return {OpenSeadragon.Viewport} Chainable.\n     */fitBounds:function fitBounds(bounds,immediately){return this._fitBounds(bounds,{immediately:immediately,constraints:false});},/**\n     * Makes the viewport zoom and pan so that the specified bounds take\n     * as much space as possible in the viewport while enforcing the constraints\n     * (minZoom, maxZoom and visibilityRatio).\n     * Note: because this method enforces the constraints, part of the\n     * provided bounds may end up outside of the viewport.\n     * Use {@link OpenSeadragon.Viewport#fitBounds} to ignore them.\n     * @function\n     * @param {OpenSeadragon.Rect} bounds\n     * @param {Boolean} [immediately=false]\n     * @return {OpenSeadragon.Viewport} Chainable.\n     */fitBoundsWithConstraints:function fitBoundsWithConstraints(bounds,immediately){return this._fitBounds(bounds,{immediately:immediately,constraints:true});},/**\n     * Zooms so the image just fills the viewer vertically.\n     * @param {Boolean} immediately\n     * @return {OpenSeadragon.Viewport} Chainable.\n     */fitVertically:function fitVertically(immediately){var box=new $.Rect(this._contentBounds.x+this._contentBounds.width/2,this._contentBounds.y,0,this._contentBounds.height);return this.fitBounds(box,immediately);},/**\n     * Zooms so the image just fills the viewer horizontally.\n     * @param {Boolean} immediately\n     * @return {OpenSeadragon.Viewport} Chainable.\n     */fitHorizontally:function fitHorizontally(immediately){var box=new $.Rect(this._contentBounds.x,this._contentBounds.y+this._contentBounds.height/2,this._contentBounds.width,0);return this.fitBounds(box,immediately);},/**\n     * Returns bounds taking constraints into account\n     * Added to improve constrained panning\n     * @param {Boolean} current - Pass true for the current location; defaults to false (target location).\n     * @return {OpenSeadragon.Viewport} Chainable.\n     */getConstrainedBounds:function getConstrainedBounds(current){var bounds,constrainedBounds;bounds=this.getBounds(current);constrainedBounds=this._applyBoundaryConstraints(bounds);return constrainedBounds;},/**\n     * @function\n     * @param {OpenSeadragon.Point} delta\n     * @param {Boolean} immediately\n     * @return {OpenSeadragon.Viewport} Chainable.\n     * @fires OpenSeadragon.Viewer.event:pan\n     */panBy:function panBy(delta,immediately){var center=new $.Point(this.centerSpringX.target.value,this.centerSpringY.target.value);return this.panTo(center.plus(delta),immediately);},/**\n     * @function\n     * @param {OpenSeadragon.Point} center\n     * @param {Boolean} immediately\n     * @return {OpenSeadragon.Viewport} Chainable.\n     * @fires OpenSeadragon.Viewer.event:pan\n     */panTo:function panTo(center,immediately){if(immediately){this.centerSpringX.resetTo(center.x);this.centerSpringY.resetTo(center.y);}else{this.centerSpringX.springTo(center.x);this.centerSpringY.springTo(center.y);}if(this.viewer){/**\n             * Raised when the viewport is panned (see {@link OpenSeadragon.Viewport#panBy} and {@link OpenSeadragon.Viewport#panTo}).\n             *\n             * @event pan\n             * @memberof OpenSeadragon.Viewer\n             * @type {object}\n             * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.\n             * @property {OpenSeadragon.Point} center\n             * @property {Boolean} immediately\n             * @property {?Object} userData - Arbitrary subscriber-defined object.\n             */this.viewer.raiseEvent('pan',{center:center,immediately:immediately});}return this;},/**\n     * @function\n     * @return {OpenSeadragon.Viewport} Chainable.\n     * @fires OpenSeadragon.Viewer.event:zoom\n     */zoomBy:function zoomBy(factor,refPoint,immediately){return this.zoomTo(this.zoomSpring.target.value*factor,refPoint,immediately);},/**\n     * Zooms to the specified zoom level\n     * @function\n     * @param {Number} zoom The zoom level to zoom to.\n     * @param {OpenSeadragon.Point} [refPoint] The point which will stay at\n     * the same screen location. Defaults to the viewport center.\n     * @param {Boolean} [immediately=false]\n     * @return {OpenSeadragon.Viewport} Chainable.\n     * @fires OpenSeadragon.Viewer.event:zoom\n     */zoomTo:function zoomTo(zoom,refPoint,immediately){var _this=this;this.zoomPoint=refPoint instanceof $.Point&&!isNaN(refPoint.x)&&!isNaN(refPoint.y)?refPoint:null;if(immediately){this._adjustCenterSpringsForZoomPoint(function(){_this.zoomSpring.resetTo(zoom);});}else{this.zoomSpring.springTo(zoom);}if(this.viewer){/**\n             * Raised when the viewport zoom level changes (see {@link OpenSeadragon.Viewport#zoomBy} and {@link OpenSeadragon.Viewport#zoomTo}).\n             *\n             * @event zoom\n             * @memberof OpenSeadragon.Viewer\n             * @type {object}\n             * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.\n             * @property {Number} zoom\n             * @property {OpenSeadragon.Point} refPoint\n             * @property {Boolean} immediately\n             * @property {?Object} userData - Arbitrary subscriber-defined object.\n             */this.viewer.raiseEvent('zoom',{zoom:zoom,refPoint:refPoint,immediately:immediately});}return this;},/**\n     * Rotates this viewport to the angle specified.\n     * @function\n     * @param {Number} degrees The degrees to set the rotation to.\n     * @return {OpenSeadragon.Viewport} Chainable.\n     */setRotation:function setRotation(degrees){if(!this.viewer||!this.viewer.drawer.canRotate()){return this;}this.degrees=$.positiveModulo(degrees,360);this._setContentBounds(this.viewer.world.getHomeBounds(),this.viewer.world.getContentFactor());this.viewer.forceRedraw();/**\n         * Raised when rotation has been changed.\n         *\n         * @event rotate\n         * @memberof OpenSeadragon.Viewer\n         * @type {object}\n         * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.\n         * @property {Number} degrees - The number of degrees the rotation was set to.\n         * @property {?Object} userData - Arbitrary subscriber-defined object.\n         */this.viewer.raiseEvent('rotate',{\"degrees\":degrees});return this;},/**\n     * Gets the current rotation in degrees.\n     * @function\n     * @return {Number} The current rotation in degrees.\n     */getRotation:function getRotation(){return this.degrees;},/**\n     * @function\n     * @return {OpenSeadragon.Viewport} Chainable.\n     * @fires OpenSeadragon.Viewer.event:resize\n     */resize:function resize(newContainerSize,maintain){var oldBounds=this.getBoundsNoRotate(),newBounds=oldBounds,widthDeltaFactor;this.containerSize.x=newContainerSize.x;this.containerSize.y=newContainerSize.y;this._updateContainerInnerSize();if(maintain){// TODO: widthDeltaFactor will always be 1; probably not what's intended\nwidthDeltaFactor=newContainerSize.x/this.containerSize.x;newBounds.width=oldBounds.width*widthDeltaFactor;newBounds.height=newBounds.width/this.getAspectRatio();}if(this.viewer){/**\n             * Raised when the viewer is resized (see {@link OpenSeadragon.Viewport#resize}).\n             *\n             * @event resize\n             * @memberof OpenSeadragon.Viewer\n             * @type {object}\n             * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.\n             * @property {OpenSeadragon.Point} newContainerSize\n             * @property {Boolean} maintain\n             * @property {?Object} userData - Arbitrary subscriber-defined object.\n             */this.viewer.raiseEvent('resize',{newContainerSize:newContainerSize,maintain:maintain});}return this.fitBounds(newBounds,true);},// private\n_updateContainerInnerSize:function _updateContainerInnerSize(){this._containerInnerSize=new $.Point(Math.max(1,this.containerSize.x-(this._margins.left+this._margins.right)),Math.max(1,this.containerSize.y-(this._margins.top+this._margins.bottom)));},/**\n     * Update the zoom and center (X and Y) springs.\n     * @function\n     * @returns {Boolean} True if any change has been made, false otherwise.\n     */update:function update(){var _this=this;this._adjustCenterSpringsForZoomPoint(function(){_this.zoomSpring.update();});this.centerSpringX.update();this.centerSpringY.update();var changed=this.centerSpringX.current.value!==this._oldCenterX||this.centerSpringY.current.value!==this._oldCenterY||this.zoomSpring.current.value!==this._oldZoom;this._oldCenterX=this.centerSpringX.current.value;this._oldCenterY=this.centerSpringY.current.value;this._oldZoom=this.zoomSpring.current.value;return changed;},_adjustCenterSpringsForZoomPoint:function _adjustCenterSpringsForZoomPoint(zoomSpringHandler){if(this.zoomPoint){var oldZoomPixel=this.pixelFromPoint(this.zoomPoint,true);zoomSpringHandler();var newZoomPixel=this.pixelFromPoint(this.zoomPoint,true);var deltaZoomPixels=newZoomPixel.minus(oldZoomPixel);var deltaZoomPoints=this.deltaPointsFromPixels(deltaZoomPixels,true);this.centerSpringX.shiftBy(deltaZoomPoints.x);this.centerSpringY.shiftBy(deltaZoomPoints.y);if(this.zoomSpring.isAtTargetValue()){this.zoomPoint=null;}}else{zoomSpringHandler();}},/**\n     * Convert a delta (translation vector) from viewport coordinates to pixels\n     * coordinates. This method does not take rotation into account.\n     * Consider using deltaPixelsFromPoints if you need to account for rotation.\n     * @param {OpenSeadragon.Point} deltaPoints - The translation vector to convert.\n     * @param {Boolean} [current=false] - Pass true for the current location;\n     * defaults to false (target location).\n     * @returns {OpenSeadragon.Point}\n     */deltaPixelsFromPointsNoRotate:function deltaPixelsFromPointsNoRotate(deltaPoints,current){return deltaPoints.times(this._containerInnerSize.x*this.getZoom(current));},/**\n     * Convert a delta (translation vector) from viewport coordinates to pixels\n     * coordinates.\n     * @param {OpenSeadragon.Point} deltaPoints - The translation vector to convert.\n     * @param {Boolean} [current=false] - Pass true for the current location;\n     * defaults to false (target location).\n     * @returns {OpenSeadragon.Point}\n     */deltaPixelsFromPoints:function deltaPixelsFromPoints(deltaPoints,current){return this.deltaPixelsFromPointsNoRotate(deltaPoints.rotate(this.getRotation()),current);},/**\n     * Convert a delta (translation vector) from pixels coordinates to viewport\n     * coordinates. This method does not take rotation into account.\n     * Consider using deltaPointsFromPixels if you need to account for rotation.\n     * @param {OpenSeadragon.Point} deltaPixels - The translation vector to convert.\n     * @param {Boolean} [current=false] - Pass true for the current location;\n     * defaults to false (target location).\n     * @returns {OpenSeadragon.Point}\n     */deltaPointsFromPixelsNoRotate:function deltaPointsFromPixelsNoRotate(deltaPixels,current){return deltaPixels.divide(this._containerInnerSize.x*this.getZoom(current));},/**\n     * Convert a delta (translation vector) from pixels coordinates to viewport\n     * coordinates.\n     * @param {OpenSeadragon.Point} deltaPixels - The translation vector to convert.\n     * @param {Boolean} [current=false] - Pass true for the current location;\n     * defaults to false (target location).\n     * @returns {OpenSeadragon.Point}\n     */deltaPointsFromPixels:function deltaPointsFromPixels(deltaPixels,current){return this.deltaPointsFromPixelsNoRotate(deltaPixels,current).rotate(-this.getRotation());},/**\n     * Convert viewport coordinates to pixels coordinates.\n     * This method does not take rotation into account.\n     * Consider using pixelFromPoint if you need to account for rotation.\n     * @param {OpenSeadragon.Point} point the viewport coordinates\n     * @param {Boolean} [current=false] - Pass true for the current location;\n     * defaults to false (target location).\n     * @returns {OpenSeadragon.Point}\n     */pixelFromPointNoRotate:function pixelFromPointNoRotate(point,current){return this._pixelFromPointNoRotate(point,this.getBoundsNoRotate(current));},/**\n     * Convert viewport coordinates to pixel coordinates.\n     * @param {OpenSeadragon.Point} point the viewport coordinates\n     * @param {Boolean} [current=false] - Pass true for the current location;\n     * defaults to false (target location).\n     * @returns {OpenSeadragon.Point}\n     */pixelFromPoint:function pixelFromPoint(point,current){return this._pixelFromPoint(point,this.getBoundsNoRotate(current));},// private\n_pixelFromPointNoRotate:function _pixelFromPointNoRotate(point,bounds){return point.minus(bounds.getTopLeft()).times(this._containerInnerSize.x/bounds.width).plus(new $.Point(this._margins.left,this._margins.top));},// private\n_pixelFromPoint:function _pixelFromPoint(point,bounds){return this._pixelFromPointNoRotate(point.rotate(this.getRotation(),this.getCenter(true)),bounds);},/**\n     * Convert pixel coordinates to viewport coordinates.\n     * This method does not take rotation into account.\n     * Consider using pointFromPixel if you need to account for rotation.\n     * @param {OpenSeadragon.Point} pixel Pixel coordinates\n     * @param {Boolean} [current=false] - Pass true for the current location;\n     * defaults to false (target location).\n     * @returns {OpenSeadragon.Point}\n     */pointFromPixelNoRotate:function pointFromPixelNoRotate(pixel,current){var bounds=this.getBoundsNoRotate(current);return pixel.minus(new $.Point(this._margins.left,this._margins.top)).divide(this._containerInnerSize.x/bounds.width).plus(bounds.getTopLeft());},/**\n     * Convert pixel coordinates to viewport coordinates.\n     * @param {OpenSeadragon.Point} pixel Pixel coordinates\n     * @param {Boolean} [current=false] - Pass true for the current location;\n     * defaults to false (target location).\n     * @returns {OpenSeadragon.Point}\n     */pointFromPixel:function pointFromPixel(pixel,current){return this.pointFromPixelNoRotate(pixel,current).rotate(-this.getRotation(),this.getCenter(true));},// private\n_viewportToImageDelta:function _viewportToImageDelta(viewerX,viewerY){var scale=this._contentBoundsNoRotate.width;return new $.Point(viewerX*this._contentSizeNoRotate.x/scale,viewerY*this._contentSizeNoRotate.x/scale);},/**\n     * Translates from OpenSeadragon viewer coordinate system to image coordinate system.\n     * This method can be called either by passing X,Y coordinates or an\n     * OpenSeadragon.Point\n     * Note: not accurate with multi-image; use TiledImage.viewportToImageCoordinates instead.\n     * @function\n     * @param {(OpenSeadragon.Point|Number)} viewerX either a point or the X\n     * coordinate in viewport coordinate system.\n     * @param {Number} [viewerY] Y coordinate in viewport coordinate system.\n     * @return {OpenSeadragon.Point} a point representing the coordinates in the image.\n     */viewportToImageCoordinates:function viewportToImageCoordinates(viewerX,viewerY){if(viewerX instanceof $.Point){//they passed a point instead of individual components\nreturn this.viewportToImageCoordinates(viewerX.x,viewerX.y);}if(this.viewer){var count=this.viewer.world.getItemCount();if(count>1){$.console.error('[Viewport.viewportToImageCoordinates] is not accurate '+'with multi-image; use TiledImage.viewportToImageCoordinates instead.');}else if(count===1){// It is better to use TiledImage.viewportToImageCoordinates\n// because this._contentBoundsNoRotate can not be relied on\n// with clipping.\nvar item=this.viewer.world.getItemAt(0);return item.viewportToImageCoordinates(viewerX,viewerY,true);}}return this._viewportToImageDelta(viewerX-this._contentBoundsNoRotate.x,viewerY-this._contentBoundsNoRotate.y);},// private\n_imageToViewportDelta:function _imageToViewportDelta(imageX,imageY){var scale=this._contentBoundsNoRotate.width;return new $.Point(imageX/this._contentSizeNoRotate.x*scale,imageY/this._contentSizeNoRotate.x*scale);},/**\n     * Translates from image coordinate system to OpenSeadragon viewer coordinate system\n     * This method can be called either by passing X,Y coordinates or an\n     * OpenSeadragon.Point\n     * Note: not accurate with multi-image; use TiledImage.imageToViewportCoordinates instead.\n     * @function\n     * @param {(OpenSeadragon.Point | Number)} imageX the point or the\n     * X coordinate in image coordinate system.\n     * @param {Number} [imageY] Y coordinate in image coordinate system.\n     * @return {OpenSeadragon.Point} a point representing the coordinates in the viewport.\n     */imageToViewportCoordinates:function imageToViewportCoordinates(imageX,imageY){if(imageX instanceof $.Point){//they passed a point instead of individual components\nreturn this.imageToViewportCoordinates(imageX.x,imageX.y);}if(this.viewer){var count=this.viewer.world.getItemCount();if(count>1){$.console.error('[Viewport.imageToViewportCoordinates] is not accurate '+'with multi-image; use TiledImage.imageToViewportCoordinates instead.');}else if(count===1){// It is better to use TiledImage.viewportToImageCoordinates\n// because this._contentBoundsNoRotate can not be relied on\n// with clipping.\nvar item=this.viewer.world.getItemAt(0);return item.imageToViewportCoordinates(imageX,imageY,true);}}var point=this._imageToViewportDelta(imageX,imageY);point.x+=this._contentBoundsNoRotate.x;point.y+=this._contentBoundsNoRotate.y;return point;},/**\n     * Translates from a rectangle which describes a portion of the image in\n     * pixel coordinates to OpenSeadragon viewport rectangle coordinates.\n     * This method can be called either by passing X,Y,width,height or an\n     * OpenSeadragon.Rect\n     * Note: not accurate with multi-image; use TiledImage.imageToViewportRectangle instead.\n     * @function\n     * @param {(OpenSeadragon.Rect | Number)} imageX the rectangle or the X\n     * coordinate of the top left corner of the rectangle in image coordinate system.\n     * @param {Number} [imageY] the Y coordinate of the top left corner of the rectangle\n     * in image coordinate system.\n     * @param {Number} [pixelWidth] the width in pixel of the rectangle.\n     * @param {Number} [pixelHeight] the height in pixel of the rectangle.\n     * @returns {OpenSeadragon.Rect} This image's bounds in viewport coordinates\n     */imageToViewportRectangle:function imageToViewportRectangle(imageX,imageY,pixelWidth,pixelHeight){var rect=imageX;if(!(rect instanceof $.Rect)){//they passed individual components instead of a rectangle\nrect=new $.Rect(imageX,imageY,pixelWidth,pixelHeight);}if(this.viewer){var count=this.viewer.world.getItemCount();if(count>1){$.console.error('[Viewport.imageToViewportRectangle] is not accurate '+'with multi-image; use TiledImage.imageToViewportRectangle instead.');}else if(count===1){// It is better to use TiledImage.imageToViewportRectangle\n// because this._contentBoundsNoRotate can not be relied on\n// with clipping.\nvar item=this.viewer.world.getItemAt(0);return item.imageToViewportRectangle(imageX,imageY,pixelWidth,pixelHeight,true);}}var coordA=this.imageToViewportCoordinates(rect.x,rect.y);var coordB=this._imageToViewportDelta(rect.width,rect.height);return new $.Rect(coordA.x,coordA.y,coordB.x,coordB.y,rect.degrees);},/**\n     * Translates from a rectangle which describes a portion of\n     * the viewport in point coordinates to image rectangle coordinates.\n     * This method can be called either by passing X,Y,width,height or an\n     * OpenSeadragon.Rect\n     * Note: not accurate with multi-image; use TiledImage.viewportToImageRectangle instead.\n     * @function\n     * @param {(OpenSeadragon.Rect | Number)} viewerX either a rectangle or\n     * the X coordinate of the top left corner of the rectangle in viewport\n     * coordinate system.\n     * @param {Number} [viewerY] the Y coordinate of the top left corner of the rectangle\n     * in viewport coordinate system.\n     * @param {Number} [pointWidth] the width of the rectangle in viewport coordinate system.\n     * @param {Number} [pointHeight] the height of the rectangle in viewport coordinate system.\n     */viewportToImageRectangle:function viewportToImageRectangle(viewerX,viewerY,pointWidth,pointHeight){var rect=viewerX;if(!(rect instanceof $.Rect)){//they passed individual components instead of a rectangle\nrect=new $.Rect(viewerX,viewerY,pointWidth,pointHeight);}if(this.viewer){var count=this.viewer.world.getItemCount();if(count>1){$.console.error('[Viewport.viewportToImageRectangle] is not accurate '+'with multi-image; use TiledImage.viewportToImageRectangle instead.');}else if(count===1){// It is better to use TiledImage.viewportToImageCoordinates\n// because this._contentBoundsNoRotate can not be relied on\n// with clipping.\nvar item=this.viewer.world.getItemAt(0);return item.viewportToImageRectangle(viewerX,viewerY,pointWidth,pointHeight,true);}}var coordA=this.viewportToImageCoordinates(rect.x,rect.y);var coordB=this._viewportToImageDelta(rect.width,rect.height);return new $.Rect(coordA.x,coordA.y,coordB.x,coordB.y,rect.degrees);},/**\n     * Convert pixel coordinates relative to the viewer element to image\n     * coordinates.\n     * Note: not accurate with multi-image.\n     * @param {OpenSeadragon.Point} pixel\n     * @returns {OpenSeadragon.Point}\n     */viewerElementToImageCoordinates:function viewerElementToImageCoordinates(pixel){var point=this.pointFromPixel(pixel,true);return this.viewportToImageCoordinates(point);},/**\n     * Convert pixel coordinates relative to the image to\n     * viewer element coordinates.\n     * Note: not accurate with multi-image.\n     * @param {OpenSeadragon.Point} pixel\n     * @returns {OpenSeadragon.Point}\n     */imageToViewerElementCoordinates:function imageToViewerElementCoordinates(pixel){var point=this.imageToViewportCoordinates(pixel);return this.pixelFromPoint(point,true);},/**\n     * Convert pixel coordinates relative to the window to image coordinates.\n     * Note: not accurate with multi-image.\n     * @param {OpenSeadragon.Point} pixel\n     * @returns {OpenSeadragon.Point}\n     */windowToImageCoordinates:function windowToImageCoordinates(pixel){$.console.assert(this.viewer,\"[Viewport.windowToImageCoordinates] the viewport must have a viewer.\");var viewerCoordinates=pixel.minus($.getElementPosition(this.viewer.element));return this.viewerElementToImageCoordinates(viewerCoordinates);},/**\n     * Convert image coordinates to pixel coordinates relative to the window.\n     * Note: not accurate with multi-image.\n     * @param {OpenSeadragon.Point} pixel\n     * @returns {OpenSeadragon.Point}\n     */imageToWindowCoordinates:function imageToWindowCoordinates(pixel){$.console.assert(this.viewer,\"[Viewport.imageToWindowCoordinates] the viewport must have a viewer.\");var viewerCoordinates=this.imageToViewerElementCoordinates(pixel);return viewerCoordinates.plus($.getElementPosition(this.viewer.element));},/**\n     * Convert pixel coordinates relative to the viewer element to viewport\n     * coordinates.\n     * @param {OpenSeadragon.Point} pixel\n     * @returns {OpenSeadragon.Point}\n     */viewerElementToViewportCoordinates:function viewerElementToViewportCoordinates(pixel){return this.pointFromPixel(pixel,true);},/**\n     * Convert viewport coordinates to pixel coordinates relative to the\n     * viewer element.\n     * @param {OpenSeadragon.Point} point\n     * @returns {OpenSeadragon.Point}\n     */viewportToViewerElementCoordinates:function viewportToViewerElementCoordinates(point){return this.pixelFromPoint(point,true);},/**\n     * Convert a rectangle in pixel coordinates relative to the viewer element\n     * to viewport coordinates.\n     * @param {OpenSeadragon.Rect} rectangle the rectangle to convert\n     * @returns {OpenSeadragon.Rect} the converted rectangle\n     */viewerElementToViewportRectangle:function viewerElementToViewportRectangle(rectangle){return $.Rect.fromSummits(this.pointFromPixel(rectangle.getTopLeft(),true),this.pointFromPixel(rectangle.getTopRight(),true),this.pointFromPixel(rectangle.getBottomLeft(),true));},/**\n     * Convert a rectangle in viewport coordinates to pixel coordinates relative\n     * to the viewer element.\n     * @param {OpenSeadragon.Rect} rectangle the rectangle to convert\n     * @returns {OpenSeadragon.Rect} the converted rectangle\n     */viewportToViewerElementRectangle:function viewportToViewerElementRectangle(rectangle){return $.Rect.fromSummits(this.pixelFromPoint(rectangle.getTopLeft(),true),this.pixelFromPoint(rectangle.getTopRight(),true),this.pixelFromPoint(rectangle.getBottomLeft(),true));},/**\n     * Convert pixel coordinates relative to the window to viewport coordinates.\n     * @param {OpenSeadragon.Point} pixel\n     * @returns {OpenSeadragon.Point}\n     */windowToViewportCoordinates:function windowToViewportCoordinates(pixel){$.console.assert(this.viewer,\"[Viewport.windowToViewportCoordinates] the viewport must have a viewer.\");var viewerCoordinates=pixel.minus($.getElementPosition(this.viewer.element));return this.viewerElementToViewportCoordinates(viewerCoordinates);},/**\n     * Convert viewport coordinates to pixel coordinates relative to the window.\n     * @param {OpenSeadragon.Point} point\n     * @returns {OpenSeadragon.Point}\n     */viewportToWindowCoordinates:function viewportToWindowCoordinates(point){$.console.assert(this.viewer,\"[Viewport.viewportToWindowCoordinates] the viewport must have a viewer.\");var viewerCoordinates=this.viewportToViewerElementCoordinates(point);return viewerCoordinates.plus($.getElementPosition(this.viewer.element));},/**\n     * Convert a viewport zoom to an image zoom.\n     * Image zoom: ratio of the original image size to displayed image size.\n     * 1 means original image size, 0.5 half size...\n     * Viewport zoom: ratio of the displayed image's width to viewport's width.\n     * 1 means identical width, 2 means image's width is twice the viewport's width...\n     * Note: not accurate with multi-image.\n     * @function\n     * @param {Number} viewportZoom The viewport zoom\n     * target zoom.\n     * @returns {Number} imageZoom The image zoom\n     */viewportToImageZoom:function viewportToImageZoom(viewportZoom){if(this.viewer){var count=this.viewer.world.getItemCount();if(count>1){$.console.error('[Viewport.viewportToImageZoom] is not '+'accurate with multi-image.');}else if(count===1){// It is better to use TiledImage.viewportToImageZoom\n// because this._contentBoundsNoRotate can not be relied on\n// with clipping.\nvar item=this.viewer.world.getItemAt(0);return item.viewportToImageZoom(viewportZoom);}}var imageWidth=this._contentSizeNoRotate.x;var containerWidth=this._containerInnerSize.x;var scale=this._contentBoundsNoRotate.width;var viewportToImageZoomRatio=containerWidth/imageWidth*scale;return viewportZoom*viewportToImageZoomRatio;},/**\n     * Convert an image zoom to a viewport zoom.\n     * Image zoom: ratio of the original image size to displayed image size.\n     * 1 means original image size, 0.5 half size...\n     * Viewport zoom: ratio of the displayed image's width to viewport's width.\n     * 1 means identical width, 2 means image's width is twice the viewport's width...\n     * Note: not accurate with multi-image.\n     * @function\n     * @param {Number} imageZoom The image zoom\n     * target zoom.\n     * @returns {Number} viewportZoom The viewport zoom\n     */imageToViewportZoom:function imageToViewportZoom(imageZoom){if(this.viewer){var count=this.viewer.world.getItemCount();if(count>1){$.console.error('[Viewport.imageToViewportZoom] is not accurate '+'with multi-image.');}else if(count===1){// It is better to use TiledImage.imageToViewportZoom\n// because this._contentBoundsNoRotate can not be relied on\n// with clipping.\nvar item=this.viewer.world.getItemAt(0);return item.imageToViewportZoom(imageZoom);}}var imageWidth=this._contentSizeNoRotate.x;var containerWidth=this._containerInnerSize.x;var scale=this._contentBoundsNoRotate.width;var viewportToImageZoomRatio=imageWidth/containerWidth/scale;return imageZoom*viewportToImageZoomRatio;},/**\n     * Toggles flip state and demands a new drawing on navigator and viewer objects.\n     * @function\n     * @return {OpenSeadragon.Viewport} Chainable.\n     */toggleFlip:function toggleFlip(){this.setFlip(!this.getFlip());return this;},/**\n     * Get flip state stored on viewport.\n     * @function\n     * @return {Boolean} Flip state.\n     */getFlip:function getFlip(){return this.flipped;},/**\n     * Sets flip state according to the state input argument.\n     * @function\n     * @param {Boolean} state - Flip state to set.\n     * @return {OpenSeadragon.Viewport} Chainable.\n     */setFlip:function setFlip(state){if(this.flipped===state){return this;}this.flipped=state;if(this.viewer.navigator){this.viewer.navigator.setFlip(this.getFlip());}this.viewer.forceRedraw();/**\n       * Raised when flip state has been changed.\n       *\n       * @event flip\n       * @memberof OpenSeadragon.Viewer\n       * @type {object}\n       * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.\n       * @property {Number} flipped - The flip state after this change.\n       * @property {?Object} userData - Arbitrary subscriber-defined object.\n       */this.viewer.raiseEvent('flip',{\"flipped\":state});return this;}};})(OpenSeadragon);/*\n * OpenSeadragon - TiledImage\n *\n * Copyright (C) 2009 CodePlex Foundation\n * Copyright (C) 2010-2013 OpenSeadragon contributors\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * - Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * - Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * - Neither the name of CodePlex Foundation nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */(function($){/**\n * You shouldn't have to create a TiledImage instance directly; get it asynchronously by\n * using {@link OpenSeadragon.Viewer#open} or {@link OpenSeadragon.Viewer#addTiledImage} instead.\n * @class TiledImage\n * @memberof OpenSeadragon\n * @extends OpenSeadragon.EventSource\n * @classdesc Handles rendering of tiles for an {@link OpenSeadragon.Viewer}.\n * A new instance is created for each TileSource opened.\n * @param {Object} options - Configuration for this TiledImage.\n * @param {OpenSeadragon.TileSource} options.source - The TileSource that defines this TiledImage.\n * @param {OpenSeadragon.Viewer} options.viewer - The Viewer that owns this TiledImage.\n * @param {OpenSeadragon.TileCache} options.tileCache - The TileCache for this TiledImage to use.\n * @param {OpenSeadragon.Drawer} options.drawer - The Drawer for this TiledImage to draw onto.\n * @param {OpenSeadragon.ImageLoader} options.imageLoader - The ImageLoader for this TiledImage to use.\n * @param {Number} [options.x=0] - Left position, in viewport coordinates.\n * @param {Number} [options.y=0] - Top position, in viewport coordinates.\n * @param {Number} [options.width=1] - Width, in viewport coordinates.\n * @param {Number} [options.height] - Height, in viewport coordinates.\n * @param {OpenSeadragon.Rect} [options.fitBounds] The bounds in viewport coordinates\n * to fit the image into. If specified, x, y, width and height get ignored.\n * @param {OpenSeadragon.Placement} [options.fitBoundsPlacement=OpenSeadragon.Placement.CENTER]\n * How to anchor the image in the bounds if options.fitBounds is set.\n * @param {OpenSeadragon.Rect} [options.clip] - An area, in image pixels, to clip to\n * (portions of the image outside of this area will not be visible). Only works on\n * browsers that support the HTML5 canvas.\n * @param {Number} [options.springStiffness] - See {@link OpenSeadragon.Options}.\n * @param {Boolean} [options.animationTime] - See {@link OpenSeadragon.Options}.\n * @param {Number} [options.minZoomImageRatio] - See {@link OpenSeadragon.Options}.\n * @param {Boolean} [options.wrapHorizontal] - See {@link OpenSeadragon.Options}.\n * @param {Boolean} [options.wrapVertical] - See {@link OpenSeadragon.Options}.\n * @param {Boolean} [options.immediateRender] - See {@link OpenSeadragon.Options}.\n * @param {Number} [options.blendTime] - See {@link OpenSeadragon.Options}.\n * @param {Boolean} [options.alwaysBlend] - See {@link OpenSeadragon.Options}.\n * @param {Number} [options.minPixelRatio] - See {@link OpenSeadragon.Options}.\n * @param {Number} [options.smoothTileEdgesMinZoom] - See {@link OpenSeadragon.Options}.\n * @param {Boolean} [options.iOSDevice] - See {@link OpenSeadragon.Options}.\n * @param {Number} [options.opacity=1] - Set to draw at proportional opacity. If zero, images will not draw.\n * @param {Boolean} [options.preload=false] - Set true to load even when the image is hidden by zero opacity.\n * @param {String} [options.compositeOperation] - How the image is composited onto other images; see compositeOperation in {@link OpenSeadragon.Options} for possible values.\n * @param {Boolean} [options.debugMode] - See {@link OpenSeadragon.Options}.\n * @param {String|CanvasGradient|CanvasPattern|Function} [options.placeholderFillStyle] - See {@link OpenSeadragon.Options}.\n * @param {String|Boolean} [options.crossOriginPolicy] - See {@link OpenSeadragon.Options}.\n * @param {Boolean} [options.ajaxWithCredentials] - See {@link OpenSeadragon.Options}.\n * @param {Boolean} [options.loadTilesWithAjax]\n *      Whether to load tile data using AJAX requests.\n *      Defaults to the setting in {@link OpenSeadragon.Options}.\n * @param {Object} [options.ajaxHeaders={}]\n *      A set of headers to include when making tile AJAX requests.\n */$.TiledImage=function(options){var _this=this;/**\n     * The {@link OpenSeadragon.TileSource} that defines this TiledImage.\n     * @member {OpenSeadragon.TileSource} source\n     * @memberof OpenSeadragon.TiledImage#\n     */$.console.assert(options.tileCache,\"[TiledImage] options.tileCache is required\");$.console.assert(options.drawer,\"[TiledImage] options.drawer is required\");$.console.assert(options.viewer,\"[TiledImage] options.viewer is required\");$.console.assert(options.imageLoader,\"[TiledImage] options.imageLoader is required\");$.console.assert(options.source,\"[TiledImage] options.source is required\");$.console.assert(!options.clip||options.clip instanceof $.Rect,\"[TiledImage] options.clip must be an OpenSeadragon.Rect if present\");$.EventSource.call(this);this._tileCache=options.tileCache;delete options.tileCache;this._drawer=options.drawer;delete options.drawer;this._imageLoader=options.imageLoader;delete options.imageLoader;if(options.clip instanceof $.Rect){this._clip=options.clip.clone();}delete options.clip;var x=options.x||0;delete options.x;var y=options.y||0;delete options.y;// Ratio of zoomable image height to width.\nthis.normHeight=options.source.dimensions.y/options.source.dimensions.x;this.contentAspectX=options.source.dimensions.x/options.source.dimensions.y;var scale=1;if(options.width){scale=options.width;delete options.width;if(options.height){$.console.error(\"specifying both width and height to a tiledImage is not supported\");delete options.height;}}else if(options.height){scale=options.height/this.normHeight;delete options.height;}var fitBounds=options.fitBounds;delete options.fitBounds;var fitBoundsPlacement=options.fitBoundsPlacement||OpenSeadragon.Placement.CENTER;delete options.fitBoundsPlacement;var degrees=options.degrees||0;delete options.degrees;$.extend(true,this,{//internal state properties\nviewer:null,tilesMatrix:{},// A '3d' dictionary [level][x][y] --> Tile.\ncoverage:{},// A '3d' dictionary [level][x][y] --> Boolean; shows what areas have been drawn.\nloadingCoverage:{},// A '3d' dictionary [level][x][y] --> Boolean; shows what areas are loaded or are being loaded/blended.\nlastDrawn:[],// An unordered list of Tiles drawn last frame.\nlastResetTime:0,// Last time for which the tiledImage was reset.\n_midDraw:false,// Is the tiledImage currently updating the viewport?\n_needsDraw:true,// Does the tiledImage need to update the viewport again?\n_hasOpaqueTile:false,// Do we have even one fully opaque tile?\n_tilesLoading:0,// The number of pending tile requests.\n//configurable settings\nspringStiffness:$.DEFAULT_SETTINGS.springStiffness,animationTime:$.DEFAULT_SETTINGS.animationTime,minZoomImageRatio:$.DEFAULT_SETTINGS.minZoomImageRatio,wrapHorizontal:$.DEFAULT_SETTINGS.wrapHorizontal,wrapVertical:$.DEFAULT_SETTINGS.wrapVertical,immediateRender:$.DEFAULT_SETTINGS.immediateRender,blendTime:$.DEFAULT_SETTINGS.blendTime,alwaysBlend:$.DEFAULT_SETTINGS.alwaysBlend,minPixelRatio:$.DEFAULT_SETTINGS.minPixelRatio,smoothTileEdgesMinZoom:$.DEFAULT_SETTINGS.smoothTileEdgesMinZoom,iOSDevice:$.DEFAULT_SETTINGS.iOSDevice,debugMode:$.DEFAULT_SETTINGS.debugMode,crossOriginPolicy:$.DEFAULT_SETTINGS.crossOriginPolicy,ajaxWithCredentials:$.DEFAULT_SETTINGS.ajaxWithCredentials,placeholderFillStyle:$.DEFAULT_SETTINGS.placeholderFillStyle,opacity:$.DEFAULT_SETTINGS.opacity,preload:$.DEFAULT_SETTINGS.preload,compositeOperation:$.DEFAULT_SETTINGS.compositeOperation},options);this._preload=this.preload;delete this.preload;this._fullyLoaded=false;this._xSpring=new $.Spring({initial:x,springStiffness:this.springStiffness,animationTime:this.animationTime});this._ySpring=new $.Spring({initial:y,springStiffness:this.springStiffness,animationTime:this.animationTime});this._scaleSpring=new $.Spring({initial:scale,springStiffness:this.springStiffness,animationTime:this.animationTime});this._degreesSpring=new $.Spring({initial:degrees,springStiffness:this.springStiffness,animationTime:this.animationTime});this._updateForScale();if(fitBounds){this.fitBounds(fitBounds,fitBoundsPlacement,true);}// We need a callback to give image manipulation a chance to happen\nthis._drawingHandler=function(args){/**\n       * This event is fired just before the tile is drawn giving the application a chance to alter the image.\n       *\n       * NOTE: This event is only fired when the drawer is using a &lt;canvas&gt;.\n       *\n       * @event tile-drawing\n       * @memberof OpenSeadragon.Viewer\n       * @type {object}\n       * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.\n       * @property {OpenSeadragon.Tile} tile - The Tile being drawn.\n       * @property {OpenSeadragon.TiledImage} tiledImage - Which TiledImage is being drawn.\n       * @property {OpenSeadragon.Tile} context - The HTML canvas context being drawn into.\n       * @property {OpenSeadragon.Tile} rendered - The HTML canvas context containing the tile imagery.\n       * @property {?Object} userData - Arbitrary subscriber-defined object.\n       */_this.viewer.raiseEvent('tile-drawing',$.extend({tiledImage:_this},args));};};$.extend($.TiledImage.prototype,$.EventSource.prototype,/** @lends OpenSeadragon.TiledImage.prototype */{/**\n     * @returns {Boolean} Whether the TiledImage needs to be drawn.\n     */needsDraw:function needsDraw(){return this._needsDraw;},/**\n     * @returns {Boolean} Whether all tiles necessary for this TiledImage to draw at the current view have been loaded.\n     */getFullyLoaded:function getFullyLoaded(){return this._fullyLoaded;},// private\n_setFullyLoaded:function _setFullyLoaded(flag){if(flag===this._fullyLoaded){return;}this._fullyLoaded=flag;/**\n         * Fired when the TiledImage's \"fully loaded\" flag (whether all tiles necessary for this TiledImage\n         * to draw at the current view have been loaded) changes.\n         *\n         * @event fully-loaded-change\n         * @memberof OpenSeadragon.TiledImage\n         * @type {object}\n         * @property {Boolean} fullyLoaded - The new \"fully loaded\" value.\n         * @property {OpenSeadragon.TiledImage} eventSource - A reference to the TiledImage which raised the event.\n         * @property {?Object} userData - Arbitrary subscriber-defined object.\n         */this.raiseEvent('fully-loaded-change',{fullyLoaded:this._fullyLoaded});},/**\n     * Clears all tiles and triggers an update on the next call to\n     * {@link OpenSeadragon.TiledImage#update}.\n     */reset:function reset(){this._tileCache.clearTilesFor(this);this.lastResetTime=$.now();this._needsDraw=true;},/**\n     * Updates the TiledImage's bounds, animating if needed.\n     * @returns {Boolean} Whether the TiledImage animated.\n     */update:function update(){var xUpdated=this._xSpring.update();var yUpdated=this._ySpring.update();var scaleUpdated=this._scaleSpring.update();var degreesUpdated=this._degreesSpring.update();if(xUpdated||yUpdated||scaleUpdated||degreesUpdated){this._updateForScale();this._needsDraw=true;return true;}return false;},/**\n     * Draws the TiledImage to its Drawer.\n     */draw:function draw(){if(this.opacity!==0||this._preload){this._midDraw=true;this._updateViewport();this._midDraw=false;}// Images with opacity 0 should not need to be drawn in future. this._needsDraw = false is set in this._updateViewport() for other images.\nelse{this._needsDraw=false;}},/**\n     * Destroy the TiledImage (unload current loaded tiles).\n     */destroy:function destroy(){this.reset();},/**\n     * Get this TiledImage's bounds in viewport coordinates.\n     * @param {Boolean} [current=false] - Pass true for the current location;\n     * false for target location.\n     * @returns {OpenSeadragon.Rect} This TiledImage's bounds in viewport coordinates.\n     */getBounds:function getBounds(current){return this.getBoundsNoRotate(current).rotate(this.getRotation(current),this._getRotationPoint(current));},/**\n     * Get this TiledImage's bounds in viewport coordinates without taking\n     * rotation into account.\n     * @param {Boolean} [current=false] - Pass true for the current location;\n     * false for target location.\n     * @returns {OpenSeadragon.Rect} This TiledImage's bounds in viewport coordinates.\n     */getBoundsNoRotate:function getBoundsNoRotate(current){return current?new $.Rect(this._xSpring.current.value,this._ySpring.current.value,this._worldWidthCurrent,this._worldHeightCurrent):new $.Rect(this._xSpring.target.value,this._ySpring.target.value,this._worldWidthTarget,this._worldHeightTarget);},// deprecated\ngetWorldBounds:function getWorldBounds(){$.console.error('[TiledImage.getWorldBounds] is deprecated; use TiledImage.getBounds instead');return this.getBounds();},/**\n     * Get the bounds of the displayed part of the tiled image.\n     * @param {Boolean} [current=false] Pass true for the current location,\n     * false for the target location.\n     * @returns {$.Rect} The clipped bounds in viewport coordinates.\n     */getClippedBounds:function getClippedBounds(current){var bounds=this.getBoundsNoRotate(current);if(this._clip){var worldWidth=current?this._worldWidthCurrent:this._worldWidthTarget;var ratio=worldWidth/this.source.dimensions.x;var clip=this._clip.times(ratio);bounds=new $.Rect(bounds.x+clip.x,bounds.y+clip.y,clip.width,clip.height);}return bounds.rotate(this.getRotation(current),this._getRotationPoint(current));},/**\n     * @returns {OpenSeadragon.Point} This TiledImage's content size, in original pixels.\n     */getContentSize:function getContentSize(){return new $.Point(this.source.dimensions.x,this.source.dimensions.y);},// private\n_viewportToImageDelta:function _viewportToImageDelta(viewerX,viewerY,current){var scale=current?this._scaleSpring.current.value:this._scaleSpring.target.value;return new $.Point(viewerX*(this.source.dimensions.x/scale),viewerY*(this.source.dimensions.y*this.contentAspectX/scale));},/**\n     * Translates from OpenSeadragon viewer coordinate system to image coordinate system.\n     * This method can be called either by passing X,Y coordinates or an {@link OpenSeadragon.Point}.\n     * @param {Number|OpenSeadragon.Point} viewerX - The X coordinate or point in viewport coordinate system.\n     * @param {Number} [viewerY] - The Y coordinate in viewport coordinate system.\n     * @param {Boolean} [current=false] - Pass true to use the current location; false for target location.\n     * @return {OpenSeadragon.Point} A point representing the coordinates in the image.\n     */viewportToImageCoordinates:function viewportToImageCoordinates(viewerX,viewerY,current){var point;if(viewerX instanceof $.Point){//they passed a point instead of individual components\ncurrent=viewerY;point=viewerX;}else{point=new $.Point(viewerX,viewerY);}point=point.rotate(-this.getRotation(current),this._getRotationPoint(current));return current?this._viewportToImageDelta(point.x-this._xSpring.current.value,point.y-this._ySpring.current.value):this._viewportToImageDelta(point.x-this._xSpring.target.value,point.y-this._ySpring.target.value);},// private\n_imageToViewportDelta:function _imageToViewportDelta(imageX,imageY,current){var scale=current?this._scaleSpring.current.value:this._scaleSpring.target.value;return new $.Point(imageX/this.source.dimensions.x*scale,imageY/this.source.dimensions.y/this.contentAspectX*scale);},/**\n     * Translates from image coordinate system to OpenSeadragon viewer coordinate system\n     * This method can be called either by passing X,Y coordinates or an {@link OpenSeadragon.Point}.\n     * @param {Number|OpenSeadragon.Point} imageX - The X coordinate or point in image coordinate system.\n     * @param {Number} [imageY] - The Y coordinate in image coordinate system.\n     * @param {Boolean} [current=false] - Pass true to use the current location; false for target location.\n     * @return {OpenSeadragon.Point} A point representing the coordinates in the viewport.\n     */imageToViewportCoordinates:function imageToViewportCoordinates(imageX,imageY,current){if(imageX instanceof $.Point){//they passed a point instead of individual components\ncurrent=imageY;imageY=imageX.y;imageX=imageX.x;}var point=this._imageToViewportDelta(imageX,imageY);if(current){point.x+=this._xSpring.current.value;point.y+=this._ySpring.current.value;}else{point.x+=this._xSpring.target.value;point.y+=this._ySpring.target.value;}return point.rotate(this.getRotation(current),this._getRotationPoint(current));},/**\n     * Translates from a rectangle which describes a portion of the image in\n     * pixel coordinates to OpenSeadragon viewport rectangle coordinates.\n     * This method can be called either by passing X,Y,width,height or an {@link OpenSeadragon.Rect}.\n     * @param {Number|OpenSeadragon.Rect} imageX - The left coordinate or rectangle in image coordinate system.\n     * @param {Number} [imageY] - The top coordinate in image coordinate system.\n     * @param {Number} [pixelWidth] - The width in pixel of the rectangle.\n     * @param {Number} [pixelHeight] - The height in pixel of the rectangle.\n     * @param {Boolean} [current=false] - Pass true to use the current location; false for target location.\n     * @return {OpenSeadragon.Rect} A rect representing the coordinates in the viewport.\n     */imageToViewportRectangle:function imageToViewportRectangle(imageX,imageY,pixelWidth,pixelHeight,current){var rect=imageX;if(rect instanceof $.Rect){//they passed a rect instead of individual components\ncurrent=imageY;}else{rect=new $.Rect(imageX,imageY,pixelWidth,pixelHeight);}var coordA=this.imageToViewportCoordinates(rect.getTopLeft(),current);var coordB=this._imageToViewportDelta(rect.width,rect.height,current);return new $.Rect(coordA.x,coordA.y,coordB.x,coordB.y,rect.degrees+this.getRotation(current));},/**\n     * Translates from a rectangle which describes a portion of\n     * the viewport in point coordinates to image rectangle coordinates.\n     * This method can be called either by passing X,Y,width,height or an {@link OpenSeadragon.Rect}.\n     * @param {Number|OpenSeadragon.Rect} viewerX - The left coordinate or rectangle in viewport coordinate system.\n     * @param {Number} [viewerY] - The top coordinate in viewport coordinate system.\n     * @param {Number} [pointWidth] - The width in viewport coordinate system.\n     * @param {Number} [pointHeight] - The height in viewport coordinate system.\n     * @param {Boolean} [current=false] - Pass true to use the current location; false for target location.\n     * @return {OpenSeadragon.Rect} A rect representing the coordinates in the image.\n     */viewportToImageRectangle:function viewportToImageRectangle(viewerX,viewerY,pointWidth,pointHeight,current){var rect=viewerX;if(viewerX instanceof $.Rect){//they passed a rect instead of individual components\ncurrent=viewerY;}else{rect=new $.Rect(viewerX,viewerY,pointWidth,pointHeight);}var coordA=this.viewportToImageCoordinates(rect.getTopLeft(),current);var coordB=this._viewportToImageDelta(rect.width,rect.height,current);return new $.Rect(coordA.x,coordA.y,coordB.x,coordB.y,rect.degrees-this.getRotation(current));},/**\n     * Convert pixel coordinates relative to the viewer element to image\n     * coordinates.\n     * @param {OpenSeadragon.Point} pixel\n     * @returns {OpenSeadragon.Point}\n     */viewerElementToImageCoordinates:function viewerElementToImageCoordinates(pixel){var point=this.viewport.pointFromPixel(pixel,true);return this.viewportToImageCoordinates(point);},/**\n     * Convert pixel coordinates relative to the image to\n     * viewer element coordinates.\n     * @param {OpenSeadragon.Point} pixel\n     * @returns {OpenSeadragon.Point}\n     */imageToViewerElementCoordinates:function imageToViewerElementCoordinates(pixel){var point=this.imageToViewportCoordinates(pixel);return this.viewport.pixelFromPoint(point,true);},/**\n     * Convert pixel coordinates relative to the window to image coordinates.\n     * @param {OpenSeadragon.Point} pixel\n     * @returns {OpenSeadragon.Point}\n     */windowToImageCoordinates:function windowToImageCoordinates(pixel){var viewerCoordinates=pixel.minus(OpenSeadragon.getElementPosition(this.viewer.element));return this.viewerElementToImageCoordinates(viewerCoordinates);},/**\n     * Convert image coordinates to pixel coordinates relative to the window.\n     * @param {OpenSeadragon.Point} pixel\n     * @returns {OpenSeadragon.Point}\n     */imageToWindowCoordinates:function imageToWindowCoordinates(pixel){var viewerCoordinates=this.imageToViewerElementCoordinates(pixel);return viewerCoordinates.plus(OpenSeadragon.getElementPosition(this.viewer.element));},// private\n// Convert rectangle in viewport coordinates to this tiled image point\n// coordinates (x in [0, 1] and y in [0, aspectRatio])\n_viewportToTiledImageRectangle:function _viewportToTiledImageRectangle(rect){var scale=this._scaleSpring.current.value;rect=rect.rotate(-this.getRotation(true),this._getRotationPoint(true));return new $.Rect((rect.x-this._xSpring.current.value)/scale,(rect.y-this._ySpring.current.value)/scale,rect.width/scale,rect.height/scale,rect.degrees);},/**\n     * Convert a viewport zoom to an image zoom.\n     * Image zoom: ratio of the original image size to displayed image size.\n     * 1 means original image size, 0.5 half size...\n     * Viewport zoom: ratio of the displayed image's width to viewport's width.\n     * 1 means identical width, 2 means image's width is twice the viewport's width...\n     * @function\n     * @param {Number} viewportZoom The viewport zoom\n     * @returns {Number} imageZoom The image zoom\n     */viewportToImageZoom:function viewportToImageZoom(viewportZoom){var ratio=this._scaleSpring.current.value*this.viewport._containerInnerSize.x/this.source.dimensions.x;return ratio*viewportZoom;},/**\n     * Convert an image zoom to a viewport zoom.\n     * Image zoom: ratio of the original image size to displayed image size.\n     * 1 means original image size, 0.5 half size...\n     * Viewport zoom: ratio of the displayed image's width to viewport's width.\n     * 1 means identical width, 2 means image's width is twice the viewport's width...\n     * Note: not accurate with multi-image.\n     * @function\n     * @param {Number} imageZoom The image zoom\n     * @returns {Number} viewportZoom The viewport zoom\n     */imageToViewportZoom:function imageToViewportZoom(imageZoom){var ratio=this._scaleSpring.current.value*this.viewport._containerInnerSize.x/this.source.dimensions.x;return imageZoom/ratio;},/**\n     * Sets the TiledImage's position in the world.\n     * @param {OpenSeadragon.Point} position - The new position, in viewport coordinates.\n     * @param {Boolean} [immediately=false] - Whether to animate to the new position or snap immediately.\n     * @fires OpenSeadragon.TiledImage.event:bounds-change\n     */setPosition:function setPosition(position,immediately){var sameTarget=this._xSpring.target.value===position.x&&this._ySpring.target.value===position.y;if(immediately){if(sameTarget&&this._xSpring.current.value===position.x&&this._ySpring.current.value===position.y){return;}this._xSpring.resetTo(position.x);this._ySpring.resetTo(position.y);this._needsDraw=true;}else{if(sameTarget){return;}this._xSpring.springTo(position.x);this._ySpring.springTo(position.y);this._needsDraw=true;}if(!sameTarget){this._raiseBoundsChange();}},/**\n     * Sets the TiledImage's width in the world, adjusting the height to match based on aspect ratio.\n     * @param {Number} width - The new width, in viewport coordinates.\n     * @param {Boolean} [immediately=false] - Whether to animate to the new size or snap immediately.\n     * @fires OpenSeadragon.TiledImage.event:bounds-change\n     */setWidth:function setWidth(width,immediately){this._setScale(width,immediately);},/**\n     * Sets the TiledImage's height in the world, adjusting the width to match based on aspect ratio.\n     * @param {Number} height - The new height, in viewport coordinates.\n     * @param {Boolean} [immediately=false] - Whether to animate to the new size or snap immediately.\n     * @fires OpenSeadragon.TiledImage.event:bounds-change\n     */setHeight:function setHeight(height,immediately){this._setScale(height/this.normHeight,immediately);},/**\n     * Sets an array of polygons to crop the TiledImage during draw tiles.\n     * The render function will use the default non-zero winding rule.\n     * @param Polygons represented in an array of point object in image coordinates.\n     * Example format: [\n     *  [{x: 197, y:172}, {x: 226, y:172}, {x: 226, y:198}, {x: 197, y:198}], // First polygon\n     *  [{x: 328, y:200}, {x: 330, y:199}, {x: 332, y:201}, {x: 329, y:202}]  // Second polygon\n     *  [{x: 321, y:201}, {x: 356, y:205}, {x: 341, y:250}] // Third polygon\n     * ]\n     */setCroppingPolygons:function setCroppingPolygons(polygons){var isXYObject=function isXYObject(obj){return obj instanceof $.Point||typeof obj.x==='number'&&typeof obj.y==='number';};var objectToSimpleXYObject=function objectToSimpleXYObject(objs){return objs.map(function(obj){try{if(isXYObject(obj)){return{x:obj.x,y:obj.y};}else{throw new Error();}}catch(e){throw new Error('A Provided cropping polygon point is not supported');}});};try{if(!$.isArray(polygons)){throw new Error('Provided cropping polygon is not an array');}this._croppingPolygons=polygons.map(function(polygon){return objectToSimpleXYObject(polygon);});}catch(e){$.console.error('[TiledImage.setCroppingPolygons] Cropping polygon format not supported');$.console.error(e);this._croppingPolygons=null;}},/**\n     * Resets the cropping polygons, thus next render will remove all cropping\n     * polygon effects.\n     */resetCroppingPolygons:function resetCroppingPolygons(){this._croppingPolygons=null;},/**\n     * Positions and scales the TiledImage to fit in the specified bounds.\n     * Note: this method fires OpenSeadragon.TiledImage.event:bounds-change\n     * twice\n     * @param {OpenSeadragon.Rect} bounds The bounds to fit the image into.\n     * @param {OpenSeadragon.Placement} [anchor=OpenSeadragon.Placement.CENTER]\n     * How to anchor the image in the bounds.\n     * @param {Boolean} [immediately=false] Whether to animate to the new size\n     * or snap immediately.\n     * @fires OpenSeadragon.TiledImage.event:bounds-change\n     */fitBounds:function fitBounds(bounds,anchor,immediately){anchor=anchor||$.Placement.CENTER;var anchorProperties=$.Placement.properties[anchor];var aspectRatio=this.contentAspectX;var xOffset=0;var yOffset=0;var displayedWidthRatio=1;var displayedHeightRatio=1;if(this._clip){aspectRatio=this._clip.getAspectRatio();displayedWidthRatio=this._clip.width/this.source.dimensions.x;displayedHeightRatio=this._clip.height/this.source.dimensions.y;if(bounds.getAspectRatio()>aspectRatio){xOffset=this._clip.x/this._clip.height*bounds.height;yOffset=this._clip.y/this._clip.height*bounds.height;}else{xOffset=this._clip.x/this._clip.width*bounds.width;yOffset=this._clip.y/this._clip.width*bounds.width;}}if(bounds.getAspectRatio()>aspectRatio){// We will have margins on the X axis\nvar height=bounds.height/displayedHeightRatio;var marginLeft=0;if(anchorProperties.isHorizontallyCentered){marginLeft=(bounds.width-bounds.height*aspectRatio)/2;}else if(anchorProperties.isRight){marginLeft=bounds.width-bounds.height*aspectRatio;}this.setPosition(new $.Point(bounds.x-xOffset+marginLeft,bounds.y-yOffset),immediately);this.setHeight(height,immediately);}else{// We will have margins on the Y axis\nvar width=bounds.width/displayedWidthRatio;var marginTop=0;if(anchorProperties.isVerticallyCentered){marginTop=(bounds.height-bounds.width/aspectRatio)/2;}else if(anchorProperties.isBottom){marginTop=bounds.height-bounds.width/aspectRatio;}this.setPosition(new $.Point(bounds.x-xOffset,bounds.y-yOffset+marginTop),immediately);this.setWidth(width,immediately);}},/**\n     * @returns {OpenSeadragon.Rect|null} The TiledImage's current clip rectangle,\n     * in image pixels, or null if none.\n     */getClip:function getClip(){if(this._clip){return this._clip.clone();}return null;},/**\n     * @param {OpenSeadragon.Rect|null} newClip - An area, in image pixels, to clip to\n     * (portions of the image outside of this area will not be visible). Only works on\n     * browsers that support the HTML5 canvas.\n     * @fires OpenSeadragon.TiledImage.event:clip-change\n     */setClip:function setClip(newClip){$.console.assert(!newClip||newClip instanceof $.Rect,\"[TiledImage.setClip] newClip must be an OpenSeadragon.Rect or null\");if(newClip instanceof $.Rect){this._clip=newClip.clone();}else{this._clip=null;}this._needsDraw=true;/**\n         * Raised when the TiledImage's clip is changed.\n         * @event clip-change\n         * @memberOf OpenSeadragon.TiledImage\n         * @type {object}\n         * @property {OpenSeadragon.TiledImage} eventSource - A reference to the\n         * TiledImage which raised the event.\n         * @property {?Object} userData - Arbitrary subscriber-defined object.\n         */this.raiseEvent('clip-change');},/**\n     * @returns {Number} The TiledImage's current opacity.\n     */getOpacity:function getOpacity(){return this.opacity;},/**\n     * @param {Number} opacity Opacity the tiled image should be drawn at.\n     * @fires OpenSeadragon.TiledImage.event:opacity-change\n     */setOpacity:function setOpacity(opacity){if(opacity===this.opacity){return;}this.opacity=opacity;this._needsDraw=true;/**\n         * Raised when the TiledImage's opacity is changed.\n         * @event opacity-change\n         * @memberOf OpenSeadragon.TiledImage\n         * @type {object}\n         * @property {Number} opacity - The new opacity value.\n         * @property {OpenSeadragon.TiledImage} eventSource - A reference to the\n         * TiledImage which raised the event.\n         * @property {?Object} userData - Arbitrary subscriber-defined object.\n         */this.raiseEvent('opacity-change',{opacity:this.opacity});},/**\n     * @returns {Boolean} whether the tiledImage can load its tiles even when it has zero opacity.\n     */getPreload:function getPreload(){return this._preload;},/**\n     * Set true to load even when hidden. Set false to block loading when hidden.\n     */setPreload:function setPreload(preload){this._preload=!!preload;this._needsDraw=true;},/**\n     * Get the rotation of this tiled image in degrees.\n     * @param {Boolean} [current=false] True for current rotation, false for target.\n     * @returns {Number} the rotation of this tiled image in degrees.\n     */getRotation:function getRotation(current){return current?this._degreesSpring.current.value:this._degreesSpring.target.value;},/**\n     * Set the current rotation of this tiled image in degrees.\n     * @param {Number} degrees the rotation in degrees.\n     * @param {Boolean} [immediately=false] Whether to animate to the new angle\n     * or rotate immediately.\n     * @fires OpenSeadragon.TiledImage.event:bounds-change\n     */setRotation:function setRotation(degrees,immediately){if(this._degreesSpring.target.value===degrees&&this._degreesSpring.isAtTargetValue()){return;}if(immediately){this._degreesSpring.resetTo(degrees);}else{this._degreesSpring.springTo(degrees);}this._needsDraw=true;this._raiseBoundsChange();},/**\n     * Get the point around which this tiled image is rotated\n     * @private\n     * @param {Boolean} current True for current rotation point, false for target.\n     * @returns {OpenSeadragon.Point}\n     */_getRotationPoint:function _getRotationPoint(current){return this.getBoundsNoRotate(current).getCenter();},/**\n     * @returns {String} The TiledImage's current compositeOperation.\n     */getCompositeOperation:function getCompositeOperation(){return this.compositeOperation;},/**\n     * @param {String} compositeOperation the tiled image should be drawn with this globalCompositeOperation.\n     * @fires OpenSeadragon.TiledImage.event:composite-operation-change\n     */setCompositeOperation:function setCompositeOperation(compositeOperation){if(compositeOperation===this.compositeOperation){return;}this.compositeOperation=compositeOperation;this._needsDraw=true;/**\n         * Raised when the TiledImage's opacity is changed.\n         * @event composite-operation-change\n         * @memberOf OpenSeadragon.TiledImage\n         * @type {object}\n         * @property {String} compositeOperation - The new compositeOperation value.\n         * @property {OpenSeadragon.TiledImage} eventSource - A reference to the\n         * TiledImage which raised the event.\n         * @property {?Object} userData - Arbitrary subscriber-defined object.\n         */this.raiseEvent('composite-operation-change',{compositeOperation:this.compositeOperation});},// private\n_setScale:function _setScale(scale,immediately){var sameTarget=this._scaleSpring.target.value===scale;if(immediately){if(sameTarget&&this._scaleSpring.current.value===scale){return;}this._scaleSpring.resetTo(scale);this._updateForScale();this._needsDraw=true;}else{if(sameTarget){return;}this._scaleSpring.springTo(scale);this._updateForScale();this._needsDraw=true;}if(!sameTarget){this._raiseBoundsChange();}},// private\n_updateForScale:function _updateForScale(){this._worldWidthTarget=this._scaleSpring.target.value;this._worldHeightTarget=this.normHeight*this._scaleSpring.target.value;this._worldWidthCurrent=this._scaleSpring.current.value;this._worldHeightCurrent=this.normHeight*this._scaleSpring.current.value;},// private\n_raiseBoundsChange:function _raiseBoundsChange(){/**\n         * Raised when the TiledImage's bounds are changed.\n         * Note that this event is triggered only when the animation target is changed;\n         * not for every frame of animation.\n         * @event bounds-change\n         * @memberOf OpenSeadragon.TiledImage\n         * @type {object}\n         * @property {OpenSeadragon.TiledImage} eventSource - A reference to the\n         * TiledImage which raised the event.\n         * @property {?Object} userData - Arbitrary subscriber-defined object.\n         */this.raiseEvent('bounds-change');},// private\n_isBottomItem:function _isBottomItem(){return this.viewer.world.getItemAt(0)===this;},// private\n_getLevelsInterval:function _getLevelsInterval(){var lowestLevel=Math.max(this.source.minLevel,Math.floor(Math.log(this.minZoomImageRatio)/Math.log(2)));var currentZeroRatio=this.viewport.deltaPixelsFromPointsNoRotate(this.source.getPixelRatio(0),true).x*this._scaleSpring.current.value;var highestLevel=Math.min(Math.abs(this.source.maxLevel),Math.abs(Math.floor(Math.log(currentZeroRatio/this.minPixelRatio)/Math.log(2))));// Calculations for the interval of levels to draw\n// can return invalid intervals; fix that here if necessary\nhighestLevel=Math.max(highestLevel,this.source.minLevel||0);lowestLevel=Math.min(lowestLevel,highestLevel);return{lowestLevel:lowestLevel,highestLevel:highestLevel};},/**\n     * @private\n     * @inner\n     * Pretty much every other line in this needs to be documented so it's clear\n     * how each piece of this routine contributes to the drawing process.  That's\n     * why there are so many TODO's inside this function.\n     */_updateViewport:function _updateViewport(){this._needsDraw=false;this._tilesLoading=0;this.loadingCoverage={};// Reset tile's internal drawn state\nwhile(this.lastDrawn.length>0){var tile=this.lastDrawn.pop();tile.beingDrawn=false;}var viewport=this.viewport;var drawArea=this._viewportToTiledImageRectangle(viewport.getBoundsWithMargins(true));if(!this.wrapHorizontal&&!this.wrapVertical){var tiledImageBounds=this._viewportToTiledImageRectangle(this.getClippedBounds(true));drawArea=drawArea.intersection(tiledImageBounds);if(drawArea===null){return;}}var levelsInterval=this._getLevelsInterval();var lowestLevel=levelsInterval.lowestLevel;var highestLevel=levelsInterval.highestLevel;var bestTile=null;var haveDrawn=false;var currentTime=$.now();// Update any level that will be drawn\nfor(var level=highestLevel;level>=lowestLevel;level--){var drawLevel=false;//Avoid calculations for draw if we have already drawn this\nvar currentRenderPixelRatio=viewport.deltaPixelsFromPointsNoRotate(this.source.getPixelRatio(level),true).x*this._scaleSpring.current.value;if(level===lowestLevel||!haveDrawn&&currentRenderPixelRatio>=this.minPixelRatio){drawLevel=true;haveDrawn=true;}else if(!haveDrawn){continue;}//Perform calculations for draw if we haven't drawn this\nvar targetRenderPixelRatio=viewport.deltaPixelsFromPointsNoRotate(this.source.getPixelRatio(level),false).x*this._scaleSpring.current.value;var targetZeroRatio=viewport.deltaPixelsFromPointsNoRotate(this.source.getPixelRatio(Math.max(this.source.getClosestLevel(),0)),false).x*this._scaleSpring.current.value;var optimalRatio=this.immediateRender?1:targetZeroRatio;var levelOpacity=Math.min(1,(currentRenderPixelRatio-0.5)/0.5);var levelVisibility=optimalRatio/Math.abs(optimalRatio-targetRenderPixelRatio);// Update the level and keep track of 'best' tile to load\nbestTile=updateLevel(this,haveDrawn,drawLevel,level,levelOpacity,levelVisibility,drawArea,currentTime,bestTile);// Stop the loop if lower-res tiles would all be covered by\n// already drawn tiles\nif(providesCoverage(this.coverage,level)){break;}}// Perform the actual drawing\ndrawTiles(this,this.lastDrawn);// Load the new 'best' tile\nif(bestTile&&!bestTile.context2D){loadTile(this,bestTile,currentTime);this._needsDraw=true;this._setFullyLoaded(false);}else{this._setFullyLoaded(this._tilesLoading===0);}},// private\n_getCornerTiles:function _getCornerTiles(level,topLeftBound,bottomRightBound){var leftX;var rightX;if(this.wrapHorizontal){leftX=$.positiveModulo(topLeftBound.x,1);rightX=$.positiveModulo(bottomRightBound.x,1);}else{leftX=Math.max(0,topLeftBound.x);rightX=Math.min(1,bottomRightBound.x);}var topY;var bottomY;var aspectRatio=1/this.source.aspectRatio;if(this.wrapVertical){topY=$.positiveModulo(topLeftBound.y,aspectRatio);bottomY=$.positiveModulo(bottomRightBound.y,aspectRatio);}else{topY=Math.max(0,topLeftBound.y);bottomY=Math.min(aspectRatio,bottomRightBound.y);}var topLeftTile=this.source.getTileAtPoint(level,new $.Point(leftX,topY));var bottomRightTile=this.source.getTileAtPoint(level,new $.Point(rightX,bottomY));var numTiles=this.source.getNumTiles(level);if(this.wrapHorizontal){topLeftTile.x+=numTiles.x*Math.floor(topLeftBound.x);bottomRightTile.x+=numTiles.x*Math.floor(bottomRightBound.x);}if(this.wrapVertical){topLeftTile.y+=numTiles.y*Math.floor(topLeftBound.y/aspectRatio);bottomRightTile.y+=numTiles.y*Math.floor(bottomRightBound.y/aspectRatio);}return{topLeft:topLeftTile,bottomRight:bottomRightTile};}});/**\n * @private\n * @inner\n * Updates all tiles at a given resolution level.\n * @param {OpenSeadragon.TiledImage} tiledImage - Which TiledImage is being drawn.\n * @param {Boolean} haveDrawn\n * @param {Boolean} drawLevel\n * @param {Number} level\n * @param {Number} levelOpacity\n * @param {Number} levelVisibility\n * @param {OpenSeadragon.Point} viewportTL - The index of the most top-left visible tile.\n * @param {OpenSeadragon.Point} viewportBR - The index of the most bottom-right visible tile.\n * @param {Number} currentTime\n * @param {OpenSeadragon.Tile} best - The current \"best\" tile to draw.\n */function updateLevel(tiledImage,haveDrawn,drawLevel,level,levelOpacity,levelVisibility,drawArea,currentTime,best){var topLeftBound=drawArea.getBoundingBox().getTopLeft();var bottomRightBound=drawArea.getBoundingBox().getBottomRight();if(tiledImage.viewer){/**\n         * <em>- Needs documentation -</em>\n         *\n         * @event update-level\n         * @memberof OpenSeadragon.Viewer\n         * @type {object}\n         * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.\n         * @property {OpenSeadragon.TiledImage} tiledImage - Which TiledImage is being drawn.\n         * @property {Object} havedrawn\n         * @property {Object} level\n         * @property {Object} opacity\n         * @property {Object} visibility\n         * @property {OpenSeadragon.Rect} drawArea\n         * @property {Object} topleft deprecated, use drawArea instead\n         * @property {Object} bottomright deprecated, use drawArea instead\n         * @property {Object} currenttime\n         * @property {Object} best\n         * @property {?Object} userData - Arbitrary subscriber-defined object.\n         */tiledImage.viewer.raiseEvent('update-level',{tiledImage:tiledImage,havedrawn:haveDrawn,level:level,opacity:levelOpacity,visibility:levelVisibility,drawArea:drawArea,topleft:topLeftBound,bottomright:bottomRightBound,currenttime:currentTime,best:best});}resetCoverage(tiledImage.coverage,level);resetCoverage(tiledImage.loadingCoverage,level);//OK, a new drawing so do your calculations\nvar cornerTiles=tiledImage._getCornerTiles(level,topLeftBound,bottomRightBound);var topLeftTile=cornerTiles.topLeft;var bottomRightTile=cornerTiles.bottomRight;var numberOfTiles=tiledImage.source.getNumTiles(level);var viewportCenter=tiledImage.viewport.pixelFromPoint(tiledImage.viewport.getCenter());for(var x=topLeftTile.x;x<=bottomRightTile.x;x++){for(var y=topLeftTile.y;y<=bottomRightTile.y;y++){// Optimisation disabled with wrapping because getTileBounds does not\n// work correctly with x and y outside of the number of tiles\nif(!tiledImage.wrapHorizontal&&!tiledImage.wrapVertical){var tileBounds=tiledImage.source.getTileBounds(level,x,y);if(drawArea.intersection(tileBounds)===null){// This tile is outside of the viewport, no need to draw it\ncontinue;}}best=updateTile(tiledImage,drawLevel,haveDrawn,x,y,level,levelOpacity,levelVisibility,viewportCenter,numberOfTiles,currentTime,best);}}return best;}/**\n * @private\n * @inner\n * Update a single tile at a particular resolution level.\n * @param {OpenSeadragon.TiledImage} tiledImage - Which TiledImage is being drawn.\n * @param {Boolean} haveDrawn\n * @param {Boolean} drawLevel\n * @param {Number} x\n * @param {Number} y\n * @param {Number} level\n * @param {Number} levelOpacity\n * @param {Number} levelVisibility\n * @param {OpenSeadragon.Point} viewportCenter\n * @param {Number} numberOfTiles\n * @param {Number} currentTime\n * @param {OpenSeadragon.Tile} best - The current \"best\" tile to draw.\n */function updateTile(tiledImage,haveDrawn,drawLevel,x,y,level,levelOpacity,levelVisibility,viewportCenter,numberOfTiles,currentTime,best){var tile=getTile(x,y,level,tiledImage,tiledImage.source,tiledImage.tilesMatrix,currentTime,numberOfTiles,tiledImage._worldWidthCurrent,tiledImage._worldHeightCurrent),drawTile=drawLevel;if(tiledImage.viewer){/**\n         * <em>- Needs documentation -</em>\n         *\n         * @event update-tile\n         * @memberof OpenSeadragon.Viewer\n         * @type {object}\n         * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.\n         * @property {OpenSeadragon.TiledImage} tiledImage - Which TiledImage is being drawn.\n         * @property {OpenSeadragon.Tile} tile\n         * @property {?Object} userData - Arbitrary subscriber-defined object.\n         */tiledImage.viewer.raiseEvent('update-tile',{tiledImage:tiledImage,tile:tile});}setCoverage(tiledImage.coverage,level,x,y,false);var loadingCoverage=tile.loaded||tile.loading||isCovered(tiledImage.loadingCoverage,level,x,y);setCoverage(tiledImage.loadingCoverage,level,x,y,loadingCoverage);if(!tile.exists){return best;}if(haveDrawn&&!drawTile){if(isCovered(tiledImage.coverage,level,x,y)){setCoverage(tiledImage.coverage,level,x,y,true);}else{drawTile=true;}}if(!drawTile){return best;}positionTile(tile,tiledImage.source.tileOverlap,tiledImage.viewport,viewportCenter,levelVisibility,tiledImage);if(!tile.loaded){if(tile.context2D){setTileLoaded(tiledImage,tile);}else{var imageRecord=tiledImage._tileCache.getImageRecord(tile.cacheKey);if(imageRecord){var image=imageRecord.getImage();setTileLoaded(tiledImage,tile,image);}}}if(tile.loaded){var needsDraw=blendTile(tiledImage,tile,x,y,level,levelOpacity,currentTime);if(needsDraw){tiledImage._needsDraw=true;}}else if(tile.loading){// the tile is already in the download queue\ntiledImage._tilesLoading++;}else if(!loadingCoverage){best=compareTiles(best,tile);}return best;}/**\n * @private\n * @inner\n * Obtains a tile at the given location.\n * @param {Number} x\n * @param {Number} y\n * @param {Number} level\n * @param {OpenSeadragon.TiledImage} tiledImage\n * @param {OpenSeadragon.TileSource} tileSource\n * @param {Object} tilesMatrix - A '3d' dictionary [level][x][y] --> Tile.\n * @param {Number} time\n * @param {Number} numTiles\n * @param {Number} worldWidth\n * @param {Number} worldHeight\n * @returns {OpenSeadragon.Tile}\n */function getTile(x,y,level,tiledImage,tileSource,tilesMatrix,time,numTiles,worldWidth,worldHeight){var xMod,yMod,bounds,sourceBounds,exists,url,ajaxHeaders,context2D,tile;if(!tilesMatrix[level]){tilesMatrix[level]={};}if(!tilesMatrix[level][x]){tilesMatrix[level][x]={};}if(!tilesMatrix[level][x][y]){xMod=(numTiles.x+x%numTiles.x)%numTiles.x;yMod=(numTiles.y+y%numTiles.y)%numTiles.y;bounds=tileSource.getTileBounds(level,xMod,yMod);sourceBounds=tileSource.getTileBounds(level,xMod,yMod,true);exists=tileSource.tileExists(level,xMod,yMod);url=tileSource.getTileUrl(level,xMod,yMod);// Headers are only applicable if loadTilesWithAjax is set\nif(tiledImage.loadTilesWithAjax){ajaxHeaders=tileSource.getTileAjaxHeaders(level,xMod,yMod);// Combine tile AJAX headers with tiled image AJAX headers (if applicable)\nif($.isPlainObject(tiledImage.ajaxHeaders)){ajaxHeaders=$.extend({},tiledImage.ajaxHeaders,ajaxHeaders);}}else{ajaxHeaders=null;}context2D=tileSource.getContext2D?tileSource.getContext2D(level,xMod,yMod):undefined;bounds.x+=(x-xMod)/numTiles.x;bounds.y+=worldHeight/worldWidth*((y-yMod)/numTiles.y);tile=new $.Tile(level,x,y,bounds,exists,url,context2D,tiledImage.loadTilesWithAjax,ajaxHeaders,sourceBounds);if(xMod===numTiles.x-1){tile.isRightMost=true;}if(yMod===numTiles.y-1){tile.isBottomMost=true;}tilesMatrix[level][x][y]=tile;}tile=tilesMatrix[level][x][y];tile.lastTouchTime=time;return tile;}/**\n * @private\n * @inner\n * Dispatch a job to the ImageLoader to load the Image for a Tile.\n * @param {OpenSeadragon.TiledImage} tiledImage\n * @param {OpenSeadragon.Tile} tile\n * @param {Number} time\n */function loadTile(tiledImage,tile,time){tile.loading=true;tiledImage._imageLoader.addJob({src:tile.url,loadWithAjax:tile.loadWithAjax,ajaxHeaders:tile.ajaxHeaders,crossOriginPolicy:tiledImage.crossOriginPolicy,ajaxWithCredentials:tiledImage.ajaxWithCredentials,callback:function callback(image,errorMsg,tileRequest){onTileLoad(tiledImage,tile,time,image,errorMsg,tileRequest);},abort:function abort(){tile.loading=false;}});}/**\n * @private\n * @inner\n * Callback fired when a Tile's Image finished downloading.\n * @param {OpenSeadragon.TiledImage} tiledImage\n * @param {OpenSeadragon.Tile} tile\n * @param {Number} time\n * @param {Image} image\n * @param {String} errorMsg\n * @param {XMLHttpRequest} tileRequest\n */function onTileLoad(tiledImage,tile,time,image,errorMsg,tileRequest){if(!image){$.console.log(\"Tile %s failed to load: %s - error: %s\",tile,tile.url,errorMsg);/**\n         * Triggered when a tile fails to load.\n         *\n         * @event tile-load-failed\n         * @memberof OpenSeadragon.Viewer\n         * @type {object}\n         * @property {OpenSeadragon.Tile} tile - The tile that failed to load.\n         * @property {OpenSeadragon.TiledImage} tiledImage - The tiled image the tile belongs to.\n         * @property {number} time - The time in milliseconds when the tile load began.\n         * @property {string} message - The error message.\n         * @property {XMLHttpRequest} tileRequest - The XMLHttpRequest used to load the tile if available.\n         */tiledImage.viewer.raiseEvent(\"tile-load-failed\",{tile:tile,tiledImage:tiledImage,time:time,message:errorMsg,tileRequest:tileRequest});tile.loading=false;tile.exists=false;return;}if(time<tiledImage.lastResetTime){$.console.log(\"Ignoring tile %s loaded before reset: %s\",tile,tile.url);tile.loading=false;return;}var finish=function finish(){var cutoff=tiledImage.source.getClosestLevel();setTileLoaded(tiledImage,tile,image,cutoff,tileRequest);};// Check if we're mid-update; this can happen on IE8 because image load events for\n// cached images happen immediately there\nif(!tiledImage._midDraw){finish();}else{// Wait until after the update, in case caching unloads any tiles\nwindow.setTimeout(finish,1);}}/**\n * @private\n * @inner\n * @param {OpenSeadragon.TiledImage} tiledImage\n * @param {OpenSeadragon.Tile} tile\n * @param {Image} image\n * @param {Number} cutoff\n */function setTileLoaded(tiledImage,tile,image,cutoff,tileRequest){var increment=0;function getCompletionCallback(){increment++;return completionCallback;}function completionCallback(){increment--;if(increment===0){tile.loading=false;tile.loaded=true;if(!tile.context2D){tiledImage._tileCache.cacheTile({image:image,tile:tile,cutoff:cutoff,tiledImage:tiledImage});}tiledImage._needsDraw=true;}}/**\n     * Triggered when a tile has just been loaded in memory. That means that the\n     * image has been downloaded and can be modified before being drawn to the canvas.\n     *\n     * @event tile-loaded\n     * @memberof OpenSeadragon.Viewer\n     * @type {object}\n     * @property {Image} image - The image of the tile.\n     * @property {OpenSeadragon.TiledImage} tiledImage - The tiled image of the loaded tile.\n     * @property {OpenSeadragon.Tile} tile - The tile which has been loaded.\n     * @property {XMLHttpRequest} tiledImage - The AJAX request that loaded this tile (if applicable).\n     * @property {function} getCompletionCallback - A function giving a callback to call\n     * when the asynchronous processing of the image is done. The image will be\n     * marked as entirely loaded when the callback has been called once for each\n     * call to getCompletionCallback.\n     */tiledImage.viewer.raiseEvent(\"tile-loaded\",{tile:tile,tiledImage:tiledImage,tileRequest:tileRequest,image:image,getCompletionCallback:getCompletionCallback});// In case the completion callback is never called, we at least force it once.\ngetCompletionCallback()();}/**\n * @private\n * @inner\n * @param {OpenSeadragon.Tile} tile\n * @param {Boolean} overlap\n * @param {OpenSeadragon.Viewport} viewport\n * @param {OpenSeadragon.Point} viewportCenter\n * @param {Number} levelVisibility\n * @param {OpenSeadragon.TiledImage} tiledImage\n */function positionTile(tile,overlap,viewport,viewportCenter,levelVisibility,tiledImage){var boundsTL=tile.bounds.getTopLeft();boundsTL.x*=tiledImage._scaleSpring.current.value;boundsTL.y*=tiledImage._scaleSpring.current.value;boundsTL.x+=tiledImage._xSpring.current.value;boundsTL.y+=tiledImage._ySpring.current.value;var boundsSize=tile.bounds.getSize();boundsSize.x*=tiledImage._scaleSpring.current.value;boundsSize.y*=tiledImage._scaleSpring.current.value;var positionC=viewport.pixelFromPointNoRotate(boundsTL,true),positionT=viewport.pixelFromPointNoRotate(boundsTL,false),sizeC=viewport.deltaPixelsFromPointsNoRotate(boundsSize,true),sizeT=viewport.deltaPixelsFromPointsNoRotate(boundsSize,false),tileCenter=positionT.plus(sizeT.divide(2)),tileSquaredDistance=viewportCenter.squaredDistanceTo(tileCenter);if(!overlap){sizeC=sizeC.plus(new $.Point(1,1));}if(tile.isRightMost&&tiledImage.wrapHorizontal){sizeC.x+=0.75;// Otherwise Firefox and Safari show seams\n}if(tile.isBottomMost&&tiledImage.wrapVertical){sizeC.y+=0.75;// Otherwise Firefox and Safari show seams\n}tile.position=positionC;tile.size=sizeC;tile.squaredDistance=tileSquaredDistance;tile.visibility=levelVisibility;}/**\n * @private\n * @inner\n * Updates the opacity of a tile according to the time it has been on screen\n * to perform a fade-in.\n * Updates coverage once a tile is fully opaque.\n * Returns whether the fade-in has completed.\n *\n * @param {OpenSeadragon.TiledImage} tiledImage\n * @param {OpenSeadragon.Tile} tile\n * @param {Number} x\n * @param {Number} y\n * @param {Number} level\n * @param {Number} levelOpacity\n * @param {Number} currentTime\n * @returns {Boolean}\n */function blendTile(tiledImage,tile,x,y,level,levelOpacity,currentTime){var blendTimeMillis=1000*tiledImage.blendTime,deltaTime,opacity;if(!tile.blendStart){tile.blendStart=currentTime;}deltaTime=currentTime-tile.blendStart;opacity=blendTimeMillis?Math.min(1,deltaTime/blendTimeMillis):1;if(tiledImage.alwaysBlend){opacity*=levelOpacity;}tile.opacity=opacity;tiledImage.lastDrawn.push(tile);if(opacity===1){setCoverage(tiledImage.coverage,level,x,y,true);tiledImage._hasOpaqueTile=true;}else if(deltaTime<blendTimeMillis){return true;}return false;}/**\n * @private\n * @inner\n * Returns true if the given tile provides coverage to lower-level tiles of\n * lower resolution representing the same content. If neither x nor y is\n * given, returns true if the entire visible level provides coverage.\n *\n * Note that out-of-bounds tiles provide coverage in this sense, since\n * there's no content that they would need to cover. Tiles at non-existent\n * levels that are within the image bounds, however, do not.\n *\n * @param {Object} coverage - A '3d' dictionary [level][x][y] --> Boolean.\n * @param {Number} level - The resolution level of the tile.\n * @param {Number} x - The X position of the tile.\n * @param {Number} y - The Y position of the tile.\n * @returns {Boolean}\n */function providesCoverage(coverage,level,x,y){var rows,cols,i,j;if(!coverage[level]){return false;}if(x===undefined||y===undefined){rows=coverage[level];for(i in rows){if(Object.prototype.hasOwnProperty.call(rows,i)){cols=rows[i];for(j in cols){if(Object.prototype.hasOwnProperty.call(cols,j)&&!cols[j]){return false;}}}}return true;}return coverage[level][x]===undefined||coverage[level][x][y]===undefined||coverage[level][x][y]===true;}/**\n * @private\n * @inner\n * Returns true if the given tile is completely covered by higher-level\n * tiles of higher resolution representing the same content. If neither x\n * nor y is given, returns true if the entire visible level is covered.\n *\n * @param {Object} coverage - A '3d' dictionary [level][x][y] --> Boolean.\n * @param {Number} level - The resolution level of the tile.\n * @param {Number} x - The X position of the tile.\n * @param {Number} y - The Y position of the tile.\n * @returns {Boolean}\n */function isCovered(coverage,level,x,y){if(x===undefined||y===undefined){return providesCoverage(coverage,level+1);}else{return providesCoverage(coverage,level+1,2*x,2*y)&&providesCoverage(coverage,level+1,2*x,2*y+1)&&providesCoverage(coverage,level+1,2*x+1,2*y)&&providesCoverage(coverage,level+1,2*x+1,2*y+1);}}/**\n * @private\n * @inner\n * Sets whether the given tile provides coverage or not.\n *\n * @param {Object} coverage - A '3d' dictionary [level][x][y] --> Boolean.\n * @param {Number} level - The resolution level of the tile.\n * @param {Number} x - The X position of the tile.\n * @param {Number} y - The Y position of the tile.\n * @param {Boolean} covers - Whether the tile provides coverage.\n */function setCoverage(coverage,level,x,y,covers){if(!coverage[level]){$.console.warn(\"Setting coverage for a tile before its level's coverage has been reset: %s\",level);return;}if(!coverage[level][x]){coverage[level][x]={};}coverage[level][x][y]=covers;}/**\n * @private\n * @inner\n * Resets coverage information for the given level. This should be called\n * after every draw routine. Note that at the beginning of the next draw\n * routine, coverage for every visible tile should be explicitly set.\n *\n * @param {Object} coverage - A '3d' dictionary [level][x][y] --> Boolean.\n * @param {Number} level - The resolution level of tiles to completely reset.\n */function resetCoverage(coverage,level){coverage[level]={};}/**\n * @private\n * @inner\n * Determines whether the 'last best' tile for the area is better than the\n * tile in question.\n *\n * @param {OpenSeadragon.Tile} previousBest\n * @param {OpenSeadragon.Tile} tile\n * @returns {OpenSeadragon.Tile} The new best tile.\n */function compareTiles(previousBest,tile){if(!previousBest){return tile;}if(tile.visibility>previousBest.visibility){return tile;}else if(tile.visibility==previousBest.visibility){if(tile.squaredDistance<previousBest.squaredDistance){return tile;}}return previousBest;}/**\n * @private\n * @inner\n * Draws a TiledImage.\n * @param {OpenSeadragon.TiledImage} tiledImage\n * @param {OpenSeadragon.Tile[]} lastDrawn - An unordered list of Tiles drawn last frame.\n */function drawTiles(tiledImage,lastDrawn){if(tiledImage.opacity===0||lastDrawn.length===0&&!tiledImage.placeholderFillStyle){return;}var tile=lastDrawn[0];var useSketch;if(tile){useSketch=tiledImage.opacity<1||tiledImage.compositeOperation&&tiledImage.compositeOperation!=='source-over'||!tiledImage._isBottomItem()&&tile._hasTransparencyChannel();}var sketchScale;var sketchTranslate;var zoom=tiledImage.viewport.getZoom(true);var imageZoom=tiledImage.viewportToImageZoom(zoom);if(lastDrawn.length>1&&imageZoom>tiledImage.smoothTileEdgesMinZoom&&!tiledImage.iOSDevice&&tiledImage.getRotation(true)%360===0&&// TODO: support tile edge smoothing with tiled image rotation.\n$.supportsCanvas){// When zoomed in a lot (>100%) the tile edges are visible.\n// So we have to composite them at ~100% and scale them up together.\n// Note: Disabled on iOS devices per default as it causes a native crash\nuseSketch=true;sketchScale=tile.getScaleForEdgeSmoothing();sketchTranslate=tile.getTranslationForEdgeSmoothing(sketchScale,tiledImage._drawer.getCanvasSize(false),tiledImage._drawer.getCanvasSize(true));}var bounds;if(useSketch){if(!sketchScale){// Except when edge smoothing, we only clean the part of the\n// sketch canvas we are going to use for performance reasons.\nbounds=tiledImage.viewport.viewportToViewerElementRectangle(tiledImage.getClippedBounds(true)).getIntegerBoundingBox();if(tiledImage._drawer.viewer.viewport.getFlip()){if(tiledImage.viewport.degrees!==0||tiledImage.getRotation(true)%360!==0){bounds.x=tiledImage._drawer.viewer.container.clientWidth-(bounds.x+bounds.width);}}bounds=bounds.times($.pixelDensityRatio);}tiledImage._drawer._clear(true,bounds);}// When scaling, we must rotate only when blending the sketch canvas to\n// avoid interpolation\nif(!sketchScale){if(tiledImage.viewport.degrees!==0){tiledImage._drawer._offsetForRotation({degrees:tiledImage.viewport.degrees,useSketch:useSketch});}if(tiledImage.getRotation(true)%360!==0){tiledImage._drawer._offsetForRotation({degrees:tiledImage.getRotation(true),point:tiledImage.viewport.pixelFromPointNoRotate(tiledImage._getRotationPoint(true),true),useSketch:useSketch});}if(tiledImage.viewport.degrees===0&&tiledImage.getRotation(true)%360===0){if(tiledImage._drawer.viewer.viewport.getFlip()){tiledImage._drawer._flip();}}}var usedClip=false;if(tiledImage._clip){tiledImage._drawer.saveContext(useSketch);var box=tiledImage.imageToViewportRectangle(tiledImage._clip,true);box=box.rotate(-tiledImage.getRotation(true),tiledImage._getRotationPoint(true));var clipRect=tiledImage._drawer.viewportToDrawerRectangle(box);if(sketchScale){clipRect=clipRect.times(sketchScale);}if(sketchTranslate){clipRect=clipRect.translate(sketchTranslate);}tiledImage._drawer.setClip(clipRect,useSketch);usedClip=true;}if(tiledImage._croppingPolygons){tiledImage._drawer.saveContext(useSketch);try{var polygons=tiledImage._croppingPolygons.map(function(polygon){return polygon.map(function(coord){var point=tiledImage.imageToViewportCoordinates(coord.x,coord.y,true).rotate(-tiledImage.getRotation(true),tiledImage._getRotationPoint(true));var clipPoint=tiledImage._drawer.viewportCoordToDrawerCoord(point);if(sketchScale){clipPoint=clipPoint.times(sketchScale);}return clipPoint;});});tiledImage._drawer.clipWithPolygons(polygons,useSketch);}catch(e){$.console.error(e);}usedClip=true;}if(tiledImage.placeholderFillStyle&&tiledImage._hasOpaqueTile===false){var placeholderRect=tiledImage._drawer.viewportToDrawerRectangle(tiledImage.getBounds(true));if(sketchScale){placeholderRect=placeholderRect.times(sketchScale);}if(sketchTranslate){placeholderRect=placeholderRect.translate(sketchTranslate);}var fillStyle=null;if(typeof tiledImage.placeholderFillStyle===\"function\"){fillStyle=tiledImage.placeholderFillStyle(tiledImage,tiledImage._drawer.context);}else{fillStyle=tiledImage.placeholderFillStyle;}tiledImage._drawer.drawRectangle(placeholderRect,fillStyle,useSketch);}for(var i=lastDrawn.length-1;i>=0;i--){tile=lastDrawn[i];tiledImage._drawer.drawTile(tile,tiledImage._drawingHandler,useSketch,sketchScale,sketchTranslate);tile.beingDrawn=true;if(tiledImage.viewer){/**\n             * <em>- Needs documentation -</em>\n             *\n             * @event tile-drawn\n             * @memberof OpenSeadragon.Viewer\n             * @type {object}\n             * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.\n             * @property {OpenSeadragon.TiledImage} tiledImage - Which TiledImage is being drawn.\n             * @property {OpenSeadragon.Tile} tile\n             * @property {?Object} userData - Arbitrary subscriber-defined object.\n             */tiledImage.viewer.raiseEvent('tile-drawn',{tiledImage:tiledImage,tile:tile});}}if(usedClip){tiledImage._drawer.restoreContext(useSketch);}if(!sketchScale){if(tiledImage.getRotation(true)%360!==0){tiledImage._drawer._restoreRotationChanges(useSketch);}if(tiledImage.viewport.degrees!==0){tiledImage._drawer._restoreRotationChanges(useSketch);}}if(useSketch){if(sketchScale){if(tiledImage.viewport.degrees!==0){tiledImage._drawer._offsetForRotation({degrees:tiledImage.viewport.degrees,useSketch:false});}if(tiledImage.getRotation(true)%360!==0){tiledImage._drawer._offsetForRotation({degrees:tiledImage.getRotation(true),point:tiledImage.viewport.pixelFromPointNoRotate(tiledImage._getRotationPoint(true),true),useSketch:false});}}tiledImage._drawer.blendSketch({opacity:tiledImage.opacity,scale:sketchScale,translate:sketchTranslate,compositeOperation:tiledImage.compositeOperation,bounds:bounds});if(sketchScale){if(tiledImage.getRotation(true)%360!==0){tiledImage._drawer._restoreRotationChanges(false);}if(tiledImage.viewport.degrees!==0){tiledImage._drawer._restoreRotationChanges(false);}}}if(!sketchScale){if(tiledImage.viewport.degrees===0&&tiledImage.getRotation(true)%360===0){if(tiledImage._drawer.viewer.viewport.getFlip()){tiledImage._drawer._flip();}}}drawDebugInfo(tiledImage,lastDrawn);}/**\n * @private\n * @inner\n * Draws special debug information for a TiledImage if in debug mode.\n * @param {OpenSeadragon.TiledImage} tiledImage\n * @param {OpenSeadragon.Tile[]} lastDrawn - An unordered list of Tiles drawn last frame.\n */function drawDebugInfo(tiledImage,lastDrawn){if(tiledImage.debugMode){for(var i=lastDrawn.length-1;i>=0;i--){var tile=lastDrawn[i];try{tiledImage._drawer.drawDebugInfo(tile,lastDrawn.length,i,tiledImage);}catch(e){$.console.error(e);}}}}})(OpenSeadragon);/*\n * OpenSeadragon - TileCache\n *\n * Copyright (C) 2009 CodePlex Foundation\n * Copyright (C) 2010-2013 OpenSeadragon contributors\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * - Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * - Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * - Neither the name of CodePlex Foundation nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */(function($){// private class\nvar TileRecord=function TileRecord(options){$.console.assert(options,\"[TileCache.cacheTile] options is required\");$.console.assert(options.tile,\"[TileCache.cacheTile] options.tile is required\");$.console.assert(options.tiledImage,\"[TileCache.cacheTile] options.tiledImage is required\");this.tile=options.tile;this.tiledImage=options.tiledImage;};// private class\nvar ImageRecord=function ImageRecord(options){$.console.assert(options,\"[ImageRecord] options is required\");$.console.assert(options.image,\"[ImageRecord] options.image is required\");this._image=options.image;this._tiles=[];};ImageRecord.prototype={destroy:function destroy(){this._image=null;this._renderedContext=null;this._tiles=null;},getImage:function getImage(){return this._image;},getRenderedContext:function getRenderedContext(){if(!this._renderedContext){var canvas=document.createElement('canvas');canvas.width=this._image.width;canvas.height=this._image.height;this._renderedContext=canvas.getContext('2d');this._renderedContext.drawImage(this._image,0,0);//since we are caching the prerendered image on a canvas\n//allow the image to not be held in memory\nthis._image=null;}return this._renderedContext;},setRenderedContext:function setRenderedContext(renderedContext){$.console.error(\"ImageRecord.setRenderedContext is deprecated. \"+\"The rendered context should be created by the ImageRecord \"+\"itself when calling ImageRecord.getRenderedContext.\");this._renderedContext=renderedContext;},addTile:function addTile(tile){$.console.assert(tile,'[ImageRecord.addTile] tile is required');this._tiles.push(tile);},removeTile:function removeTile(tile){for(var i=0;i<this._tiles.length;i++){if(this._tiles[i]===tile){this._tiles.splice(i,1);return;}}$.console.warn('[ImageRecord.removeTile] trying to remove unknown tile',tile);},getTileCount:function getTileCount(){return this._tiles.length;}};/**\n * @class TileCache\n * @memberof OpenSeadragon\n * @classdesc Stores all the tiles displayed in a {@link OpenSeadragon.Viewer}.\n * You generally won't have to interact with the TileCache directly.\n * @param {Object} options - Configuration for this TileCache.\n * @param {Number} [options.maxImageCacheCount] - See maxImageCacheCount in\n * {@link OpenSeadragon.Options} for details.\n */$.TileCache=function(options){options=options||{};this._maxImageCacheCount=options.maxImageCacheCount||$.DEFAULT_SETTINGS.maxImageCacheCount;this._tilesLoaded=[];this._imagesLoaded=[];this._imagesLoadedCount=0;};/** @lends OpenSeadragon.TileCache.prototype */$.TileCache.prototype={/**\n     * @returns {Number} The total number of tiles that have been loaded by\n     * this TileCache.\n     */numTilesLoaded:function numTilesLoaded(){return this._tilesLoaded.length;},/**\n     * Caches the specified tile, removing an old tile if necessary to stay under the\n     * maxImageCacheCount specified on construction. Note that if multiple tiles reference\n     * the same image, there may be more tiles than maxImageCacheCount; the goal is to keep\n     * the number of images below that number. Note, as well, that even the number of images\n     * may temporarily surpass that number, but should eventually come back down to the max specified.\n     * @param {Object} options - Tile info.\n     * @param {OpenSeadragon.Tile} options.tile - The tile to cache.\n     * @param {String} options.tile.cacheKey - The unique key used to identify this tile in the cache.\n     * @param {Image} options.image - The image of the tile to cache.\n     * @param {OpenSeadragon.TiledImage} options.tiledImage - The TiledImage that owns that tile.\n     * @param {Number} [options.cutoff=0] - If adding this tile goes over the cache max count, this\n     * function will release an old tile. The cutoff option specifies a tile level at or below which\n     * tiles will not be released.\n     */cacheTile:function cacheTile(options){$.console.assert(options,\"[TileCache.cacheTile] options is required\");$.console.assert(options.tile,\"[TileCache.cacheTile] options.tile is required\");$.console.assert(options.tile.cacheKey,\"[TileCache.cacheTile] options.tile.cacheKey is required\");$.console.assert(options.tiledImage,\"[TileCache.cacheTile] options.tiledImage is required\");var cutoff=options.cutoff||0;var insertionIndex=this._tilesLoaded.length;var imageRecord=this._imagesLoaded[options.tile.cacheKey];if(!imageRecord){$.console.assert(options.image,\"[TileCache.cacheTile] options.image is required to create an ImageRecord\");imageRecord=this._imagesLoaded[options.tile.cacheKey]=new ImageRecord({image:options.image});this._imagesLoadedCount++;}imageRecord.addTile(options.tile);options.tile.cacheImageRecord=imageRecord;// Note that just because we're unloading a tile doesn't necessarily mean\n// we're unloading an image. With repeated calls it should sort itself out, though.\nif(this._imagesLoadedCount>this._maxImageCacheCount){var worstTile=null;var worstTileIndex=-1;var worstTileRecord=null;var prevTile,worstTime,worstLevel,prevTime,prevLevel,prevTileRecord;for(var i=this._tilesLoaded.length-1;i>=0;i--){prevTileRecord=this._tilesLoaded[i];prevTile=prevTileRecord.tile;if(prevTile.level<=cutoff||prevTile.beingDrawn){continue;}else if(!worstTile){worstTile=prevTile;worstTileIndex=i;worstTileRecord=prevTileRecord;continue;}prevTime=prevTile.lastTouchTime;worstTime=worstTile.lastTouchTime;prevLevel=prevTile.level;worstLevel=worstTile.level;if(prevTime<worstTime||prevTime==worstTime&&prevLevel>worstLevel){worstTile=prevTile;worstTileIndex=i;worstTileRecord=prevTileRecord;}}if(worstTile&&worstTileIndex>=0){this._unloadTile(worstTileRecord);insertionIndex=worstTileIndex;}}this._tilesLoaded[insertionIndex]=new TileRecord({tile:options.tile,tiledImage:options.tiledImage});},/**\n     * Clears all tiles associated with the specified tiledImage.\n     * @param {OpenSeadragon.TiledImage} tiledImage\n     */clearTilesFor:function clearTilesFor(tiledImage){$.console.assert(tiledImage,'[TileCache.clearTilesFor] tiledImage is required');var tileRecord;for(var i=0;i<this._tilesLoaded.length;++i){tileRecord=this._tilesLoaded[i];if(tileRecord.tiledImage===tiledImage){this._unloadTile(tileRecord);this._tilesLoaded.splice(i,1);i--;}}},// private\ngetImageRecord:function getImageRecord(cacheKey){$.console.assert(cacheKey,'[TileCache.getImageRecord] cacheKey is required');return this._imagesLoaded[cacheKey];},// private\n_unloadTile:function _unloadTile(tileRecord){$.console.assert(tileRecord,'[TileCache._unloadTile] tileRecord is required');var tile=tileRecord.tile;var tiledImage=tileRecord.tiledImage;tile.unload();tile.cacheImageRecord=null;var imageRecord=this._imagesLoaded[tile.cacheKey];imageRecord.removeTile(tile);if(!imageRecord.getTileCount()){imageRecord.destroy();delete this._imagesLoaded[tile.cacheKey];this._imagesLoadedCount--;}/**\n         * Triggered when a tile has just been unloaded from memory.\n         *\n         * @event tile-unloaded\n         * @memberof OpenSeadragon.Viewer\n         * @type {object}\n         * @property {OpenSeadragon.TiledImage} tiledImage - The tiled image of the unloaded tile.\n         * @property {OpenSeadragon.Tile} tile - The tile which has been unloaded.\n         */tiledImage.viewer.raiseEvent(\"tile-unloaded\",{tile:tile,tiledImage:tiledImage});}};})(OpenSeadragon);/*\n * OpenSeadragon - World\n *\n * Copyright (C) 2009 CodePlex Foundation\n * Copyright (C) 2010-2013 OpenSeadragon contributors\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * - Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * - Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * - Neither the name of CodePlex Foundation nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */(function($){/**\n * @class World\n * @memberof OpenSeadragon\n * @extends OpenSeadragon.EventSource\n * @classdesc Keeps track of all of the tiled images in the scene.\n * @param {Object} options - World options.\n * @param {OpenSeadragon.Viewer} options.viewer - The Viewer that owns this World.\n **/$.World=function(options){var _this=this;$.console.assert(options.viewer,\"[World] options.viewer is required\");$.EventSource.call(this);this.viewer=options.viewer;this._items=[];this._needsDraw=false;this._autoRefigureSizes=true;this._needsSizesFigured=false;this._delegatedFigureSizes=function(event){if(_this._autoRefigureSizes){_this._figureSizes();}else{_this._needsSizesFigured=true;}};this._figureSizes();};$.extend($.World.prototype,$.EventSource.prototype,/** @lends OpenSeadragon.World.prototype */{/**\n     * Add the specified item.\n     * @param {OpenSeadragon.TiledImage} item - The item to add.\n     * @param {Number} [options.index] - Index for the item. If not specified, goes at the top.\n     * @fires OpenSeadragon.World.event:add-item\n     * @fires OpenSeadragon.World.event:metrics-change\n     */addItem:function addItem(item,options){$.console.assert(item,\"[World.addItem] item is required\");$.console.assert(item instanceof $.TiledImage,\"[World.addItem] only TiledImages supported at this time\");options=options||{};if(options.index!==undefined){var index=Math.max(0,Math.min(this._items.length,options.index));this._items.splice(index,0,item);}else{this._items.push(item);}if(this._autoRefigureSizes){this._figureSizes();}else{this._needsSizesFigured=true;}this._needsDraw=true;item.addHandler('bounds-change',this._delegatedFigureSizes);item.addHandler('clip-change',this._delegatedFigureSizes);/**\n         * Raised when an item is added to the World.\n         * @event add-item\n         * @memberOf OpenSeadragon.World\n         * @type {object}\n         * @property {OpenSeadragon.Viewer} eventSource - A reference to the World which raised the event.\n         * @property {OpenSeadragon.TiledImage} item - The item that has been added.\n         * @property {?Object} userData - Arbitrary subscriber-defined object.\n         */this.raiseEvent('add-item',{item:item});},/**\n     * Get the item at the specified index.\n     * @param {Number} index - The item's index.\n     * @returns {OpenSeadragon.TiledImage} The item at the specified index.\n     */getItemAt:function getItemAt(index){$.console.assert(index!==undefined,\"[World.getItemAt] index is required\");return this._items[index];},/**\n     * Get the index of the given item or -1 if not present.\n     * @param {OpenSeadragon.TiledImage} item - The item.\n     * @returns {Number} The index of the item or -1 if not present.\n     */getIndexOfItem:function getIndexOfItem(item){$.console.assert(item,\"[World.getIndexOfItem] item is required\");return $.indexOf(this._items,item);},/**\n     * @returns {Number} The number of items used.\n     */getItemCount:function getItemCount(){return this._items.length;},/**\n     * Change the index of a item so that it appears over or under others.\n     * @param {OpenSeadragon.TiledImage} item - The item to move.\n     * @param {Number} index - The new index.\n     * @fires OpenSeadragon.World.event:item-index-change\n     */setItemIndex:function setItemIndex(item,index){$.console.assert(item,\"[World.setItemIndex] item is required\");$.console.assert(index!==undefined,\"[World.setItemIndex] index is required\");var oldIndex=this.getIndexOfItem(item);if(index>=this._items.length){throw new Error(\"Index bigger than number of layers.\");}if(index===oldIndex||oldIndex===-1){return;}this._items.splice(oldIndex,1);this._items.splice(index,0,item);this._needsDraw=true;/**\n         * Raised when the order of the indexes has been changed.\n         * @event item-index-change\n         * @memberOf OpenSeadragon.World\n         * @type {object}\n         * @property {OpenSeadragon.World} eventSource - A reference to the World which raised the event.\n         * @property {OpenSeadragon.TiledImage} item - The item whose index has\n         * been changed\n         * @property {Number} previousIndex - The previous index of the item\n         * @property {Number} newIndex - The new index of the item\n         * @property {?Object} userData - Arbitrary subscriber-defined object.\n         */this.raiseEvent('item-index-change',{item:item,previousIndex:oldIndex,newIndex:index});},/**\n     * Remove an item.\n     * @param {OpenSeadragon.TiledImage} item - The item to remove.\n     * @fires OpenSeadragon.World.event:remove-item\n     * @fires OpenSeadragon.World.event:metrics-change\n     */removeItem:function removeItem(item){$.console.assert(item,\"[World.removeItem] item is required\");var index=$.indexOf(this._items,item);if(index===-1){return;}item.removeHandler('bounds-change',this._delegatedFigureSizes);item.removeHandler('clip-change',this._delegatedFigureSizes);item.destroy();this._items.splice(index,1);this._figureSizes();this._needsDraw=true;this._raiseRemoveItem(item);},/**\n     * Remove all items.\n     * @fires OpenSeadragon.World.event:remove-item\n     * @fires OpenSeadragon.World.event:metrics-change\n     */removeAll:function removeAll(){// We need to make sure any pending images are canceled so the world items don't get messed up\nthis.viewer._cancelPendingImages();var item;var i;for(i=0;i<this._items.length;i++){item=this._items[i];item.removeHandler('bounds-change',this._delegatedFigureSizes);item.removeHandler('clip-change',this._delegatedFigureSizes);item.destroy();}var removedItems=this._items;this._items=[];this._figureSizes();this._needsDraw=true;for(i=0;i<removedItems.length;i++){item=removedItems[i];this._raiseRemoveItem(item);}},/**\n     * Clears all tiles and triggers updates for all items.\n     */resetItems:function resetItems(){for(var i=0;i<this._items.length;i++){this._items[i].reset();}},/**\n     * Updates (i.e. animates bounds of) all items.\n     */update:function update(){var animated=false;for(var i=0;i<this._items.length;i++){animated=this._items[i].update()||animated;}return animated;},/**\n     * Draws all items.\n     */draw:function draw(){for(var i=0;i<this._items.length;i++){this._items[i].draw();}this._needsDraw=false;},/**\n     * @returns {Boolean} true if any items need updating.\n     */needsDraw:function needsDraw(){for(var i=0;i<this._items.length;i++){if(this._items[i].needsDraw()){return true;}}return this._needsDraw;},/**\n     * @returns {OpenSeadragon.Rect} The smallest rectangle that encloses all items, in viewport coordinates.\n     */getHomeBounds:function getHomeBounds(){return this._homeBounds.clone();},/**\n     * To facilitate zoom constraints, we keep track of the pixel density of the\n     * densest item in the World (i.e. the item whose content size to viewport size\n     * ratio is the highest) and save it as this \"content factor\".\n     * @returns {Number} the number of content units per viewport unit.\n     */getContentFactor:function getContentFactor(){return this._contentFactor;},/**\n     * As a performance optimization, setting this flag to false allows the bounds-change event handler\n     * on tiledImages to skip calculations on the world bounds. If a lot of images are going to be positioned in\n     * rapid succession, this is a good idea. When finished, setAutoRefigureSizes should be called with true\n     * or the system may behave oddly.\n     * @param {Boolean} [value] The value to which to set the flag.\n     */setAutoRefigureSizes:function setAutoRefigureSizes(value){this._autoRefigureSizes=value;if(value&this._needsSizesFigured){this._figureSizes();this._needsSizesFigured=false;}},/**\n     * Arranges all of the TiledImages with the specified settings.\n     * @param {Object} options - Specifies how to arrange.\n     * @param {Boolean} [options.immediately=false] - Whether to animate to the new arrangement.\n     * @param {String} [options.layout] - See collectionLayout in {@link OpenSeadragon.Options}.\n     * @param {Number} [options.rows] - See collectionRows in {@link OpenSeadragon.Options}.\n     * @param {Number} [options.columns] - See collectionColumns in {@link OpenSeadragon.Options}.\n     * @param {Number} [options.tileSize] - See collectionTileSize in {@link OpenSeadragon.Options}.\n     * @param {Number} [options.tileMargin] - See collectionTileMargin in {@link OpenSeadragon.Options}.\n     * @fires OpenSeadragon.World.event:metrics-change\n     */arrange:function arrange(options){options=options||{};var immediately=options.immediately||false;var layout=options.layout||$.DEFAULT_SETTINGS.collectionLayout;var rows=options.rows||$.DEFAULT_SETTINGS.collectionRows;var columns=options.columns||$.DEFAULT_SETTINGS.collectionColumns;var tileSize=options.tileSize||$.DEFAULT_SETTINGS.collectionTileSize;var tileMargin=options.tileMargin||$.DEFAULT_SETTINGS.collectionTileMargin;var increment=tileSize+tileMargin;var wrap;if(!options.rows&&columns){wrap=columns;}else{wrap=Math.ceil(this._items.length/rows);}var x=0;var y=0;var item,box,width,height,position;this.setAutoRefigureSizes(false);for(var i=0;i<this._items.length;i++){if(i&&i%wrap===0){if(layout==='horizontal'){y+=increment;x=0;}else{x+=increment;y=0;}}item=this._items[i];box=item.getBounds();if(box.width>box.height){width=tileSize;}else{width=tileSize*(box.width/box.height);}height=width*(box.height/box.width);position=new $.Point(x+(tileSize-width)/2,y+(tileSize-height)/2);item.setPosition(position,immediately);item.setWidth(width,immediately);if(layout==='horizontal'){x+=increment;}else{y+=increment;}}this.setAutoRefigureSizes(true);},// private\n_figureSizes:function _figureSizes(){var oldHomeBounds=this._homeBounds?this._homeBounds.clone():null;var oldContentSize=this._contentSize?this._contentSize.clone():null;var oldContentFactor=this._contentFactor||0;if(!this._items.length){this._homeBounds=new $.Rect(0,0,1,1);this._contentSize=new $.Point(1,1);this._contentFactor=1;}else{var item=this._items[0];var bounds=item.getBounds();this._contentFactor=item.getContentSize().x/bounds.width;var clippedBounds=item.getClippedBounds().getBoundingBox();var left=clippedBounds.x;var top=clippedBounds.y;var right=clippedBounds.x+clippedBounds.width;var bottom=clippedBounds.y+clippedBounds.height;for(var i=1;i<this._items.length;i++){item=this._items[i];bounds=item.getBounds();this._contentFactor=Math.max(this._contentFactor,item.getContentSize().x/bounds.width);clippedBounds=item.getClippedBounds().getBoundingBox();left=Math.min(left,clippedBounds.x);top=Math.min(top,clippedBounds.y);right=Math.max(right,clippedBounds.x+clippedBounds.width);bottom=Math.max(bottom,clippedBounds.y+clippedBounds.height);}this._homeBounds=new $.Rect(left,top,right-left,bottom-top);this._contentSize=new $.Point(this._homeBounds.width*this._contentFactor,this._homeBounds.height*this._contentFactor);}if(this._contentFactor!==oldContentFactor||!this._homeBounds.equals(oldHomeBounds)||!this._contentSize.equals(oldContentSize)){/**\n             * Raised when the home bounds or content factor change.\n             * @event metrics-change\n             * @memberOf OpenSeadragon.World\n             * @type {object}\n             * @property {OpenSeadragon.World} eventSource - A reference to the World which raised the event.\n             * @property {?Object} userData - Arbitrary subscriber-defined object.\n             */this.raiseEvent('metrics-change',{});}},// private\n_raiseRemoveItem:function _raiseRemoveItem(item){/**\n         * Raised when an item is removed.\n         * @event remove-item\n         * @memberOf OpenSeadragon.World\n         * @type {object}\n         * @property {OpenSeadragon.World} eventSource - A reference to the World which raised the event.\n         * @property {OpenSeadragon.TiledImage} item - The item's underlying item.\n         * @property {?Object} userData - Arbitrary subscriber-defined object.\n         */this.raiseEvent('remove-item',{item:item});}});})(OpenSeadragon);;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(OpenSeadragon,\"OpenSeadragon\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/openseadragon/build/openseadragon/openseadragon.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/openseadragon/build/openseadragon/openseadragon.js\n");

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};// shim for using process in browser\nvar process=module.exports={};// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\nvar cachedSetTimeout;var cachedClearTimeout;function defaultSetTimout(){throw new Error('setTimeout has not been defined');}function defaultClearTimeout(){throw new Error('clearTimeout has not been defined');}(function(){try{if(typeof setTimeout==='function'){cachedSetTimeout=setTimeout;}else{cachedSetTimeout=defaultSetTimout;}}catch(e){cachedSetTimeout=defaultSetTimout;}try{if(typeof clearTimeout==='function'){cachedClearTimeout=clearTimeout;}else{cachedClearTimeout=defaultClearTimeout;}}catch(e){cachedClearTimeout=defaultClearTimeout;}})();function runTimeout(fun){if(cachedSetTimeout===setTimeout){//normal enviroments in sane situations\nreturn setTimeout(fun,0);}// if setTimeout wasn't available but was latter defined\nif((cachedSetTimeout===defaultSetTimout||!cachedSetTimeout)&&setTimeout){cachedSetTimeout=setTimeout;return setTimeout(fun,0);}try{// when when somebody has screwed with setTimeout but no I.E. maddness\nreturn cachedSetTimeout(fun,0);}catch(e){try{// When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\nreturn cachedSetTimeout.call(null,fun,0);}catch(e){// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\nreturn cachedSetTimeout.call(this,fun,0);}}}function runClearTimeout(marker){if(cachedClearTimeout===clearTimeout){//normal enviroments in sane situations\nreturn clearTimeout(marker);}// if clearTimeout wasn't available but was latter defined\nif((cachedClearTimeout===defaultClearTimeout||!cachedClearTimeout)&&clearTimeout){cachedClearTimeout=clearTimeout;return clearTimeout(marker);}try{// when when somebody has screwed with setTimeout but no I.E. maddness\nreturn cachedClearTimeout(marker);}catch(e){try{// When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\nreturn cachedClearTimeout.call(null,marker);}catch(e){// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n// Some versions of I.E. have different rules for clearTimeout vs setTimeout\nreturn cachedClearTimeout.call(this,marker);}}}var queue=[];var draining=false;var currentQueue;var queueIndex=-1;function cleanUpNextTick(){if(!draining||!currentQueue){return;}draining=false;if(currentQueue.length){queue=currentQueue.concat(queue);}else{queueIndex=-1;}if(queue.length){drainQueue();}}function drainQueue(){if(draining){return;}var timeout=runTimeout(cleanUpNextTick);draining=true;var len=queue.length;while(len){currentQueue=queue;queue=[];while(++queueIndex<len){if(currentQueue){currentQueue[queueIndex].run();}}queueIndex=-1;len=queue.length;}currentQueue=null;draining=false;runClearTimeout(timeout);}process.nextTick=function(fun){var args=new Array(arguments.length-1);if(arguments.length>1){for(var i=1;i<arguments.length;i++){args[i-1]=arguments[i];}}queue.push(new Item(fun,args));if(queue.length===1&&!draining){runTimeout(drainQueue);}};// v8 likes predictible objects\nfunction Item(fun,array){this.fun=fun;this.array=array;}Item.prototype.run=function(){this.fun.apply(null,this.array);};process.title='browser';process.browser=true;process.env={};process.argv=[];process.version='';// empty string to avoid regexp issues\nprocess.versions={};function noop(){}process.on=noop;process.addListener=noop;process.once=noop;process.off=noop;process.removeListener=noop;process.removeAllListeners=noop;process.emit=noop;process.prependListener=noop;process.prependOnceListener=noop;process.listeners=function(name){return[];};process.binding=function(name){throw new Error('process.binding is not supported');};process.cwd=function(){return'/';};process.chdir=function(dir){throw new Error('process.chdir is not supported');};process.umask=function(){return 0;};;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(process,\"process\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/process/browser.js\");reactHotLoader.register(cachedSetTimeout,\"cachedSetTimeout\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/process/browser.js\");reactHotLoader.register(cachedClearTimeout,\"cachedClearTimeout\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/process/browser.js\");reactHotLoader.register(defaultSetTimout,\"defaultSetTimout\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/process/browser.js\");reactHotLoader.register(defaultClearTimeout,\"defaultClearTimeout\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/process/browser.js\");reactHotLoader.register(runTimeout,\"runTimeout\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/process/browser.js\");reactHotLoader.register(runClearTimeout,\"runClearTimeout\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/process/browser.js\");reactHotLoader.register(queue,\"queue\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/process/browser.js\");reactHotLoader.register(draining,\"draining\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/process/browser.js\");reactHotLoader.register(currentQueue,\"currentQueue\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/process/browser.js\");reactHotLoader.register(queueIndex,\"queueIndex\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/process/browser.js\");reactHotLoader.register(cleanUpNextTick,\"cleanUpNextTick\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/process/browser.js\");reactHotLoader.register(drainQueue,\"drainQueue\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/process/browser.js\");reactHotLoader.register(Item,\"Item\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/process/browser.js\");reactHotLoader.register(noop,\"noop\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/process/browser.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/process/browser.js\n");

/***/ }),

/***/ "./node_modules/react-copy-to-clipboard/lib/Component.js":
/*!***************************************************************!*\
  !*** ./node_modules/react-copy-to-clipboard/lib/Component.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};Object.defineProperty(exports,\"__esModule\",{value:true});exports.CopyToClipboard=void 0;var _react=_interopRequireDefault(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));var _copyToClipboard=_interopRequireDefault(__webpack_require__(/*! copy-to-clipboard */ \"./node_modules/copy-to-clipboard/index.js\"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{\"default\":obj};}function _typeof(obj){if(typeof Symbol===\"function\"&&typeof Symbol.iterator===\"symbol\"){_typeof=function _typeof(obj){return typeof obj;};}else{_typeof=function _typeof(obj){return obj&&typeof Symbol===\"function\"&&obj.constructor===Symbol&&obj!==Symbol.prototype?\"symbol\":typeof obj;};}return _typeof(obj);}function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(source,true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(source).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}function _objectWithoutProperties(source,excluded){if(source==null)return{};var target=_objectWithoutPropertiesLoose(source,excluded);var key,i;if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++){key=sourceSymbolKeys[i];if(excluded.indexOf(key)>=0)continue;if(!Object.prototype.propertyIsEnumerable.call(source,key))continue;target[key]=source[key];}}return target;}function _objectWithoutPropertiesLoose(source,excluded){if(source==null)return{};var target={};var sourceKeys=Object.keys(source);var key,i;for(i=0;i<sourceKeys.length;i++){key=sourceKeys[i];if(excluded.indexOf(key)>=0)continue;target[key]=source[key];}return target;}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}function _createClass(Constructor,protoProps,staticProps){if(protoProps)_defineProperties(Constructor.prototype,protoProps);if(staticProps)_defineProperties(Constructor,staticProps);return Constructor;}function _possibleConstructorReturn(self,call){if(call&&(_typeof(call)===\"object\"||typeof call===\"function\")){return call;}return _assertThisInitialized(self);}function _getPrototypeOf(o){_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(o){return o.__proto__||Object.getPrototypeOf(o);};return _getPrototypeOf(o);}function _assertThisInitialized(self){if(self===void 0){throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return self;}function _inherits(subClass,superClass){if(typeof superClass!==\"function\"&&superClass!==null){throw new TypeError(\"Super expression must either be null or a function\");}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:true,configurable:true}});if(superClass)_setPrototypeOf(subClass,superClass);}function _setPrototypeOf(o,p){_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(o,p){o.__proto__=p;return o;};return _setPrototypeOf(o,p);}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}var CopyToClipboard=/*#__PURE__*/function(_React$PureComponent){_inherits(CopyToClipboard,_React$PureComponent);function CopyToClipboard(){var _getPrototypeOf2;var _this;_classCallCheck(this,CopyToClipboard);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_possibleConstructorReturn(this,(_getPrototypeOf2=_getPrototypeOf(CopyToClipboard)).call.apply(_getPrototypeOf2,[this].concat(args)));_defineProperty(_assertThisInitialized(_this),\"onClick\",function(event){var _this$props=_this.props,text=_this$props.text,onCopy=_this$props.onCopy,children=_this$props.children,options=_this$props.options;var elem=_react[\"default\"].Children.only(children);var result=(0,_copyToClipboard[\"default\"])(text,options);if(onCopy){onCopy(text,result);}// Bypass onClick if it was present\nif(elem&&elem.props&&typeof elem.props.onClick==='function'){elem.props.onClick(event);}});return _this;}_createClass(CopyToClipboard,[{key:\"render\",value:function render(){var _this$props2=this.props,_text=_this$props2.text,_onCopy=_this$props2.onCopy,_options=_this$props2.options,children=_this$props2.children,props=_objectWithoutProperties(_this$props2,[\"text\",\"onCopy\",\"options\",\"children\"]);var elem=_react[\"default\"].Children.only(children);return _react[\"default\"].cloneElement(elem,_objectSpread({},props,{onClick:this.onClick}));}}]);return CopyToClipboard;}(_react[\"default\"].PureComponent);exports.CopyToClipboard=CopyToClipboard;_defineProperty(CopyToClipboard,\"defaultProps\",{onCopy:undefined,options:undefined});;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(_react,\"_react\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-copy-to-clipboard/lib/Component.js\");reactHotLoader.register(_copyToClipboard,\"_copyToClipboard\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-copy-to-clipboard/lib/Component.js\");reactHotLoader.register(_interopRequireDefault,\"_interopRequireDefault\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-copy-to-clipboard/lib/Component.js\");reactHotLoader.register(_typeof,\"_typeof\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-copy-to-clipboard/lib/Component.js\");reactHotLoader.register(ownKeys,\"ownKeys\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-copy-to-clipboard/lib/Component.js\");reactHotLoader.register(_objectSpread,\"_objectSpread\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-copy-to-clipboard/lib/Component.js\");reactHotLoader.register(_objectWithoutProperties,\"_objectWithoutProperties\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-copy-to-clipboard/lib/Component.js\");reactHotLoader.register(_objectWithoutPropertiesLoose,\"_objectWithoutPropertiesLoose\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-copy-to-clipboard/lib/Component.js\");reactHotLoader.register(_classCallCheck,\"_classCallCheck\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-copy-to-clipboard/lib/Component.js\");reactHotLoader.register(_defineProperties,\"_defineProperties\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-copy-to-clipboard/lib/Component.js\");reactHotLoader.register(_createClass,\"_createClass\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-copy-to-clipboard/lib/Component.js\");reactHotLoader.register(_possibleConstructorReturn,\"_possibleConstructorReturn\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-copy-to-clipboard/lib/Component.js\");reactHotLoader.register(_getPrototypeOf,\"_getPrototypeOf\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-copy-to-clipboard/lib/Component.js\");reactHotLoader.register(_assertThisInitialized,\"_assertThisInitialized\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-copy-to-clipboard/lib/Component.js\");reactHotLoader.register(_inherits,\"_inherits\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-copy-to-clipboard/lib/Component.js\");reactHotLoader.register(_setPrototypeOf,\"_setPrototypeOf\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-copy-to-clipboard/lib/Component.js\");reactHotLoader.register(_defineProperty,\"_defineProperty\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-copy-to-clipboard/lib/Component.js\");reactHotLoader.register(CopyToClipboard,\"CopyToClipboard\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-copy-to-clipboard/lib/Component.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWNvcHktdG8tY2xpcGJvYXJkL2xpYi9Db21wb25lbnQuanM/YWM3YSJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkNvcHlUb0NsaXBib2FyZCIsIl9yZWFjdCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2NvcHlUb0NsaXBib2FyZCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJfdHlwZW9mIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJjb25zdHJ1Y3RvciIsInByb3RvdHlwZSIsIm93bktleXMiLCJvYmplY3QiLCJlbnVtZXJhYmxlT25seSIsImtleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJzeW1ib2xzIiwiZmlsdGVyIiwic3ltIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsInB1c2giLCJhcHBseSIsIl9vYmplY3RTcHJlYWQiLCJ0YXJnZXQiLCJpIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwiZm9yRWFjaCIsImtleSIsIl9kZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwiZXhjbHVkZWQiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSIsInNvdXJjZVN5bWJvbEtleXMiLCJpbmRleE9mIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJjYWxsIiwic291cmNlS2V5cyIsIl9jbGFzc0NhbGxDaGVjayIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJUeXBlRXJyb3IiLCJfZGVmaW5lUHJvcGVydGllcyIsInByb3BzIiwiZGVzY3JpcHRvciIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiX2NyZWF0ZUNsYXNzIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJzZWxmIiwiX2Fzc2VydFRoaXNJbml0aWFsaXplZCIsIl9nZXRQcm90b3R5cGVPZiIsIm8iLCJzZXRQcm90b3R5cGVPZiIsImdldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiUmVmZXJlbmNlRXJyb3IiLCJfaW5oZXJpdHMiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJjcmVhdGUiLCJfc2V0UHJvdG90eXBlT2YiLCJwIiwiX1JlYWN0JFB1cmVDb21wb25lbnQiLCJfZ2V0UHJvdG90eXBlT2YyIiwiX3RoaXMiLCJfbGVuIiwiYXJncyIsIkFycmF5IiwiX2tleSIsImNvbmNhdCIsImV2ZW50IiwiX3RoaXMkcHJvcHMiLCJ0ZXh0Iiwib25Db3B5IiwiY2hpbGRyZW4iLCJvcHRpb25zIiwiZWxlbSIsIkNoaWxkcmVuIiwib25seSIsInJlc3VsdCIsIm9uQ2xpY2siLCJyZW5kZXIiLCJfdGhpcyRwcm9wczIiLCJfdGV4dCIsIl9vbkNvcHkiLCJfb3B0aW9ucyIsImNsb25lRWxlbWVudCIsIlB1cmVDb21wb25lbnQiLCJ1bmRlZmluZWQiXSwibWFwcGluZ3MiOiJBQUFBLDhDLG9SQUVBQSxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLENBQStCLFlBQS9CLENBQTZDLENBQzNDQyxLQUFLLENBQUUsSUFEb0MsQ0FBN0MsRUFHQUQsT0FBTyxDQUFDRSxlQUFSLENBQTBCLElBQUssRUFBL0IsQ0FFQSxHQUFJQyxPQUFNLENBQUdDLHNCQUFzQixDQUFDQyxtQkFBTyxDQUFDLDRDQUFELENBQVIsQ0FBbkMsQ0FFQSxHQUFJQyxpQkFBZ0IsQ0FBR0Ysc0JBQXNCLENBQUNDLG1CQUFPLENBQUMsb0VBQUQsQ0FBUixDQUE3QyxDQUVBLFFBQVNELHVCQUFULENBQWdDRyxHQUFoQyxDQUFxQyxDQUFFLE1BQU9BLElBQUcsRUFBSUEsR0FBRyxDQUFDQyxVQUFYLENBQXdCRCxHQUF4QixDQUE4QixDQUFFLFVBQVdBLEdBQWIsQ0FBckMsQ0FBMEQsQ0FFakcsUUFBU0UsUUFBVCxDQUFpQkYsR0FBakIsQ0FBc0IsQ0FBRSxHQUFJLE1BQU9HLE9BQVAsR0FBa0IsVUFBbEIsRUFBZ0MsTUFBT0EsT0FBTSxDQUFDQyxRQUFkLEdBQTJCLFFBQS9ELENBQXlFLENBQUVGLE9BQU8sQ0FBRyxRQUFTQSxRQUFULENBQWlCRixHQUFqQixDQUFzQixDQUFFLE1BQU8sT0FBT0EsSUFBZCxDQUFvQixDQUF0RCxDQUF5RCxDQUFwSSxJQUEwSSxDQUFFRSxPQUFPLENBQUcsUUFBU0EsUUFBVCxDQUFpQkYsR0FBakIsQ0FBc0IsQ0FBRSxNQUFPQSxJQUFHLEVBQUksTUFBT0csT0FBUCxHQUFrQixVQUF6QixFQUF1Q0gsR0FBRyxDQUFDSyxXQUFKLEdBQW9CRixNQUEzRCxFQUFxRUgsR0FBRyxHQUFLRyxNQUFNLENBQUNHLFNBQXBGLENBQWdHLFFBQWhHLENBQTJHLE1BQU9OLElBQXpILENBQStILENBQWpLLENBQW9LLENBQUMsTUFBT0UsUUFBTyxDQUFDRixHQUFELENBQWQsQ0FBc0IsQ0FFL1YsUUFBU08sUUFBVCxDQUFpQkMsTUFBakIsQ0FBeUJDLGNBQXpCLENBQXlDLENBQUUsR0FBSUMsS0FBSSxDQUFHbkIsTUFBTSxDQUFDbUIsSUFBUCxDQUFZRixNQUFaLENBQVgsQ0FBZ0MsR0FBSWpCLE1BQU0sQ0FBQ29CLHFCQUFYLENBQWtDLENBQUUsR0FBSUMsUUFBTyxDQUFHckIsTUFBTSxDQUFDb0IscUJBQVAsQ0FBNkJILE1BQTdCLENBQWQsQ0FBb0QsR0FBSUMsY0FBSixDQUFvQkcsT0FBTyxDQUFHQSxPQUFPLENBQUNDLE1BQVIsQ0FBZSxTQUFVQyxHQUFWLENBQWUsQ0FBRSxNQUFPdkIsT0FBTSxDQUFDd0Isd0JBQVAsQ0FBZ0NQLE1BQWhDLENBQXdDTSxHQUF4QyxFQUE2Q0UsVUFBcEQsQ0FBaUUsQ0FBakcsQ0FBVixDQUE4R04sSUFBSSxDQUFDTyxJQUFMLENBQVVDLEtBQVYsQ0FBZ0JSLElBQWhCLENBQXNCRSxPQUF0QixFQUFpQyxDQUFDLE1BQU9GLEtBQVAsQ0FBYyxDQUVyVixRQUFTUyxjQUFULENBQXVCQyxNQUF2QixDQUErQixDQUFFLElBQUssR0FBSUMsRUFBQyxDQUFHLENBQWIsQ0FBZ0JBLENBQUMsQ0FBR0MsU0FBUyxDQUFDQyxNQUE5QixDQUFzQ0YsQ0FBQyxFQUF2QyxDQUEyQyxDQUFFLEdBQUlHLE9BQU0sQ0FBR0YsU0FBUyxDQUFDRCxDQUFELENBQVQsRUFBZ0IsSUFBaEIsQ0FBdUJDLFNBQVMsQ0FBQ0QsQ0FBRCxDQUFoQyxDQUFzQyxFQUFuRCxDQUF1RCxHQUFJQSxDQUFDLENBQUcsQ0FBUixDQUFXLENBQUVkLE9BQU8sQ0FBQ2lCLE1BQUQsQ0FBUyxJQUFULENBQVAsQ0FBc0JDLE9BQXRCLENBQThCLFNBQVVDLEdBQVYsQ0FBZSxDQUFFQyxlQUFlLENBQUNQLE1BQUQsQ0FBU00sR0FBVCxDQUFjRixNQUFNLENBQUNFLEdBQUQsQ0FBcEIsQ0FBZixDQUE0QyxDQUEzRixFQUErRixDQUE1RyxJQUFrSCxJQUFJbkMsTUFBTSxDQUFDcUMseUJBQVgsQ0FBc0MsQ0FBRXJDLE1BQU0sQ0FBQ3NDLGdCQUFQLENBQXdCVCxNQUF4QixDQUFnQzdCLE1BQU0sQ0FBQ3FDLHlCQUFQLENBQWlDSixNQUFqQyxDQUFoQyxFQUE0RSxDQUFwSCxJQUEwSCxDQUFFakIsT0FBTyxDQUFDaUIsTUFBRCxDQUFQLENBQWdCQyxPQUFoQixDQUF3QixTQUFVQyxHQUFWLENBQWUsQ0FBRW5DLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQjRCLE1BQXRCLENBQThCTSxHQUE5QixDQUFtQ25DLE1BQU0sQ0FBQ3dCLHdCQUFQLENBQWdDUyxNQUFoQyxDQUF3Q0UsR0FBeEMsQ0FBbkMsRUFBbUYsQ0FBNUgsRUFBZ0ksQ0FBRSxDQUFDLE1BQU9OLE9BQVAsQ0FBZ0IsQ0FFdGdCLFFBQVNVLHlCQUFULENBQWtDTixNQUFsQyxDQUEwQ08sUUFBMUMsQ0FBb0QsQ0FBRSxHQUFJUCxNQUFNLEVBQUksSUFBZCxDQUFvQixNQUFPLEVBQVAsQ0FBVyxHQUFJSixPQUFNLENBQUdZLDZCQUE2QixDQUFDUixNQUFELENBQVNPLFFBQVQsQ0FBMUMsQ0FBOEQsR0FBSUwsSUFBSixDQUFTTCxDQUFULENBQVksR0FBSTlCLE1BQU0sQ0FBQ29CLHFCQUFYLENBQWtDLENBQUUsR0FBSXNCLGlCQUFnQixDQUFHMUMsTUFBTSxDQUFDb0IscUJBQVAsQ0FBNkJhLE1BQTdCLENBQXZCLENBQTZELElBQUtILENBQUMsQ0FBRyxDQUFULENBQVlBLENBQUMsQ0FBR1ksZ0JBQWdCLENBQUNWLE1BQWpDLENBQXlDRixDQUFDLEVBQTFDLENBQThDLENBQUVLLEdBQUcsQ0FBR08sZ0JBQWdCLENBQUNaLENBQUQsQ0FBdEIsQ0FBMkIsR0FBSVUsUUFBUSxDQUFDRyxPQUFULENBQWlCUixHQUFqQixHQUF5QixDQUE3QixDQUFnQyxTQUFVLEdBQUksQ0FBQ25DLE1BQU0sQ0FBQ2UsU0FBUCxDQUFpQjZCLG9CQUFqQixDQUFzQ0MsSUFBdEMsQ0FBMkNaLE1BQTNDLENBQW1ERSxHQUFuRCxDQUFMLENBQThELFNBQVVOLE1BQU0sQ0FBQ00sR0FBRCxDQUFOLENBQWNGLE1BQU0sQ0FBQ0UsR0FBRCxDQUFwQixDQUE0QixDQUFFLENBQUMsTUFBT04sT0FBUCxDQUFnQixDQUU1ZSxRQUFTWSw4QkFBVCxDQUF1Q1IsTUFBdkMsQ0FBK0NPLFFBQS9DLENBQXlELENBQUUsR0FBSVAsTUFBTSxFQUFJLElBQWQsQ0FBb0IsTUFBTyxFQUFQLENBQVcsR0FBSUosT0FBTSxDQUFHLEVBQWIsQ0FBaUIsR0FBSWlCLFdBQVUsQ0FBRzlDLE1BQU0sQ0FBQ21CLElBQVAsQ0FBWWMsTUFBWixDQUFqQixDQUFzQyxHQUFJRSxJQUFKLENBQVNMLENBQVQsQ0FBWSxJQUFLQSxDQUFDLENBQUcsQ0FBVCxDQUFZQSxDQUFDLENBQUdnQixVQUFVLENBQUNkLE1BQTNCLENBQW1DRixDQUFDLEVBQXBDLENBQXdDLENBQUVLLEdBQUcsQ0FBR1csVUFBVSxDQUFDaEIsQ0FBRCxDQUFoQixDQUFxQixHQUFJVSxRQUFRLENBQUNHLE9BQVQsQ0FBaUJSLEdBQWpCLEdBQXlCLENBQTdCLENBQWdDLFNBQVVOLE1BQU0sQ0FBQ00sR0FBRCxDQUFOLENBQWNGLE1BQU0sQ0FBQ0UsR0FBRCxDQUFwQixDQUE0QixDQUFDLE1BQU9OLE9BQVAsQ0FBZ0IsQ0FFblQsUUFBU2tCLGdCQUFULENBQXlCQyxRQUF6QixDQUFtQ0MsV0FBbkMsQ0FBZ0QsQ0FBRSxHQUFJLEVBQUVELFFBQVEsV0FBWUMsWUFBdEIsQ0FBSixDQUF3QyxDQUFFLEtBQU0sSUFBSUMsVUFBSixDQUFjLG1DQUFkLENBQU4sQ0FBMkQsQ0FBRSxDQUV6SixRQUFTQyxrQkFBVCxDQUEyQnRCLE1BQTNCLENBQW1DdUIsS0FBbkMsQ0FBMEMsQ0FBRSxJQUFLLEdBQUl0QixFQUFDLENBQUcsQ0FBYixDQUFnQkEsQ0FBQyxDQUFHc0IsS0FBSyxDQUFDcEIsTUFBMUIsQ0FBa0NGLENBQUMsRUFBbkMsQ0FBdUMsQ0FBRSxHQUFJdUIsV0FBVSxDQUFHRCxLQUFLLENBQUN0QixDQUFELENBQXRCLENBQTJCdUIsVUFBVSxDQUFDNUIsVUFBWCxDQUF3QjRCLFVBQVUsQ0FBQzVCLFVBQVgsRUFBeUIsS0FBakQsQ0FBd0Q0QixVQUFVLENBQUNDLFlBQVgsQ0FBMEIsSUFBMUIsQ0FBZ0MsR0FBSSxTQUFXRCxXQUFmLENBQTJCQSxVQUFVLENBQUNFLFFBQVgsQ0FBc0IsSUFBdEIsQ0FBNEJ2RCxNQUFNLENBQUNDLGNBQVAsQ0FBc0I0QixNQUF0QixDQUE4QndCLFVBQVUsQ0FBQ2xCLEdBQXpDLENBQThDa0IsVUFBOUMsRUFBNEQsQ0FBRSxDQUU3VCxRQUFTRyxhQUFULENBQXNCUCxXQUF0QixDQUFtQ1EsVUFBbkMsQ0FBK0NDLFdBQS9DLENBQTRELENBQUUsR0FBSUQsVUFBSixDQUFnQk4saUJBQWlCLENBQUNGLFdBQVcsQ0FBQ2xDLFNBQWIsQ0FBd0IwQyxVQUF4QixDQUFqQixDQUFzRCxHQUFJQyxXQUFKLENBQWlCUCxpQkFBaUIsQ0FBQ0YsV0FBRCxDQUFjUyxXQUFkLENBQWpCLENBQTZDLE1BQU9ULFlBQVAsQ0FBcUIsQ0FFdk4sUUFBU1UsMkJBQVQsQ0FBb0NDLElBQXBDLENBQTBDZixJQUExQyxDQUFnRCxDQUFFLEdBQUlBLElBQUksR0FBS2xDLE9BQU8sQ0FBQ2tDLElBQUQsQ0FBUCxHQUFrQixRQUFsQixFQUE4QixNQUFPQSxLQUFQLEdBQWdCLFVBQW5ELENBQVIsQ0FBd0UsQ0FBRSxNQUFPQSxLQUFQLENBQWMsQ0FBQyxNQUFPZ0IsdUJBQXNCLENBQUNELElBQUQsQ0FBN0IsQ0FBc0MsQ0FFakwsUUFBU0UsZ0JBQVQsQ0FBeUJDLENBQXpCLENBQTRCLENBQUVELGVBQWUsQ0FBRzlELE1BQU0sQ0FBQ2dFLGNBQVAsQ0FBd0JoRSxNQUFNLENBQUNpRSxjQUEvQixDQUFnRCxRQUFTSCxnQkFBVCxDQUF5QkMsQ0FBekIsQ0FBNEIsQ0FBRSxNQUFPQSxFQUFDLENBQUNHLFNBQUYsRUFBZWxFLE1BQU0sQ0FBQ2lFLGNBQVAsQ0FBc0JGLENBQXRCLENBQXRCLENBQWlELENBQWpKLENBQW1KLE1BQU9ELGdCQUFlLENBQUNDLENBQUQsQ0FBdEIsQ0FBNEIsQ0FFN00sUUFBU0YsdUJBQVQsQ0FBZ0NELElBQWhDLENBQXNDLENBQUUsR0FBSUEsSUFBSSxHQUFLLElBQUssRUFBbEIsQ0FBcUIsQ0FBRSxLQUFNLElBQUlPLGVBQUosQ0FBbUIsMkRBQW5CLENBQU4sQ0FBd0YsQ0FBQyxNQUFPUCxLQUFQLENBQWMsQ0FFdEssUUFBU1EsVUFBVCxDQUFtQkMsUUFBbkIsQ0FBNkJDLFVBQTdCLENBQXlDLENBQUUsR0FBSSxNQUFPQSxXQUFQLEdBQXNCLFVBQXRCLEVBQW9DQSxVQUFVLEdBQUssSUFBdkQsQ0FBNkQsQ0FBRSxLQUFNLElBQUlwQixVQUFKLENBQWMsb0RBQWQsQ0FBTixDQUE0RSxDQUFDbUIsUUFBUSxDQUFDdEQsU0FBVCxDQUFxQmYsTUFBTSxDQUFDdUUsTUFBUCxDQUFjRCxVQUFVLEVBQUlBLFVBQVUsQ0FBQ3ZELFNBQXZDLENBQWtELENBQUVELFdBQVcsQ0FBRSxDQUFFWCxLQUFLLENBQUVrRSxRQUFULENBQW1CZCxRQUFRLENBQUUsSUFBN0IsQ0FBbUNELFlBQVksQ0FBRSxJQUFqRCxDQUFmLENBQWxELENBQXJCLENBQWtKLEdBQUlnQixVQUFKLENBQWdCRSxlQUFlLENBQUNILFFBQUQsQ0FBV0MsVUFBWCxDQUFmLENBQXdDLENBRWpZLFFBQVNFLGdCQUFULENBQXlCVCxDQUF6QixDQUE0QlUsQ0FBNUIsQ0FBK0IsQ0FBRUQsZUFBZSxDQUFHeEUsTUFBTSxDQUFDZ0UsY0FBUCxFQUF5QixRQUFTUSxnQkFBVCxDQUF5QlQsQ0FBekIsQ0FBNEJVLENBQTVCLENBQStCLENBQUVWLENBQUMsQ0FBQ0csU0FBRixDQUFjTyxDQUFkLENBQWlCLE1BQU9WLEVBQVAsQ0FBVyxDQUF4RyxDQUEwRyxNQUFPUyxnQkFBZSxDQUFDVCxDQUFELENBQUlVLENBQUosQ0FBdEIsQ0FBK0IsQ0FFMUssUUFBU3JDLGdCQUFULENBQXlCM0IsR0FBekIsQ0FBOEIwQixHQUE5QixDQUFtQ2hDLEtBQW5DLENBQTBDLENBQUUsR0FBSWdDLEdBQUcsR0FBSTFCLElBQVgsQ0FBZ0IsQ0FBRVQsTUFBTSxDQUFDQyxjQUFQLENBQXNCUSxHQUF0QixDQUEyQjBCLEdBQTNCLENBQWdDLENBQUVoQyxLQUFLLENBQUVBLEtBQVQsQ0FBZ0JzQixVQUFVLENBQUUsSUFBNUIsQ0FBa0M2QixZQUFZLENBQUUsSUFBaEQsQ0FBc0RDLFFBQVEsQ0FBRSxJQUFoRSxDQUFoQyxFQUEwRyxDQUE1SCxJQUFrSSxDQUFFOUMsR0FBRyxDQUFDMEIsR0FBRCxDQUFILENBQVdoQyxLQUFYLENBQW1CLENBQUMsTUFBT00sSUFBUCxDQUFhLENBRWpOLEdBQUlMLGdCQUFlLENBQ25CLGFBQ0EsU0FBVXNFLG9CQUFWLENBQWdDLENBQzlCTixTQUFTLENBQUNoRSxlQUFELENBQWtCc0Usb0JBQWxCLENBQVQsQ0FFQSxRQUFTdEUsZ0JBQVQsRUFBMkIsQ0FDekIsR0FBSXVFLGlCQUFKLENBRUEsR0FBSUMsTUFBSixDQUVBN0IsZUFBZSxDQUFDLElBQUQsQ0FBTzNDLGVBQVAsQ0FBZixDQUVBLElBQUssR0FBSXlFLEtBQUksQ0FBRzlDLFNBQVMsQ0FBQ0MsTUFBckIsQ0FBNkI4QyxJQUFJLENBQUcsR0FBSUMsTUFBSixDQUFVRixJQUFWLENBQXBDLENBQXFERyxJQUFJLENBQUcsQ0FBakUsQ0FBb0VBLElBQUksQ0FBR0gsSUFBM0UsQ0FBaUZHLElBQUksRUFBckYsQ0FBeUYsQ0FDdkZGLElBQUksQ0FBQ0UsSUFBRCxDQUFKLENBQWFqRCxTQUFTLENBQUNpRCxJQUFELENBQXRCLENBQ0QsQ0FFREosS0FBSyxDQUFHakIsMEJBQTBCLENBQUMsSUFBRCxDQUFPLENBQUNnQixnQkFBZ0IsQ0FBR2IsZUFBZSxDQUFDMUQsZUFBRCxDQUFuQyxFQUFzRHlDLElBQXRELENBQTJEbEIsS0FBM0QsQ0FBaUVnRCxnQkFBakUsQ0FBbUYsQ0FBQyxJQUFELEVBQU9NLE1BQVAsQ0FBY0gsSUFBZCxDQUFuRixDQUFQLENBQWxDLENBRUExQyxlQUFlLENBQUN5QixzQkFBc0IsQ0FBQ2UsS0FBRCxDQUF2QixDQUFnQyxTQUFoQyxDQUEyQyxTQUFVTSxLQUFWLENBQWlCLENBQ3pFLEdBQUlDLFlBQVcsQ0FBR1AsS0FBSyxDQUFDeEIsS0FBeEIsQ0FDSWdDLElBQUksQ0FBR0QsV0FBVyxDQUFDQyxJQUR2QixDQUVJQyxNQUFNLENBQUdGLFdBQVcsQ0FBQ0UsTUFGekIsQ0FHSUMsUUFBUSxDQUFHSCxXQUFXLENBQUNHLFFBSDNCLENBSUlDLE9BQU8sQ0FBR0osV0FBVyxDQUFDSSxPQUoxQixDQU1BLEdBQUlDLEtBQUksQ0FBR25GLE1BQU0sQ0FBQyxTQUFELENBQU4sQ0FBa0JvRixRQUFsQixDQUEyQkMsSUFBM0IsQ0FBZ0NKLFFBQWhDLENBQVgsQ0FFQSxHQUFJSyxPQUFNLENBQUcsQ0FBQyxFQUFHbkYsZ0JBQWdCLENBQUMsU0FBRCxDQUFwQixFQUFpQzRFLElBQWpDLENBQXVDRyxPQUF2QyxDQUFiLENBRUEsR0FBSUYsTUFBSixDQUFZLENBQ1ZBLE1BQU0sQ0FBQ0QsSUFBRCxDQUFPTyxNQUFQLENBQU4sQ0FDRCxDQUFDO0FBR0YsR0FBSUgsSUFBSSxFQUFJQSxJQUFJLENBQUNwQyxLQUFiLEVBQXNCLE1BQU9vQyxLQUFJLENBQUNwQyxLQUFMLENBQVd3QyxPQUFsQixHQUE4QixVQUF4RCxDQUFvRSxDQUNsRUosSUFBSSxDQUFDcEMsS0FBTCxDQUFXd0MsT0FBWCxDQUFtQlYsS0FBbkIsRUFDRCxDQUNGLENBbkJjLENBQWYsQ0FxQkEsTUFBT04sTUFBUCxDQUNELENBRURwQixZQUFZLENBQUNwRCxlQUFELENBQWtCLENBQUMsQ0FDN0IrQixHQUFHLENBQUUsUUFEd0IsQ0FFN0JoQyxLQUFLLENBQUUsUUFBUzBGLE9BQVQsRUFBa0IsQ0FDdkIsR0FBSUMsYUFBWSxDQUFHLEtBQUsxQyxLQUF4QixDQUNJMkMsS0FBSyxDQUFHRCxZQUFZLENBQUNWLElBRHpCLENBRUlZLE9BQU8sQ0FBR0YsWUFBWSxDQUFDVCxNQUYzQixDQUdJWSxRQUFRLENBQUdILFlBQVksQ0FBQ1AsT0FINUIsQ0FJSUQsUUFBUSxDQUFHUSxZQUFZLENBQUNSLFFBSjVCLENBS0lsQyxLQUFLLENBQUdiLHdCQUF3QixDQUFDdUQsWUFBRCxDQUFlLENBQUMsTUFBRCxDQUFTLFFBQVQsQ0FBbUIsU0FBbkIsQ0FBOEIsVUFBOUIsQ0FBZixDQUxwQyxDQU9BLEdBQUlOLEtBQUksQ0FBR25GLE1BQU0sQ0FBQyxTQUFELENBQU4sQ0FBa0JvRixRQUFsQixDQUEyQkMsSUFBM0IsQ0FBZ0NKLFFBQWhDLENBQVgsQ0FFQSxNQUFPakYsT0FBTSxDQUFDLFNBQUQsQ0FBTixDQUFrQjZGLFlBQWxCLENBQStCVixJQUEvQixDQUFxQzVELGFBQWEsQ0FBQyxFQUFELENBQUt3QixLQUFMLENBQVksQ0FDbkV3QyxPQUFPLENBQUUsS0FBS0EsT0FEcUQsQ0FBWixDQUFsRCxDQUFQLENBR0QsQ0FmNEIsQ0FBRCxDQUFsQixDQUFaLENBa0JBLE1BQU94RixnQkFBUCxDQUNELENBM0RELENBMkRFQyxNQUFNLENBQUMsU0FBRCxDQUFOLENBQWtCOEYsYUEzRHBCLENBRkEsQ0ErREFqRyxPQUFPLENBQUNFLGVBQVIsQ0FBMEJBLGVBQTFCLENBRUFnQyxlQUFlLENBQUNoQyxlQUFELENBQWtCLGNBQWxCLENBQWtDLENBQy9DaUYsTUFBTSxDQUFFZSxTQUR1QyxDQUUvQ2IsT0FBTyxDQUFFYSxTQUZzQyxDQUFsQyxDQUFmLEMscUtBbkdJL0YsTSxnSkFFQUcsZ0IsMEpBRUtGLHNCLGdLQUVBSyxPLGlKQUVBSyxPLGlKQUVBWSxhLHVKQUVBVyx3QixrS0FFQUUsNkIsdUtBRUFNLGUseUpBRUFJLGlCLDJKQUVBSyxZLHNKQUVBRywwQixvS0FFQUcsZSx5SkFFQUQsc0IsZ0tBRUFPLFMsbUpBRUFJLGUseUpBRUFwQyxlLHlKQUVMaEMsZSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9yZWFjdC1jb3B5LXRvLWNsaXBib2FyZC9saWIvQ29tcG9uZW50LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLkNvcHlUb0NsaXBib2FyZCA9IHZvaWQgMDtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9jb3B5VG9DbGlwYm9hcmQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjb3B5LXRvLWNsaXBib2FyZFwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IFwiZGVmYXVsdFwiOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSk7IGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgaWYgKGkgJSAyKSB7IG93bktleXMoc291cmNlLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7IH0gZWxzZSB7IG93bktleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpOyB2YXIga2V5LCBpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc291cmNlU3ltYm9sS2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKTsgZm9yIChpID0gMDsgaSA8IHNvdXJjZVN5bWJvbEtleXMubGVuZ3RoOyBpKyspIHsga2V5ID0gc291cmNlU3ltYm9sS2V5c1tpXTsgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoc291cmNlLCBrZXkpKSBjb250aW51ZTsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IHt9OyB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7IHZhciBrZXksIGk7IGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7IGtleSA9IHNvdXJjZUtleXNbaV07IGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxudmFyIENvcHlUb0NsaXBib2FyZCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JFB1cmVDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKENvcHlUb0NsaXBib2FyZCwgX1JlYWN0JFB1cmVDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIENvcHlUb0NsaXBib2FyZCgpIHtcbiAgICB2YXIgX2dldFByb3RvdHlwZU9mMjtcblxuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb3B5VG9DbGlwYm9hcmQpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9nZXRQcm90b3R5cGVPZjIgPSBfZ2V0UHJvdG90eXBlT2YoQ29weVRvQ2xpcGJvYXJkKSkuY2FsbC5hcHBseShfZ2V0UHJvdG90eXBlT2YyLCBbdGhpc10uY29uY2F0KGFyZ3MpKSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwib25DbGlja1wiLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIHRleHQgPSBfdGhpcyRwcm9wcy50ZXh0LFxuICAgICAgICAgIG9uQ29weSA9IF90aGlzJHByb3BzLm9uQ29weSxcbiAgICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICAgIG9wdGlvbnMgPSBfdGhpcyRwcm9wcy5vcHRpb25zO1xuXG4gICAgICB2YXIgZWxlbSA9IF9yZWFjdFtcImRlZmF1bHRcIl0uQ2hpbGRyZW4ub25seShjaGlsZHJlbik7XG5cbiAgICAgIHZhciByZXN1bHQgPSAoMCwgX2NvcHlUb0NsaXBib2FyZFtcImRlZmF1bHRcIl0pKHRleHQsIG9wdGlvbnMpO1xuXG4gICAgICBpZiAob25Db3B5KSB7XG4gICAgICAgIG9uQ29weSh0ZXh0LCByZXN1bHQpO1xuICAgICAgfSAvLyBCeXBhc3Mgb25DbGljayBpZiBpdCB3YXMgcHJlc2VudFxuXG5cbiAgICAgIGlmIChlbGVtICYmIGVsZW0ucHJvcHMgJiYgdHlwZW9mIGVsZW0ucHJvcHMub25DbGljayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBlbGVtLnByb3BzLm9uQ2xpY2soZXZlbnQpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKENvcHlUb0NsaXBib2FyZCwgW3tcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIF90ZXh0ID0gX3RoaXMkcHJvcHMyLnRleHQsXG4gICAgICAgICAgX29uQ29weSA9IF90aGlzJHByb3BzMi5vbkNvcHksXG4gICAgICAgICAgX29wdGlvbnMgPSBfdGhpcyRwcm9wczIub3B0aW9ucyxcbiAgICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzMi5jaGlsZHJlbixcbiAgICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfdGhpcyRwcm9wczIsIFtcInRleHRcIiwgXCJvbkNvcHlcIiwgXCJvcHRpb25zXCIsIFwiY2hpbGRyZW5cIl0pO1xuXG4gICAgICB2YXIgZWxlbSA9IF9yZWFjdFtcImRlZmF1bHRcIl0uQ2hpbGRyZW4ub25seShjaGlsZHJlbik7XG5cbiAgICAgIHJldHVybiBfcmVhY3RbXCJkZWZhdWx0XCJdLmNsb25lRWxlbWVudChlbGVtLCBfb2JqZWN0U3ByZWFkKHt9LCBwcm9wcywge1xuICAgICAgICBvbkNsaWNrOiB0aGlzLm9uQ2xpY2tcbiAgICAgIH0pKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQ29weVRvQ2xpcGJvYXJkO1xufShfcmVhY3RbXCJkZWZhdWx0XCJdLlB1cmVDb21wb25lbnQpO1xuXG5leHBvcnRzLkNvcHlUb0NsaXBib2FyZCA9IENvcHlUb0NsaXBib2FyZDtcblxuX2RlZmluZVByb3BlcnR5KENvcHlUb0NsaXBib2FyZCwgXCJkZWZhdWx0UHJvcHNcIiwge1xuICBvbkNvcHk6IHVuZGVmaW5lZCxcbiAgb3B0aW9uczogdW5kZWZpbmVkXG59KTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/react-copy-to-clipboard/lib/Component.js\n");

/***/ }),

/***/ "./node_modules/react-copy-to-clipboard/lib/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/react-copy-to-clipboard/lib/index.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};var _require=__webpack_require__(/*! ./Component */ \"./node_modules/react-copy-to-clipboard/lib/Component.js\"),CopyToClipboard=_require.CopyToClipboard;CopyToClipboard.CopyToClipboard=CopyToClipboard;module.exports=CopyToClipboard;;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(CopyToClipboard,\"CopyToClipboard\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-copy-to-clipboard/lib/index.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWNvcHktdG8tY2xpcGJvYXJkL2xpYi9pbmRleC5qcz8zZjkyIl0sIm5hbWVzIjpbIl9yZXF1aXJlIiwicmVxdWlyZSIsIkNvcHlUb0NsaXBib2FyZCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLDhDLG9SQUVBLEdBQUlBLFNBQVEsQ0FBR0MsbUJBQU8sQ0FBQyw0RUFBRCxDQUF0QixDQUNJQyxlQUFlLENBQUdGLFFBQVEsQ0FBQ0UsZUFEL0IsQ0FHQUEsZUFBZSxDQUFDQSxlQUFoQixDQUFrQ0EsZUFBbEMsQ0FDQUMsTUFBTSxDQUFDQyxPQUFQLENBQWlCRixlQUFqQixDLHFLQUhJQSxlIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3JlYWN0LWNvcHktdG8tY2xpcGJvYXJkL2xpYi9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCcuL0NvbXBvbmVudCcpLFxuICAgIENvcHlUb0NsaXBib2FyZCA9IF9yZXF1aXJlLkNvcHlUb0NsaXBib2FyZDtcblxuQ29weVRvQ2xpcGJvYXJkLkNvcHlUb0NsaXBib2FyZCA9IENvcHlUb0NsaXBib2FyZDtcbm1vZHVsZS5leHBvcnRzID0gQ29weVRvQ2xpcGJvYXJkOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/react-copy-to-clipboard/lib/index.js\n");

/***/ }),

/***/ "./node_modules/react-mosaic-component/lib/Mosaic.js":
/*!***********************************************************!*\
  !*** ./node_modules/react-mosaic-component/lib/Mosaic.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};var __extends=this&&this.__extends||function(){var _extendStatics=function extendStatics(d,b){_extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;}||function(d,b){for(var p in b){if(b.hasOwnProperty(p))d[p]=b[p];}};return _extendStatics(d,b);};return function(d,b){_extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};}();var __assign=this&&this.__assign||function(){__assign=Object.assign||function(t){for(var s,i=1,n=arguments.length;i<n;i++){s=arguments[i];for(var p in s){if(Object.prototype.hasOwnProperty.call(s,p))t[p]=s[p];}}return t;};return __assign.apply(this,arguments);};var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{\"default\":mod};};Object.defineProperty(exports,\"__esModule\",{value:true});exports.Mosaic=exports.MosaicWithoutDragDropContext=void 0;var classnames_1=__importDefault(__webpack_require__(/*! classnames */ \"./node_modules/classnames/index.js\"));var countBy_1=__importDefault(__webpack_require__(/*! lodash/countBy */ \"./node_modules/lodash/countBy.js\"));var keys_1=__importDefault(__webpack_require__(/*! lodash/keys */ \"./node_modules/lodash/keys.js\"));var pickBy_1=__importDefault(__webpack_require__(/*! lodash/pickBy */ \"./node_modules/lodash/pickBy.js\"));var react_1=__importDefault(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));var react_dnd_1=__webpack_require__(/*! react-dnd */ \"./node_modules/react-dnd/dist/esm/index.js\");var react_dnd_multi_backend_1=__importDefault(__webpack_require__(/*! react-dnd-multi-backend */ \"./node_modules/react-dnd-multi-backend/dist/esm/index.js\"));var HTML5toTouch_1=__importDefault(__webpack_require__(/*! react-dnd-multi-backend/dist/cjs/HTML5toTouch */ \"./node_modules/react-dnd-multi-backend/dist/cjs/HTML5toTouch.js\"));var uuid_1=__webpack_require__(/*! uuid */ \"./node_modules/react-mosaic-component/node_modules/uuid/index.js\");var contextTypes_1=__webpack_require__(/*! ./contextTypes */ \"./node_modules/react-mosaic-component/lib/contextTypes.js\");var MosaicRoot_1=__webpack_require__(/*! ./MosaicRoot */ \"./node_modules/react-mosaic-component/lib/MosaicRoot.js\");var MosaicZeroState_1=__webpack_require__(/*! ./MosaicZeroState */ \"./node_modules/react-mosaic-component/lib/MosaicZeroState.js\");var RootDropTargets_1=__webpack_require__(/*! ./RootDropTargets */ \"./node_modules/react-mosaic-component/lib/RootDropTargets.js\");var mosaicUpdates_1=__webpack_require__(/*! ./util/mosaicUpdates */ \"./node_modules/react-mosaic-component/lib/util/mosaicUpdates.js\");var mosaicUtilities_1=__webpack_require__(/*! ./util/mosaicUtilities */ \"./node_modules/react-mosaic-component/lib/util/mosaicUtilities.js\");var DEFAULT_EXPAND_PERCENTAGE=70;function isUncontrolled(props){return props.initialValue!=null;}var MosaicWithoutDragDropContext=/** @class */function(_super){__extends(MosaicWithoutDragDropContext,_super);function MosaicWithoutDragDropContext(){var _a;var _this=_super.apply(this,arguments)||this;_this.state={currentNode:null,lastInitialValue:null,mosaicId:(_a=_this.props.mosaicId)!==null&&_a!==void 0?_a:uuid_1.v4()};_this.updateRoot=function(updates,suppressOnRelease){if(suppressOnRelease===void 0){suppressOnRelease=false;}var currentNode=_this.getRoot()||{};_this.replaceRoot(mosaicUpdates_1.updateTree(currentNode,updates),suppressOnRelease);};_this.replaceRoot=function(currentNode,suppressOnRelease){if(suppressOnRelease===void 0){suppressOnRelease=false;}_this.props.onChange(currentNode);if(!suppressOnRelease&&_this.props.onRelease){_this.props.onRelease(currentNode);}if(isUncontrolled(_this.props)){_this.setState({currentNode:currentNode});}};_this.actions={updateTree:_this.updateRoot,remove:function remove(path){if(path.length===0){_this.replaceRoot(null);}else{_this.updateRoot([mosaicUpdates_1.createRemoveUpdate(_this.getRoot(),path)]);}},expand:function expand(path,percentage){if(percentage===void 0){percentage=DEFAULT_EXPAND_PERCENTAGE;}return _this.updateRoot([mosaicUpdates_1.createExpandUpdate(path,percentage)]);},getRoot:function getRoot(){return _this.getRoot();},hide:function hide(path){return _this.updateRoot([mosaicUpdates_1.createHideUpdate(path)]);},replaceWith:function replaceWith(path,newNode){return _this.updateRoot([{path:path,spec:{$set:newNode}}]);}};_this.childContext={mosaicActions:_this.actions,mosaicId:_this.state.mosaicId};return _this;}MosaicWithoutDragDropContext.getDerivedStateFromProps=function(nextProps,prevState){if(nextProps.mosaicId&&prevState.mosaicId!==nextProps.mosaicId&&\"development\"!=='production'){throw new Error('Mosaic does not support updating the mosaicId after instantiation');}if(isUncontrolled(nextProps)&&nextProps.initialValue!==prevState.lastInitialValue){return{lastInitialValue:nextProps.initialValue,currentNode:nextProps.initialValue};}return null;};MosaicWithoutDragDropContext.prototype.render=function(){var className=this.props.className;return react_1[\"default\"].createElement(contextTypes_1.MosaicContext.Provider,{value:this.childContext},react_1[\"default\"].createElement(\"div\",{className:classnames_1[\"default\"](className,'mosaic mosaic-drop-target')},this.renderTree(),react_1[\"default\"].createElement(RootDropTargets_1.RootDropTargets,null)));};MosaicWithoutDragDropContext.prototype.getRoot=function(){if(isUncontrolled(this.props)){return this.state.currentNode;}else{return this.props.value;}};MosaicWithoutDragDropContext.prototype.renderTree=function(){var root=this.getRoot();this.validateTree(root);if(root===null||root===undefined){return this.props.zeroStateView;}else{var _a=this.props,renderTile=_a.renderTile,resize=_a.resize;return react_1[\"default\"].createElement(MosaicRoot_1.MosaicRoot,{root:root,renderTile:renderTile,resize:resize});}};MosaicWithoutDragDropContext.prototype.validateTree=function(node){if(true){var duplicates=keys_1[\"default\"](pickBy_1[\"default\"](countBy_1[\"default\"](mosaicUtilities_1.getLeaves(node)),function(n){return n>1;}));if(duplicates.length>0){throw new Error(\"Duplicate IDs [\"+duplicates.join(', ')+\"] detected. Mosaic does not support leaves with the same ID\");}}};MosaicWithoutDragDropContext.defaultProps={onChange:function onChange(){return void 0;},zeroStateView:react_1[\"default\"].createElement(MosaicZeroState_1.MosaicZeroState,null),className:'mosaic-blueprint-theme'};return MosaicWithoutDragDropContext;}(react_1[\"default\"].PureComponent);exports.MosaicWithoutDragDropContext=MosaicWithoutDragDropContext;var Mosaic=/** @class */function(_super){__extends(Mosaic,_super);function Mosaic(){return _super!==null&&_super.apply(this,arguments)||this;}Mosaic.prototype.render=function(){return react_1[\"default\"].createElement(react_dnd_1.DndProvider,{backend:react_dnd_multi_backend_1[\"default\"],options:HTML5toTouch_1[\"default\"]},react_1[\"default\"].createElement(MosaicWithoutDragDropContext,__assign({},this.props)));};return Mosaic;}(react_1[\"default\"].PureComponent);exports.Mosaic=Mosaic;;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(__extends,\"__extends\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/Mosaic.js\");reactHotLoader.register(__assign,\"__assign\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/Mosaic.js\");reactHotLoader.register(__importDefault,\"__importDefault\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/Mosaic.js\");reactHotLoader.register(classnames_1,\"classnames_1\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/Mosaic.js\");reactHotLoader.register(countBy_1,\"countBy_1\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/Mosaic.js\");reactHotLoader.register(keys_1,\"keys_1\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/Mosaic.js\");reactHotLoader.register(pickBy_1,\"pickBy_1\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/Mosaic.js\");reactHotLoader.register(react_1,\"react_1\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/Mosaic.js\");reactHotLoader.register(react_dnd_multi_backend_1,\"react_dnd_multi_backend_1\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/Mosaic.js\");reactHotLoader.register(HTML5toTouch_1,\"HTML5toTouch_1\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/Mosaic.js\");reactHotLoader.register(DEFAULT_EXPAND_PERCENTAGE,\"DEFAULT_EXPAND_PERCENTAGE\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/Mosaic.js\");reactHotLoader.register(isUncontrolled,\"isUncontrolled\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/Mosaic.js\");reactHotLoader.register(MosaicWithoutDragDropContext,\"MosaicWithoutDragDropContext\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/Mosaic.js\");reactHotLoader.register(Mosaic,\"Mosaic\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/Mosaic.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-mosaic-component/lib/Mosaic.js\n");

/***/ }),

/***/ "./node_modules/react-mosaic-component/lib/MosaicDropTarget.js":
/*!*********************************************************************!*\
  !*** ./node_modules/react-mosaic-component/lib/MosaicDropTarget.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};var __extends=this&&this.__extends||function(){var _extendStatics=function extendStatics(d,b){_extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;}||function(d,b){for(var p in b){if(b.hasOwnProperty(p))d[p]=b[p];}};return _extendStatics(d,b);};return function(d,b){_extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};}();var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{\"default\":mod};};Object.defineProperty(exports,\"__esModule\",{value:true});exports.MosaicDropTarget=void 0;var classnames_1=__importDefault(__webpack_require__(/*! classnames */ \"./node_modules/classnames/index.js\"));var react_1=__importDefault(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));var react_dnd_1=__webpack_require__(/*! react-dnd */ \"./node_modules/react-dnd/dist/esm/index.js\");var contextTypes_1=__webpack_require__(/*! ./contextTypes */ \"./node_modules/react-mosaic-component/lib/contextTypes.js\");var types_1=__webpack_require__(/*! ./types */ \"./node_modules/react-mosaic-component/lib/types.js\");var dropTarget={drop:function drop(props,monitor,component){if(component.context.mosaicId===(monitor.getItem()||{}).mosaicId){return{path:props.path,position:props.position};}else{return{};}}};var MosaicDropTargetClass=/** @class */function(_super){__extends(MosaicDropTargetClass,_super);function MosaicDropTargetClass(){return _super!==null&&_super.apply(this,arguments)||this;}MosaicDropTargetClass.prototype.render=function(){var _a=this.props,position=_a.position,isOver=_a.isOver,connectDropTarget=_a.connectDropTarget,draggedMosaicId=_a.draggedMosaicId;return connectDropTarget(react_1[\"default\"].createElement(\"div\",{className:classnames_1[\"default\"]('drop-target',position,{'drop-target-hover':isOver&&draggedMosaicId===this.context.mosaicId})}));};MosaicDropTargetClass.contextType=contextTypes_1.MosaicContext;return MosaicDropTargetClass;}(react_1[\"default\"].PureComponent);exports.MosaicDropTarget=react_dnd_1.DropTarget(types_1.MosaicDragType.WINDOW,dropTarget,function(connect,monitor){return{connectDropTarget:connect.dropTarget(),isOver:monitor.isOver(),draggedMosaicId:(monitor.getItem()||{}).mosaicId};})(MosaicDropTargetClass);;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(__extends,\"__extends\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/MosaicDropTarget.js\");reactHotLoader.register(__importDefault,\"__importDefault\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/MosaicDropTarget.js\");reactHotLoader.register(classnames_1,\"classnames_1\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/MosaicDropTarget.js\");reactHotLoader.register(react_1,\"react_1\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/MosaicDropTarget.js\");reactHotLoader.register(dropTarget,\"dropTarget\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/MosaicDropTarget.js\");reactHotLoader.register(MosaicDropTargetClass,\"MosaicDropTargetClass\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/MosaicDropTarget.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4uL3NyYy9Nb3NhaWNEcm9wVGFyZ2V0LnRzeD8wYmU1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJ1OEJBQUEsOEdBQ0EsK0ZBQ0EsbUdBRUEsMEhBRUEscUdBZUEsR0FBTSxXQUFVLENBQUcsQ0FDakIsSUFBSSxDQUFFLGNBQUMsS0FBRCxDQUFlLE9BQWYsQ0FBMkMsU0FBM0MsQ0FBMkUsQ0FDL0UsR0FBSSxTQUFTLENBQUMsT0FBVixDQUFrQixRQUFsQixHQUFnQyxDQUFDLE9BQU8sQ0FBQyxPQUFSLElBQXFCLEVBQXRCLEVBQTZDLFFBQWpGLENBQTJGLENBQ3pGLE1BQU8sQ0FDTCxJQUFJLENBQUUsS0FBSyxDQUFDLElBRFAsQ0FFTCxRQUFRLENBQUUsS0FBSyxDQUFDLFFBRlgsQ0FBUCxDQUlELENBTEQsSUFLTyxDQUNMLE1BQU8sRUFBUCxDQUNELENBQ0YsQ0FWZ0IsQ0FBbkIsQ0FhQSx3REFBb0Msd0NBQXBDLGlDLHlEQWNDLENBVkMsa0RBQ1EsT0FBMkQsS0FBSyxLQUFoRSxDQUFFLFFBQVEsWUFBVixDQUFZLE1BQU0sVUFBbEIsQ0FBb0IsaUJBQWlCLHFCQUFyQyxDQUF1QyxlQUFlLG1CQUF0RCxDQUNOLE1BQU8sa0JBQWlCLENBQ3RCLHdDQUNFLFNBQVMsQ0FBRSx3QkFBVyxhQUFYLENBQTBCLFFBQTFCLENBQW9DLENBQzdDLG9CQUFxQixNQUFNLEVBQUksZUFBZSxHQUFLLEtBQUssT0FBTCxDQUFhLFFBRG5CLENBQXBDLENBRGIsRUFEc0IsQ0FBeEIsQ0FPRCxDQVRELENBSE8sa0NBQWMsNEJBQWQsQ0FhVCw2QkFBQyxDQWRELENBQW9DLG1CQUFNLGFBQTFDLEVBZ0JhLHlCQUFvQix1QkFDL0IsdUJBQWUsTUFEZ0IsQ0FFL0IsVUFGK0IsQ0FHL0IsU0FBQyxPQUFELENBQVUsT0FBVixDQUFpQixDQUFzQixNQUFDLENBQ3RDLGlCQUFpQixDQUFFLE9BQU8sQ0FBQyxVQUFSLEVBRG1CLENBRXRDLE1BQU0sQ0FBRSxPQUFPLENBQUMsTUFBUixFQUY4QixDQUd0QyxlQUFlLENBQUcsQ0FBQyxPQUFPLENBQUMsT0FBUixJQUFxQixFQUF0QixFQUE2QyxRQUh6QixDQUFELENBSXJDLENBUDZCLEVBUS9CLHFCQVIrQixDQUFwQixDLHFmQWxEYixZLDRKQUNBLE8sdUpBb0JNLFUsMEpBYU4scUIiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbW9zYWljLWNvbXBvbmVudC9saWIvTW9zYWljRHJvcFRhcmdldC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk1vc2FpY0Ryb3BUYXJnZXQgPSB2b2lkIDA7XG52YXIgY2xhc3NuYW1lc18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcbnZhciByZWFjdF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG52YXIgcmVhY3RfZG5kXzEgPSByZXF1aXJlKFwicmVhY3QtZG5kXCIpO1xudmFyIGNvbnRleHRUeXBlc18xID0gcmVxdWlyZShcIi4vY29udGV4dFR5cGVzXCIpO1xudmFyIHR5cGVzXzEgPSByZXF1aXJlKFwiLi90eXBlc1wiKTtcbnZhciBkcm9wVGFyZ2V0ID0ge1xuICAgIGRyb3A6IGZ1bmN0aW9uIChwcm9wcywgbW9uaXRvciwgY29tcG9uZW50KSB7XG4gICAgICAgIGlmIChjb21wb25lbnQuY29udGV4dC5tb3NhaWNJZCA9PT0gKG1vbml0b3IuZ2V0SXRlbSgpIHx8IHt9KS5tb3NhaWNJZCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBwYXRoOiBwcm9wcy5wYXRoLFxuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBwcm9wcy5wb3NpdGlvbixcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4ge307XG4gICAgICAgIH1cbiAgICB9LFxufTtcbnZhciBNb3NhaWNEcm9wVGFyZ2V0Q2xhc3MgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKE1vc2FpY0Ryb3BUYXJnZXRDbGFzcywgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBNb3NhaWNEcm9wVGFyZ2V0Q2xhc3MoKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgTW9zYWljRHJvcFRhcmdldENsYXNzLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMucHJvcHMsIHBvc2l0aW9uID0gX2EucG9zaXRpb24sIGlzT3ZlciA9IF9hLmlzT3ZlciwgY29ubmVjdERyb3BUYXJnZXQgPSBfYS5jb25uZWN0RHJvcFRhcmdldCwgZHJhZ2dlZE1vc2FpY0lkID0gX2EuZHJhZ2dlZE1vc2FpY0lkO1xuICAgICAgICByZXR1cm4gY29ubmVjdERyb3BUYXJnZXQocmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IGNsYXNzbmFtZXNfMS5kZWZhdWx0KCdkcm9wLXRhcmdldCcsIHBvc2l0aW9uLCB7XG4gICAgICAgICAgICAgICAgJ2Ryb3AtdGFyZ2V0LWhvdmVyJzogaXNPdmVyICYmIGRyYWdnZWRNb3NhaWNJZCA9PT0gdGhpcy5jb250ZXh0Lm1vc2FpY0lkLFxuICAgICAgICAgICAgfSkgfSkpO1xuICAgIH07XG4gICAgTW9zYWljRHJvcFRhcmdldENsYXNzLmNvbnRleHRUeXBlID0gY29udGV4dFR5cGVzXzEuTW9zYWljQ29udGV4dDtcbiAgICByZXR1cm4gTW9zYWljRHJvcFRhcmdldENsYXNzO1xufShyZWFjdF8xLmRlZmF1bHQuUHVyZUNvbXBvbmVudCkpO1xuZXhwb3J0cy5Nb3NhaWNEcm9wVGFyZ2V0ID0gcmVhY3RfZG5kXzEuRHJvcFRhcmdldCh0eXBlc18xLk1vc2FpY0RyYWdUeXBlLldJTkRPVywgZHJvcFRhcmdldCwgZnVuY3Rpb24gKGNvbm5lY3QsIG1vbml0b3IpIHsgcmV0dXJuICh7XG4gICAgY29ubmVjdERyb3BUYXJnZXQ6IGNvbm5lY3QuZHJvcFRhcmdldCgpLFxuICAgIGlzT3ZlcjogbW9uaXRvci5pc092ZXIoKSxcbiAgICBkcmFnZ2VkTW9zYWljSWQ6IChtb25pdG9yLmdldEl0ZW0oKSB8fCB7fSkubW9zYWljSWQsXG59KTsgfSkoTW9zYWljRHJvcFRhcmdldENsYXNzKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU1vc2FpY0Ryb3BUYXJnZXQuanMubWFwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/react-mosaic-component/lib/MosaicDropTarget.js\n");

/***/ }),

/***/ "./node_modules/react-mosaic-component/lib/MosaicRoot.js":
/*!***************************************************************!*\
  !*** ./node_modules/react-mosaic-component/lib/MosaicRoot.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};var __extends=this&&this.__extends||function(){var _extendStatics=function extendStatics(d,b){_extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;}||function(d,b){for(var p in b){if(b.hasOwnProperty(p))d[p]=b[p];}};return _extendStatics(d,b);};return function(d,b){_extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};}();var __assign=this&&this.__assign||function(){__assign=Object.assign||function(t){for(var s,i=1,n=arguments.length;i<n;i++){s=arguments[i];for(var p in s){if(Object.prototype.hasOwnProperty.call(s,p))t[p]=s[p];}}return t;};return __assign.apply(this,arguments);};var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{\"default\":mod};};Object.defineProperty(exports,\"__esModule\",{value:true});exports.MosaicRoot=void 0;var flatten_1=__importDefault(__webpack_require__(/*! lodash/flatten */ \"./node_modules/lodash/flatten.js\"));var react_1=__importDefault(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));var contextTypes_1=__webpack_require__(/*! ./contextTypes */ \"./node_modules/react-mosaic-component/lib/contextTypes.js\");var Split_1=__webpack_require__(/*! ./Split */ \"./node_modules/react-mosaic-component/lib/Split.js\");var BoundingBox_1=__webpack_require__(/*! ./util/BoundingBox */ \"./node_modules/react-mosaic-component/lib/util/BoundingBox.js\");var mosaicUtilities_1=__webpack_require__(/*! ./util/mosaicUtilities */ \"./node_modules/react-mosaic-component/lib/util/mosaicUtilities.js\");var MosaicRoot=/** @class */function(_super){__extends(MosaicRoot,_super);function MosaicRoot(){var _this=_super!==null&&_super.apply(this,arguments)||this;_this.onResize=function(percentage,path,suppressOnRelease){_this.context.mosaicActions.updateTree([{path:path,spec:{splitPercentage:{$set:percentage}}}],suppressOnRelease);};return _this;}MosaicRoot.prototype.render=function(){var root=this.props.root;return react_1[\"default\"].createElement(\"div\",{className:\"mosaic-root\"},this.renderRecursively(root,BoundingBox_1.BoundingBox.empty(),[]));};MosaicRoot.prototype.renderRecursively=function(node,boundingBox,path){if(mosaicUtilities_1.isParent(node)){var splitPercentage=node.splitPercentage==null?50:node.splitPercentage;var _a=BoundingBox_1.BoundingBox.split(boundingBox,splitPercentage,node.direction),first=_a.first,second=_a.second;return flatten_1[\"default\"]([this.renderRecursively(node.first,first,path.concat('first')),this.renderSplit(node.direction,boundingBox,splitPercentage,path),this.renderRecursively(node.second,second,path.concat('second'))].filter(nonNullElement));}else{return react_1[\"default\"].createElement(\"div\",{key:node,className:\"mosaic-tile\",style:__assign({},BoundingBox_1.BoundingBox.asStyles(boundingBox))},this.props.renderTile(node,path));}};MosaicRoot.prototype.renderSplit=function(direction,boundingBox,splitPercentage,path){var _this=this;var resize=this.props.resize;if(resize!=='DISABLED'){return react_1[\"default\"].createElement(Split_1.Split,__assign({key:path.join(',')+'splitter'},resize,{boundingBox:boundingBox,splitPercentage:splitPercentage,direction:direction,onChange:function onChange(percentage){return _this.onResize(percentage,path,true);},onRelease:function onRelease(percentage){return _this.onResize(percentage,path,false);}}));}else{return null;}};MosaicRoot.contextType=contextTypes_1.MosaicContext;return MosaicRoot;}(react_1[\"default\"].PureComponent);exports.MosaicRoot=MosaicRoot;function nonNullElement(x){return x!==null;};(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(__extends,\"__extends\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/MosaicRoot.js\");reactHotLoader.register(__assign,\"__assign\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/MosaicRoot.js\");reactHotLoader.register(__importDefault,\"__importDefault\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/MosaicRoot.js\");reactHotLoader.register(flatten_1,\"flatten_1\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/MosaicRoot.js\");reactHotLoader.register(react_1,\"react_1\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/MosaicRoot.js\");reactHotLoader.register(MosaicRoot,\"MosaicRoot\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/MosaicRoot.js\");reactHotLoader.register(nonNullElement,\"nonNullElement\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/MosaicRoot.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-mosaic-component/lib/MosaicRoot.js\n");

/***/ }),

/***/ "./node_modules/react-mosaic-component/lib/MosaicWindow.js":
/*!*****************************************************************!*\
  !*** ./node_modules/react-mosaic-component/lib/MosaicWindow.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};var __extends=this&&this.__extends||function(){var _extendStatics=function extendStatics(d,b){_extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;}||function(d,b){for(var p in b){if(b.hasOwnProperty(p))d[p]=b[p];}};return _extendStatics(d,b);};return function(d,b){_extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};}();var __assign=this&&this.__assign||function(){__assign=Object.assign||function(t){for(var s,i=1,n=arguments.length;i<n;i++){s=arguments[i];for(var p in s){if(Object.prototype.hasOwnProperty.call(s,p))t[p]=s[p];}}return t;};return __assign.apply(this,arguments);};var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{\"default\":mod};};Object.defineProperty(exports,\"__esModule\",{value:true});exports.MosaicWindow=exports.SourceDropConnectedInternalMosaicWindow=exports.SourceConnectedInternalMosaicWindow=exports.InternalMosaicWindow=void 0;var classnames_1=__importDefault(__webpack_require__(/*! classnames */ \"./node_modules/classnames/index.js\"));var defer_1=__importDefault(__webpack_require__(/*! lodash/defer */ \"./node_modules/lodash/defer.js\"));var dropRight_1=__importDefault(__webpack_require__(/*! lodash/dropRight */ \"./node_modules/lodash/dropRight.js\"));var isEmpty_1=__importDefault(__webpack_require__(/*! lodash/isEmpty */ \"./node_modules/lodash/isEmpty.js\"));var isEqual_1=__importDefault(__webpack_require__(/*! lodash/isEqual */ \"./node_modules/lodash/isEqual.js\"));var values_1=__importDefault(__webpack_require__(/*! lodash/values */ \"./node_modules/lodash/values.js\"));var react_1=__importDefault(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));var react_dnd_1=__webpack_require__(/*! react-dnd */ \"./node_modules/react-dnd/dist/esm/index.js\");var defaultToolbarControls_1=__webpack_require__(/*! ./buttons/defaultToolbarControls */ \"./node_modules/react-mosaic-component/lib/buttons/defaultToolbarControls.js\");var Separator_1=__webpack_require__(/*! ./buttons/Separator */ \"./node_modules/react-mosaic-component/lib/buttons/Separator.js\");var contextTypes_1=__webpack_require__(/*! ./contextTypes */ \"./node_modules/react-mosaic-component/lib/contextTypes.js\");var internalTypes_1=__webpack_require__(/*! ./internalTypes */ \"./node_modules/react-mosaic-component/lib/internalTypes.js\");var MosaicDropTarget_1=__webpack_require__(/*! ./MosaicDropTarget */ \"./node_modules/react-mosaic-component/lib/MosaicDropTarget.js\");var types_1=__webpack_require__(/*! ./types */ \"./node_modules/react-mosaic-component/lib/types.js\");var mosaicUpdates_1=__webpack_require__(/*! ./util/mosaicUpdates */ \"./node_modules/react-mosaic-component/lib/util/mosaicUpdates.js\");var mosaicUtilities_1=__webpack_require__(/*! ./util/mosaicUtilities */ \"./node_modules/react-mosaic-component/lib/util/mosaicUtilities.js\");var OptionalBlueprint_1=__webpack_require__(/*! ./util/OptionalBlueprint */ \"./node_modules/react-mosaic-component/lib/util/OptionalBlueprint.js\");var InternalMosaicWindow=/** @class */function(_super){__extends(InternalMosaicWindow,_super);function InternalMosaicWindow(){var _this=_super!==null&&_super.apply(this,arguments)||this;_this.state={additionalControlsOpen:false};_this.rootElement=null;_this.renderDropTarget=function(position){var path=_this.props.path;return react_1[\"default\"].createElement(MosaicDropTarget_1.MosaicDropTarget,{position:position,path:path,key:position});};_this.split=function(){var args=[];for(var _i=0;_i<arguments.length;_i++){args[_i]=arguments[_i];}_this.checkCreateNode();var _a=_this.props,createNode=_a.createNode,path=_a.path;var mosaicActions=_this.context.mosaicActions;var root=mosaicActions.getRoot();var direction=_this.rootElement.offsetWidth>_this.rootElement.offsetHeight?'row':'column';return Promise.resolve(createNode.apply(void 0,args)).then(function(second){return mosaicActions.replaceWith(path,{direction:direction,second:second,first:mosaicUtilities_1.getAndAssertNodeAtPathExists(root,path)});});};_this.swap=function(){var args=[];for(var _i=0;_i<arguments.length;_i++){args[_i]=arguments[_i];}_this.checkCreateNode();var mosaicActions=_this.context.mosaicActions;var _a=_this.props,createNode=_a.createNode,path=_a.path;return Promise.resolve(createNode.apply(void 0,args)).then(function(node){return mosaicActions.replaceWith(path,node);});};_this.setAdditionalControlsOpen=function(additionalControlsOpen){_this.setState({additionalControlsOpen:additionalControlsOpen});};_this.getPath=function(){return _this.props.path;};_this.connectDragSource=function(connectedElements){var connectDragSource=_this.props.connectDragSource;return connectDragSource(connectedElements);};_this.childContext={mosaicWindowActions:{split:_this.split,replaceWithNew:_this.swap,setAdditionalControlsOpen:_this.setAdditionalControlsOpen,getPath:_this.getPath,connectDragSource:_this.connectDragSource}};return _this;}InternalMosaicWindow.prototype.render=function(){var _this=this;var _a=this.props,className=_a.className,isOver=_a.isOver,renderPreview=_a.renderPreview,additionalControls=_a.additionalControls,connectDropTarget=_a.connectDropTarget,connectDragPreview=_a.connectDragPreview,draggedMosaicId=_a.draggedMosaicId;return react_1[\"default\"].createElement(contextTypes_1.MosaicWindowContext.Provider,{value:this.childContext},connectDropTarget(react_1[\"default\"].createElement(\"div\",{className:classnames_1[\"default\"]('mosaic-window mosaic-drop-target',className,{'drop-target-hover':isOver&&draggedMosaicId===this.context.mosaicId,'additional-controls-open':this.state.additionalControlsOpen}),ref:function ref(element){return _this.rootElement=element;}},this.renderToolbar(),react_1[\"default\"].createElement(\"div\",{className:\"mosaic-window-body\"},this.props.children),react_1[\"default\"].createElement(\"div\",{className:\"mosaic-window-body-overlay\",onClick:function onClick(){return _this.setAdditionalControlsOpen(false);}}),react_1[\"default\"].createElement(\"div\",{className:\"mosaic-window-additional-actions-bar\"},additionalControls),connectDragPreview(renderPreview(this.props)),react_1[\"default\"].createElement(\"div\",{className:\"drop-target-container\"},values_1[\"default\"](internalTypes_1.MosaicDropTargetPosition).map(this.renderDropTarget)))));};InternalMosaicWindow.prototype.getToolbarControls=function(){var _a=this.props,toolbarControls=_a.toolbarControls,createNode=_a.createNode;if(toolbarControls){return toolbarControls;}else if(createNode){return defaultToolbarControls_1.DEFAULT_CONTROLS_WITH_CREATION;}else{return defaultToolbarControls_1.DEFAULT_CONTROLS_WITHOUT_CREATION;}};InternalMosaicWindow.prototype.renderToolbar=function(){var _a;var _this=this;var _b=this.props,title=_b.title,draggable=_b.draggable,additionalControls=_b.additionalControls,additionalControlButtonText=_b.additionalControlButtonText,path=_b.path,renderToolbar=_b.renderToolbar;var additionalControlsOpen=this.state.additionalControlsOpen;var toolbarControls=this.getToolbarControls();var draggableAndNotRoot=draggable&&path.length>0;var connectIfDraggable=draggableAndNotRoot?this.props.connectDragSource:function(el){return el;};if(renderToolbar){var connectedToolbar=connectIfDraggable(renderToolbar(this.props,draggable));return react_1[\"default\"].createElement(\"div\",{className:classnames_1[\"default\"]('mosaic-window-toolbar',{draggable:draggableAndNotRoot})},connectedToolbar);}var titleDiv=connectIfDraggable(react_1[\"default\"].createElement(\"div\",{title:title,className:\"mosaic-window-title\"},title));var hasAdditionalControls=!isEmpty_1[\"default\"](additionalControls);return react_1[\"default\"].createElement(\"div\",{className:classnames_1[\"default\"]('mosaic-window-toolbar',{draggable:draggableAndNotRoot})},titleDiv,react_1[\"default\"].createElement(\"div\",{className:classnames_1[\"default\"]('mosaic-window-controls',OptionalBlueprint_1.OptionalBlueprint.getClasses('BUTTON_GROUP'))},hasAdditionalControls&&react_1[\"default\"].createElement(\"button\",{onClick:function onClick(){return _this.setAdditionalControlsOpen(!additionalControlsOpen);},className:classnames_1[\"default\"](OptionalBlueprint_1.OptionalBlueprint.getClasses('BUTTON','MINIMAL'),OptionalBlueprint_1.OptionalBlueprint.getIconClass('MORE'),(_a={},_a[OptionalBlueprint_1.OptionalBlueprint.getClasses('ACTIVE')]=additionalControlsOpen,_a))},react_1[\"default\"].createElement(\"span\",{className:\"control-text\"},additionalControlButtonText)),hasAdditionalControls&&react_1[\"default\"].createElement(Separator_1.Separator,null),toolbarControls));};InternalMosaicWindow.prototype.checkCreateNode=function(){if(this.props.createNode==null){throw new Error('Operation invalid unless `createNode` is defined');}};InternalMosaicWindow.defaultProps={additionalControlButtonText:'More',draggable:true,renderPreview:function renderPreview(_a){var title=_a.title;return react_1[\"default\"].createElement(\"div\",{className:\"mosaic-preview\"},react_1[\"default\"].createElement(\"div\",{className:\"mosaic-window-toolbar\"},react_1[\"default\"].createElement(\"div\",{className:\"mosaic-window-title\"},title)),react_1[\"default\"].createElement(\"div\",{className:\"mosaic-window-body\"},react_1[\"default\"].createElement(\"h4\",null,title),react_1[\"default\"].createElement(OptionalBlueprint_1.OptionalBlueprint.Icon,{iconSize:72,icon:\"application\"})));},renderToolbar:null};InternalMosaicWindow.contextType=contextTypes_1.MosaicContext;return InternalMosaicWindow;}(react_1[\"default\"].Component);exports.InternalMosaicWindow=InternalMosaicWindow;var dragSource={beginDrag:function beginDrag(props,_monitor,component){if(props.onDragStart){props.onDragStart();}// TODO: Actually just delete instead of hiding\n// The defer is necessary as the element must be present on start for HTML DnD to not cry\nvar hideTimer=defer_1[\"default\"](function(){return component.context.mosaicActions.hide(component.props.path);});return{mosaicId:component.context.mosaicId,hideTimer:hideTimer};},endDrag:function endDrag(props,monitor,component){var hideTimer=monitor.getItem().hideTimer;// If the hide call hasn't happened yet, cancel it\nwindow.clearTimeout(hideTimer);var ownPath=component.props.path;var dropResult=monitor.getDropResult()||{};var mosaicActions=component.context.mosaicActions;var position=dropResult.position,destinationPath=dropResult.path;if(position!=null&&destinationPath!=null&&!isEqual_1[\"default\"](destinationPath,ownPath)){mosaicActions.updateTree(mosaicUpdates_1.createDragToUpdates(mosaicActions.getRoot(),ownPath,destinationPath,position));if(props.onDragEnd){props.onDragEnd('drop');}}else{// TODO: restore node from captured state\nmosaicActions.updateTree([{path:dropRight_1[\"default\"](ownPath),spec:{splitPercentage:{$set:null}}}]);if(props.onDragEnd){props.onDragEnd('reset');}}}};var dropTarget={};// Each step exported here just to keep react-hot-loader happy\nexports.SourceConnectedInternalMosaicWindow=react_dnd_1.DragSource(types_1.MosaicDragType.WINDOW,dragSource,function(connect,_monitor){return{connectDragSource:connect.dragSource(),connectDragPreview:connect.dragPreview()};})(InternalMosaicWindow);exports.SourceDropConnectedInternalMosaicWindow=react_dnd_1.DropTarget(types_1.MosaicDragType.WINDOW,dropTarget,function(connect,monitor){return{connectDropTarget:connect.dropTarget(),isOver:monitor.isOver(),draggedMosaicId:(monitor.getItem()||{}).mosaicId};})(exports.SourceConnectedInternalMosaicWindow);var MosaicWindow=/** @class */function(_super){__extends(MosaicWindow,_super);function MosaicWindow(){return _super!==null&&_super.apply(this,arguments)||this;}MosaicWindow.prototype.render=function(){return react_1[\"default\"].createElement(exports.SourceDropConnectedInternalMosaicWindow,__assign({},this.props));};return MosaicWindow;}(react_1[\"default\"].PureComponent);exports.MosaicWindow=MosaicWindow;;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(__extends,\"__extends\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/MosaicWindow.js\");reactHotLoader.register(__assign,\"__assign\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/MosaicWindow.js\");reactHotLoader.register(__importDefault,\"__importDefault\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/MosaicWindow.js\");reactHotLoader.register(classnames_1,\"classnames_1\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/MosaicWindow.js\");reactHotLoader.register(defer_1,\"defer_1\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/MosaicWindow.js\");reactHotLoader.register(dropRight_1,\"dropRight_1\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/MosaicWindow.js\");reactHotLoader.register(isEmpty_1,\"isEmpty_1\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/MosaicWindow.js\");reactHotLoader.register(isEqual_1,\"isEqual_1\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/MosaicWindow.js\");reactHotLoader.register(values_1,\"values_1\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/MosaicWindow.js\");reactHotLoader.register(react_1,\"react_1\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/MosaicWindow.js\");reactHotLoader.register(InternalMosaicWindow,\"InternalMosaicWindow\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/MosaicWindow.js\");reactHotLoader.register(dragSource,\"dragSource\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/MosaicWindow.js\");reactHotLoader.register(dropTarget,\"dropTarget\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/MosaicWindow.js\");reactHotLoader.register(MosaicWindow,\"MosaicWindow\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/MosaicWindow.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-mosaic-component/lib/MosaicWindow.js\n");

/***/ }),

/***/ "./node_modules/react-mosaic-component/lib/MosaicZeroState.js":
/*!********************************************************************!*\
  !*** ./node_modules/react-mosaic-component/lib/MosaicZeroState.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};var __extends=this&&this.__extends||function(){var _extendStatics=function extendStatics(d,b){_extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;}||function(d,b){for(var p in b){if(b.hasOwnProperty(p))d[p]=b[p];}};return _extendStatics(d,b);};return function(d,b){_extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};}();var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{\"default\":mod};};Object.defineProperty(exports,\"__esModule\",{value:true});exports.MosaicZeroState=void 0;var classnames_1=__importDefault(__webpack_require__(/*! classnames */ \"./node_modules/classnames/index.js\"));var noop_1=__importDefault(__webpack_require__(/*! lodash/noop */ \"./node_modules/lodash/noop.js\"));var react_1=__importDefault(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));var contextTypes_1=__webpack_require__(/*! ./contextTypes */ \"./node_modules/react-mosaic-component/lib/contextTypes.js\");var OptionalBlueprint_1=__webpack_require__(/*! ./util/OptionalBlueprint */ \"./node_modules/react-mosaic-component/lib/util/OptionalBlueprint.js\");var MosaicZeroState=/** @class */function(_super){__extends(MosaicZeroState,_super);function MosaicZeroState(){var _this=_super!==null&&_super.apply(this,arguments)||this;_this.replace=function(){return Promise.resolve(_this.props.createNode()).then(function(node){return _this.context.mosaicActions.replaceWith([],node);})[\"catch\"](noop_1[\"default\"]);};// Swallow rejections (i.e. on user cancel)\nreturn _this;}MosaicZeroState.prototype.render=function(){return react_1[\"default\"].createElement(\"div\",{className:classnames_1[\"default\"]('mosaic-zero-state',OptionalBlueprint_1.OptionalBlueprint.getClasses('NON_IDEAL_STATE'))},react_1[\"default\"].createElement(\"div\",{className:OptionalBlueprint_1.OptionalBlueprint.getClasses('NON_IDEAL_STATE_VISUAL')},react_1[\"default\"].createElement(OptionalBlueprint_1.OptionalBlueprint.Icon,{iconSize:120,icon:\"applications\"})),react_1[\"default\"].createElement(\"h4\",{className:OptionalBlueprint_1.OptionalBlueprint.getClasses('HEADING')},\"No Windows Present\"),react_1[\"default\"].createElement(\"div\",null,this.props.createNode&&react_1[\"default\"].createElement(\"button\",{className:classnames_1[\"default\"](OptionalBlueprint_1.OptionalBlueprint.getClasses('BUTTON'),OptionalBlueprint_1.OptionalBlueprint.getIconClass('ADD')),onClick:this.replace},\"Add New Window\")));};MosaicZeroState.contextType=contextTypes_1.MosaicContext;return MosaicZeroState;}(react_1[\"default\"].PureComponent);exports.MosaicZeroState=MosaicZeroState;;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(__extends,\"__extends\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/MosaicZeroState.js\");reactHotLoader.register(__importDefault,\"__importDefault\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/MosaicZeroState.js\");reactHotLoader.register(classnames_1,\"classnames_1\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/MosaicZeroState.js\");reactHotLoader.register(noop_1,\"noop_1\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/MosaicZeroState.js\");reactHotLoader.register(react_1,\"react_1\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/MosaicZeroState.js\");reactHotLoader.register(MosaicZeroState,\"MosaicZeroState\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/MosaicZeroState.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4uL3NyYy9Nb3NhaWNaZXJvU3RhdGUudHN4Pzc4ZmYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6InM4QkFBQSw4R0FDQSxvR0FDQSwrRkFFQSwwSEFFQSxtSkFNQSxrREFBMEQsa0NBQTFELHVGQXlCVSxjQUFVLFdBQ2hCLGNBQU8sQ0FBQyxPQUFSLENBQWdCLEtBQUksQ0FBQyxLQUFMLENBQVcsVUFBWCxFQUFoQixFQUNHLElBREgsQ0FDUSxTQUFDLElBQUQsQ0FBSyxDQUFLLFlBQUksQ0FBQyxPQUFMLENBQWEsYUFBYixDQUEyQixXQUEzQixDQUF1QyxFQUF2QyxPQUFnRCxDQURsRSxXQUVTLGlCQUZULEVBRWMsQ0FIUixDQUdVO2FBQ25CLENBekJDLDRDQUNFLE1BQ0UseUNBQUssU0FBUyxDQUFFLHdCQUFXLG1CQUFYLENBQWdDLHNDQUFrQixVQUFsQixDQUE2QixpQkFBN0IsQ0FBaEMsQ0FBaEIsRUFDRSx3Q0FBSyxTQUFTLENBQUUsc0NBQWtCLFVBQWxCLENBQTZCLHdCQUE3QixDQUFoQixFQUNFLGlDQUFDLHNDQUFrQixJQUFuQixDQUF1QixDQUFDLFFBQVEsQ0FBRSxHQUFYLENBQWdCLElBQUksQ0FBQyxjQUFyQixDQUF2QixDQURGLENBREYsQ0FJRSx1Q0FBSSxTQUFTLENBQUUsc0NBQWtCLFVBQWxCLENBQTZCLFNBQTdCLENBQWYsRUFBc0Qsb0JBQXRELENBSkYsQ0FLRSw0Q0FDRyxLQUFLLEtBQUwsQ0FBVyxVQUFYLEVBQ0MsMkNBQ0UsU0FBUyxDQUFFLHdCQUFXLHNDQUFrQixVQUFsQixDQUE2QixRQUE3QixDQUFYLENBQW1ELHNDQUFrQixZQUFsQixDQUErQixLQUEvQixDQUFuRCxDQURiLENBRUUsT0FBTyxDQUFFLEtBQUssT0FGaEIsRUFFdUIsZ0JBRnZCLENBRkosQ0FMRixDQURGLENBa0JELENBbkJELENBSE8sNEJBQWMsNEJBQWQsQ0E0QlQsdUJBQUMsQ0E3QkQsQ0FBMEQsbUJBQU0sYUFBaEUsRUFBYSx3QyxtZkFaYixZLDJKQUNBLE0scUpBQ0EsTyxzSkFVQSxlIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3JlYWN0LW1vc2FpYy1jb21wb25lbnQvbGliL01vc2FpY1plcm9TdGF0ZS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk1vc2FpY1plcm9TdGF0ZSA9IHZvaWQgMDtcbnZhciBjbGFzc25hbWVzXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xudmFyIG5vb3BfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwibG9kYXNoL25vb3BcIikpO1xudmFyIHJlYWN0XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcbnZhciBjb250ZXh0VHlwZXNfMSA9IHJlcXVpcmUoXCIuL2NvbnRleHRUeXBlc1wiKTtcbnZhciBPcHRpb25hbEJsdWVwcmludF8xID0gcmVxdWlyZShcIi4vdXRpbC9PcHRpb25hbEJsdWVwcmludFwiKTtcbnZhciBNb3NhaWNaZXJvU3RhdGUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKE1vc2FpY1plcm9TdGF0ZSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBNb3NhaWNaZXJvU3RhdGUoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5yZXBsYWNlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShfdGhpcy5wcm9wcy5jcmVhdGVOb2RlKCkpXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKG5vZGUpIHsgcmV0dXJuIF90aGlzLmNvbnRleHQubW9zYWljQWN0aW9ucy5yZXBsYWNlV2l0aChbXSwgbm9kZSk7IH0pXG4gICAgICAgICAgICAgICAgLmNhdGNoKG5vb3BfMS5kZWZhdWx0KTtcbiAgICAgICAgfTsgLy8gU3dhbGxvdyByZWplY3Rpb25zIChpLmUuIG9uIHVzZXIgY2FuY2VsKVxuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIE1vc2FpY1plcm9TdGF0ZS5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBjbGFzc25hbWVzXzEuZGVmYXVsdCgnbW9zYWljLXplcm8tc3RhdGUnLCBPcHRpb25hbEJsdWVwcmludF8xLk9wdGlvbmFsQmx1ZXByaW50LmdldENsYXNzZXMoJ05PTl9JREVBTF9TVEFURScpKSB9LFxuICAgICAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IE9wdGlvbmFsQmx1ZXByaW50XzEuT3B0aW9uYWxCbHVlcHJpbnQuZ2V0Q2xhc3NlcygnTk9OX0lERUFMX1NUQVRFX1ZJU1VBTCcpIH0sXG4gICAgICAgICAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoT3B0aW9uYWxCbHVlcHJpbnRfMS5PcHRpb25hbEJsdWVwcmludC5JY29uLCB7IGljb25TaXplOiAxMjAsIGljb246IFwiYXBwbGljYXRpb25zXCIgfSkpLFxuICAgICAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJoNFwiLCB7IGNsYXNzTmFtZTogT3B0aW9uYWxCbHVlcHJpbnRfMS5PcHRpb25hbEJsdWVwcmludC5nZXRDbGFzc2VzKCdIRUFESU5HJykgfSwgXCJObyBXaW5kb3dzIFByZXNlbnRcIiksXG4gICAgICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCBudWxsLCB0aGlzLnByb3BzLmNyZWF0ZU5vZGUgJiYgKHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIsIHsgY2xhc3NOYW1lOiBjbGFzc25hbWVzXzEuZGVmYXVsdChPcHRpb25hbEJsdWVwcmludF8xLk9wdGlvbmFsQmx1ZXByaW50LmdldENsYXNzZXMoJ0JVVFRPTicpLCBPcHRpb25hbEJsdWVwcmludF8xLk9wdGlvbmFsQmx1ZXByaW50LmdldEljb25DbGFzcygnQUREJykpLCBvbkNsaWNrOiB0aGlzLnJlcGxhY2UgfSwgXCJBZGQgTmV3IFdpbmRvd1wiKSkpKSk7XG4gICAgfTtcbiAgICBNb3NhaWNaZXJvU3RhdGUuY29udGV4dFR5cGUgPSBjb250ZXh0VHlwZXNfMS5Nb3NhaWNDb250ZXh0O1xuICAgIHJldHVybiBNb3NhaWNaZXJvU3RhdGU7XG59KHJlYWN0XzEuZGVmYXVsdC5QdXJlQ29tcG9uZW50KSk7XG5leHBvcnRzLk1vc2FpY1plcm9TdGF0ZSA9IE1vc2FpY1plcm9TdGF0ZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU1vc2FpY1plcm9TdGF0ZS5qcy5tYXAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/react-mosaic-component/lib/MosaicZeroState.js\n");

/***/ }),

/***/ "./node_modules/react-mosaic-component/lib/RootDropTargets.js":
/*!********************************************************************!*\
  !*** ./node_modules/react-mosaic-component/lib/RootDropTargets.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};var __extends=this&&this.__extends||function(){var _extendStatics=function extendStatics(d,b){_extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;}||function(d,b){for(var p in b){if(b.hasOwnProperty(p))d[p]=b[p];}};return _extendStatics(d,b);};return function(d,b){_extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};}();var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{\"default\":mod};};Object.defineProperty(exports,\"__esModule\",{value:true});exports.RootDropTargets=void 0;var classnames_1=__importDefault(__webpack_require__(/*! classnames */ \"./node_modules/classnames/index.js\"));var values_1=__importDefault(__webpack_require__(/*! lodash/values */ \"./node_modules/lodash/values.js\"));var react_1=__importDefault(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));var react_dnd_1=__webpack_require__(/*! react-dnd */ \"./node_modules/react-dnd/dist/esm/index.js\");var internalTypes_1=__webpack_require__(/*! ./internalTypes */ \"./node_modules/react-mosaic-component/lib/internalTypes.js\");var MosaicDropTarget_1=__webpack_require__(/*! ./MosaicDropTarget */ \"./node_modules/react-mosaic-component/lib/MosaicDropTarget.js\");var types_1=__webpack_require__(/*! ./types */ \"./node_modules/react-mosaic-component/lib/types.js\");var RootDropTargetsClass=/** @class */function(_super){__extends(RootDropTargetsClass,_super);function RootDropTargetsClass(){return _super!==null&&_super.apply(this,arguments)||this;}RootDropTargetsClass.prototype.render=function(){return react_1[\"default\"].createElement(\"div\",{className:classnames_1[\"default\"]('drop-target-container',{'-dragging':this.props.isDragging})},values_1[\"default\"](internalTypes_1.MosaicDropTargetPosition).map(function(position){return react_1[\"default\"].createElement(MosaicDropTarget_1.MosaicDropTarget,{position:position,path:[],key:position});}));};return RootDropTargetsClass;}(react_1[\"default\"].PureComponent);var dropTarget={};exports.RootDropTargets=react_dnd_1.DropTarget(types_1.MosaicDragType.WINDOW,dropTarget,function(_connect,monitor){return{isDragging:monitor.getItem()!==null&&monitor.getItemType()===types_1.MosaicDragType.WINDOW};})(RootDropTargetsClass);;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(__extends,\"__extends\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/RootDropTargets.js\");reactHotLoader.register(__importDefault,\"__importDefault\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/RootDropTargets.js\");reactHotLoader.register(classnames_1,\"classnames_1\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/RootDropTargets.js\");reactHotLoader.register(values_1,\"values_1\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/RootDropTargets.js\");reactHotLoader.register(react_1,\"react_1\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/RootDropTargets.js\");reactHotLoader.register(RootDropTargetsClass,\"RootDropTargetsClass\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/RootDropTargets.js\");reactHotLoader.register(dropTarget,\"dropTarget\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/RootDropTargets.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4uL3NyYy9Sb290RHJvcFRhcmdldHMudHN4PzIwZTQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6InM4QkFBQSw4R0FDQSwwR0FDQSwrRkFDQSxtR0FFQSw2SEFDQSxzSUFDQSxxR0FNQSx1REFBbUMsdUNBQW5DLGdDLHlEQWNDLENBYkMsaURBQ0UsTUFDRSx5Q0FDRSxTQUFTLENBQUUsd0JBQVcsdUJBQVgsQ0FBb0MsQ0FDN0MsWUFBYSxLQUFLLEtBQUwsQ0FBVyxVQURxQixDQUFwQyxDQURiLEVBS0csb0JBQWlDLHdDQUFqQyxFQUEyRCxHQUEzRCxDQUErRCxTQUFDLFFBQUQsQ0FBUyxDQUFLLE1BQzVFLGtDQUFDLG1DQUFELENBQWlCLENBQUMsUUFBUSxDQUFFLFFBQVgsQ0FBcUIsSUFBSSxDQUFFLEVBQTNCLENBQStCLEdBQUcsQ0FEeUIsUUFDM0QsQ0FBakIsQ0FENEUsQ0FFN0UsQ0FGQSxDQUxILENBREYsQ0FXRCxDQVpELENBYUYsNEJBQUMsQ0FkRCxDQUFtQyxtQkFBTSxhQUF6QyxFQWdCQSxHQUFNLFdBQVUsQ0FBRyxFQUFuQixDQUNhLHdCQUFrQix1QkFDN0IsdUJBQWUsTUFEYyxDQUU3QixVQUY2QixDQUc3QixTQUFDLFFBQUQsQ0FBVyxPQUFYLENBQWtCLENBQTJCLE1BQUMsQ0FDNUMsVUFBVSxDQUFFLE9BQU8sQ0FBQyxPQUFSLEtBQXNCLElBQXRCLEVBQThCLE9BQU8sQ0FBQyxXQUFSLEtBQTBCLHVCQUFlLE1BRHZDLENBQUQsQ0FFM0MsQ0FMMkIsRUFNN0Isb0JBTjZCLENBQWxCLEMsbWZBOUJiLFksMkpBQ0EsUSx1SkFDQSxPLHNKQVdBLG9CLG1LQWdCTSxVIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3JlYWN0LW1vc2FpYy1jb21wb25lbnQvbGliL1Jvb3REcm9wVGFyZ2V0cy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlJvb3REcm9wVGFyZ2V0cyA9IHZvaWQgMDtcbnZhciBjbGFzc25hbWVzXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xudmFyIHZhbHVlc18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJsb2Rhc2gvdmFsdWVzXCIpKTtcbnZhciByZWFjdF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG52YXIgcmVhY3RfZG5kXzEgPSByZXF1aXJlKFwicmVhY3QtZG5kXCIpO1xudmFyIGludGVybmFsVHlwZXNfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsVHlwZXNcIik7XG52YXIgTW9zYWljRHJvcFRhcmdldF8xID0gcmVxdWlyZShcIi4vTW9zYWljRHJvcFRhcmdldFwiKTtcbnZhciB0eXBlc18xID0gcmVxdWlyZShcIi4vdHlwZXNcIik7XG52YXIgUm9vdERyb3BUYXJnZXRzQ2xhc3MgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFJvb3REcm9wVGFyZ2V0c0NsYXNzLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFJvb3REcm9wVGFyZ2V0c0NsYXNzKCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIFJvb3REcm9wVGFyZ2V0c0NsYXNzLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAocmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IGNsYXNzbmFtZXNfMS5kZWZhdWx0KCdkcm9wLXRhcmdldC1jb250YWluZXInLCB7XG4gICAgICAgICAgICAgICAgJy1kcmFnZ2luZyc6IHRoaXMucHJvcHMuaXNEcmFnZ2luZyxcbiAgICAgICAgICAgIH0pIH0sIHZhbHVlc18xLmRlZmF1bHQoaW50ZXJuYWxUeXBlc18xLk1vc2FpY0Ryb3BUYXJnZXRQb3NpdGlvbikubWFwKGZ1bmN0aW9uIChwb3NpdGlvbikgeyByZXR1cm4gKHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KE1vc2FpY0Ryb3BUYXJnZXRfMS5Nb3NhaWNEcm9wVGFyZ2V0LCB7IHBvc2l0aW9uOiBwb3NpdGlvbiwgcGF0aDogW10sIGtleTogcG9zaXRpb24gfSkpOyB9KSkpO1xuICAgIH07XG4gICAgcmV0dXJuIFJvb3REcm9wVGFyZ2V0c0NsYXNzO1xufShyZWFjdF8xLmRlZmF1bHQuUHVyZUNvbXBvbmVudCkpO1xudmFyIGRyb3BUYXJnZXQgPSB7fTtcbmV4cG9ydHMuUm9vdERyb3BUYXJnZXRzID0gcmVhY3RfZG5kXzEuRHJvcFRhcmdldCh0eXBlc18xLk1vc2FpY0RyYWdUeXBlLldJTkRPVywgZHJvcFRhcmdldCwgZnVuY3Rpb24gKF9jb25uZWN0LCBtb25pdG9yKSB7IHJldHVybiAoe1xuICAgIGlzRHJhZ2dpbmc6IG1vbml0b3IuZ2V0SXRlbSgpICE9PSBudWxsICYmIG1vbml0b3IuZ2V0SXRlbVR5cGUoKSA9PT0gdHlwZXNfMS5Nb3NhaWNEcmFnVHlwZS5XSU5ET1csXG59KTsgfSkoUm9vdERyb3BUYXJnZXRzQ2xhc3MpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Um9vdERyb3BUYXJnZXRzLmpzLm1hcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/react-mosaic-component/lib/RootDropTargets.js\n");

/***/ }),

/***/ "./node_modules/react-mosaic-component/lib/Split.js":
/*!**********************************************************!*\
  !*** ./node_modules/react-mosaic-component/lib/Split.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};var __extends=this&&this.__extends||function(){var _extendStatics=function extendStatics(d,b){_extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;}||function(d,b){for(var p in b){if(b.hasOwnProperty(p))d[p]=b[p];}};return _extendStatics(d,b);};return function(d,b){_extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};}();var __assign=this&&this.__assign||function(){__assign=Object.assign||function(t){for(var s,i=1,n=arguments.length;i<n;i++){s=arguments[i];for(var p in s){if(Object.prototype.hasOwnProperty.call(s,p))t[p]=s[p];}}return t;};return __assign.apply(this,arguments);};var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{\"default\":mod};};Object.defineProperty(exports,\"__esModule\",{value:true});exports.Split=void 0;var classnames_1=__importDefault(__webpack_require__(/*! classnames */ \"./node_modules/classnames/index.js\"));var clamp_1=__importDefault(__webpack_require__(/*! lodash/clamp */ \"./node_modules/lodash/clamp.js\"));var throttle_1=__importDefault(__webpack_require__(/*! lodash/throttle */ \"./node_modules/lodash/throttle.js\"));var react_1=__importDefault(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));var BoundingBox_1=__webpack_require__(/*! ./util/BoundingBox */ \"./node_modules/react-mosaic-component/lib/util/BoundingBox.js\");var RESIZE_THROTTLE_MS=1000/30;// 30 fps\nvar TOUCH_EVENT_OPTIONS={capture:true,passive:false};var Split=/** @class */function(_super){__extends(Split,_super);function Split(){var _this=_super!==null&&_super.apply(this,arguments)||this;_this.rootElement=react_1[\"default\"].createRef();_this.listenersBound=false;_this.onMouseDown=function(event){if(!isTouchEvent(event)){if(event.button!==0){return;}}event.preventDefault();_this.bindListeners();};_this.onMouseUp=function(event){_this.unbindListeners();var percentage=_this.calculateRelativePercentage(event);_this.props.onRelease(percentage);};_this.onMouseMove=function(event){event.preventDefault();event.stopPropagation();_this.throttledUpdatePercentage(event);};_this.throttledUpdatePercentage=throttle_1[\"default\"](function(event){var percentage=_this.calculateRelativePercentage(event);if(percentage!==_this.props.splitPercentage){_this.props.onChange(percentage);}},RESIZE_THROTTLE_MS);return _this;}Split.prototype.render=function(){var direction=this.props.direction;return react_1[\"default\"].createElement(\"div\",{className:classnames_1[\"default\"]('mosaic-split',{'-row':direction==='row','-column':direction==='column'}),ref:this.rootElement,onMouseDown:this.onMouseDown,style:this.computeStyle()},react_1[\"default\"].createElement(\"div\",{className:\"mosaic-split-line\"}));};Split.prototype.componentDidMount=function(){this.rootElement.current.addEventListener('touchstart',this.onMouseDown,TOUCH_EVENT_OPTIONS);};Split.prototype.componentWillUnmount=function(){this.unbindListeners();if(this.rootElement.current){this.rootElement.current.ownerDocument.removeEventListener('touchstart',this.onMouseDown,TOUCH_EVENT_OPTIONS);}};Split.prototype.bindListeners=function(){if(!this.listenersBound){this.rootElement.current.ownerDocument.addEventListener('mousemove',this.onMouseMove,true);this.rootElement.current.ownerDocument.addEventListener('touchmove',this.onMouseMove,TOUCH_EVENT_OPTIONS);this.rootElement.current.ownerDocument.addEventListener('mouseup',this.onMouseUp,true);this.rootElement.current.ownerDocument.addEventListener('touchend',this.onMouseUp,true);this.listenersBound=true;}};Split.prototype.unbindListeners=function(){if(this.rootElement.current){this.rootElement.current.ownerDocument.removeEventListener('mousemove',this.onMouseMove,true);this.rootElement.current.ownerDocument.removeEventListener('touchmove',this.onMouseMove,TOUCH_EVENT_OPTIONS);this.rootElement.current.ownerDocument.removeEventListener('mouseup',this.onMouseUp,true);this.rootElement.current.ownerDocument.removeEventListener('touchend',this.onMouseUp,true);this.listenersBound=false;}};Split.prototype.computeStyle=function(){var _a;var _b=this.props,boundingBox=_b.boundingBox,direction=_b.direction,splitPercentage=_b.splitPercentage;var positionStyle=direction==='column'?'top':'left';var absolutePercentage=BoundingBox_1.BoundingBox.getAbsoluteSplitPercentage(boundingBox,splitPercentage,direction);return __assign(__assign({},BoundingBox_1.BoundingBox.asStyles(boundingBox)),(_a={},_a[positionStyle]=absolutePercentage+\"%\",_a));};Split.prototype.calculateRelativePercentage=function(event){var _a=this.props,minimumPaneSizePercentage=_a.minimumPaneSizePercentage,direction=_a.direction,boundingBox=_a.boundingBox;var parentBBox=this.rootElement.current.parentElement.getBoundingClientRect();var location=isTouchEvent(event)?event.changedTouches[0]:event;var absolutePercentage;if(direction==='column'){absolutePercentage=(location.clientY-parentBBox.top)/parentBBox.height*100.0;}else{absolutePercentage=(location.clientX-parentBBox.left)/parentBBox.width*100.0;}var relativePercentage=BoundingBox_1.BoundingBox.getRelativeSplitPercentage(boundingBox,absolutePercentage,direction);return clamp_1[\"default\"](relativePercentage,minimumPaneSizePercentage,100-minimumPaneSizePercentage);};Split.defaultProps={onChange:function onChange(){return void 0;},onRelease:function onRelease(){return void 0;},minimumPaneSizePercentage:20};return Split;}(react_1[\"default\"].PureComponent);exports.Split=Split;function isTouchEvent(event){return event.changedTouches!=null;};(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(__extends,\"__extends\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/Split.js\");reactHotLoader.register(__assign,\"__assign\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/Split.js\");reactHotLoader.register(__importDefault,\"__importDefault\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/Split.js\");reactHotLoader.register(classnames_1,\"classnames_1\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/Split.js\");reactHotLoader.register(clamp_1,\"clamp_1\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/Split.js\");reactHotLoader.register(throttle_1,\"throttle_1\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/Split.js\");reactHotLoader.register(react_1,\"react_1\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/Split.js\");reactHotLoader.register(RESIZE_THROTTLE_MS,\"RESIZE_THROTTLE_MS\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/Split.js\");reactHotLoader.register(TOUCH_EVENT_OPTIONS,\"TOUCH_EVENT_OPTIONS\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/Split.js\");reactHotLoader.register(Split,\"Split\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/Split.js\");reactHotLoader.register(isTouchEvent,\"isTouchEvent\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/Split.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-mosaic-component/lib/Split.js\n");

/***/ }),

/***/ "./node_modules/react-mosaic-component/lib/buttons/ExpandButton.js":
/*!*************************************************************************!*\
  !*** ./node_modules/react-mosaic-component/lib/buttons/ExpandButton.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};var __extends=this&&this.__extends||function(){var _extendStatics=function extendStatics(d,b){_extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;}||function(d,b){for(var p in b){if(b.hasOwnProperty(p))d[p]=b[p];}};return _extendStatics(d,b);};return function(d,b){_extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};}();var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{\"default\":mod};};Object.defineProperty(exports,\"__esModule\",{value:true});exports.ExpandButton=void 0;var classnames_1=__importDefault(__webpack_require__(/*! classnames */ \"./node_modules/classnames/index.js\"));var react_1=__importDefault(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));var contextTypes_1=__webpack_require__(/*! ../contextTypes */ \"./node_modules/react-mosaic-component/lib/contextTypes.js\");var OptionalBlueprint_1=__webpack_require__(/*! ../util/OptionalBlueprint */ \"./node_modules/react-mosaic-component/lib/util/OptionalBlueprint.js\");var MosaicButton_1=__webpack_require__(/*! ./MosaicButton */ \"./node_modules/react-mosaic-component/lib/buttons/MosaicButton.js\");var ExpandButton=/** @class */function(_super){__extends(ExpandButton,_super);function ExpandButton(){return _super!==null&&_super.apply(this,arguments)||this;}ExpandButton.prototype.render=function(){var _this=this;return react_1[\"default\"].createElement(contextTypes_1.MosaicContext.Consumer,null,function(_a){var mosaicActions=_a.mosaicActions;return MosaicButton_1.createDefaultToolbarButton('Expand',classnames_1[\"default\"]('expand-button',OptionalBlueprint_1.OptionalBlueprint.getIconClass('MAXIMIZE')),_this.createExpand(mosaicActions));});};ExpandButton.prototype.createExpand=function(mosaicActions){var _this=this;return function(){mosaicActions.expand(_this.context.mosaicWindowActions.getPath());if(_this.props.onClick){_this.props.onClick();}};};ExpandButton.contextType=contextTypes_1.MosaicWindowContext;return ExpandButton;}(react_1[\"default\"].PureComponent);exports.ExpandButton=ExpandButton;;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(__extends,\"__extends\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/buttons/ExpandButton.js\");reactHotLoader.register(__importDefault,\"__importDefault\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/buttons/ExpandButton.js\");reactHotLoader.register(classnames_1,\"classnames_1\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/buttons/ExpandButton.js\");reactHotLoader.register(react_1,\"react_1\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/buttons/ExpandButton.js\");reactHotLoader.register(ExpandButton,\"ExpandButton\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/buttons/ExpandButton.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4uLy4uL3NyYy9idXR0b25zL0V4cGFuZEJ1dHRvbi50c3g/NjcyZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoibThCQUFBLDhHQUNBLCtGQUVBLDJIQUNBLG9KQUNBLGtJQUVBLCtDQUFrQywrQkFBbEMsd0IseURBMkJDLENBdkJDLHdEQUNFLE1BQ0Usa0NBQUMsNkJBQWMsUUFBZixDQUF1QixJQUF2QixDQUNHLFNBQUMsRUFBRCxDQUFrQixDLEdBQWYsY0FBYSxpQixDQUNmLGlEQUNFLFFBREYsQ0FFRSx3QkFBVyxlQUFYLENBQTRCLHNDQUFrQixZQUFsQixDQUErQixVQUEvQixDQUE1QixDQUZGLENBR0UsS0FBSSxDQUFDLFlBQUwsQ0FBa0IsYUFBbEIsQ0FIRixFQUlDLENBTkwsQ0FERixDQVdELENBWkQsQ0FjUSxvQ0FBUixTQUFxQixhQUFyQixDQUEwRCxDQUExRCxlQUNFLE1BQU8sWUFDTCxhQUFhLENBQUMsTUFBZCxDQUFxQixLQUFJLENBQUMsT0FBTCxDQUFhLG1CQUFiLENBQWlDLE9BQWpDLEVBQXJCLEVBRUEsR0FBSSxLQUFJLENBQUMsS0FBTCxDQUFXLE9BQWYsQ0FBd0IsQ0FDdEIsS0FBSSxDQUFDLEtBQUwsQ0FBVyxPQUFYLEdBQ0QsQ0FDRixDQU5ELENBT0QsQ0FSTyxDQWpCRCx5QkFBYyxrQ0FBZCxDQTBCVCxvQkFBQyxDQTNCRCxDQUFrQyxtQkFBTSxhQUF4QyxFQUFhLGtDLDZmQVBiLFksZ0tBQ0EsTywySkFNQSxZIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3JlYWN0LW1vc2FpYy1jb21wb25lbnQvbGliL2J1dHRvbnMvRXhwYW5kQnV0dG9uLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRXhwYW5kQnV0dG9uID0gdm9pZCAwO1xudmFyIGNsYXNzbmFtZXNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG52YXIgcmVhY3RfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xudmFyIGNvbnRleHRUeXBlc18xID0gcmVxdWlyZShcIi4uL2NvbnRleHRUeXBlc1wiKTtcbnZhciBPcHRpb25hbEJsdWVwcmludF8xID0gcmVxdWlyZShcIi4uL3V0aWwvT3B0aW9uYWxCbHVlcHJpbnRcIik7XG52YXIgTW9zYWljQnV0dG9uXzEgPSByZXF1aXJlKFwiLi9Nb3NhaWNCdXR0b25cIik7XG52YXIgRXhwYW5kQnV0dG9uID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhFeHBhbmRCdXR0b24sIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRXhwYW5kQnV0dG9uKCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIEV4cGFuZEJ1dHRvbi5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICByZXR1cm4gKHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KGNvbnRleHRUeXBlc18xLk1vc2FpY0NvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgdmFyIG1vc2FpY0FjdGlvbnMgPSBfYS5tb3NhaWNBY3Rpb25zO1xuICAgICAgICAgICAgcmV0dXJuIE1vc2FpY0J1dHRvbl8xLmNyZWF0ZURlZmF1bHRUb29sYmFyQnV0dG9uKCdFeHBhbmQnLCBjbGFzc25hbWVzXzEuZGVmYXVsdCgnZXhwYW5kLWJ1dHRvbicsIE9wdGlvbmFsQmx1ZXByaW50XzEuT3B0aW9uYWxCbHVlcHJpbnQuZ2V0SWNvbkNsYXNzKCdNQVhJTUlaRScpKSwgX3RoaXMuY3JlYXRlRXhwYW5kKG1vc2FpY0FjdGlvbnMpKTtcbiAgICAgICAgfSkpO1xuICAgIH07XG4gICAgRXhwYW5kQnV0dG9uLnByb3RvdHlwZS5jcmVhdGVFeHBhbmQgPSBmdW5jdGlvbiAobW9zYWljQWN0aW9ucykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgbW9zYWljQWN0aW9ucy5leHBhbmQoX3RoaXMuY29udGV4dC5tb3NhaWNXaW5kb3dBY3Rpb25zLmdldFBhdGgoKSk7XG4gICAgICAgICAgICBpZiAoX3RoaXMucHJvcHMub25DbGljaykge1xuICAgICAgICAgICAgICAgIF90aGlzLnByb3BzLm9uQ2xpY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9O1xuICAgIEV4cGFuZEJ1dHRvbi5jb250ZXh0VHlwZSA9IGNvbnRleHRUeXBlc18xLk1vc2FpY1dpbmRvd0NvbnRleHQ7XG4gICAgcmV0dXJuIEV4cGFuZEJ1dHRvbjtcbn0ocmVhY3RfMS5kZWZhdWx0LlB1cmVDb21wb25lbnQpKTtcbmV4cG9ydHMuRXhwYW5kQnV0dG9uID0gRXhwYW5kQnV0dG9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RXhwYW5kQnV0dG9uLmpzLm1hcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/react-mosaic-component/lib/buttons/ExpandButton.js\n");

/***/ }),

/***/ "./node_modules/react-mosaic-component/lib/buttons/MosaicButton.js":
/*!*************************************************************************!*\
  !*** ./node_modules/react-mosaic-component/lib/buttons/MosaicButton.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{\"default\":mod};};Object.defineProperty(exports,\"__esModule\",{value:true});exports.createDefaultToolbarButton=void 0;var classnames_1=__importDefault(__webpack_require__(/*! classnames */ \"./node_modules/classnames/index.js\"));var react_1=__importDefault(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));var OptionalBlueprint_1=__webpack_require__(/*! ../util/OptionalBlueprint */ \"./node_modules/react-mosaic-component/lib/util/OptionalBlueprint.js\");function createDefaultToolbarButton(title,className,onClick,text){return react_1[\"default\"].createElement(\"button\",{title:title,onClick:onClick,className:classnames_1[\"default\"]('mosaic-default-control',OptionalBlueprint_1.OptionalBlueprint.getClasses('BUTTON','MINIMAL'),className)},text&&react_1[\"default\"].createElement(\"span\",{className:\"control-text\"},text));}exports.createDefaultToolbarButton=createDefaultToolbarButton;;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(__importDefault,\"__importDefault\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/buttons/MosaicButton.js\");reactHotLoader.register(classnames_1,\"classnames_1\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/buttons/MosaicButton.js\");reactHotLoader.register(react_1,\"react_1\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/buttons/MosaicButton.js\");reactHotLoader.register(createDefaultToolbarButton,\"createDefaultToolbarButton\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/buttons/MosaicButton.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4uLy4uL3NyYy9idXR0b25zL01vc2FpY0J1dHRvbi50c3g/NzM2NiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoib2hCQUFBLDhHQUNBLCtGQUVBLG9KQUVBLFFBQWdCLDJCQUFoQixDQUNFLEtBREYsQ0FFRSxTQUZGLENBR0UsT0FIRixDQUlFLElBSkYsQ0FJZSxDQUViLE1BQ0UsNENBQ0UsS0FBSyxDQUFFLEtBRFQsQ0FFRSxPQUFPLENBQUUsT0FGWCxDQUdFLFNBQVMsQ0FBRSx3QkFBVyx3QkFBWCxDQUFxQyxzQ0FBa0IsVUFBbEIsQ0FBNkIsUUFBN0IsQ0FBdUMsU0FBdkMsQ0FBckMsQ0FBd0YsU0FBeEYsQ0FIYixFQUtHLElBQUksRUFBSSx5Q0FBTSxTQUFTLENBQUMsY0FBaEIsRUFBZ0MsSUFBaEMsQ0FMWCxDQURGLENBU0QsQ0FmRCw4RCx1VkFMQSxZLGdLQUNBLE8sMkpBSWdCLDBCIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3JlYWN0LW1vc2FpYy1jb21wb25lbnQvbGliL2J1dHRvbnMvTW9zYWljQnV0dG9uLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNyZWF0ZURlZmF1bHRUb29sYmFyQnV0dG9uID0gdm9pZCAwO1xudmFyIGNsYXNzbmFtZXNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG52YXIgcmVhY3RfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xudmFyIE9wdGlvbmFsQmx1ZXByaW50XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9PcHRpb25hbEJsdWVwcmludFwiKTtcbmZ1bmN0aW9uIGNyZWF0ZURlZmF1bHRUb29sYmFyQnV0dG9uKHRpdGxlLCBjbGFzc05hbWUsIG9uQ2xpY2ssIHRleHQpIHtcbiAgICByZXR1cm4gKHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIsIHsgdGl0bGU6IHRpdGxlLCBvbkNsaWNrOiBvbkNsaWNrLCBjbGFzc05hbWU6IGNsYXNzbmFtZXNfMS5kZWZhdWx0KCdtb3NhaWMtZGVmYXVsdC1jb250cm9sJywgT3B0aW9uYWxCbHVlcHJpbnRfMS5PcHRpb25hbEJsdWVwcmludC5nZXRDbGFzc2VzKCdCVVRUT04nLCAnTUlOSU1BTCcpLCBjbGFzc05hbWUpIH0sIHRleHQgJiYgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHsgY2xhc3NOYW1lOiBcImNvbnRyb2wtdGV4dFwiIH0sIHRleHQpKSk7XG59XG5leHBvcnRzLmNyZWF0ZURlZmF1bHRUb29sYmFyQnV0dG9uID0gY3JlYXRlRGVmYXVsdFRvb2xiYXJCdXR0b247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Nb3NhaWNCdXR0b24uanMubWFwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/react-mosaic-component/lib/buttons/MosaicButton.js\n");

/***/ }),

/***/ "./node_modules/react-mosaic-component/lib/buttons/RemoveButton.js":
/*!*************************************************************************!*\
  !*** ./node_modules/react-mosaic-component/lib/buttons/RemoveButton.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};var __extends=this&&this.__extends||function(){var _extendStatics=function extendStatics(d,b){_extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;}||function(d,b){for(var p in b){if(b.hasOwnProperty(p))d[p]=b[p];}};return _extendStatics(d,b);};return function(d,b){_extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};}();var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{\"default\":mod};};Object.defineProperty(exports,\"__esModule\",{value:true});exports.RemoveButton=void 0;var classnames_1=__importDefault(__webpack_require__(/*! classnames */ \"./node_modules/classnames/index.js\"));var react_1=__importDefault(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));var contextTypes_1=__webpack_require__(/*! ../contextTypes */ \"./node_modules/react-mosaic-component/lib/contextTypes.js\");var OptionalBlueprint_1=__webpack_require__(/*! ../util/OptionalBlueprint */ \"./node_modules/react-mosaic-component/lib/util/OptionalBlueprint.js\");var MosaicButton_1=__webpack_require__(/*! ./MosaicButton */ \"./node_modules/react-mosaic-component/lib/buttons/MosaicButton.js\");var RemoveButton=/** @class */function(_super){__extends(RemoveButton,_super);function RemoveButton(){return _super!==null&&_super.apply(this,arguments)||this;}RemoveButton.prototype.render=function(){var _this=this;return react_1[\"default\"].createElement(contextTypes_1.MosaicContext.Consumer,null,function(_a){var mosaicActions=_a.mosaicActions;return MosaicButton_1.createDefaultToolbarButton('Close Window',classnames_1[\"default\"]('close-button',OptionalBlueprint_1.OptionalBlueprint.getIconClass('CROSS')),_this.createRemove(mosaicActions));});};RemoveButton.prototype.createRemove=function(mosaicActions){var _this=this;return function(){mosaicActions.remove(_this.context.mosaicWindowActions.getPath());if(_this.props.onClick){_this.props.onClick();}};};RemoveButton.contextType=contextTypes_1.MosaicWindowContext;return RemoveButton;}(react_1[\"default\"].PureComponent);exports.RemoveButton=RemoveButton;;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(__extends,\"__extends\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/buttons/RemoveButton.js\");reactHotLoader.register(__importDefault,\"__importDefault\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/buttons/RemoveButton.js\");reactHotLoader.register(classnames_1,\"classnames_1\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/buttons/RemoveButton.js\");reactHotLoader.register(react_1,\"react_1\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/buttons/RemoveButton.js\");reactHotLoader.register(RemoveButton,\"RemoveButton\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/buttons/RemoveButton.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4uLy4uL3NyYy9idXR0b25zL1JlbW92ZUJ1dHRvbi50c3g/YTAwMSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoibThCQUFBLDhHQUNBLCtGQUVBLDJIQUNBLG9KQUNBLGtJQUVBLCtDQUFrQywrQkFBbEMsd0IseURBMkJDLENBdkJDLHdEQUNFLE1BQ0Usa0NBQUMsNkJBQWMsUUFBZixDQUF1QixJQUF2QixDQUNHLFNBQUMsRUFBRCxDQUFrQixDLEdBQWYsY0FBYSxpQixDQUNmLGlEQUNFLGNBREYsQ0FFRSx3QkFBVyxjQUFYLENBQTJCLHNDQUFrQixZQUFsQixDQUErQixPQUEvQixDQUEzQixDQUZGLENBR0UsS0FBSSxDQUFDLFlBQUwsQ0FBa0IsYUFBbEIsQ0FIRixFQUlDLENBTkwsQ0FERixDQVdELENBWkQsQ0FjUSxvQ0FBUixTQUFxQixhQUFyQixDQUEwRCxDQUExRCxlQUNFLE1BQU8sWUFDTCxhQUFhLENBQUMsTUFBZCxDQUFxQixLQUFJLENBQUMsT0FBTCxDQUFhLG1CQUFiLENBQWlDLE9BQWpDLEVBQXJCLEVBRUEsR0FBSSxLQUFJLENBQUMsS0FBTCxDQUFXLE9BQWYsQ0FBd0IsQ0FDdEIsS0FBSSxDQUFDLEtBQUwsQ0FBVyxPQUFYLEdBQ0QsQ0FDRixDQU5ELENBT0QsQ0FSTyxDQWpCRCx5QkFBYyxrQ0FBZCxDQTBCVCxvQkFBQyxDQTNCRCxDQUFrQyxtQkFBTSxhQUF4QyxFQUFhLGtDLDZmQVBiLFksZ0tBQ0EsTywySkFNQSxZIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3JlYWN0LW1vc2FpYy1jb21wb25lbnQvbGliL2J1dHRvbnMvUmVtb3ZlQnV0dG9uLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUmVtb3ZlQnV0dG9uID0gdm9pZCAwO1xudmFyIGNsYXNzbmFtZXNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG52YXIgcmVhY3RfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xudmFyIGNvbnRleHRUeXBlc18xID0gcmVxdWlyZShcIi4uL2NvbnRleHRUeXBlc1wiKTtcbnZhciBPcHRpb25hbEJsdWVwcmludF8xID0gcmVxdWlyZShcIi4uL3V0aWwvT3B0aW9uYWxCbHVlcHJpbnRcIik7XG52YXIgTW9zYWljQnV0dG9uXzEgPSByZXF1aXJlKFwiLi9Nb3NhaWNCdXR0b25cIik7XG52YXIgUmVtb3ZlQnV0dG9uID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhSZW1vdmVCdXR0b24sIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gUmVtb3ZlQnV0dG9uKCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIFJlbW92ZUJ1dHRvbi5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICByZXR1cm4gKHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KGNvbnRleHRUeXBlc18xLk1vc2FpY0NvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgdmFyIG1vc2FpY0FjdGlvbnMgPSBfYS5tb3NhaWNBY3Rpb25zO1xuICAgICAgICAgICAgcmV0dXJuIE1vc2FpY0J1dHRvbl8xLmNyZWF0ZURlZmF1bHRUb29sYmFyQnV0dG9uKCdDbG9zZSBXaW5kb3cnLCBjbGFzc25hbWVzXzEuZGVmYXVsdCgnY2xvc2UtYnV0dG9uJywgT3B0aW9uYWxCbHVlcHJpbnRfMS5PcHRpb25hbEJsdWVwcmludC5nZXRJY29uQ2xhc3MoJ0NST1NTJykpLCBfdGhpcy5jcmVhdGVSZW1vdmUobW9zYWljQWN0aW9ucykpO1xuICAgICAgICB9KSk7XG4gICAgfTtcbiAgICBSZW1vdmVCdXR0b24ucHJvdG90eXBlLmNyZWF0ZVJlbW92ZSA9IGZ1bmN0aW9uIChtb3NhaWNBY3Rpb25zKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBtb3NhaWNBY3Rpb25zLnJlbW92ZShfdGhpcy5jb250ZXh0Lm1vc2FpY1dpbmRvd0FjdGlvbnMuZ2V0UGF0aCgpKTtcbiAgICAgICAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkNsaWNrKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMucHJvcHMub25DbGljaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH07XG4gICAgUmVtb3ZlQnV0dG9uLmNvbnRleHRUeXBlID0gY29udGV4dFR5cGVzXzEuTW9zYWljV2luZG93Q29udGV4dDtcbiAgICByZXR1cm4gUmVtb3ZlQnV0dG9uO1xufShyZWFjdF8xLmRlZmF1bHQuUHVyZUNvbXBvbmVudCkpO1xuZXhwb3J0cy5SZW1vdmVCdXR0b24gPSBSZW1vdmVCdXR0b247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1SZW1vdmVCdXR0b24uanMubWFwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/react-mosaic-component/lib/buttons/RemoveButton.js\n");

/***/ }),

/***/ "./node_modules/react-mosaic-component/lib/buttons/ReplaceButton.js":
/*!**************************************************************************!*\
  !*** ./node_modules/react-mosaic-component/lib/buttons/ReplaceButton.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};var __extends=this&&this.__extends||function(){var _extendStatics=function extendStatics(d,b){_extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;}||function(d,b){for(var p in b){if(b.hasOwnProperty(p))d[p]=b[p];}};return _extendStatics(d,b);};return function(d,b){_extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};}();var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{\"default\":mod};};Object.defineProperty(exports,\"__esModule\",{value:true});exports.ReplaceButton=void 0;var classnames_1=__importDefault(__webpack_require__(/*! classnames */ \"./node_modules/classnames/index.js\"));var noop_1=__importDefault(__webpack_require__(/*! lodash/noop */ \"./node_modules/lodash/noop.js\"));var react_1=__importDefault(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));var contextTypes_1=__webpack_require__(/*! ../contextTypes */ \"./node_modules/react-mosaic-component/lib/contextTypes.js\");var OptionalBlueprint_1=__webpack_require__(/*! ../util/OptionalBlueprint */ \"./node_modules/react-mosaic-component/lib/util/OptionalBlueprint.js\");var MosaicButton_1=__webpack_require__(/*! ./MosaicButton */ \"./node_modules/react-mosaic-component/lib/buttons/MosaicButton.js\");var ReplaceButton=/** @class */function(_super){__extends(ReplaceButton,_super);function ReplaceButton(){var _this=_super!==null&&_super.apply(this,arguments)||this;_this.replace=function(){_this.context.mosaicWindowActions.replaceWithNew().then(function(){if(_this.props.onClick){_this.props.onClick();}})[\"catch\"](noop_1[\"default\"]);// Swallow rejections (i.e. on user cancel)\n};return _this;}ReplaceButton.prototype.render=function(){return MosaicButton_1.createDefaultToolbarButton('Replace Window',classnames_1[\"default\"]('replace-button',OptionalBlueprint_1.OptionalBlueprint.getIconClass('EXCHANGE')),this.replace);};ReplaceButton.contextType=contextTypes_1.MosaicWindowContext;return ReplaceButton;}(react_1[\"default\"].PureComponent);exports.ReplaceButton=ReplaceButton;;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(__extends,\"__extends\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/buttons/ReplaceButton.js\");reactHotLoader.register(__importDefault,\"__importDefault\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/buttons/ReplaceButton.js\");reactHotLoader.register(classnames_1,\"classnames_1\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/buttons/ReplaceButton.js\");reactHotLoader.register(noop_1,\"noop_1\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/buttons/ReplaceButton.js\");reactHotLoader.register(react_1,\"react_1\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/buttons/ReplaceButton.js\");reactHotLoader.register(ReplaceButton,\"ReplaceButton\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/buttons/ReplaceButton.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4uLy4uL3NyYy9idXR0b25zL1JlcGxhY2VCdXR0b24udHN4PzE1MTYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Im84QkFBQSw4R0FDQSxvR0FDQSwrRkFFQSwySEFDQSxvSkFDQSxrSUFFQSxnREFBbUMsZ0NBQW5DLHFGQVlVLGNBQVUsV0FDaEIsS0FBSSxDQUFDLE9BQUwsQ0FBYSxtQkFBYixDQUNHLGNBREgsR0FFRyxJQUZILENBRVEsV0FDSixHQUFJLEtBQUksQ0FBQyxLQUFMLENBQVcsT0FBZixDQUF3QixDQUN0QixLQUFJLENBQUMsS0FBTCxDQUFXLE9BQVgsR0FDRCxDQUNGLENBTkgsV0FPUyxpQkFQVCxFQU9nQjtBQUNqQixDQVRPLEMsYUFVVCxDQWxCQywwQ0FDRSxNQUFPLDJDQUNMLGdCQURLLENBRUwsd0JBQVcsZ0JBQVgsQ0FBNkIsc0NBQWtCLFlBQWxCLENBQStCLFVBQS9CLENBQTdCLENBRkssQ0FHTCxLQUFLLE9BSEEsQ0FBUCxDQUtELENBTkQsQ0FITywwQkFBYyxrQ0FBZCxDQXFCVCxxQkFBQyxDQXRCRCxDQUFtQyxtQkFBTSxhQUF6QyxFQUFhLG9DLCtmQVJiLFksaUtBQ0EsTSwySkFDQSxPLDRKQU1BLGEiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbW9zYWljLWNvbXBvbmVudC9saWIvYnV0dG9ucy9SZXBsYWNlQnV0dG9uLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUmVwbGFjZUJ1dHRvbiA9IHZvaWQgMDtcbnZhciBjbGFzc25hbWVzXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xudmFyIG5vb3BfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwibG9kYXNoL25vb3BcIikpO1xudmFyIHJlYWN0XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcbnZhciBjb250ZXh0VHlwZXNfMSA9IHJlcXVpcmUoXCIuLi9jb250ZXh0VHlwZXNcIik7XG52YXIgT3B0aW9uYWxCbHVlcHJpbnRfMSA9IHJlcXVpcmUoXCIuLi91dGlsL09wdGlvbmFsQmx1ZXByaW50XCIpO1xudmFyIE1vc2FpY0J1dHRvbl8xID0gcmVxdWlyZShcIi4vTW9zYWljQnV0dG9uXCIpO1xudmFyIFJlcGxhY2VCdXR0b24gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFJlcGxhY2VCdXR0b24sIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gUmVwbGFjZUJ1dHRvbigpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnJlcGxhY2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpcy5jb250ZXh0Lm1vc2FpY1dpbmRvd0FjdGlvbnNcbiAgICAgICAgICAgICAgICAucmVwbGFjZVdpdGhOZXcoKVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMucHJvcHMub25DbGljaykge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5wcm9wcy5vbkNsaWNrKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuY2F0Y2gobm9vcF8xLmRlZmF1bHQpOyAvLyBTd2FsbG93IHJlamVjdGlvbnMgKGkuZS4gb24gdXNlciBjYW5jZWwpXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgUmVwbGFjZUJ1dHRvbi5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gTW9zYWljQnV0dG9uXzEuY3JlYXRlRGVmYXVsdFRvb2xiYXJCdXR0b24oJ1JlcGxhY2UgV2luZG93JywgY2xhc3NuYW1lc18xLmRlZmF1bHQoJ3JlcGxhY2UtYnV0dG9uJywgT3B0aW9uYWxCbHVlcHJpbnRfMS5PcHRpb25hbEJsdWVwcmludC5nZXRJY29uQ2xhc3MoJ0VYQ0hBTkdFJykpLCB0aGlzLnJlcGxhY2UpO1xuICAgIH07XG4gICAgUmVwbGFjZUJ1dHRvbi5jb250ZXh0VHlwZSA9IGNvbnRleHRUeXBlc18xLk1vc2FpY1dpbmRvd0NvbnRleHQ7XG4gICAgcmV0dXJuIFJlcGxhY2VCdXR0b247XG59KHJlYWN0XzEuZGVmYXVsdC5QdXJlQ29tcG9uZW50KSk7XG5leHBvcnRzLlJlcGxhY2VCdXR0b24gPSBSZXBsYWNlQnV0dG9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UmVwbGFjZUJ1dHRvbi5qcy5tYXAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/react-mosaic-component/lib/buttons/ReplaceButton.js\n");

/***/ }),

/***/ "./node_modules/react-mosaic-component/lib/buttons/Separator.js":
/*!**********************************************************************!*\
  !*** ./node_modules/react-mosaic-component/lib/buttons/Separator.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};var __extends=this&&this.__extends||function(){var _extendStatics=function extendStatics(d,b){_extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;}||function(d,b){for(var p in b){if(b.hasOwnProperty(p))d[p]=b[p];}};return _extendStatics(d,b);};return function(d,b){_extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};}();var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{\"default\":mod};};Object.defineProperty(exports,\"__esModule\",{value:true});exports.Separator=void 0;var react_1=__importDefault(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));var Separator=/** @class */function(_super){__extends(Separator,_super);function Separator(){return _super!==null&&_super.apply(this,arguments)||this;}Separator.prototype.render=function(){return react_1[\"default\"].createElement(\"div\",{className:\"separator\"});};return Separator;}(react_1[\"default\"].PureComponent);exports.Separator=Separator;;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(__extends,\"__extends\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/buttons/Separator.js\");reactHotLoader.register(__importDefault,\"__importDefault\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/buttons/Separator.js\");reactHotLoader.register(react_1,\"react_1\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/buttons/Separator.js\");reactHotLoader.register(Separator,\"Separator\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/buttons/Separator.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4uLy4uL3NyYy9idXR0b25zL1NlcGFyYXRvci50c3g/ZWFmZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiZzhCQUFBLCtGQUVBLDRDQUErQiw0QkFBL0IscUIseURBSUMsQ0FIQyxzQ0FDRSxNQUFPLHlDQUFLLFNBQVMsQ0FBQyxXQUFmLEVBQVAsQ0FDRCxDQUZELENBR0YsaUJBQUMsQ0FKRCxDQUErQixtQkFBTSxhQUFyQyxFQUFhLDRCLHVmQUZiLE8sd0pBRUEsUyIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9yZWFjdC1tb3NhaWMtY29tcG9uZW50L2xpYi9idXR0b25zL1NlcGFyYXRvci5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlNlcGFyYXRvciA9IHZvaWQgMDtcbnZhciByZWFjdF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG52YXIgU2VwYXJhdG9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhTZXBhcmF0b3IsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU2VwYXJhdG9yKCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIFNlcGFyYXRvci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwic2VwYXJhdG9yXCIgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gU2VwYXJhdG9yO1xufShyZWFjdF8xLmRlZmF1bHQuUHVyZUNvbXBvbmVudCkpO1xuZXhwb3J0cy5TZXBhcmF0b3IgPSBTZXBhcmF0b3I7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TZXBhcmF0b3IuanMubWFwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/react-mosaic-component/lib/buttons/Separator.js\n");

/***/ }),

/***/ "./node_modules/react-mosaic-component/lib/buttons/SplitButton.js":
/*!************************************************************************!*\
  !*** ./node_modules/react-mosaic-component/lib/buttons/SplitButton.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};var __extends=this&&this.__extends||function(){var _extendStatics=function extendStatics(d,b){_extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;}||function(d,b){for(var p in b){if(b.hasOwnProperty(p))d[p]=b[p];}};return _extendStatics(d,b);};return function(d,b){_extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};}();var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{\"default\":mod};};Object.defineProperty(exports,\"__esModule\",{value:true});exports.SplitButton=void 0;var classnames_1=__importDefault(__webpack_require__(/*! classnames */ \"./node_modules/classnames/index.js\"));var noop_1=__importDefault(__webpack_require__(/*! lodash/noop */ \"./node_modules/lodash/noop.js\"));var react_1=__importDefault(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));var contextTypes_1=__webpack_require__(/*! ../contextTypes */ \"./node_modules/react-mosaic-component/lib/contextTypes.js\");var OptionalBlueprint_1=__webpack_require__(/*! ../util/OptionalBlueprint */ \"./node_modules/react-mosaic-component/lib/util/OptionalBlueprint.js\");var MosaicButton_1=__webpack_require__(/*! ./MosaicButton */ \"./node_modules/react-mosaic-component/lib/buttons/MosaicButton.js\");var SplitButton=/** @class */function(_super){__extends(SplitButton,_super);function SplitButton(){var _this=_super!==null&&_super.apply(this,arguments)||this;_this.split=function(){_this.context.mosaicWindowActions.split().then(function(){if(_this.props.onClick){_this.props.onClick();}})[\"catch\"](noop_1[\"default\"]);// Swallow rejections (i.e. on user cancel)\n};return _this;}SplitButton.prototype.render=function(){return MosaicButton_1.createDefaultToolbarButton('Split Window',classnames_1[\"default\"]('split-button',OptionalBlueprint_1.OptionalBlueprint.getIconClass('ADD_COLUMN_RIGHT')),this.split);};SplitButton.contextType=contextTypes_1.MosaicWindowContext;return SplitButton;}(react_1[\"default\"].PureComponent);exports.SplitButton=SplitButton;;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(__extends,\"__extends\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/buttons/SplitButton.js\");reactHotLoader.register(__importDefault,\"__importDefault\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/buttons/SplitButton.js\");reactHotLoader.register(classnames_1,\"classnames_1\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/buttons/SplitButton.js\");reactHotLoader.register(noop_1,\"noop_1\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/buttons/SplitButton.js\");reactHotLoader.register(react_1,\"react_1\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/buttons/SplitButton.js\");reactHotLoader.register(SplitButton,\"SplitButton\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/buttons/SplitButton.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4uLy4uL3NyYy9idXR0b25zL1NwbGl0QnV0dG9uLnRzeD82MjE2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJrOEJBQUEsOEdBQ0Esb0dBQ0EsK0ZBRUEsMkhBQ0Esb0pBQ0Esa0lBRUEsOENBQWlDLDhCQUFqQyxtRkFZVSxZQUFRLFdBQ2QsS0FBSSxDQUFDLE9BQUwsQ0FBYSxtQkFBYixDQUNHLEtBREgsR0FFRyxJQUZILENBRVEsV0FDSixHQUFJLEtBQUksQ0FBQyxLQUFMLENBQVcsT0FBZixDQUF3QixDQUN0QixLQUFJLENBQUMsS0FBTCxDQUFXLE9BQVgsR0FDRCxDQUNGLENBTkgsV0FPUyxpQkFQVCxFQU9nQjtBQUNqQixDQVRPLEMsYUFVVCxDQWxCQyx3Q0FDRSxNQUFPLDJDQUNMLGNBREssQ0FFTCx3QkFBVyxjQUFYLENBQTJCLHNDQUFrQixZQUFsQixDQUErQixrQkFBL0IsQ0FBM0IsQ0FGSyxDQUdMLEtBQUssS0FIQSxDQUFQLENBS0QsQ0FORCxDQUhPLHdCQUFjLGtDQUFkLENBcUJULG1CQUFDLENBdEJELENBQWlDLG1CQUFNLGFBQXZDLEVBQWEsZ0MsMmZBUmIsWSwrSkFDQSxNLHlKQUNBLE8sMEpBTUEsVyIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9yZWFjdC1tb3NhaWMtY29tcG9uZW50L2xpYi9idXR0b25zL1NwbGl0QnV0dG9uLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU3BsaXRCdXR0b24gPSB2b2lkIDA7XG52YXIgY2xhc3NuYW1lc18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcbnZhciBub29wXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImxvZGFzaC9ub29wXCIpKTtcbnZhciByZWFjdF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG52YXIgY29udGV4dFR5cGVzXzEgPSByZXF1aXJlKFwiLi4vY29udGV4dFR5cGVzXCIpO1xudmFyIE9wdGlvbmFsQmx1ZXByaW50XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9PcHRpb25hbEJsdWVwcmludFwiKTtcbnZhciBNb3NhaWNCdXR0b25fMSA9IHJlcXVpcmUoXCIuL01vc2FpY0J1dHRvblwiKTtcbnZhciBTcGxpdEJ1dHRvbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoU3BsaXRCdXR0b24sIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU3BsaXRCdXR0b24oKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5zcGxpdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLmNvbnRleHQubW9zYWljV2luZG93QWN0aW9uc1xuICAgICAgICAgICAgICAgIC5zcGxpdCgpXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkNsaWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnByb3BzLm9uQ2xpY2soKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5jYXRjaChub29wXzEuZGVmYXVsdCk7IC8vIFN3YWxsb3cgcmVqZWN0aW9ucyAoaS5lLiBvbiB1c2VyIGNhbmNlbClcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBTcGxpdEJ1dHRvbi5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gTW9zYWljQnV0dG9uXzEuY3JlYXRlRGVmYXVsdFRvb2xiYXJCdXR0b24oJ1NwbGl0IFdpbmRvdycsIGNsYXNzbmFtZXNfMS5kZWZhdWx0KCdzcGxpdC1idXR0b24nLCBPcHRpb25hbEJsdWVwcmludF8xLk9wdGlvbmFsQmx1ZXByaW50LmdldEljb25DbGFzcygnQUREX0NPTFVNTl9SSUdIVCcpKSwgdGhpcy5zcGxpdCk7XG4gICAgfTtcbiAgICBTcGxpdEJ1dHRvbi5jb250ZXh0VHlwZSA9IGNvbnRleHRUeXBlc18xLk1vc2FpY1dpbmRvd0NvbnRleHQ7XG4gICAgcmV0dXJuIFNwbGl0QnV0dG9uO1xufShyZWFjdF8xLmRlZmF1bHQuUHVyZUNvbXBvbmVudCkpO1xuZXhwb3J0cy5TcGxpdEJ1dHRvbiA9IFNwbGl0QnV0dG9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3BsaXRCdXR0b24uanMubWFwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/react-mosaic-component/lib/buttons/SplitButton.js\n");

/***/ }),

/***/ "./node_modules/react-mosaic-component/lib/buttons/defaultToolbarControls.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/react-mosaic-component/lib/buttons/defaultToolbarControls.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{\"default\":mod};};Object.defineProperty(exports,\"__esModule\",{value:true});exports.DEFAULT_CONTROLS_WITHOUT_CREATION=exports.DEFAULT_CONTROLS_WITH_CREATION=void 0;var react_1=__importDefault(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));var ExpandButton_1=__webpack_require__(/*! ./ExpandButton */ \"./node_modules/react-mosaic-component/lib/buttons/ExpandButton.js\");var RemoveButton_1=__webpack_require__(/*! ./RemoveButton */ \"./node_modules/react-mosaic-component/lib/buttons/RemoveButton.js\");var ReplaceButton_1=__webpack_require__(/*! ./ReplaceButton */ \"./node_modules/react-mosaic-component/lib/buttons/ReplaceButton.js\");var SplitButton_1=__webpack_require__(/*! ./SplitButton */ \"./node_modules/react-mosaic-component/lib/buttons/SplitButton.js\");exports.DEFAULT_CONTROLS_WITH_CREATION=react_1[\"default\"].Children.toArray([react_1[\"default\"].createElement(ReplaceButton_1.ReplaceButton,null),react_1[\"default\"].createElement(SplitButton_1.SplitButton,null),react_1[\"default\"].createElement(ExpandButton_1.ExpandButton,null),react_1[\"default\"].createElement(RemoveButton_1.RemoveButton,null)]);exports.DEFAULT_CONTROLS_WITHOUT_CREATION=react_1[\"default\"].Children.toArray([react_1[\"default\"].createElement(ExpandButton_1.ExpandButton,null),react_1[\"default\"].createElement(RemoveButton_1.RemoveButton,null)]);;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(__importDefault,\"__importDefault\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/buttons/defaultToolbarControls.js\");reactHotLoader.register(react_1,\"react_1\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/buttons/defaultToolbarControls.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4uLy4uL3NyYy9idXR0b25zL2RlZmF1bHRUb29sYmFyQ29udHJvbHMudHN4PzA3NjkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6ImtrQkFBQSwrRkFDQSxrSUFDQSxrSUFDQSxxSUFDQSwrSEFFYSx1Q0FBaUMsbUJBQU0sUUFBTixDQUFlLE9BQWYsQ0FBdUIsQ0FDbkUsaUNBQUMsNkJBQUQsQ0FBYyxJQUFkLENBRG1FLENBRW5FLGlDQUFDLHlCQUFELENBQVksSUFBWixDQUZtRSxDQUduRSxpQ0FBQywyQkFBRCxDQUFhLElBQWIsQ0FIbUUsQ0FJbkUsaUNBQUMsMkJBQUQsQ0FBYSxJQUFiLENBSm1FLENBQXZCLENBQWpDLENBTUEsMENBQW9DLG1CQUFNLFFBQU4sQ0FBZSxPQUFmLENBQXVCLENBQUMsaUNBQUMsMkJBQUQsQ0FBYSxJQUFiLENBQUQsQ0FBbUIsaUNBQUMsMkJBQUQsQ0FBYSxJQUFiLENBQW5CLENBQXZCLENBQXBDLEMsaVdBWmIsTyIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9yZWFjdC1tb3NhaWMtY29tcG9uZW50L2xpYi9idXR0b25zL2RlZmF1bHRUb29sYmFyQ29udHJvbHMuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuREVGQVVMVF9DT05UUk9MU19XSVRIT1VUX0NSRUFUSU9OID0gZXhwb3J0cy5ERUZBVUxUX0NPTlRST0xTX1dJVEhfQ1JFQVRJT04gPSB2b2lkIDA7XG52YXIgcmVhY3RfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xudmFyIEV4cGFuZEJ1dHRvbl8xID0gcmVxdWlyZShcIi4vRXhwYW5kQnV0dG9uXCIpO1xudmFyIFJlbW92ZUJ1dHRvbl8xID0gcmVxdWlyZShcIi4vUmVtb3ZlQnV0dG9uXCIpO1xudmFyIFJlcGxhY2VCdXR0b25fMSA9IHJlcXVpcmUoXCIuL1JlcGxhY2VCdXR0b25cIik7XG52YXIgU3BsaXRCdXR0b25fMSA9IHJlcXVpcmUoXCIuL1NwbGl0QnV0dG9uXCIpO1xuZXhwb3J0cy5ERUZBVUxUX0NPTlRST0xTX1dJVEhfQ1JFQVRJT04gPSByZWFjdF8xLmRlZmF1bHQuQ2hpbGRyZW4udG9BcnJheShbXG4gICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoUmVwbGFjZUJ1dHRvbl8xLlJlcGxhY2VCdXR0b24sIG51bGwpLFxuICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFNwbGl0QnV0dG9uXzEuU3BsaXRCdXR0b24sIG51bGwpLFxuICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KEV4cGFuZEJ1dHRvbl8xLkV4cGFuZEJ1dHRvbiwgbnVsbCksXG4gICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoUmVtb3ZlQnV0dG9uXzEuUmVtb3ZlQnV0dG9uLCBudWxsKSxcbl0pO1xuZXhwb3J0cy5ERUZBVUxUX0NPTlRST0xTX1dJVEhPVVRfQ1JFQVRJT04gPSByZWFjdF8xLmRlZmF1bHQuQ2hpbGRyZW4udG9BcnJheShbcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoRXhwYW5kQnV0dG9uXzEuRXhwYW5kQnV0dG9uLCBudWxsKSwgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoUmVtb3ZlQnV0dG9uXzEuUmVtb3ZlQnV0dG9uLCBudWxsKV0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVmYXVsdFRvb2xiYXJDb250cm9scy5qcy5tYXAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/react-mosaic-component/lib/buttons/defaultToolbarControls.js\n");

/***/ }),

/***/ "./node_modules/react-mosaic-component/lib/contextTypes.js":
/*!*****************************************************************!*\
  !*** ./node_modules/react-mosaic-component/lib/contextTypes.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{\"default\":mod};};Object.defineProperty(exports,\"__esModule\",{value:true});exports.MosaicWindowContext=exports.MosaicContext=void 0;var react_1=__importDefault(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));exports.MosaicContext=react_1[\"default\"].createContext(undefined);exports.MosaicWindowContext=react_1[\"default\"].createContext(undefined);;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(__importDefault,\"__importDefault\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/contextTypes.js\");reactHotLoader.register(react_1,\"react_1\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/contextTypes.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4uL3NyYy9jb250ZXh0VHlwZXMudHM/ZGJmOSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoibWlCQUFBLCtGQXlGYSxzQkFBZ0IsbUJBQU0sYUFBTixDQUE4QyxTQUE5QyxDQUFoQixDQUNBLDRCQUFzQixtQkFBTSxhQUFOLENBQXlDLFNBQXpDLENBQXRCLEMsK1VBMUZiLE8iLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbW9zYWljLWNvbXBvbmVudC9saWIvY29udGV4dFR5cGVzLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk1vc2FpY1dpbmRvd0NvbnRleHQgPSBleHBvcnRzLk1vc2FpY0NvbnRleHQgPSB2b2lkIDA7XG52YXIgcmVhY3RfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuZXhwb3J0cy5Nb3NhaWNDb250ZXh0ID0gcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUNvbnRleHQodW5kZWZpbmVkKTtcbmV4cG9ydHMuTW9zYWljV2luZG93Q29udGV4dCA9IHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVDb250ZXh0KHVuZGVmaW5lZCk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb250ZXh0VHlwZXMuanMubWFwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/react-mosaic-component/lib/contextTypes.js\n");

/***/ }),

/***/ "./node_modules/react-mosaic-component/lib/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/react-mosaic-component/lib/index.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};Object.defineProperty(exports,\"__esModule\",{value:true});/**\n * @license\n * Copyright 2019 Kevin Verdieck, originally developed at Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */var Mosaic_1=__webpack_require__(/*! ./Mosaic */ \"./node_modules/react-mosaic-component/lib/Mosaic.js\");Object.defineProperty(exports,\"Mosaic\",{enumerable:true,get:function get(){return Mosaic_1.Mosaic;}});Object.defineProperty(exports,\"MosaicWithoutDragDropContext\",{enumerable:true,get:function get(){return Mosaic_1.MosaicWithoutDragDropContext;}});var types_1=__webpack_require__(/*! ./types */ \"./node_modules/react-mosaic-component/lib/types.js\");Object.defineProperty(exports,\"MosaicDragType\",{enumerable:true,get:function get(){return types_1.MosaicDragType;}});var contextTypes_1=__webpack_require__(/*! ./contextTypes */ \"./node_modules/react-mosaic-component/lib/contextTypes.js\");Object.defineProperty(exports,\"MosaicContext\",{enumerable:true,get:function get(){return contextTypes_1.MosaicContext;}});Object.defineProperty(exports,\"MosaicWindowContext\",{enumerable:true,get:function get(){return contextTypes_1.MosaicWindowContext;}});var mosaicUpdates_1=__webpack_require__(/*! ./util/mosaicUpdates */ \"./node_modules/react-mosaic-component/lib/util/mosaicUpdates.js\");Object.defineProperty(exports,\"buildSpecFromUpdate\",{enumerable:true,get:function get(){return mosaicUpdates_1.buildSpecFromUpdate;}});Object.defineProperty(exports,\"createDragToUpdates\",{enumerable:true,get:function get(){return mosaicUpdates_1.createDragToUpdates;}});Object.defineProperty(exports,\"createExpandUpdate\",{enumerable:true,get:function get(){return mosaicUpdates_1.createExpandUpdate;}});Object.defineProperty(exports,\"createHideUpdate\",{enumerable:true,get:function get(){return mosaicUpdates_1.createHideUpdate;}});Object.defineProperty(exports,\"createRemoveUpdate\",{enumerable:true,get:function get(){return mosaicUpdates_1.createRemoveUpdate;}});Object.defineProperty(exports,\"updateTree\",{enumerable:true,get:function get(){return mosaicUpdates_1.updateTree;}});var mosaicUtilities_1=__webpack_require__(/*! ./util/mosaicUtilities */ \"./node_modules/react-mosaic-component/lib/util/mosaicUtilities.js\");Object.defineProperty(exports,\"createBalancedTreeFromLeaves\",{enumerable:true,get:function get(){return mosaicUtilities_1.createBalancedTreeFromLeaves;}});Object.defineProperty(exports,\"Corner\",{enumerable:true,get:function get(){return mosaicUtilities_1.Corner;}});Object.defineProperty(exports,\"getAndAssertNodeAtPathExists\",{enumerable:true,get:function get(){return mosaicUtilities_1.getAndAssertNodeAtPathExists;}});Object.defineProperty(exports,\"getLeaves\",{enumerable:true,get:function get(){return mosaicUtilities_1.getLeaves;}});Object.defineProperty(exports,\"getNodeAtPath\",{enumerable:true,get:function get(){return mosaicUtilities_1.getNodeAtPath;}});Object.defineProperty(exports,\"getOtherBranch\",{enumerable:true,get:function get(){return mosaicUtilities_1.getOtherBranch;}});Object.defineProperty(exports,\"getOtherDirection\",{enumerable:true,get:function get(){return mosaicUtilities_1.getOtherDirection;}});Object.defineProperty(exports,\"getPathToCorner\",{enumerable:true,get:function get(){return mosaicUtilities_1.getPathToCorner;}});Object.defineProperty(exports,\"isParent\",{enumerable:true,get:function get(){return mosaicUtilities_1.isParent;}});var MosaicWindow_1=__webpack_require__(/*! ./MosaicWindow */ \"./node_modules/react-mosaic-component/lib/MosaicWindow.js\");Object.defineProperty(exports,\"MosaicWindow\",{enumerable:true,get:function get(){return MosaicWindow_1.MosaicWindow;}});var MosaicButton_1=__webpack_require__(/*! ./buttons/MosaicButton */ \"./node_modules/react-mosaic-component/lib/buttons/MosaicButton.js\");Object.defineProperty(exports,\"createDefaultToolbarButton\",{enumerable:true,get:function get(){return MosaicButton_1.createDefaultToolbarButton;}});var MosaicZeroState_1=__webpack_require__(/*! ./MosaicZeroState */ \"./node_modules/react-mosaic-component/lib/MosaicZeroState.js\");Object.defineProperty(exports,\"MosaicZeroState\",{enumerable:true,get:function get(){return MosaicZeroState_1.MosaicZeroState;}});var Separator_1=__webpack_require__(/*! ./buttons/Separator */ \"./node_modules/react-mosaic-component/lib/buttons/Separator.js\");Object.defineProperty(exports,\"Separator\",{enumerable:true,get:function get(){return Separator_1.Separator;}});var ExpandButton_1=__webpack_require__(/*! ./buttons/ExpandButton */ \"./node_modules/react-mosaic-component/lib/buttons/ExpandButton.js\");Object.defineProperty(exports,\"ExpandButton\",{enumerable:true,get:function get(){return ExpandButton_1.ExpandButton;}});var ReplaceButton_1=__webpack_require__(/*! ./buttons/ReplaceButton */ \"./node_modules/react-mosaic-component/lib/buttons/ReplaceButton.js\");Object.defineProperty(exports,\"ReplaceButton\",{enumerable:true,get:function get(){return ReplaceButton_1.ReplaceButton;}});var SplitButton_1=__webpack_require__(/*! ./buttons/SplitButton */ \"./node_modules/react-mosaic-component/lib/buttons/SplitButton.js\");Object.defineProperty(exports,\"SplitButton\",{enumerable:true,get:function get(){return SplitButton_1.SplitButton;}});var RemoveButton_1=__webpack_require__(/*! ./buttons/RemoveButton */ \"./node_modules/react-mosaic-component/lib/buttons/RemoveButton.js\");Object.defineProperty(exports,\"RemoveButton\",{enumerable:true,get:function get(){return RemoveButton_1.RemoveButton;}});var defaultToolbarControls_1=__webpack_require__(/*! ./buttons/defaultToolbarControls */ \"./node_modules/react-mosaic-component/lib/buttons/defaultToolbarControls.js\");Object.defineProperty(exports,\"DEFAULT_CONTROLS_WITH_CREATION\",{enumerable:true,get:function get(){return defaultToolbarControls_1.DEFAULT_CONTROLS_WITH_CREATION;}});Object.defineProperty(exports,\"DEFAULT_CONTROLS_WITHOUT_CREATION\",{enumerable:true,get:function get(){return defaultToolbarControls_1.DEFAULT_CONTROLS_WITHOUT_CREATION;}});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-mosaic-component/lib/index.js\n");

/***/ }),

/***/ "./node_modules/react-mosaic-component/lib/internalTypes.js":
/*!******************************************************************!*\
  !*** ./node_modules/react-mosaic-component/lib/internalTypes.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};Object.defineProperty(exports,\"__esModule\",{value:true});exports.MosaicDropTargetPosition=void 0;exports.MosaicDropTargetPosition={TOP:'top',BOTTOM:'bottom',LEFT:'left',RIGHT:'right'};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4uL3NyYy9pbnRlcm5hbFR5cGVzLnRzP2UyZTkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjhOQUdhLGlDQUEyQixDQUN0QyxHQUFHLENBQUUsS0FEaUMsQ0FFdEMsTUFBTSxDQUFFLFFBRjhCLENBR3RDLElBQUksQ0FBRSxNQUhnQyxDQUl0QyxLQUFLLENBQUUsT0FKK0IsQ0FBM0IiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbW9zYWljLWNvbXBvbmVudC9saWIvaW50ZXJuYWxUeXBlcy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Nb3NhaWNEcm9wVGFyZ2V0UG9zaXRpb24gPSB2b2lkIDA7XG5leHBvcnRzLk1vc2FpY0Ryb3BUYXJnZXRQb3NpdGlvbiA9IHtcbiAgICBUT1A6ICd0b3AnLFxuICAgIEJPVFRPTTogJ2JvdHRvbScsXG4gICAgTEVGVDogJ2xlZnQnLFxuICAgIFJJR0hUOiAncmlnaHQnLFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWludGVybmFsVHlwZXMuanMubWFwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/react-mosaic-component/lib/internalTypes.js\n");

/***/ }),

/***/ "./node_modules/react-mosaic-component/lib/types.js":
/*!**********************************************************!*\
  !*** ./node_modules/react-mosaic-component/lib/types.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};Object.defineProperty(exports,\"__esModule\",{value:true});exports.MosaicDragType=void 0;/**\n * Used by `react-dnd`\n * @type {{WINDOW: string}}\n */exports.MosaicDragType={WINDOW:'MosaicWindow'};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4uL3NyYy90eXBlcy50cz84Y2UxIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJvTkFrREE7OztHQUlhLHVCQUFpQixDQUM1QixNQUFNLENBQUUsY0FEb0IsQ0FBakIiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbW9zYWljLWNvbXBvbmVudC9saWIvdHlwZXMuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTW9zYWljRHJhZ1R5cGUgPSB2b2lkIDA7XG4vKipcbiAqIFVzZWQgYnkgYHJlYWN0LWRuZGBcbiAqIEB0eXBlIHt7V0lORE9XOiBzdHJpbmd9fVxuICovXG5leHBvcnRzLk1vc2FpY0RyYWdUeXBlID0ge1xuICAgIFdJTkRPVzogJ01vc2FpY1dpbmRvdycsXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHlwZXMuanMubWFwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/react-mosaic-component/lib/types.js\n");

/***/ }),

/***/ "./node_modules/react-mosaic-component/lib/util/BoundingBox.js":
/*!*********************************************************************!*\
  !*** ./node_modules/react-mosaic-component/lib/util/BoundingBox.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};var __assign=this&&this.__assign||function(){__assign=Object.assign||function(t){for(var s,i=1,n=arguments.length;i<n;i++){s=arguments[i];for(var p in s){if(Object.prototype.hasOwnProperty.call(s,p))t[p]=s[p];}}return t;};return __assign.apply(this,arguments);};Object.defineProperty(exports,\"__esModule\",{value:true});exports.BoundingBox=void 0;var assertNever_1=__webpack_require__(/*! ./assertNever */ \"./node_modules/react-mosaic-component/lib/util/assertNever.js\");var BoundingBox;(function(BoundingBox){function empty(){return{top:0,right:0,bottom:0,left:0};}BoundingBox.empty=empty;function split(boundingBox,relativeSplitPercentage,direction){var absolutePercentage=getAbsoluteSplitPercentage(boundingBox,relativeSplitPercentage,direction);if(direction==='column'){return{first:__assign(__assign({},boundingBox),{bottom:100-absolutePercentage}),second:__assign(__assign({},boundingBox),{top:absolutePercentage})};}else if(direction==='row'){return{first:__assign(__assign({},boundingBox),{right:100-absolutePercentage}),second:__assign(__assign({},boundingBox),{left:absolutePercentage})};}else{return assertNever_1.assertNever(direction);}}BoundingBox.split=split;function getAbsoluteSplitPercentage(boundingBox,relativeSplitPercentage,direction){var top=boundingBox.top,right=boundingBox.right,bottom=boundingBox.bottom,left=boundingBox.left;if(direction==='column'){var height=100-top-bottom;return height*relativeSplitPercentage/100+top;}else if(direction==='row'){var width=100-right-left;return width*relativeSplitPercentage/100+left;}else{return assertNever_1.assertNever(direction);}}BoundingBox.getAbsoluteSplitPercentage=getAbsoluteSplitPercentage;function getRelativeSplitPercentage(boundingBox,absoluteSplitPercentage,direction){var top=boundingBox.top,right=boundingBox.right,bottom=boundingBox.bottom,left=boundingBox.left;if(direction==='column'){var height=100-top-bottom;return(absoluteSplitPercentage-top)/height*100;}else if(direction==='row'){var width=100-right-left;return(absoluteSplitPercentage-left)/width*100;}else{return assertNever_1.assertNever(direction);}}BoundingBox.getRelativeSplitPercentage=getRelativeSplitPercentage;function asStyles(_a){var top=_a.top,right=_a.right,bottom=_a.bottom,left=_a.left;return{top:top+\"%\",right:right+\"%\",bottom:bottom+\"%\",left:left+\"%\"};}BoundingBox.asStyles=asStyles;})(BoundingBox=exports.BoundingBox||(exports.BoundingBox={}));;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(__assign,\"__assign\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/util/BoundingBox.js\");reactHotLoader.register(BoundingBox,\"BoundingBox\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/util/BoundingBox.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4uLy4uL3NyYy91dGlsL0JvdW5kaW5nQm94LnRzP2YwOTciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjRwQkFDQSw0SEFVQSxHQUFpQixZQUFqQixXQUFpQixXQUFqQixDQUE0QixDQUMxQixRQUFnQixNQUFoQixFQUFxQixDQUNuQixNQUFPLENBQ0wsR0FBRyxDQUFFLENBREEsQ0FFTCxLQUFLLENBQUUsQ0FGRixDQUdMLE1BQU0sQ0FBRSxDQUhILENBSUwsSUFBSSxDQUFFLENBSkQsQ0FBUCxDQU1ELENBUGUsa0JBQUssS0FBTCxDQXFCaEIsUUFBZ0IsTUFBaEIsQ0FBc0IsV0FBdEIsQ0FBZ0QsdUJBQWhELENBQWlGLFNBQWpGLENBQTJHLENBQ3pHLEdBQU0sbUJBQWtCLENBQUcsMEJBQTBCLENBQUMsV0FBRCxDQUFjLHVCQUFkLENBQXVDLFNBQXZDLENBQXJELENBQ0EsR0FBSSxTQUFTLEdBQUssUUFBbEIsQ0FBNEIsQ0FDMUIsTUFBTyxDQUNMLEtBQUssc0JBQ0EsV0FEQSxFQUNXLENBQ2QsTUFBTSxDQUFFLElBQU0sa0JBREEsQ0FEWCxDQURBLENBS0wsTUFBTSxzQkFDRCxXQURDLEVBQ1UsQ0FDZCxHQUFHLENBQUUsa0JBRFMsQ0FEVixDQUxELENBQVAsQ0FVRCxDQVhELElBV08sSUFBSSxTQUFTLEdBQUssS0FBbEIsQ0FBeUIsQ0FDOUIsTUFBTyxDQUNMLEtBQUssc0JBQ0EsV0FEQSxFQUNXLENBQ2QsS0FBSyxDQUFFLElBQU0sa0JBREMsQ0FEWCxDQURBLENBS0wsTUFBTSxzQkFDRCxXQURDLEVBQ1UsQ0FDZCxJQUFJLENBQUUsa0JBRFEsQ0FEVixDQUxELENBQVAsQ0FVRCxDQVhNLElBV0EsQ0FDTCxNQUFPLDJCQUFZLFNBQVosQ0FBUCxDQUNELENBQ0YsQ0EzQmUsa0JBQUssS0FBTCxDQTZCaEIsUUFBZ0IsMkJBQWhCLENBQ0UsV0FERixDQUVFLHVCQUZGLENBR0UsU0FIRixDQUc0QixDQUVsQixPQUFHLENBQTBCLFdBQVcsQ0FBckMsR0FBSCxDQUFLLEtBQUssQ0FBbUIsV0FBVyxDQUE5QixLQUFWLENBQVksTUFBTSxDQUFXLFdBQVcsQ0FBdEIsTUFBbEIsQ0FBb0IsSUFBSSxDQUFLLFdBQVcsQ0FBaEIsSUFBeEIsQ0FDUixHQUFJLFNBQVMsR0FBSyxRQUFsQixDQUE0QixDQUMxQixHQUFNLE9BQU0sQ0FBRyxJQUFNLEdBQU4sQ0FBWSxNQUEzQixDQUNBLE1BQVEsT0FBTSxDQUFHLHVCQUFWLENBQXFDLEdBQXJDLENBQTJDLEdBQWxELENBQ0QsQ0FIRCxJQUdPLElBQUksU0FBUyxHQUFLLEtBQWxCLENBQXlCLENBQzlCLEdBQU0sTUFBSyxDQUFHLElBQU0sS0FBTixDQUFjLElBQTVCLENBQ0EsTUFBUSxNQUFLLENBQUcsdUJBQVQsQ0FBb0MsR0FBcEMsQ0FBMEMsSUFBakQsQ0FDRCxDQUhNLElBR0EsQ0FDTCxNQUFPLDJCQUFZLFNBQVosQ0FBUCxDQUNELENBQ0YsQ0FmZSx1Q0FBMEIsMEJBQTFCLENBaUJoQixRQUFnQiwyQkFBaEIsQ0FDRSxXQURGLENBRUUsdUJBRkYsQ0FHRSxTQUhGLENBRzRCLENBRWxCLE9BQUcsQ0FBMEIsV0FBVyxDQUFyQyxHQUFILENBQUssS0FBSyxDQUFtQixXQUFXLENBQTlCLEtBQVYsQ0FBWSxNQUFNLENBQVcsV0FBVyxDQUF0QixNQUFsQixDQUFvQixJQUFJLENBQUssV0FBVyxDQUFoQixJQUF4QixDQUNSLEdBQUksU0FBUyxHQUFLLFFBQWxCLENBQTRCLENBQzFCLEdBQU0sT0FBTSxDQUFHLElBQU0sR0FBTixDQUFZLE1BQTNCLENBQ0EsTUFBUSxDQUFDLHVCQUF1QixDQUFHLEdBQTNCLEVBQWtDLE1BQW5DLENBQTZDLEdBQXBELENBQ0QsQ0FIRCxJQUdPLElBQUksU0FBUyxHQUFLLEtBQWxCLENBQXlCLENBQzlCLEdBQU0sTUFBSyxDQUFHLElBQU0sS0FBTixDQUFjLElBQTVCLENBQ0EsTUFBUSxDQUFDLHVCQUF1QixDQUFHLElBQTNCLEVBQW1DLEtBQXBDLENBQTZDLEdBQXBELENBQ0QsQ0FITSxJQUdBLENBQ0wsTUFBTywyQkFBWSxTQUFaLENBQVAsQ0FDRCxDQUNGLENBZmUsdUNBQTBCLDBCQUExQixDQWlCaEIsUUFBZ0IsU0FBaEIsQ0FBeUIsRUFBekIsQ0FBa0UsQyxHQUF2QyxJQUFHLE8sQ0FBRSxLQUFLLFMsQ0FBRSxNQUFNLFUsQ0FBRSxJQUFJLFEsQ0FDakQsTUFBTyxDQUNMLEdBQUcsQ0FBSyxHQUFHLElBRE4sQ0FFTCxLQUFLLENBQUssS0FBSyxJQUZWLENBR0wsTUFBTSxDQUFLLE1BQU0sSUFIWixDQUlMLElBQUksQ0FBSyxJQUFJLElBSlIsQ0FBUCxDQU1ELENBUGUscUJBQVEsUUFBUixDQVFqQixDQTdGRCxFQUFpQixXQUFXLENBQVgsMENBQVcsRUFBWCxDQUFqQixFLHFVQUFpQixXIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3JlYWN0LW1vc2FpYy1jb21wb25lbnQvbGliL3V0aWwvQm91bmRpbmdCb3guanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2Fzc2lnbiA9ICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8IGZ1bmN0aW9uICgpIHtcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXG4gICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgfTtcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkJvdW5kaW5nQm94ID0gdm9pZCAwO1xudmFyIGFzc2VydE5ldmVyXzEgPSByZXF1aXJlKFwiLi9hc3NlcnROZXZlclwiKTtcbnZhciBCb3VuZGluZ0JveDtcbihmdW5jdGlvbiAoQm91bmRpbmdCb3gpIHtcbiAgICBmdW5jdGlvbiBlbXB0eSgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRvcDogMCxcbiAgICAgICAgICAgIHJpZ2h0OiAwLFxuICAgICAgICAgICAgYm90dG9tOiAwLFxuICAgICAgICAgICAgbGVmdDogMCxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgQm91bmRpbmdCb3guZW1wdHkgPSBlbXB0eTtcbiAgICBmdW5jdGlvbiBzcGxpdChib3VuZGluZ0JveCwgcmVsYXRpdmVTcGxpdFBlcmNlbnRhZ2UsIGRpcmVjdGlvbikge1xuICAgICAgICB2YXIgYWJzb2x1dGVQZXJjZW50YWdlID0gZ2V0QWJzb2x1dGVTcGxpdFBlcmNlbnRhZ2UoYm91bmRpbmdCb3gsIHJlbGF0aXZlU3BsaXRQZXJjZW50YWdlLCBkaXJlY3Rpb24pO1xuICAgICAgICBpZiAoZGlyZWN0aW9uID09PSAnY29sdW1uJykge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBmaXJzdDogX19hc3NpZ24oX19hc3NpZ24oe30sIGJvdW5kaW5nQm94KSwgeyBib3R0b206IDEwMCAtIGFic29sdXRlUGVyY2VudGFnZSB9KSxcbiAgICAgICAgICAgICAgICBzZWNvbmQ6IF9fYXNzaWduKF9fYXNzaWduKHt9LCBib3VuZGluZ0JveCksIHsgdG9wOiBhYnNvbHV0ZVBlcmNlbnRhZ2UgfSksXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gJ3JvdycpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZmlyc3Q6IF9fYXNzaWduKF9fYXNzaWduKHt9LCBib3VuZGluZ0JveCksIHsgcmlnaHQ6IDEwMCAtIGFic29sdXRlUGVyY2VudGFnZSB9KSxcbiAgICAgICAgICAgICAgICBzZWNvbmQ6IF9fYXNzaWduKF9fYXNzaWduKHt9LCBib3VuZGluZ0JveCksIHsgbGVmdDogYWJzb2x1dGVQZXJjZW50YWdlIH0pLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBhc3NlcnROZXZlcl8xLmFzc2VydE5ldmVyKGRpcmVjdGlvbik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgQm91bmRpbmdCb3guc3BsaXQgPSBzcGxpdDtcbiAgICBmdW5jdGlvbiBnZXRBYnNvbHV0ZVNwbGl0UGVyY2VudGFnZShib3VuZGluZ0JveCwgcmVsYXRpdmVTcGxpdFBlcmNlbnRhZ2UsIGRpcmVjdGlvbikge1xuICAgICAgICB2YXIgdG9wID0gYm91bmRpbmdCb3gudG9wLCByaWdodCA9IGJvdW5kaW5nQm94LnJpZ2h0LCBib3R0b20gPSBib3VuZGluZ0JveC5ib3R0b20sIGxlZnQgPSBib3VuZGluZ0JveC5sZWZ0O1xuICAgICAgICBpZiAoZGlyZWN0aW9uID09PSAnY29sdW1uJykge1xuICAgICAgICAgICAgdmFyIGhlaWdodCA9IDEwMCAtIHRvcCAtIGJvdHRvbTtcbiAgICAgICAgICAgIHJldHVybiAoaGVpZ2h0ICogcmVsYXRpdmVTcGxpdFBlcmNlbnRhZ2UpIC8gMTAwICsgdG9wO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gJ3JvdycpIHtcbiAgICAgICAgICAgIHZhciB3aWR0aCA9IDEwMCAtIHJpZ2h0IC0gbGVmdDtcbiAgICAgICAgICAgIHJldHVybiAod2lkdGggKiByZWxhdGl2ZVNwbGl0UGVyY2VudGFnZSkgLyAxMDAgKyBsZWZ0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGFzc2VydE5ldmVyXzEuYXNzZXJ0TmV2ZXIoZGlyZWN0aW9uKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBCb3VuZGluZ0JveC5nZXRBYnNvbHV0ZVNwbGl0UGVyY2VudGFnZSA9IGdldEFic29sdXRlU3BsaXRQZXJjZW50YWdlO1xuICAgIGZ1bmN0aW9uIGdldFJlbGF0aXZlU3BsaXRQZXJjZW50YWdlKGJvdW5kaW5nQm94LCBhYnNvbHV0ZVNwbGl0UGVyY2VudGFnZSwgZGlyZWN0aW9uKSB7XG4gICAgICAgIHZhciB0b3AgPSBib3VuZGluZ0JveC50b3AsIHJpZ2h0ID0gYm91bmRpbmdCb3gucmlnaHQsIGJvdHRvbSA9IGJvdW5kaW5nQm94LmJvdHRvbSwgbGVmdCA9IGJvdW5kaW5nQm94LmxlZnQ7XG4gICAgICAgIGlmIChkaXJlY3Rpb24gPT09ICdjb2x1bW4nKSB7XG4gICAgICAgICAgICB2YXIgaGVpZ2h0ID0gMTAwIC0gdG9wIC0gYm90dG9tO1xuICAgICAgICAgICAgcmV0dXJuICgoYWJzb2x1dGVTcGxpdFBlcmNlbnRhZ2UgLSB0b3ApIC8gaGVpZ2h0KSAqIDEwMDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChkaXJlY3Rpb24gPT09ICdyb3cnKSB7XG4gICAgICAgICAgICB2YXIgd2lkdGggPSAxMDAgLSByaWdodCAtIGxlZnQ7XG4gICAgICAgICAgICByZXR1cm4gKChhYnNvbHV0ZVNwbGl0UGVyY2VudGFnZSAtIGxlZnQpIC8gd2lkdGgpICogMTAwO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGFzc2VydE5ldmVyXzEuYXNzZXJ0TmV2ZXIoZGlyZWN0aW9uKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBCb3VuZGluZ0JveC5nZXRSZWxhdGl2ZVNwbGl0UGVyY2VudGFnZSA9IGdldFJlbGF0aXZlU3BsaXRQZXJjZW50YWdlO1xuICAgIGZ1bmN0aW9uIGFzU3R5bGVzKF9hKSB7XG4gICAgICAgIHZhciB0b3AgPSBfYS50b3AsIHJpZ2h0ID0gX2EucmlnaHQsIGJvdHRvbSA9IF9hLmJvdHRvbSwgbGVmdCA9IF9hLmxlZnQ7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0b3A6IHRvcCArIFwiJVwiLFxuICAgICAgICAgICAgcmlnaHQ6IHJpZ2h0ICsgXCIlXCIsXG4gICAgICAgICAgICBib3R0b206IGJvdHRvbSArIFwiJVwiLFxuICAgICAgICAgICAgbGVmdDogbGVmdCArIFwiJVwiLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBCb3VuZGluZ0JveC5hc1N0eWxlcyA9IGFzU3R5bGVzO1xufSkoQm91bmRpbmdCb3ggPSBleHBvcnRzLkJvdW5kaW5nQm94IHx8IChleHBvcnRzLkJvdW5kaW5nQm94ID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUJvdW5kaW5nQm94LmpzLm1hcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/react-mosaic-component/lib/util/BoundingBox.js\n");

/***/ }),

/***/ "./node_modules/react-mosaic-component/lib/util/OptionalBlueprint.js":
/*!***************************************************************************!*\
  !*** ./node_modules/react-mosaic-component/lib/util/OptionalBlueprint.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};var __createBinding=this&&this.__createBinding||(Object.create?function(o,m,k,k2){if(k2===undefined)k2=k;Object.defineProperty(o,k2,{enumerable:true,get:function get(){return m[k];}});}:function(o,m,k,k2){if(k2===undefined)k2=k;o[k2]=m[k];});var __setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(o,v){Object.defineProperty(o,\"default\",{enumerable:true,value:v});}:function(o,v){o[\"default\"]=v;});var __importStar=this&&this.__importStar||function(mod){if(mod&&mod.__esModule)return mod;var result={};if(mod!=null)for(var k in mod){if(Object.hasOwnProperty.call(mod,k))__createBinding(result,mod,k);}__setModuleDefault(result,mod);return result;};Object.defineProperty(exports,\"__esModule\",{value:true});exports.OptionalBlueprint=void 0;var React=__importStar(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));var OptionalBlueprint;(function(OptionalBlueprint){var _a;var Classes;var IconNames;try{// Webpack is quieter about these errors\n// https://github.com/nomcopter/react-mosaic/issues/109\n/*require.resolve*/(!(function webpackMissingModule() { var e = new Error(\"Cannot find module '@blueprintjs/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));/*require.resolve*/(!(function webpackMissingModule() { var e = new Error(\"Cannot find module '@blueprintjs/icons'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));_a=__webpack_require__(!(function webpackMissingModule() { var e = new Error(\"Cannot find module '@blueprintjs/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())),Classes=_a.Classes,OptionalBlueprint.Icon=_a.Icon;IconNames=__webpack_require__(!(function webpackMissingModule() { var e = new Error(\"Cannot find module '@blueprintjs/icons'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())).IconNames;}catch(_b){OptionalBlueprint.Icon=function(_a){var icon=_a.icon;return React.createElement(\"span\",null,icon);};}function getClasses(){var names=[];for(var _i=0;_i<arguments.length;_i++){names[_i]=arguments[_i];}if(Classes){return names.map(function(name){return Classes[name];}).join(' ');}return'';}OptionalBlueprint.getClasses=getClasses;function getIconClass(iconName){if(Classes&&IconNames){return Classes.iconClass(IconNames[iconName]);}return'';}OptionalBlueprint.getIconClass=getIconClass;})(OptionalBlueprint=exports.OptionalBlueprint||(exports.OptionalBlueprint={}));;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(__createBinding,\"__createBinding\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/util/OptionalBlueprint.js\");reactHotLoader.register(__setModuleDefault,\"__setModuleDefault\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/util/OptionalBlueprint.js\");reactHotLoader.register(__importStar,\"__importStar\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/util/OptionalBlueprint.js\");reactHotLoader.register(React,\"React\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/util/OptionalBlueprint.js\");reactHotLoader.register(OptionalBlueprint,\"OptionalBlueprint\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/util/OptionalBlueprint.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4uLy4uL3NyYy91dGlsL09wdGlvbmFsQmx1ZXByaW50LnRzeD80MDk5Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiIwakNBRUEsMEZBRUEsR0FBaUIsa0JBQWpCLFdBQWlCLGlCQUFqQixDQUFrQyxDLE9BRWhDLEdBQUksUUFBSixDQUdBLEdBQUksVUFBSixDQUNBLEdBQUksQ0FDRjtBQUNBO0FBQ0Esb0JBQWdCLDJJQUFoQixFQUNBLG9CQUFnQiw0SUFBaEIsRUFDQyxHQUFvQixtQkFBTyxDQUFDLDJJQUFELENBQTNCLENBQUUsT0FBTyxXQUFULENBQVcsdUJBQUksT0FBaEIsQ0FDRyxTQUFTLENBQUssbUJBQU8sQ0FBQyw0SUFBRCxDQUFQLENBQUwsU0FBWixDQUNELENBQUMsU0FBTSxDQUNOLHVCQUFPLFNBQUMsRUFBRCxDQUFxQixDLEdBQWxCLEtBQUksUSxDQUFtQix1Q0FBTyxJQUFQLEVBQW1CLENBQXBELENBQ0QsQ0FHRCxRQUFnQixXQUFoQixFQUEwQixDQUFDLGEsSUFBQSxRLENBQUEsbUIsQ0FBQSxJLENBQTBCLENBQTFCLHdCLENBQ3pCLEdBQUksT0FBSixDQUFhLENBQ1gsTUFBTyxNQUFLLENBQUMsR0FBTixDQUFVLFNBQUMsSUFBRCxDQUFLLENBQUssY0FBUSxDQUFSLElBQVEsQ0FBUixDQUFjLENBQWxDLEVBQW9DLElBQXBDLENBQXlDLEdBQXpDLENBQVAsQ0FDRCxDQUVELE1BQU8sRUFBUCxDQUNELENBTmUsNkJBQVUsVUFBVixDQVFoQixRQUFnQixhQUFoQixDQUE2QixRQUE3QixDQUFzRCxDQUNwRCxHQUFJLE9BQU8sRUFBSSxTQUFmLENBQTBCLENBQ3hCLE1BQU8sUUFBTyxDQUFDLFNBQVIsQ0FBa0IsU0FBUyxDQUFDLFFBQUQsQ0FBM0IsQ0FBUCxDQUNELENBRUQsTUFBTyxFQUFQLENBQ0QsQ0FOZSwrQkFBWSxZQUFaLENBT2pCLENBakNELEVBQWlCLGlCQUFpQixDQUFqQixzREFBaUIsRUFBakIsQ0FBakIsRSxpc0JBRkEsSywySkFFaUIsaUIiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbW9zYWljLWNvbXBvbmVudC9saWIvdXRpbC9PcHRpb25hbEJsdWVwcmludC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH0pO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9fc2V0TW9kdWxlRGVmYXVsdCkgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcbn0pIDogZnVuY3Rpb24obywgdikge1xuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcbn0pO1xudmFyIF9faW1wb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnRTdGFyKSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwgayk7XG4gICAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuT3B0aW9uYWxCbHVlcHJpbnQgPSB2b2lkIDA7XG52YXIgUmVhY3QgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcInJlYWN0XCIpKTtcbnZhciBPcHRpb25hbEJsdWVwcmludDtcbihmdW5jdGlvbiAoT3B0aW9uYWxCbHVlcHJpbnQpIHtcbiAgICB2YXIgX2E7XG4gICAgdmFyIENsYXNzZXM7XG4gICAgdmFyIEljb25OYW1lcztcbiAgICB0cnkge1xuICAgICAgICAvLyBXZWJwYWNrIGlzIHF1aWV0ZXIgYWJvdXQgdGhlc2UgZXJyb3JzXG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ub21jb3B0ZXIvcmVhY3QtbW9zYWljL2lzc3Vlcy8xMDlcbiAgICAgICAgcmVxdWlyZS5yZXNvbHZlKCdAYmx1ZXByaW50anMvY29yZScpO1xuICAgICAgICByZXF1aXJlLnJlc29sdmUoJ0BibHVlcHJpbnRqcy9pY29ucycpO1xuICAgICAgICAoX2EgPSByZXF1aXJlKCdAYmx1ZXByaW50anMvY29yZScpLCBDbGFzc2VzID0gX2EuQ2xhc3NlcywgT3B0aW9uYWxCbHVlcHJpbnQuSWNvbiA9IF9hLkljb24pO1xuICAgICAgICAoSWNvbk5hbWVzID0gcmVxdWlyZSgnQGJsdWVwcmludGpzL2ljb25zJykuSWNvbk5hbWVzKTtcbiAgICB9XG4gICAgY2F0Y2ggKF9iKSB7XG4gICAgICAgIE9wdGlvbmFsQmx1ZXByaW50Lkljb24gPSBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgIHZhciBpY29uID0gX2EuaWNvbjtcbiAgICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCBudWxsLCBpY29uKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0Q2xhc3NlcygpIHtcbiAgICAgICAgdmFyIG5hbWVzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBuYW1lc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIGlmIChDbGFzc2VzKSB7XG4gICAgICAgICAgICByZXR1cm4gbmFtZXMubWFwKGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBDbGFzc2VzW25hbWVdOyB9KS5qb2luKCcgJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgICBPcHRpb25hbEJsdWVwcmludC5nZXRDbGFzc2VzID0gZ2V0Q2xhc3NlcztcbiAgICBmdW5jdGlvbiBnZXRJY29uQ2xhc3MoaWNvbk5hbWUpIHtcbiAgICAgICAgaWYgKENsYXNzZXMgJiYgSWNvbk5hbWVzKSB7XG4gICAgICAgICAgICByZXR1cm4gQ2xhc3Nlcy5pY29uQ2xhc3MoSWNvbk5hbWVzW2ljb25OYW1lXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgICBPcHRpb25hbEJsdWVwcmludC5nZXRJY29uQ2xhc3MgPSBnZXRJY29uQ2xhc3M7XG59KShPcHRpb25hbEJsdWVwcmludCA9IGV4cG9ydHMuT3B0aW9uYWxCbHVlcHJpbnQgfHwgKGV4cG9ydHMuT3B0aW9uYWxCbHVlcHJpbnQgPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9T3B0aW9uYWxCbHVlcHJpbnQuanMubWFwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/react-mosaic-component/lib/util/OptionalBlueprint.js\n");

/***/ }),

/***/ "./node_modules/react-mosaic-component/lib/util/assertNever.js":
/*!*********************************************************************!*\
  !*** ./node_modules/react-mosaic-component/lib/util/assertNever.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};Object.defineProperty(exports,\"__esModule\",{value:true});exports.assertNever=void 0;function assertNever(shouldBeNever){throw new Error('Unhandled case: '+JSON.stringify(shouldBeNever));}exports.assertNever=assertNever;;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(assertNever,\"assertNever\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/util/assertNever.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4uLy4uL3NyYy91dGlsL2Fzc2VydE5ldmVyLnRzP2U5NzYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6InNaQUFBLFFBQWdCLFlBQWhCLENBQTRCLGFBQTVCLENBQWdELENBQzlDLEtBQU0sSUFBSSxNQUFKLENBQVUsbUJBQXFCLElBQUksQ0FBQyxTQUFMLENBQWUsYUFBZixDQUEvQixDQUFOLENBQ0QsQ0FGRCxnQyxxS0FBZ0IsVyIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9yZWFjdC1tb3NhaWMtY29tcG9uZW50L2xpYi91dGlsL2Fzc2VydE5ldmVyLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmFzc2VydE5ldmVyID0gdm9pZCAwO1xuZnVuY3Rpb24gYXNzZXJ0TmV2ZXIoc2hvdWxkQmVOZXZlcikge1xuICAgIHRocm93IG5ldyBFcnJvcignVW5oYW5kbGVkIGNhc2U6ICcgKyBKU09OLnN0cmluZ2lmeShzaG91bGRCZU5ldmVyKSk7XG59XG5leHBvcnRzLmFzc2VydE5ldmVyID0gYXNzZXJ0TmV2ZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hc3NlcnROZXZlci5qcy5tYXAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/react-mosaic-component/lib/util/assertNever.js\n");

/***/ }),

/***/ "./node_modules/react-mosaic-component/lib/util/mosaicUpdates.js":
/*!***********************************************************************!*\
  !*** ./node_modules/react-mosaic-component/lib/util/mosaicUpdates.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{\"default\":mod};};Object.defineProperty(exports,\"__esModule\",{value:true});exports.createExpandUpdate=exports.createHideUpdate=exports.createDragToUpdates=exports.createRemoveUpdate=exports.updateTree=exports.buildSpecFromUpdate=void 0;var immutability_helper_1=__importDefault(__webpack_require__(/*! immutability-helper */ \"./node_modules/immutability-helper/index.js\"));var drop_1=__importDefault(__webpack_require__(/*! lodash/drop */ \"./node_modules/lodash/drop.js\"));var dropRight_1=__importDefault(__webpack_require__(/*! lodash/dropRight */ \"./node_modules/lodash/dropRight.js\"));var isEqual_1=__importDefault(__webpack_require__(/*! lodash/isEqual */ \"./node_modules/lodash/isEqual.js\"));var last_1=__importDefault(__webpack_require__(/*! lodash/last */ \"./node_modules/lodash/last.js\"));var set_1=__importDefault(__webpack_require__(/*! lodash/set */ \"./node_modules/lodash/set.js\"));var take_1=__importDefault(__webpack_require__(/*! lodash/take */ \"./node_modules/lodash/take.js\"));var internalTypes_1=__webpack_require__(/*! ../internalTypes */ \"./node_modules/react-mosaic-component/lib/internalTypes.js\");var mosaicUtilities_1=__webpack_require__(/*! ./mosaicUtilities */ \"./node_modules/react-mosaic-component/lib/util/mosaicUtilities.js\");/**\n * Used to prepare `update` for `immutability-helper`\n * @param mosaicUpdate\n * @returns {any}\n */function buildSpecFromUpdate(mosaicUpdate){if(mosaicUpdate.path.length>0){return set_1[\"default\"]({},mosaicUpdate.path,mosaicUpdate.spec);}else{return mosaicUpdate.spec;}}exports.buildSpecFromUpdate=buildSpecFromUpdate;/**\n * Applies `updates` to `root`\n * @param root\n * @param updates\n * @returns {MosaicNode<T>}\n */function updateTree(root,updates){var currentNode=root;updates.forEach(function(mUpdate){currentNode=immutability_helper_1[\"default\"](currentNode,buildSpecFromUpdate(mUpdate));});return currentNode;}exports.updateTree=updateTree;/**\n * Creates a `MosaicUpdate<T>` to remove the node at `path` from `root`\n * @param root\n * @param path\n * @returns {{path: T[], spec: {$set: MosaicNode<T>}}}\n */function createRemoveUpdate(root,path){var parentPath=dropRight_1[\"default\"](path);var nodeToRemove=last_1[\"default\"](path);var siblingPath=parentPath.concat(mosaicUtilities_1.getOtherBranch(nodeToRemove));var sibling=mosaicUtilities_1.getAndAssertNodeAtPathExists(root,siblingPath);return{path:parentPath,spec:{$set:sibling}};}exports.createRemoveUpdate=createRemoveUpdate;function isPathPrefixEqual(a,b,length){return isEqual_1[\"default\"](take_1[\"default\"](a,length),take_1[\"default\"](b,length));}/**\n * Creates a `MosaicUpdate<T>` to split the _leaf_ at `destinationPath` into a node of it and the node from `sourcePath`\n * placing the node from `sourcePath` in `position`.\n * @param root\n * @param sourcePath\n * @param destinationPath\n * @param position\n * @returns {(MosaicUpdate<T>|{path: MosaicPath, spec: {$set: {first: MosaicNode<T>, second: MosaicNode<T>, direction: MosaicDirection}}})[]}\n */function createDragToUpdates(root,sourcePath,destinationPath,position){var destinationNode=mosaicUtilities_1.getAndAssertNodeAtPathExists(root,destinationPath);var updates=[];var destinationIsParentOfSource=isPathPrefixEqual(sourcePath,destinationPath,destinationPath.length);if(destinationIsParentOfSource){// Must explicitly remove source from the destination node\ndestinationNode=updateTree(destinationNode,[createRemoveUpdate(destinationNode,drop_1[\"default\"](sourcePath,destinationPath.length))]);}else{// Can remove source normally\nupdates.push(createRemoveUpdate(root,sourcePath));// Have to drop in the correct destination after the source has been removed\nvar removedNodeParentIsInPath=isPathPrefixEqual(sourcePath,destinationPath,sourcePath.length-1);if(removedNodeParentIsInPath){destinationPath.splice(sourcePath.length-1,1);}}var sourceNode=mosaicUtilities_1.getAndAssertNodeAtPathExists(root,sourcePath);var first;var second;if(position===internalTypes_1.MosaicDropTargetPosition.LEFT||position===internalTypes_1.MosaicDropTargetPosition.TOP){first=sourceNode;second=destinationNode;}else{first=destinationNode;second=sourceNode;}var direction='column';if(position===internalTypes_1.MosaicDropTargetPosition.LEFT||position===internalTypes_1.MosaicDropTargetPosition.RIGHT){direction='row';}updates.push({path:destinationPath,spec:{$set:{first:first,second:second,direction:direction}}});return updates;}exports.createDragToUpdates=createDragToUpdates;/**\n * Sets the splitPercentage to hide the node at `path`\n * @param path\n * @returns {{path: T[], spec: {splitPercentage: {$set: number}}}}\n */function createHideUpdate(path){var targetPath=dropRight_1[\"default\"](path);var thisBranch=last_1[\"default\"](path);var splitPercentage;if(thisBranch==='first'){splitPercentage=0;}else{splitPercentage=100;}return{path:targetPath,spec:{splitPercentage:{$set:splitPercentage}}};}exports.createHideUpdate=createHideUpdate;/**\n * Sets the splitPercentage of node at `path` and all of its parents to `percentage` in order to expand it\n * @param path\n * @param percentage\n * @returns {{spec: MosaicUpdateSpec<T>, path: Array}}\n */function createExpandUpdate(path,percentage){var _a;var spec={};for(var i=path.length-1;i>=0;i--){var branch=path[i];var splitPercentage=branch==='first'?percentage:100-percentage;spec=(_a={splitPercentage:{$set:splitPercentage}},_a[branch]=spec,_a);}return{spec:spec,path:[]};}exports.createExpandUpdate=createExpandUpdate;;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(__importDefault,\"__importDefault\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/util/mosaicUpdates.js\");reactHotLoader.register(immutability_helper_1,\"immutability_helper_1\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/util/mosaicUpdates.js\");reactHotLoader.register(drop_1,\"drop_1\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/util/mosaicUpdates.js\");reactHotLoader.register(dropRight_1,\"dropRight_1\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/util/mosaicUpdates.js\");reactHotLoader.register(isEqual_1,\"isEqual_1\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/util/mosaicUpdates.js\");reactHotLoader.register(last_1,\"last_1\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/util/mosaicUpdates.js\");reactHotLoader.register(set_1,\"set_1\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/util/mosaicUpdates.js\");reactHotLoader.register(take_1,\"take_1\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/util/mosaicUpdates.js\");reactHotLoader.register(buildSpecFromUpdate,\"buildSpecFromUpdate\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/util/mosaicUpdates.js\");reactHotLoader.register(updateTree,\"updateTree\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/util/mosaicUpdates.js\");reactHotLoader.register(createRemoveUpdate,\"createRemoveUpdate\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/util/mosaicUpdates.js\");reactHotLoader.register(isPathPrefixEqual,\"isPathPrefixEqual\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/util/mosaicUpdates.js\");reactHotLoader.register(createDragToUpdates,\"createDragToUpdates\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/util/mosaicUpdates.js\");reactHotLoader.register(createHideUpdate,\"createHideUpdate\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/util/mosaicUpdates.js\");reactHotLoader.register(createExpandUpdate,\"createExpandUpdate\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/util/mosaicUpdates.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-mosaic-component/lib/util/mosaicUpdates.js\n");

/***/ }),

/***/ "./node_modules/react-mosaic-component/lib/util/mosaicUtilities.js":
/*!*************************************************************************!*\
  !*** ./node_modules/react-mosaic-component/lib/util/mosaicUtilities.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{\"default\":mod};};Object.defineProperty(exports,\"__esModule\",{value:true});exports.getAndAssertNodeAtPathExists=exports.getNodeAtPath=exports.getLeaves=exports.getPathToCorner=exports.getOtherDirection=exports.getOtherBranch=exports.createBalancedTreeFromLeaves=exports.isParent=exports.Corner=void 0;var clone_1=__importDefault(__webpack_require__(/*! lodash/clone */ \"./node_modules/lodash/clone.js\"));var get_1=__importDefault(__webpack_require__(/*! lodash/get */ \"./node_modules/lodash/get.js\"));function alternateDirection(node,direction){if(direction===void 0){direction='row';}if(isParent(node)){var nextDirection=getOtherDirection(direction);return{direction:direction,first:alternateDirection(node.first,nextDirection),second:alternateDirection(node.second,nextDirection)};}else{return node;}}var Corner;(function(Corner){Corner[Corner[\"TOP_LEFT\"]=1]=\"TOP_LEFT\";Corner[Corner[\"TOP_RIGHT\"]=2]=\"TOP_RIGHT\";Corner[Corner[\"BOTTOM_LEFT\"]=3]=\"BOTTOM_LEFT\";Corner[Corner[\"BOTTOM_RIGHT\"]=4]=\"BOTTOM_RIGHT\";})(Corner=exports.Corner||(exports.Corner={}));/**\n * Returns `true` if `node` is a MosaicParent\n * @param node\n * @returns {boolean}\n */function isParent(node){return node.direction!=null;}exports.isParent=isParent;/**\n * Creates a balanced binary tree from `leaves` with the goal of making them as equal area as possible\n * @param leaves\n * @param startDirection\n * @returns {MosaicNode<T>}\n */function createBalancedTreeFromLeaves(leaves,startDirection){if(startDirection===void 0){startDirection='row';}if(leaves.length===0){return null;}var current=clone_1[\"default\"](leaves);var next=[];while(current.length>1){while(current.length>0){if(current.length>1){next.push({direction:'row',first:current.shift(),second:current.shift()});}else{next.unshift(current.shift());}}current=next;next=[];}return alternateDirection(current[0],startDirection);}exports.createBalancedTreeFromLeaves=createBalancedTreeFromLeaves;/**\n * Gets the sibling of `branch`\n * @param branch\n * @returns {any}\n */function getOtherBranch(branch){if(branch==='first'){return'second';}else if(branch==='second'){return'first';}else{throw new Error(\"Branch '\"+branch+\"' not a valid branch\");}}exports.getOtherBranch=getOtherBranch;/**\n * Gets the opposite of `direction`\n * @param direction\n * @returns {any}\n */function getOtherDirection(direction){if(direction==='row'){return'column';}else{return'row';}}exports.getOtherDirection=getOtherDirection;/**\n * Traverses `tree` to find the path to the specified `corner`\n * @param tree\n * @param corner\n * @returns {MosaicPath}\n */function getPathToCorner(tree,corner){var currentNode=tree;var currentPath=[];while(isParent(currentNode)){if(currentNode.direction==='row'&&(corner===Corner.TOP_LEFT||corner===Corner.BOTTOM_LEFT)){currentPath.push('first');currentNode=currentNode.first;}else if(currentNode.direction==='column'&&(corner===Corner.TOP_LEFT||corner===Corner.TOP_RIGHT)){currentPath.push('first');currentNode=currentNode.first;}else{currentPath.push('second');currentNode=currentNode.second;}}return currentPath;}exports.getPathToCorner=getPathToCorner;/**\n * Gets all leaves of `tree`\n * @param tree\n * @returns {T[]}\n */function getLeaves(tree){if(tree==null){return[];}else if(isParent(tree)){return getLeaves(tree.first).concat(getLeaves(tree.second));}else{return[tree];}}exports.getLeaves=getLeaves;/**\n * Gets node at `path` from `tree`\n * @param tree\n * @param path\n * @returns {MosaicNode<T>|null}\n */function getNodeAtPath(tree,path){if(path.length>0){return get_1[\"default\"](tree,path,null);}else{return tree;}}exports.getNodeAtPath=getNodeAtPath;/**\n * Gets node at `path` from `tree` and verifies that neither `tree` nor the result are null\n * @param tree\n * @param path\n * @returns {MosaicNode<T>}\n */function getAndAssertNodeAtPathExists(tree,path){if(tree==null){throw new Error('Root is empty, cannot fetch path');}var node=getNodeAtPath(tree,path);if(node==null){throw new Error(\"Path [\"+path.join(', ')+\"] did not resolve to a node\");}return node;}exports.getAndAssertNodeAtPathExists=getAndAssertNodeAtPathExists;;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(__importDefault,\"__importDefault\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/util/mosaicUtilities.js\");reactHotLoader.register(clone_1,\"clone_1\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/util/mosaicUtilities.js\");reactHotLoader.register(get_1,\"get_1\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/util/mosaicUtilities.js\");reactHotLoader.register(alternateDirection,\"alternateDirection\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/util/mosaicUtilities.js\");reactHotLoader.register(Corner,\"Corner\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/util/mosaicUtilities.js\");reactHotLoader.register(isParent,\"isParent\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/util/mosaicUtilities.js\");reactHotLoader.register(createBalancedTreeFromLeaves,\"createBalancedTreeFromLeaves\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/util/mosaicUtilities.js\");reactHotLoader.register(getOtherBranch,\"getOtherBranch\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/util/mosaicUtilities.js\");reactHotLoader.register(getOtherDirection,\"getOtherDirection\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/util/mosaicUtilities.js\");reactHotLoader.register(getPathToCorner,\"getPathToCorner\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/util/mosaicUtilities.js\");reactHotLoader.register(getLeaves,\"getLeaves\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/util/mosaicUtilities.js\");reactHotLoader.register(getNodeAtPath,\"getNodeAtPath\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/util/mosaicUtilities.js\");reactHotLoader.register(getAndAssertNodeAtPathExists,\"getAndAssertNodeAtPathExists\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/lib/util/mosaicUtilities.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-mosaic-component/lib/util/mosaicUtilities.js\n");

/***/ }),

/***/ "./node_modules/react-mosaic-component/node_modules/uuid/index.js":
/*!************************************************************************!*\
  !*** ./node_modules/react-mosaic-component/node_modules/uuid/index.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};var v1=__webpack_require__(/*! ./v1 */ \"./node_modules/react-mosaic-component/node_modules/uuid/v1.js\");var v4=__webpack_require__(/*! ./v4 */ \"./node_modules/react-mosaic-component/node_modules/uuid/v4.js\");var uuid=v4;uuid.v1=v1;uuid.v4=v4;module.exports=uuid;;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(uuid,\"uuid\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/node_modules/uuid/index.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW1vc2FpYy1jb21wb25lbnQvbm9kZV9tb2R1bGVzL3V1aWQvaW5kZXguanM/Njc4YSJdLCJuYW1lcyI6WyJ2MSIsInJlcXVpcmUiLCJ2NCIsInV1aWQiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoia1VBQUEsR0FBSUEsR0FBRSxDQUFHQyxtQkFBTyxDQUFDLDJFQUFELENBQWhCLENBQ0EsR0FBSUMsR0FBRSxDQUFHRCxtQkFBTyxDQUFDLDJFQUFELENBQWhCLENBRUEsR0FBSUUsS0FBSSxDQUFHRCxFQUFYLENBQ0FDLElBQUksQ0FBQ0gsRUFBTCxDQUFVQSxFQUFWLENBQ0FHLElBQUksQ0FBQ0QsRUFBTCxDQUFVQSxFQUFWLENBRUFFLE1BQU0sQ0FBQ0MsT0FBUCxDQUFpQkYsSUFBakIsQyxxS0FKSUEsSSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9yZWFjdC1tb3NhaWMtY29tcG9uZW50L25vZGVfbW9kdWxlcy91dWlkL2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHYxID0gcmVxdWlyZSgnLi92MScpO1xudmFyIHY0ID0gcmVxdWlyZSgnLi92NCcpO1xuXG52YXIgdXVpZCA9IHY0O1xudXVpZC52MSA9IHYxO1xudXVpZC52NCA9IHY0O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHV1aWQ7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/react-mosaic-component/node_modules/uuid/index.js\n");

/***/ }),

/***/ "./node_modules/react-mosaic-component/node_modules/uuid/lib/bytesToUuid.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/react-mosaic-component/node_modules/uuid/lib/bytesToUuid.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */var byteToHex=[];for(var i=0;i<256;++i){byteToHex[i]=(i+0x100).toString(16).substr(1);}function bytesToUuid(buf,offset){var i=offset||0;var bth=byteToHex;// join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4\nreturn[bth[buf[i++]],bth[buf[i++]],bth[buf[i++]],bth[buf[i++]],'-',bth[buf[i++]],bth[buf[i++]],'-',bth[buf[i++]],bth[buf[i++]],'-',bth[buf[i++]],bth[buf[i++]],'-',bth[buf[i++]],bth[buf[i++]],bth[buf[i++]],bth[buf[i++]],bth[buf[i++]],bth[buf[i++]]].join('');}module.exports=bytesToUuid;;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(byteToHex,\"byteToHex\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/node_modules/uuid/lib/bytesToUuid.js\");reactHotLoader.register(i,\"i\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/node_modules/uuid/lib/bytesToUuid.js\");reactHotLoader.register(bytesToUuid,\"bytesToUuid\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/node_modules/uuid/lib/bytesToUuid.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW1vc2FpYy1jb21wb25lbnQvbm9kZV9tb2R1bGVzL3V1aWQvbGliL2J5dGVzVG9VdWlkLmpzPzg0ZjYiXSwibmFtZXMiOlsiYnl0ZVRvSGV4IiwiaSIsInRvU3RyaW5nIiwic3Vic3RyIiwiYnl0ZXNUb1V1aWQiLCJidWYiLCJvZmZzZXQiLCJidGgiLCJqb2luIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6ImtVQUFBOzs7R0FJQSxHQUFJQSxVQUFTLENBQUcsRUFBaEIsQ0FDQSxJQUFLLEdBQUlDLEVBQUMsQ0FBRyxDQUFiLENBQWdCQSxDQUFDLENBQUcsR0FBcEIsQ0FBeUIsRUFBRUEsQ0FBM0IsQ0FBOEIsQ0FDNUJELFNBQVMsQ0FBQ0MsQ0FBRCxDQUFULENBQWUsQ0FBQ0EsQ0FBQyxDQUFHLEtBQUwsRUFBWUMsUUFBWixDQUFxQixFQUFyQixFQUF5QkMsTUFBekIsQ0FBZ0MsQ0FBaEMsQ0FBZixDQUNELENBRUQsUUFBU0MsWUFBVCxDQUFxQkMsR0FBckIsQ0FBMEJDLE1BQTFCLENBQWtDLENBQ2hDLEdBQUlMLEVBQUMsQ0FBR0ssTUFBTSxFQUFJLENBQWxCLENBQ0EsR0FBSUMsSUFBRyxDQUFHUCxTQUFWLENBQ0E7QUFDQSxNQUFRLENBQ05PLEdBQUcsQ0FBQ0YsR0FBRyxDQUFDSixDQUFDLEVBQUYsQ0FBSixDQURHLENBQ1NNLEdBQUcsQ0FBQ0YsR0FBRyxDQUFDSixDQUFDLEVBQUYsQ0FBSixDQURaLENBRU5NLEdBQUcsQ0FBQ0YsR0FBRyxDQUFDSixDQUFDLEVBQUYsQ0FBSixDQUZHLENBRVNNLEdBQUcsQ0FBQ0YsR0FBRyxDQUFDSixDQUFDLEVBQUYsQ0FBSixDQUZaLENBRXdCLEdBRnhCLENBR05NLEdBQUcsQ0FBQ0YsR0FBRyxDQUFDSixDQUFDLEVBQUYsQ0FBSixDQUhHLENBR1NNLEdBQUcsQ0FBQ0YsR0FBRyxDQUFDSixDQUFDLEVBQUYsQ0FBSixDQUhaLENBR3dCLEdBSHhCLENBSU5NLEdBQUcsQ0FBQ0YsR0FBRyxDQUFDSixDQUFDLEVBQUYsQ0FBSixDQUpHLENBSVNNLEdBQUcsQ0FBQ0YsR0FBRyxDQUFDSixDQUFDLEVBQUYsQ0FBSixDQUpaLENBSXdCLEdBSnhCLENBS05NLEdBQUcsQ0FBQ0YsR0FBRyxDQUFDSixDQUFDLEVBQUYsQ0FBSixDQUxHLENBS1NNLEdBQUcsQ0FBQ0YsR0FBRyxDQUFDSixDQUFDLEVBQUYsQ0FBSixDQUxaLENBS3dCLEdBTHhCLENBTU5NLEdBQUcsQ0FBQ0YsR0FBRyxDQUFDSixDQUFDLEVBQUYsQ0FBSixDQU5HLENBTVNNLEdBQUcsQ0FBQ0YsR0FBRyxDQUFDSixDQUFDLEVBQUYsQ0FBSixDQU5aLENBT05NLEdBQUcsQ0FBQ0YsR0FBRyxDQUFDSixDQUFDLEVBQUYsQ0FBSixDQVBHLENBT1NNLEdBQUcsQ0FBQ0YsR0FBRyxDQUFDSixDQUFDLEVBQUYsQ0FBSixDQVBaLENBUU5NLEdBQUcsQ0FBQ0YsR0FBRyxDQUFDSixDQUFDLEVBQUYsQ0FBSixDQVJHLENBUVNNLEdBQUcsQ0FBQ0YsR0FBRyxDQUFDSixDQUFDLEVBQUYsQ0FBSixDQVJaLENBQUQsQ0FTSk8sSUFUSSxDQVNDLEVBVEQsQ0FBUCxDQVVELENBRURDLE1BQU0sQ0FBQ0MsT0FBUCxDQUFpQk4sV0FBakIsQyxxS0FyQklKLFMsc0tBQ0tDLEMsOEpBSUFHLFciLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbW9zYWljLWNvbXBvbmVudC9ub2RlX21vZHVsZXMvdXVpZC9saWIvYnl0ZXNUb1V1aWQuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvbnZlcnQgYXJyYXkgb2YgMTYgYnl0ZSB2YWx1ZXMgdG8gVVVJRCBzdHJpbmcgZm9ybWF0IG9mIHRoZSBmb3JtOlxuICogWFhYWFhYWFgtWFhYWC1YWFhYLVhYWFgtWFhYWFhYWFhYWFhYXG4gKi9cbnZhciBieXRlVG9IZXggPSBbXTtcbmZvciAodmFyIGkgPSAwOyBpIDwgMjU2OyArK2kpIHtcbiAgYnl0ZVRvSGV4W2ldID0gKGkgKyAweDEwMCkudG9TdHJpbmcoMTYpLnN1YnN0cigxKTtcbn1cblxuZnVuY3Rpb24gYnl0ZXNUb1V1aWQoYnVmLCBvZmZzZXQpIHtcbiAgdmFyIGkgPSBvZmZzZXQgfHwgMDtcbiAgdmFyIGJ0aCA9IGJ5dGVUb0hleDtcbiAgLy8gam9pbiB1c2VkIHRvIGZpeCBtZW1vcnkgaXNzdWUgY2F1c2VkIGJ5IGNvbmNhdGVuYXRpb246IGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMxNzUjYzRcbiAgcmV0dXJuIChbXG4gICAgYnRoW2J1ZltpKytdXSwgYnRoW2J1ZltpKytdXSxcbiAgICBidGhbYnVmW2krK11dLCBidGhbYnVmW2krK11dLCAnLScsXG4gICAgYnRoW2J1ZltpKytdXSwgYnRoW2J1ZltpKytdXSwgJy0nLFxuICAgIGJ0aFtidWZbaSsrXV0sIGJ0aFtidWZbaSsrXV0sICctJyxcbiAgICBidGhbYnVmW2krK11dLCBidGhbYnVmW2krK11dLCAnLScsXG4gICAgYnRoW2J1ZltpKytdXSwgYnRoW2J1ZltpKytdXSxcbiAgICBidGhbYnVmW2krK11dLCBidGhbYnVmW2krK11dLFxuICAgIGJ0aFtidWZbaSsrXV0sIGJ0aFtidWZbaSsrXV1cbiAgXSkuam9pbignJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYnl0ZXNUb1V1aWQ7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/react-mosaic-component/node_modules/uuid/lib/bytesToUuid.js\n");

/***/ }),

/***/ "./node_modules/react-mosaic-component/node_modules/uuid/lib/rng-browser.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/react-mosaic-component/node_modules/uuid/lib/rng-browser.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};// Unique ID creation requires a high quality random # generator.  In the\n// browser this is a little complicated due to unknown quality of Math.random()\n// and inconsistent support for the `crypto` API.  We do the best we can via\n// feature-detection\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto\n// implementation. Also, find the complete implementation of crypto on IE11.\nvar getRandomValues=typeof crypto!='undefined'&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||typeof msCrypto!='undefined'&&typeof window.msCrypto.getRandomValues=='function'&&msCrypto.getRandomValues.bind(msCrypto);if(getRandomValues){// WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto\nvar rnds8=new Uint8Array(16);// eslint-disable-line no-undef\nmodule.exports=function whatwgRNG(){getRandomValues(rnds8);return rnds8;};}else{// Math.random()-based (RNG)\n//\n// If all else fails, use Math.random().  It's fast, but is of unspecified\n// quality.\nvar rnds=new Array(16);module.exports=function mathRNG(){for(var i=0,r;i<16;i++){if((i&0x03)===0)r=Math.random()*0x100000000;rnds[i]=r>>>((i&0x03)<<3)&0xff;}return rnds;};};(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(getRandomValues,\"getRandomValues\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/node_modules/uuid/lib/rng-browser.js\");reactHotLoader.register(rnds8,\"rnds8\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/node_modules/uuid/lib/rng-browser.js\");reactHotLoader.register(rnds,\"rnds\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/node_modules/uuid/lib/rng-browser.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW1vc2FpYy1jb21wb25lbnQvbm9kZV9tb2R1bGVzL3V1aWQvbGliL3JuZy1icm93c2VyLmpzPzU1NDAiXSwibmFtZXMiOlsiZ2V0UmFuZG9tVmFsdWVzIiwiY3J5cHRvIiwiYmluZCIsIm1zQ3J5cHRvIiwid2luZG93Iiwicm5kczgiLCJVaW50OEFycmF5IiwibW9kdWxlIiwiZXhwb3J0cyIsIndoYXR3Z1JORyIsInJuZHMiLCJBcnJheSIsIm1hdGhSTkciLCJpIiwiciIsIk1hdGgiLCJyYW5kb20iXSwibWFwcGluZ3MiOiJrVUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQSxHQUFJQSxnQkFBZSxDQUFJLE1BQU9DLE9BQVAsRUFBa0IsV0FBbEIsRUFBaUNBLE1BQU0sQ0FBQ0QsZUFBeEMsRUFBMkRDLE1BQU0sQ0FBQ0QsZUFBUCxDQUF1QkUsSUFBdkIsQ0FBNEJELE1BQTVCLENBQTVELEVBQ0MsTUFBT0UsU0FBUCxFQUFvQixXQUFwQixFQUFtQyxNQUFPQyxPQUFNLENBQUNELFFBQVAsQ0FBZ0JILGVBQXZCLEVBQTBDLFVBQTdFLEVBQTJGRyxRQUFRLENBQUNILGVBQVQsQ0FBeUJFLElBQXpCLENBQThCQyxRQUE5QixDQURsSCxDQUdBLEdBQUlILGVBQUosQ0FBcUIsQ0FDbkI7QUFDQSxHQUFJSyxNQUFLLENBQUcsR0FBSUMsV0FBSixDQUFlLEVBQWYsQ0FBWixDQUFnQztBQUVoQ0MsTUFBTSxDQUFDQyxPQUFQLENBQWlCLFFBQVNDLFVBQVQsRUFBcUIsQ0FDcENULGVBQWUsQ0FBQ0ssS0FBRCxDQUFmLENBQ0EsTUFBT0EsTUFBUCxDQUNELENBSEQsQ0FJRCxDQVJELElBUU8sQ0FDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUlLLEtBQUksQ0FBRyxHQUFJQyxNQUFKLENBQVUsRUFBVixDQUFYLENBRUFKLE1BQU0sQ0FBQ0MsT0FBUCxDQUFpQixRQUFTSSxRQUFULEVBQW1CLENBQ2xDLElBQUssR0FBSUMsRUFBQyxDQUFHLENBQVIsQ0FBV0MsQ0FBaEIsQ0FBbUJELENBQUMsQ0FBRyxFQUF2QixDQUEyQkEsQ0FBQyxFQUE1QixDQUFnQyxDQUM5QixHQUFJLENBQUNBLENBQUMsQ0FBRyxJQUFMLElBQWUsQ0FBbkIsQ0FBc0JDLENBQUMsQ0FBR0MsSUFBSSxDQUFDQyxNQUFMLEdBQWdCLFdBQXBCLENBQ3RCTixJQUFJLENBQUNHLENBQUQsQ0FBSixDQUFVQyxDQUFDLElBQU0sQ0FBQ0QsQ0FBQyxDQUFHLElBQUwsR0FBYyxDQUFwQixDQUFELENBQTBCLElBQXBDLENBQ0QsQ0FFRCxNQUFPSCxLQUFQLENBQ0QsQ0FQRCxDQVFELEMscUtBMUJHVixlLDRLQUtFSyxLLGtLQVdBSyxJIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3JlYWN0LW1vc2FpYy1jb21wb25lbnQvbm9kZV9tb2R1bGVzL3V1aWQvbGliL3JuZy1icm93c2VyLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gVW5pcXVlIElEIGNyZWF0aW9uIHJlcXVpcmVzIGEgaGlnaCBxdWFsaXR5IHJhbmRvbSAjIGdlbmVyYXRvci4gIEluIHRoZVxuLy8gYnJvd3NlciB0aGlzIGlzIGEgbGl0dGxlIGNvbXBsaWNhdGVkIGR1ZSB0byB1bmtub3duIHF1YWxpdHkgb2YgTWF0aC5yYW5kb20oKVxuLy8gYW5kIGluY29uc2lzdGVudCBzdXBwb3J0IGZvciB0aGUgYGNyeXB0b2AgQVBJLiAgV2UgZG8gdGhlIGJlc3Qgd2UgY2FuIHZpYVxuLy8gZmVhdHVyZS1kZXRlY3Rpb25cblxuLy8gZ2V0UmFuZG9tVmFsdWVzIG5lZWRzIHRvIGJlIGludm9rZWQgaW4gYSBjb250ZXh0IHdoZXJlIFwidGhpc1wiIGlzIGEgQ3J5cHRvXG4vLyBpbXBsZW1lbnRhdGlvbi4gQWxzbywgZmluZCB0aGUgY29tcGxldGUgaW1wbGVtZW50YXRpb24gb2YgY3J5cHRvIG9uIElFMTEuXG52YXIgZ2V0UmFuZG9tVmFsdWVzID0gKHR5cGVvZihjcnlwdG8pICE9ICd1bmRlZmluZWQnICYmIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMgJiYgY3J5cHRvLmdldFJhbmRvbVZhbHVlcy5iaW5kKGNyeXB0bykpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgKHR5cGVvZihtc0NyeXB0bykgIT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5tc0NyeXB0by5nZXRSYW5kb21WYWx1ZXMgPT0gJ2Z1bmN0aW9uJyAmJiBtc0NyeXB0by5nZXRSYW5kb21WYWx1ZXMuYmluZChtc0NyeXB0bykpO1xuXG5pZiAoZ2V0UmFuZG9tVmFsdWVzKSB7XG4gIC8vIFdIQVRXRyBjcnlwdG8gUk5HIC0gaHR0cDovL3dpa2kud2hhdHdnLm9yZy93aWtpL0NyeXB0b1xuICB2YXIgcm5kczggPSBuZXcgVWludDhBcnJheSgxNik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcblxuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHdoYXR3Z1JORygpIHtcbiAgICBnZXRSYW5kb21WYWx1ZXMocm5kczgpO1xuICAgIHJldHVybiBybmRzODtcbiAgfTtcbn0gZWxzZSB7XG4gIC8vIE1hdGgucmFuZG9tKCktYmFzZWQgKFJORylcbiAgLy9cbiAgLy8gSWYgYWxsIGVsc2UgZmFpbHMsIHVzZSBNYXRoLnJhbmRvbSgpLiAgSXQncyBmYXN0LCBidXQgaXMgb2YgdW5zcGVjaWZpZWRcbiAgLy8gcXVhbGl0eS5cbiAgdmFyIHJuZHMgPSBuZXcgQXJyYXkoMTYpO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbWF0aFJORygpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgcjsgaSA8IDE2OyBpKyspIHtcbiAgICAgIGlmICgoaSAmIDB4MDMpID09PSAwKSByID0gTWF0aC5yYW5kb20oKSAqIDB4MTAwMDAwMDAwO1xuICAgICAgcm5kc1tpXSA9IHIgPj4+ICgoaSAmIDB4MDMpIDw8IDMpICYgMHhmZjtcbiAgICB9XG5cbiAgICByZXR1cm4gcm5kcztcbiAgfTtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/react-mosaic-component/node_modules/uuid/lib/rng-browser.js\n");

/***/ }),

/***/ "./node_modules/react-mosaic-component/node_modules/uuid/v1.js":
/*!*********************************************************************!*\
  !*** ./node_modules/react-mosaic-component/node_modules/uuid/v1.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};var rng=__webpack_require__(/*! ./lib/rng */ \"./node_modules/react-mosaic-component/node_modules/uuid/lib/rng-browser.js\");var bytesToUuid=__webpack_require__(/*! ./lib/bytesToUuid */ \"./node_modules/react-mosaic-component/node_modules/uuid/lib/bytesToUuid.js\");// **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\nvar _nodeId;var _clockseq;// Previous uuid creation time\nvar _lastMSecs=0;var _lastNSecs=0;// See https://github.com/uuidjs/uuid for API details\nfunction v1(options,buf,offset){var i=buf&&offset||0;var b=buf||[];options=options||{};var node=options.node||_nodeId;var clockseq=options.clockseq!==undefined?options.clockseq:_clockseq;// node and clockseq need to be initialized to random values if they're not\n// specified.  We do this lazily to minimize issues related to insufficient\n// system entropy.  See #189\nif(node==null||clockseq==null){var seedBytes=rng();if(node==null){// Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\nnode=_nodeId=[seedBytes[0]|0x01,seedBytes[1],seedBytes[2],seedBytes[3],seedBytes[4],seedBytes[5]];}if(clockseq==null){// Per 4.2.2, randomize (14 bit) clockseq\nclockseq=_clockseq=(seedBytes[6]<<8|seedBytes[7])&0x3fff;}}// UUID timestamps are 100 nano-second units since the Gregorian epoch,\n// (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n// time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n// (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\nvar msecs=options.msecs!==undefined?options.msecs:new Date().getTime();// Per 4.2.1.2, use count of uuid's generated during the current clock\n// cycle to simulate higher resolution clock\nvar nsecs=options.nsecs!==undefined?options.nsecs:_lastNSecs+1;// Time since last uuid creation (in msecs)\nvar dt=msecs-_lastMSecs+(nsecs-_lastNSecs)/10000;// Per 4.2.1.2, Bump clockseq on clock regression\nif(dt<0&&options.clockseq===undefined){clockseq=clockseq+1&0x3fff;}// Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n// time interval\nif((dt<0||msecs>_lastMSecs)&&options.nsecs===undefined){nsecs=0;}// Per 4.2.1.2 Throw error if too many uuids are requested\nif(nsecs>=10000){throw new Error('uuid.v1(): Can\\'t create more than 10M uuids/sec');}_lastMSecs=msecs;_lastNSecs=nsecs;_clockseq=clockseq;// Per 4.1.4 - Convert from unix epoch to Gregorian epoch\nmsecs+=12219292800000;// `time_low`\nvar tl=((msecs&0xfffffff)*10000+nsecs)%0x100000000;b[i++]=tl>>>24&0xff;b[i++]=tl>>>16&0xff;b[i++]=tl>>>8&0xff;b[i++]=tl&0xff;// `time_mid`\nvar tmh=msecs/0x100000000*10000&0xfffffff;b[i++]=tmh>>>8&0xff;b[i++]=tmh&0xff;// `time_high_and_version`\nb[i++]=tmh>>>24&0xf|0x10;// include version\nb[i++]=tmh>>>16&0xff;// `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\nb[i++]=clockseq>>>8|0x80;// `clock_seq_low`\nb[i++]=clockseq&0xff;// `node`\nfor(var n=0;n<6;++n){b[i+n]=node[n];}return buf?buf:bytesToUuid(b);}module.exports=v1;;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(_nodeId,\"_nodeId\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/node_modules/uuid/v1.js\");reactHotLoader.register(_clockseq,\"_clockseq\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/node_modules/uuid/v1.js\");reactHotLoader.register(_lastMSecs,\"_lastMSecs\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/node_modules/uuid/v1.js\");reactHotLoader.register(_lastNSecs,\"_lastNSecs\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/node_modules/uuid/v1.js\");reactHotLoader.register(v1,\"v1\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/node_modules/uuid/v1.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-mosaic-component/node_modules/uuid/v1.js\n");

/***/ }),

/***/ "./node_modules/react-mosaic-component/node_modules/uuid/v4.js":
/*!*********************************************************************!*\
  !*** ./node_modules/react-mosaic-component/node_modules/uuid/v4.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};var rng=__webpack_require__(/*! ./lib/rng */ \"./node_modules/react-mosaic-component/node_modules/uuid/lib/rng-browser.js\");var bytesToUuid=__webpack_require__(/*! ./lib/bytesToUuid */ \"./node_modules/react-mosaic-component/node_modules/uuid/lib/bytesToUuid.js\");function v4(options,buf,offset){var i=buf&&offset||0;if(typeof options=='string'){buf=options==='binary'?new Array(16):null;options=null;}options=options||{};var rnds=options.random||(options.rng||rng)();// Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\nrnds[6]=rnds[6]&0x0f|0x40;rnds[8]=rnds[8]&0x3f|0x80;// Copy bytes to buffer, if provided\nif(buf){for(var ii=0;ii<16;++ii){buf[i+ii]=rnds[ii];}}return buf||bytesToUuid(rnds);}module.exports=v4;;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(v4,\"v4\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-mosaic-component/node_modules/uuid/v4.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW1vc2FpYy1jb21wb25lbnQvbm9kZV9tb2R1bGVzL3V1aWQvdjQuanM/OTgyYyJdLCJuYW1lcyI6WyJybmciLCJyZXF1aXJlIiwiYnl0ZXNUb1V1aWQiLCJ2NCIsIm9wdGlvbnMiLCJidWYiLCJvZmZzZXQiLCJpIiwiQXJyYXkiLCJybmRzIiwicmFuZG9tIiwiaWkiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoia1VBQUEsR0FBSUEsSUFBRyxDQUFHQyxtQkFBTyxDQUFDLDZGQUFELENBQWpCLENBQ0EsR0FBSUMsWUFBVyxDQUFHRCxtQkFBTyxDQUFDLHFHQUFELENBQXpCLENBRUEsUUFBU0UsR0FBVCxDQUFZQyxPQUFaLENBQXFCQyxHQUFyQixDQUEwQkMsTUFBMUIsQ0FBa0MsQ0FDaEMsR0FBSUMsRUFBQyxDQUFHRixHQUFHLEVBQUlDLE1BQVAsRUFBaUIsQ0FBekIsQ0FFQSxHQUFJLE1BQU9GLFFBQVAsRUFBbUIsUUFBdkIsQ0FBaUMsQ0FDL0JDLEdBQUcsQ0FBR0QsT0FBTyxHQUFLLFFBQVosQ0FBdUIsR0FBSUksTUFBSixDQUFVLEVBQVYsQ0FBdkIsQ0FBdUMsSUFBN0MsQ0FDQUosT0FBTyxDQUFHLElBQVYsQ0FDRCxDQUNEQSxPQUFPLENBQUdBLE9BQU8sRUFBSSxFQUFyQixDQUVBLEdBQUlLLEtBQUksQ0FBR0wsT0FBTyxDQUFDTSxNQUFSLEVBQWtCLENBQUNOLE9BQU8sQ0FBQ0osR0FBUixFQUFlQSxHQUFoQixHQUE3QixDQUVBO0FBQ0FTLElBQUksQ0FBQyxDQUFELENBQUosQ0FBV0EsSUFBSSxDQUFDLENBQUQsQ0FBSixDQUFVLElBQVgsQ0FBbUIsSUFBN0IsQ0FDQUEsSUFBSSxDQUFDLENBQUQsQ0FBSixDQUFXQSxJQUFJLENBQUMsQ0FBRCxDQUFKLENBQVUsSUFBWCxDQUFtQixJQUE3QixDQUVBO0FBQ0EsR0FBSUosR0FBSixDQUFTLENBQ1AsSUFBSyxHQUFJTSxHQUFFLENBQUcsQ0FBZCxDQUFpQkEsRUFBRSxDQUFHLEVBQXRCLENBQTBCLEVBQUVBLEVBQTVCLENBQWdDLENBQzlCTixHQUFHLENBQUNFLENBQUMsQ0FBR0ksRUFBTCxDQUFILENBQWNGLElBQUksQ0FBQ0UsRUFBRCxDQUFsQixDQUNELENBQ0YsQ0FFRCxNQUFPTixJQUFHLEVBQUlILFdBQVcsQ0FBQ08sSUFBRCxDQUF6QixDQUNELENBRURHLE1BQU0sQ0FBQ0MsT0FBUCxDQUFpQlYsRUFBakIsQyxxS0F6QlNBLEUiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbW9zYWljLWNvbXBvbmVudC9ub2RlX21vZHVsZXMvdXVpZC92NC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBybmcgPSByZXF1aXJlKCcuL2xpYi9ybmcnKTtcbnZhciBieXRlc1RvVXVpZCA9IHJlcXVpcmUoJy4vbGliL2J5dGVzVG9VdWlkJyk7XG5cbmZ1bmN0aW9uIHY0KG9wdGlvbnMsIGJ1Ziwgb2Zmc2V0KSB7XG4gIHZhciBpID0gYnVmICYmIG9mZnNldCB8fCAwO1xuXG4gIGlmICh0eXBlb2Yob3B0aW9ucykgPT0gJ3N0cmluZycpIHtcbiAgICBidWYgPSBvcHRpb25zID09PSAnYmluYXJ5JyA/IG5ldyBBcnJheSgxNikgOiBudWxsO1xuICAgIG9wdGlvbnMgPSBudWxsO1xuICB9XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIHZhciBybmRzID0gb3B0aW9ucy5yYW5kb20gfHwgKG9wdGlvbnMucm5nIHx8IHJuZykoKTtcblxuICAvLyBQZXIgNC40LCBzZXQgYml0cyBmb3IgdmVyc2lvbiBhbmQgYGNsb2NrX3NlcV9oaV9hbmRfcmVzZXJ2ZWRgXG4gIHJuZHNbNl0gPSAocm5kc1s2XSAmIDB4MGYpIHwgMHg0MDtcbiAgcm5kc1s4XSA9IChybmRzWzhdICYgMHgzZikgfCAweDgwO1xuXG4gIC8vIENvcHkgYnl0ZXMgdG8gYnVmZmVyLCBpZiBwcm92aWRlZFxuICBpZiAoYnVmKSB7XG4gICAgZm9yICh2YXIgaWkgPSAwOyBpaSA8IDE2OyArK2lpKSB7XG4gICAgICBidWZbaSArIGlpXSA9IHJuZHNbaWldO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBidWYgfHwgYnl0ZXNUb1V1aWQocm5kcyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdjQ7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/react-mosaic-component/node_modules/uuid/v4.js\n");

/***/ }),

/***/ "./node_modules/react-mosaic-component/react-mosaic-component.css":
/*!************************************************************************!*\
  !*** ./node_modules/react-mosaic-component/react-mosaic-component.css ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var api = __webpack_require__(/*! ../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ \"./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = __webpack_require__(/*! !../css-loader/dist/cjs.js!./react-mosaic-component.css */ \"./node_modules/css-loader/dist/cjs.js!./node_modules/react-mosaic-component/react-mosaic-component.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.i, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW1vc2FpYy1jb21wb25lbnQvcmVhY3QtbW9zYWljLWNvbXBvbmVudC5jc3M/YzZkOCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxVQUFVLG1CQUFPLENBQUMsc0lBQTJEO0FBQzdFLDBCQUEwQixtQkFBTyxDQUFDLHVLQUEwRDs7QUFFNUY7O0FBRUE7QUFDQSwwQkFBMEIsUUFBUztBQUNuQzs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOzs7O0FBSUEiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbW9zYWljLWNvbXBvbmVudC9yZWFjdC1tb3NhaWMtY29tcG9uZW50LmNzcy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBhcGkgPSByZXF1aXJlKFwiIS4uL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vcmVhY3QtbW9zYWljLWNvbXBvbmVudC5jc3NcIik7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgIH1cblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzIHx8IHt9OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/react-mosaic-component/react-mosaic-component.css\n");

/***/ }),

/***/ "./node_modules/react-resize-observer/lib/ResizeObserver.js":
/*!******************************************************************!*\
  !*** ./node_modules/react-resize-observer/lib/ResizeObserver.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {(function(){var enterModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module);})();var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};Object.defineProperty(exports,\"__esModule\",{value:true});exports[\"default\"]=void 0;var _react=_interopRequireDefault(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{\"default\":obj};}function _typeof(obj){if(typeof Symbol===\"function\"&&typeof Symbol.iterator===\"symbol\"){_typeof=function _typeof(obj){return typeof obj;};}else{_typeof=function _typeof(obj){return obj&&typeof Symbol===\"function\"&&obj.constructor===Symbol&&obj!==Symbol.prototype?\"symbol\":typeof obj;};}return _typeof(obj);}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};var ownKeys=Object.keys(source);if(typeof Object.getOwnPropertySymbols==='function'){ownKeys=ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym){return Object.getOwnPropertyDescriptor(source,sym).enumerable;}));}ownKeys.forEach(function(key){_defineProperty(target,key,source[key]);});}return target;}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}function _inherits(subClass,superClass){if(typeof superClass!==\"function\"&&superClass!==null){throw new TypeError(\"Super expression must either be null or a function\");}_setPrototypeOf(subClass.prototype,superClass&&superClass.prototype);if(superClass)_setPrototypeOf(subClass,superClass);}function _setPrototypeOf(o,p){_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(o,p){o.__proto__=p;return o;};return _setPrototypeOf(o,p);}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}function _createClass(Constructor,protoProps,staticProps){if(protoProps)_defineProperties(Constructor.prototype,protoProps);if(staticProps)_defineProperties(Constructor,staticProps);return Constructor;}function _possibleConstructorReturn(self,call){if(call&&(_typeof(call)===\"object\"||typeof call===\"function\")){return call;}return _assertThisInitialized(self);}function _getPrototypeOf(o){_getPrototypeOf=Object.getPrototypeOf||function _getPrototypeOf(o){return o.__proto__;};return _getPrototypeOf(o);}function _assertThisInitialized(self){if(self===void 0){throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return self;}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}var style={position:'absolute',left:0,top:0,right:0,bottom:0,overflow:'hidden',zIndex:-1,visibility:'hidden',pointerEvents:'none'};var styleChild={position:'absolute',left:0,top:0,transition:'0s'};function isAncestor(node,ancestor){var current=node.parentNode;while(current){if(current===ancestor){return true;}current=current.parentNode;}return false;}var ResizeObserver=/*#__PURE__*/function(_React$Component){function ResizeObserver(){var _getPrototypeOf2;var _temp,_this;_classCallCheck(this,ResizeObserver);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}return _possibleConstructorReturn(_this,(_temp=_this=_possibleConstructorReturn(this,(_getPrototypeOf2=_getPrototypeOf(ResizeObserver)).call.apply(_getPrototypeOf2,[this].concat(args))),_defineProperty(_assertThisInitialized(_assertThisInitialized(_this)),\"_expandRef\",null),_defineProperty(_assertThisInitialized(_assertThisInitialized(_this)),\"_shrinkRef\",null),_defineProperty(_assertThisInitialized(_assertThisInitialized(_this)),\"_node\",null),_defineProperty(_assertThisInitialized(_assertThisInitialized(_this)),\"_lastWidth\",void 0),_defineProperty(_assertThisInitialized(_assertThisInitialized(_this)),\"_lastHeight\",void 0),_defineProperty(_assertThisInitialized(_assertThisInitialized(_this)),\"_lastRect\",void 0),_defineProperty(_assertThisInitialized(_assertThisInitialized(_this)),\"_hasResize\",false),_defineProperty(_assertThisInitialized(_assertThisInitialized(_this)),\"_handleScroll\",function(event){if((_this.props.onPosition||_this.props.onReflow||_this.props.onResize)&&(_this._globalScollTarget(event.target)||_this._refScrollTarget(event.target)||_this._ancestorScollTarget(event.target))){_this._reflow();}}),_defineProperty(_assertThisInitialized(_assertThisInitialized(_this)),\"_globalScollTarget\",function(target){return target instanceof Node&&(_this.props.onPosition||_this.props.onReflow)&&(target===document||target===document.documentElement||target===document.body);}),_defineProperty(_assertThisInitialized(_assertThisInitialized(_this)),\"_refScrollTarget\",function(target){if(target instanceof HTMLElement&&(target===_this._expandRef||target===_this._shrinkRef)){var width=target.offsetWidth;var height=target.offsetHeight;if(width!==_this._lastWidth||height!==_this._lastHeight){_this._lastWidth=width;_this._lastHeight=height;_this._reset(_this._expandRef);_this._reset(_this._shrinkRef);return true;}}return false;}),_defineProperty(_assertThisInitialized(_assertThisInitialized(_this)),\"_ancestorScollTarget\",function(target){return target instanceof Node&&(_this.props.onPosition||_this.props.onReflow)&&_this._node&&isAncestor(_this._node,target);}),_defineProperty(_assertThisInitialized(_assertThisInitialized(_this)),\"_reflow\",function(){if(!_this._node||!(_this._node.parentNode instanceof Element))return;var rect=_this._node.parentNode.getBoundingClientRect();var sizeChanged=true;var positionChanged=true;if(_this._lastRect){sizeChanged=rect.width!==_this._lastRect.width||rect.height!==_this._lastRect.height;positionChanged=rect.top!==_this._lastRect.top||rect.left!==_this._lastRect.left;}_this._lastRect=rect;if(sizeChanged&&_this.props.onResize){_this.props.onResize(rect);}if(positionChanged&&_this.props.onPosition){_this.props.onPosition(rect);}if((sizeChanged||positionChanged)&&_this.props.onReflow){_this.props.onReflow(rect);}}),_defineProperty(_assertThisInitialized(_assertThisInitialized(_this)),\"_handleRef\",function(node){_this._node=node;}),_defineProperty(_assertThisInitialized(_assertThisInitialized(_this)),\"_handleExpandRef\",function(node){_this._reset(node);_this._expandRef=node;}),_defineProperty(_assertThisInitialized(_assertThisInitialized(_this)),\"_handleShrinkRef\",function(node){_this._reset(node);_this._shrinkRef=node;}),_temp));}_createClass(ResizeObserver,[{key:\"componentDidMount\",value:function componentDidMount(){this._reflow();window.addEventListener('scroll',this._handleScroll,true);if(this.props.onPosition||this.props.onReflow){window.addEventListener('resize',this._reflow,true);this._hasResize=true;}}},{key:\"componentDidUpdate\",value:function componentDidUpdate(){if((this.props.onPosition||this.props.onReflow)&&!this._hasResize){window.addEventListener('resize',this._reflow,true);this._hasResize=true;}else if(!(this.props.onPosition||this.props.onReflow)&&this._hasResize){window.removeEventListener('resize',this._reflow,true);this._hasResize=false;}}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){window.removeEventListener('scroll',this._handleScroll,true);if(this._hasResize){window.removeEventListener('resize',this._reflow,true);}}},{key:\"_reset\",value:function _reset(node){if(node){node.scrollLeft=100000;node.scrollTop=100000;}}},{key:\"render\",value:function render(){if(this.props.onResize||this.props.onReflow){return _react[\"default\"].createElement(\"div\",{style:style,ref:this._handleRef},_react[\"default\"].createElement(\"div\",{ref:this._handleExpandRef,style:style},_react[\"default\"].createElement(\"div\",{style:_objectSpread({},styleChild,{width:100000,height:100000})})),_react[\"default\"].createElement(\"div\",{ref:this._handleShrinkRef,style:style},_react[\"default\"].createElement(\"div\",{style:_objectSpread({},styleChild,{width:'200%',height:'200%'})})));}return _react[\"default\"].createElement(\"noscript\",{ref:this._handleRef});}}]);_inherits(ResizeObserver,_React$Component);return ResizeObserver;}(_react[\"default\"].Component);_defineProperty(ResizeObserver,\"displayName\",'ResizeObserver');var _default=ResizeObserver;exports[\"default\"]=_default;;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return;}reactHotLoader.register(_react,\"_react\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-resize-observer/lib/ResizeObserver.js\");reactHotLoader.register(_interopRequireDefault,\"_interopRequireDefault\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-resize-observer/lib/ResizeObserver.js\");reactHotLoader.register(_typeof,\"_typeof\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-resize-observer/lib/ResizeObserver.js\");reactHotLoader.register(_objectSpread,\"_objectSpread\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-resize-observer/lib/ResizeObserver.js\");reactHotLoader.register(_classCallCheck,\"_classCallCheck\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-resize-observer/lib/ResizeObserver.js\");reactHotLoader.register(_inherits,\"_inherits\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-resize-observer/lib/ResizeObserver.js\");reactHotLoader.register(_setPrototypeOf,\"_setPrototypeOf\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-resize-observer/lib/ResizeObserver.js\");reactHotLoader.register(_defineProperties,\"_defineProperties\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-resize-observer/lib/ResizeObserver.js\");reactHotLoader.register(_createClass,\"_createClass\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-resize-observer/lib/ResizeObserver.js\");reactHotLoader.register(_possibleConstructorReturn,\"_possibleConstructorReturn\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-resize-observer/lib/ResizeObserver.js\");reactHotLoader.register(_getPrototypeOf,\"_getPrototypeOf\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-resize-observer/lib/ResizeObserver.js\");reactHotLoader.register(_assertThisInitialized,\"_assertThisInitialized\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-resize-observer/lib/ResizeObserver.js\");reactHotLoader.register(_defineProperty,\"_defineProperty\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-resize-observer/lib/ResizeObserver.js\");reactHotLoader.register(style,\"style\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-resize-observer/lib/ResizeObserver.js\");reactHotLoader.register(styleChild,\"styleChild\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-resize-observer/lib/ResizeObserver.js\");reactHotLoader.register(isAncestor,\"isAncestor\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-resize-observer/lib/ResizeObserver.js\");reactHotLoader.register(ResizeObserver,\"ResizeObserver\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-resize-observer/lib/ResizeObserver.js\");reactHotLoader.register(_default,\"_default\",\"/Users/chortariac/apps_team/mirador_original/mirador/node_modules/react-resize-observer/lib/ResizeObserver.js\");})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module);})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-resize-observer/lib/ResizeObserver.js\n");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!****************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar isOldIE = function isOldIE() {\n  var memo;\n  return function memorize() {\n    if (typeof memo === 'undefined') {\n      // Test for IE <= 9 as proposed by Browserhacks\n      // @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805\n      // Tests for existence of standard globals is to allow style-loader\n      // to operate correctly into non-standard environments\n      // @see https://github.com/webpack-contrib/style-loader/issues/177\n      memo = Boolean(window && document && document.all && !window.atob);\n    }\n\n    return memo;\n  };\n}();\n\nvar getTarget = function getTarget() {\n  var memo = {};\n  return function memorize(target) {\n    if (typeof memo[target] === 'undefined') {\n      var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself\n\n      if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n        try {\n          // This will throw an exception if access to iframe is blocked\n          // due to cross-origin restrictions\n          styleTarget = styleTarget.contentDocument.head;\n        } catch (e) {\n          // istanbul ignore next\n          styleTarget = null;\n        }\n      }\n\n      memo[target] = styleTarget;\n    }\n\n    return memo[target];\n  };\n}();\n\nvar stylesInDom = [];\n\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n\n  for (var i = 0; i < stylesInDom.length; i++) {\n    if (stylesInDom[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n\n  return result;\n}\n\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = \"\".concat(id, \" \").concat(count);\n    idCountMap[id] = count + 1;\n    var index = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3]\n    };\n\n    if (index !== -1) {\n      stylesInDom[index].references++;\n      stylesInDom[index].updater(obj);\n    } else {\n      stylesInDom.push({\n        identifier: identifier,\n        updater: addStyle(obj, options),\n        references: 1\n      });\n    }\n\n    identifiers.push(identifier);\n  }\n\n  return identifiers;\n}\n\nfunction insertStyleElement(options) {\n  var style = document.createElement('style');\n  var attributes = options.attributes || {};\n\n  if (typeof attributes.nonce === 'undefined') {\n    var nonce =  true ? __webpack_require__.nc : undefined;\n\n    if (nonce) {\n      attributes.nonce = nonce;\n    }\n  }\n\n  Object.keys(attributes).forEach(function (key) {\n    style.setAttribute(key, attributes[key]);\n  });\n\n  if (typeof options.insert === 'function') {\n    options.insert(style);\n  } else {\n    var target = getTarget(options.insert || 'head');\n\n    if (!target) {\n      throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n    }\n\n    target.appendChild(style);\n  }\n\n  return style;\n}\n\nfunction removeStyleElement(style) {\n  // istanbul ignore if\n  if (style.parentNode === null) {\n    return false;\n  }\n\n  style.parentNode.removeChild(style);\n}\n/* istanbul ignore next  */\n\n\nvar replaceText = function replaceText() {\n  var textStore = [];\n  return function replace(index, replacement) {\n    textStore[index] = replacement;\n    return textStore.filter(Boolean).join('\\n');\n  };\n}();\n\nfunction applyToSingletonTag(style, index, remove, obj) {\n  var css = remove ? '' : obj.media ? \"@media \".concat(obj.media, \" {\").concat(obj.css, \"}\") : obj.css; // For old IE\n\n  /* istanbul ignore if  */\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = replaceText(index, css);\n  } else {\n    var cssNode = document.createTextNode(css);\n    var childNodes = style.childNodes;\n\n    if (childNodes[index]) {\n      style.removeChild(childNodes[index]);\n    }\n\n    if (childNodes.length) {\n      style.insertBefore(cssNode, childNodes[index]);\n    } else {\n      style.appendChild(cssNode);\n    }\n  }\n}\n\nfunction applyToTag(style, options, obj) {\n  var css = obj.css;\n  var media = obj.media;\n  var sourceMap = obj.sourceMap;\n\n  if (media) {\n    style.setAttribute('media', media);\n  } else {\n    style.removeAttribute('media');\n  }\n\n  if (sourceMap && btoa) {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  } // For old IE\n\n  /* istanbul ignore if  */\n\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    while (style.firstChild) {\n      style.removeChild(style.firstChild);\n    }\n\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nvar singleton = null;\nvar singletonCounter = 0;\n\nfunction addStyle(obj, options) {\n  var style;\n  var update;\n  var remove;\n\n  if (options.singleton) {\n    var styleIndex = singletonCounter++;\n    style = singleton || (singleton = insertStyleElement(options));\n    update = applyToSingletonTag.bind(null, style, styleIndex, false);\n    remove = applyToSingletonTag.bind(null, style, styleIndex, true);\n  } else {\n    style = insertStyleElement(options);\n    update = applyToTag.bind(null, style, options);\n\n    remove = function remove() {\n      removeStyleElement(style);\n    };\n  }\n\n  update(obj);\n  return function updateStyle(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap) {\n        return;\n      }\n\n      update(obj = newObj);\n    } else {\n      remove();\n    }\n  };\n}\n\nmodule.exports = function (list, options) {\n  options = options || {}; // Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n  // tags it will allow on a page\n\n  if (!options.singleton && typeof options.singleton !== 'boolean') {\n    options.singleton = isOldIE();\n  }\n\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n\n    if (Object.prototype.toString.call(newList) !== '[object Array]') {\n      return;\n    }\n\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDom[index].references--;\n    }\n\n    var newLastIdentifiers = modulesToDom(newList, options);\n\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n\n      var _index = getIndexByIdentifier(_identifier);\n\n      if (stylesInDom[_index].references === 0) {\n        stylesInDom[_index].updater();\n\n        stylesInDom.splice(_index, 1);\n      }\n    }\n\n    lastIdentifiers = newLastIdentifiers;\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\n");

/***/ }),

/***/ "./node_modules/toggle-selection/index.js":
/*!************************************************!*\
  !*** ./node_modules/toggle-selection/index.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var __signature__=typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal[\"default\"].signature:function(a){return a;};module.exports=function(){var selection=document.getSelection();if(!selection.rangeCount){return function(){};}var active=document.activeElement;var ranges=[];for(var i=0;i<selection.rangeCount;i++){ranges.push(selection.getRangeAt(i));}switch(active.tagName.toUpperCase()){// .toUpperCase handles XHTML\ncase'INPUT':case'TEXTAREA':active.blur();break;default:active=null;break;}selection.removeAllRanges();return function(){selection.type==='Caret'&&selection.removeAllRanges();if(!selection.rangeCount){ranges.forEach(function(range){selection.addRange(range);});}active&&active.focus();};};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXJhZG9yLy4vbm9kZV9tb2R1bGVzL3RvZ2dsZS1zZWxlY3Rpb24vaW5kZXguanM/MTNkOSJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwic2VsZWN0aW9uIiwiZG9jdW1lbnQiLCJnZXRTZWxlY3Rpb24iLCJyYW5nZUNvdW50IiwiYWN0aXZlIiwiYWN0aXZlRWxlbWVudCIsInJhbmdlcyIsImkiLCJwdXNoIiwiZ2V0UmFuZ2VBdCIsInRhZ05hbWUiLCJ0b1VwcGVyQ2FzZSIsImJsdXIiLCJyZW1vdmVBbGxSYW5nZXMiLCJ0eXBlIiwiZm9yRWFjaCIsInJhbmdlIiwiYWRkUmFuZ2UiLCJmb2N1cyJdLCJtYXBwaW5ncyI6IjZIQUNBQSxNQUFNLENBQUNDLE9BQVAsQ0FBaUIsVUFBWSxDQUMzQixHQUFJQyxVQUFTLENBQUdDLFFBQVEsQ0FBQ0MsWUFBVCxFQUFoQixDQUNBLEdBQUksQ0FBQ0YsU0FBUyxDQUFDRyxVQUFmLENBQTJCLENBQ3pCLE1BQU8sV0FBWSxDQUFFLENBQXJCLENBQ0QsQ0FDRCxHQUFJQyxPQUFNLENBQUdILFFBQVEsQ0FBQ0ksYUFBdEIsQ0FFQSxHQUFJQyxPQUFNLENBQUcsRUFBYixDQUNBLElBQUssR0FBSUMsRUFBQyxDQUFHLENBQWIsQ0FBZ0JBLENBQUMsQ0FBR1AsU0FBUyxDQUFDRyxVQUE5QixDQUEwQ0ksQ0FBQyxFQUEzQyxDQUErQyxDQUM3Q0QsTUFBTSxDQUFDRSxJQUFQLENBQVlSLFNBQVMsQ0FBQ1MsVUFBVixDQUFxQkYsQ0FBckIsQ0FBWixFQUNELENBRUQsT0FBUUgsTUFBTSxDQUFDTSxPQUFQLENBQWVDLFdBQWYsRUFBUixFQUF3QztBQUN0QyxJQUFLLE9BQUwsQ0FDQSxJQUFLLFVBQUwsQ0FDRVAsTUFBTSxDQUFDUSxJQUFQLEdBQ0EsTUFFRixRQUNFUixNQUFNLENBQUcsSUFBVCxDQUNBLE1BUkosQ0FXQUosU0FBUyxDQUFDYSxlQUFWLEdBQ0EsTUFBTyxXQUFZLENBQ2pCYixTQUFTLENBQUNjLElBQVYsR0FBbUIsT0FBbkIsRUFDQWQsU0FBUyxDQUFDYSxlQUFWLEVBREEsQ0FHQSxHQUFJLENBQUNiLFNBQVMsQ0FBQ0csVUFBZixDQUEyQixDQUN6QkcsTUFBTSxDQUFDUyxPQUFQLENBQWUsU0FBU0MsS0FBVCxDQUFnQixDQUM3QmhCLFNBQVMsQ0FBQ2lCLFFBQVYsQ0FBbUJELEtBQW5CLEVBQ0QsQ0FGRCxFQUdELENBRURaLE1BQU0sRUFDTkEsTUFBTSxDQUFDYyxLQUFQLEVBREEsQ0FFRCxDQVpELENBYUQsQ0FyQ0QiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdG9nZ2xlLXNlbGVjdGlvbi9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzZWxlY3Rpb24gPSBkb2N1bWVudC5nZXRTZWxlY3Rpb24oKTtcbiAgaWYgKCFzZWxlY3Rpb24ucmFuZ2VDb3VudCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7fTtcbiAgfVxuICB2YXIgYWN0aXZlID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcblxuICB2YXIgcmFuZ2VzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZWN0aW9uLnJhbmdlQ291bnQ7IGkrKykge1xuICAgIHJhbmdlcy5wdXNoKHNlbGVjdGlvbi5nZXRSYW5nZUF0KGkpKTtcbiAgfVxuXG4gIHN3aXRjaCAoYWN0aXZlLnRhZ05hbWUudG9VcHBlckNhc2UoKSkgeyAvLyAudG9VcHBlckNhc2UgaGFuZGxlcyBYSFRNTFxuICAgIGNhc2UgJ0lOUFVUJzpcbiAgICBjYXNlICdURVhUQVJFQSc6XG4gICAgICBhY3RpdmUuYmx1cigpO1xuICAgICAgYnJlYWs7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgYWN0aXZlID0gbnVsbDtcbiAgICAgIGJyZWFrO1xuICB9XG5cbiAgc2VsZWN0aW9uLnJlbW92ZUFsbFJhbmdlcygpO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHNlbGVjdGlvbi50eXBlID09PSAnQ2FyZXQnICYmXG4gICAgc2VsZWN0aW9uLnJlbW92ZUFsbFJhbmdlcygpO1xuXG4gICAgaWYgKCFzZWxlY3Rpb24ucmFuZ2VDb3VudCkge1xuICAgICAgcmFuZ2VzLmZvckVhY2goZnVuY3Rpb24ocmFuZ2UpIHtcbiAgICAgICAgc2VsZWN0aW9uLmFkZFJhbmdlKHJhbmdlKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGFjdGl2ZSAmJlxuICAgIGFjdGl2ZS5mb2N1cygpO1xuICB9O1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/toggle-selection/index.js\n");

/***/ })

}]);